
8_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005544  08005544  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800554c  0800554c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c10  20000074  080055c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  080055c8  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173d0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003104  00000000  00000000  00037474  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  0003b928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d6c2  00000000  00000000  0003cb50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c8e  00000000  00000000  0005a212  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b40d9  00000000  00000000  0006aea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ef79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a0  00000000  00000000  0011eff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800539c 	.word	0x0800539c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800539c 	.word	0x0800539c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000090 	.word	0x20000090
 80005a0:	200000e4 	.word	0x200000e4

080005a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b08a      	sub	sp, #40	; 0x28
 80005a8:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FREERTOS_Init+0x80>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fdc4 	bl	800314e <osThreadCreate>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_FREERTOS_Init+0x84>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(vPrint_Task_1, "myTaskName_1" , configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005cc:	2300      	movs	r3, #0
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2301      	movs	r3, #1
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	4914      	ldr	r1, [pc, #80]	; (800062c <MX_FREERTOS_Init+0x88>)
 80005da:	4815      	ldr	r0, [pc, #84]	; (8000630 <MX_FREERTOS_Init+0x8c>)
 80005dc:	f003 fafc 	bl	8003bd8 <xTaskCreate>
  xTaskCreate(vPrint_Task_2, "myTaskName_2" , configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	4911      	ldr	r1, [pc, #68]	; (8000634 <MX_FREERTOS_Init+0x90>)
 80005ee:	4812      	ldr	r0, [pc, #72]	; (8000638 <MX_FREERTOS_Init+0x94>)
 80005f0:	f003 faf2 	bl	8003bd8 <xTaskCreate>
  xTaskCreate(vPrint_Task_3, "myTaskName_3" , configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	490e      	ldr	r1, [pc, #56]	; (800063c <MX_FREERTOS_Init+0x98>)
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_FREERTOS_Init+0x9c>)
 8000604:	f003 fae8 	bl	8003bd8 <xTaskCreate>
  xTaskCreate(vPrint_Task_4, "myTaskName_4" , configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2302      	movs	r3, #2
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2300      	movs	r3, #0
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	490b      	ldr	r1, [pc, #44]	; (8000644 <MX_FREERTOS_Init+0xa0>)
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_FREERTOS_Init+0xa4>)
 8000618:	f003 fade 	bl	8003bd8 <xTaskCreate>



  /* USER CODE END RTOS_THREADS */

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bdb0      	pop	{r4, r5, r7, pc}
 8000624:	08005400 	.word	0x08005400
 8000628:	20001bac 	.word	0x20001bac
 800062c:	080053b4 	.word	0x080053b4
 8000630:	0800065d 	.word	0x0800065d
 8000634:	080053c4 	.word	0x080053c4
 8000638:	0800067d 	.word	0x0800067d
 800063c:	080053d4 	.word	0x080053d4
 8000640:	0800069d 	.word	0x0800069d
 8000644:	080053e4 	.word	0x080053e4
 8000648:	080006bd 	.word	0x080006bd

0800064c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f002 fdc6 	bl	80031e6 <osDelay>
 800065a:	e7fb      	b.n	8000654 <StartDefaultTask+0x8>

0800065c <vPrint_Task_1>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void vPrint_Task_1()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  for (;;)
  {
    printf("task1 : %lu\r\n", xTaskGetTickCount());
 8000660:	f003 fd2c 	bl	80040bc <xTaskGetTickCount>
 8000664:	4603      	mov	r3, r0
 8000666:	4619      	mov	r1, r3
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <vPrint_Task_1+0x1c>)
 800066a:	f003 ffb3 	bl	80045d4 <iprintf>
    vTaskDelay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f003 fbe7 	bl	8003e44 <vTaskDelay>
    printf("task1 : %lu\r\n", xTaskGetTickCount());
 8000676:	e7f3      	b.n	8000660 <vPrint_Task_1+0x4>
 8000678:	0800541c 	.word	0x0800541c

0800067c <vPrint_Task_2>:
  }
}

void vPrint_Task_2()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  for (;;)
  {
    printf("task2 : %lu\r\n", xTaskGetTickCount());
 8000680:	f003 fd1c 	bl	80040bc <xTaskGetTickCount>
 8000684:	4603      	mov	r3, r0
 8000686:	4619      	mov	r1, r3
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <vPrint_Task_2+0x1c>)
 800068a:	f003 ffa3 	bl	80045d4 <iprintf>
    vTaskDelay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f003 fbd7 	bl	8003e44 <vTaskDelay>
    printf("task2 : %lu\r\n", xTaskGetTickCount());
 8000696:	e7f3      	b.n	8000680 <vPrint_Task_2+0x4>
 8000698:	0800542c 	.word	0x0800542c

0800069c <vPrint_Task_3>:
  }
}

void vPrint_Task_3()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  for (;;)
  {
    printf("task3 : %lu\r\n", xTaskGetTickCount());
 80006a0:	f003 fd0c 	bl	80040bc <xTaskGetTickCount>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <vPrint_Task_3+0x1c>)
 80006aa:	f003 ff93 	bl	80045d4 <iprintf>
    //HAL_Delay(1000);
    vTaskDelay(1000);
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f003 fbc7 	bl	8003e44 <vTaskDelay>
    printf("task3 : %lu\r\n", xTaskGetTickCount());
 80006b6:	e7f3      	b.n	80006a0 <vPrint_Task_3+0x4>
 80006b8:	0800543c 	.word	0x0800543c

080006bc <vPrint_Task_4>:
  }
}

void vPrint_Task_4()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  for (;;)
  {
    printf("task4 : %lu\r\n", xTaskGetTickCount());
 80006c0:	f003 fcfc 	bl	80040bc <xTaskGetTickCount>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <vPrint_Task_4+0x1c>)
 80006ca:	f003 ff83 	bl	80045d4 <iprintf>
    //HAL_Delay(1000);
    vTaskDelay(1000);
 80006ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d2:	f003 fbb7 	bl	8003e44 <vTaskDelay>
    printf("task4 : %lu\r\n", xTaskGetTickCount());
 80006d6:	e7f3      	b.n	80006c0 <vPrint_Task_4+0x4>
 80006d8:	0800544c 	.word	0x0800544c

080006dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0x78>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0x78>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0x78>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0x78>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <MX_GPIO_Init+0x78>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_GPIO_Init+0x78>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <MX_GPIO_Init+0x7c>)
 800072a:	f000 fd59 	bl	80011e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0x7c>)
 8000748:	f000 fbd8 	bl	8000efc <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000764:	1d39      	adds	r1, r7, #4
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	2201      	movs	r2, #1
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <__io_putchar+0x20>)
 800076e:	f002 f8a3 	bl	80028b8 <HAL_UART_Transmit>
  return ch;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001bfc 	.word	0x20001bfc

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 faa0 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f809 	bl	800079e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff ffa6 	bl	80006dc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000790:	f000 f9c6 	bl	8000b20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000794:	f7ff ff06 	bl	80005a4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000798:	f002 fcd2 	bl	8003140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x1c>

0800079e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b0a4      	sub	sp, #144	; 0x90
 80007a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007a8:	2244      	movs	r2, #68	; 0x44
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 ff09 	bl	80045c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2234      	movs	r2, #52	; 0x34
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f003 fefb 	bl	80045c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d2:	f000 fd2b 	bl	800122c <HAL_PWREx_ControlVoltageScaling>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80007dc:	f000 f85a 	bl	8000894 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e0:	2310      	movs	r3, #16
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007fe:	2328      	movs	r3, #40	; 0x28
 8000800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fd5f 	bl	80012d8 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000820:	f000 f838 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2303      	movs	r3, #3
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083c:	2104      	movs	r1, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f9b0 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800084a:	f000 f823 	bl	8000894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fbd9 	bl	8002010 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000864:	f000 f816 	bl	8000894 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3790      	adds	r7, #144	; 0x90
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 fa39 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40001000 	.word	0x40001000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089a:	e7fe      	b.n	800089a <Error_Handler+0x6>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fae5 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2036      	movs	r0, #54	; 0x36
 8000902:	f000 fad1 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000906:	2036      	movs	r0, #54	; 0x36
 8000908:	f000 faea 	bl	8000ee0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_InitTick+0x9c>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <HAL_InitTick+0x9c>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6593      	str	r3, [r2, #88]	; 0x58
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_InitTick+0x9c>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000924:	f107 0210 	add.w	r2, r7, #16
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fadc 	bl	8001eec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000934:	f001 faae 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8000938:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093c:	4a13      	ldr	r2, [pc, #76]	; (800098c <HAL_InitTick+0xa0>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	0c9b      	lsrs	r3, r3, #18
 8000944:	3b01      	subs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_InitTick+0xa4>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <HAL_InitTick+0xa8>)
 800094c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_InitTick+0xa4>)
 8000950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000954:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <HAL_InitTick+0xa4>)
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <HAL_InitTick+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_InitTick+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <HAL_InitTick+0xa4>)
 800096a:	f001 fcd7 	bl	800231c <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <HAL_InitTick+0xa4>)
 8000976:	f001 fd33 	bl	80023e0 <HAL_TIM_Base_Start_IT>
 800097a:	4603      	mov	r3, r0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3730      	adds	r7, #48	; 0x30
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000
 800098c:	431bde83 	.word	0x431bde83
 8000990:	20001bb0 	.word	0x20001bb0
 8000994:	40001000 	.word	0x40001000

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM6_IRQHandler+0x10>)
 80009ca:	f001 fd5d 	bl	8002488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20001bb0 	.word	0x20001bb0

080009d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
	}

return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fe95 	bl	800075c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
	}
	return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f003 fd44 	bl	8004570 <__errno>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	230c      	movs	r3, #12
 8000aec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	2000a000 	.word	0x2000a000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200002e4 	.word	0x200002e4
 8000b1c:	20001c88 	.word	0x20001c88

08000b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <MX_USART1_UART_Init+0x5c>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b2a:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USART1_UART_Init+0x58>)
 8000b64:	f001 fe5a 	bl	800281c <HAL_UART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f7ff fe91 	bl	8000894 <Error_Handler>
  }

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20001bfc 	.word	0x20001bfc
 8000b7c:	40013800 	.word	0x40013800

08000b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0x80>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d129      	bne.n	8000bf6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6613      	str	r3, [r2, #96]	; 0x60
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be4:	2307      	movs	r3, #7
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 f983 	bl	8000efc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40021000 	.word	0x40021000

08000c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c0c:	f000 f826 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c12:	e003      	b.n	8000c1c <LoopCopyDataInit>

08000c14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c1a:	3104      	adds	r1, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c1c:	480a      	ldr	r0, [pc, #40]	; (8000c48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c24:	d3f6      	bcc.n	8000c14 <CopyDataInit>
	ldr	r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c28:	e002      	b.n	8000c30 <LoopFillZerobss>

08000c2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c2c:	f842 3b04 	str.w	r3, [r2], #4

08000c30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <LoopForever+0x16>)
	cmp	r2, r3
 8000c32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c34:	d3f9      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c36:	f003 fca1 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c3a:	f7ff fda1 	bl	8000780 <main>

08000c3e <LoopForever>:

LoopForever:
    b LoopForever
 8000c3e:	e7fe      	b.n	8000c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c40:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000c44:	08005554 	.word	0x08005554
	ldr	r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c4c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8000c50:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8000c54:	20001c84 	.word	0x20001c84

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <SystemInit+0x64>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <SystemInit+0x64>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <SystemInit+0x68>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <SystemInit+0x68>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x68>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <SystemInit+0x68>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <SystemInit+0x68>)
 8000c88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <SystemInit+0x68>)
 8000c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SystemInit+0x68>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <SystemInit+0x68>)
 8000ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <SystemInit+0x68>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SystemInit+0x64>)
 8000cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f000 f8dd 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fe07 	bl	80008ec <HAL_InitTick>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	71fb      	strb	r3, [r7, #7]
 8000ce8:	e001      	b.n	8000cee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cea:	f7ff fdd7 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20001c7c 	.word	0x20001c7c

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20001c7c 	.word	0x20001c7c

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0a:	e14e      	b.n	80011aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8140 	beq.w	80011a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d00b      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f38:	2b11      	cmp	r3, #17
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b12      	cmp	r3, #18
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0xea>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d123      	bne.n	800102e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	08da      	lsrs	r2, r3, #3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3208      	adds	r2, #8
 8000fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0203 	and.w	r2, r3, #3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 809a 	beq.w	80011a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 8001072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001074:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6613      	str	r3, [r2, #96]	; 0x60
 800107c:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_GPIO_Init+0x2cc>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001088:	4a50      	ldr	r2, [pc, #320]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1e0>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a46      	ldr	r2, [pc, #280]	; (80011d0 <HAL_GPIO_Init+0x2d4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1dc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a45      	ldr	r2, [pc, #276]	; (80011d4 <HAL_GPIO_Init+0x2d8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a44      	ldr	r2, [pc, #272]	; (80011d8 <HAL_GPIO_Init+0x2dc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1d4>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e006      	b.n	80010de <HAL_GPIO_Init+0x1e2>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e004      	b.n	80010de <HAL_GPIO_Init+0x1e2>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e002      	b.n	80010de <HAL_GPIO_Init+0x1e2>
 80010d8:	2301      	movs	r3, #1
 80010da:	e000      	b.n	80010de <HAL_GPIO_Init+0x1e2>
 80010dc:	2300      	movs	r3, #0
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	f002 0203 	and.w	r2, r2, #3
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	4093      	lsls	r3, r2
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ee:	4937      	ldr	r1, [pc, #220]	; (80011cc <HAL_GPIO_Init+0x2d0>)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001126:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_GPIO_Init+0x2e0>)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	fa22 f303 	lsr.w	r3, r2, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f47f aea9 	bne.w	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_PWREx_GetVoltageRange+0x18>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40007000 	.word	0x40007000

0800122c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	d130      	bne.n	800129e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001248:	d038      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2232      	movs	r2, #50	; 0x32
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001270:	e002      	b.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d102      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1f2      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001298:	d110      	bne.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e00f      	b.n	80012be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012aa:	d007      	beq.n	80012bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40007000 	.word	0x40007000
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	f000 bc56 	b.w	8001b98 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ec:	4ba1      	ldr	r3, [pc, #644]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f6:	4b9f      	ldr	r3, [pc, #636]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 80e6 	beq.w	80014da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <HAL_RCC_OscConfig+0x4c>
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	f040 808d 	bne.w	8001436 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	2b01      	cmp	r3, #1
 8001320:	f040 8089 	bne.w	8001436 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001324:	4b93      	ldr	r3, [pc, #588]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_RCC_OscConfig+0x66>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	f000 bc2d 	b.w	8001b98 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001342:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_RCC_OscConfig+0x80>
 800134e:	4b89      	ldr	r3, [pc, #548]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001356:	e005      	b.n	8001364 <HAL_RCC_OscConfig+0x8c>
 8001358:	4b86      	ldr	r3, [pc, #536]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001364:	4293      	cmp	r3, r2
 8001366:	d224      	bcs.n	80013b2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fdef 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	f000 bc0d 	b.w	8001b98 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a7c      	ldr	r2, [pc, #496]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	4977      	ldr	r1, [pc, #476]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	4972      	ldr	r1, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e025      	b.n	80013fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b2:	4b70      	ldr	r3, [pc, #448]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a6f      	ldr	r2, [pc, #444]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	496a      	ldr	r1, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4965      	ldr	r1, [pc, #404]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fdae 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e3cc      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013fe:	f000 fcb3 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001402:	4601      	mov	r1, r0
 8001404:	4b5b      	ldr	r3, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <HAL_RCC_OscConfig+0x2a0>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	fa21 f303 	lsr.w	r3, r1, r3
 800141a:	4a58      	ldr	r2, [pc, #352]	; (800157c <HAL_RCC_OscConfig+0x2a4>)
 800141c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_OscConfig+0x2a8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa62 	bl	80008ec <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d052      	beq.n	80014d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	e3b0      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d032      	beq.n	80014a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800143e:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144a:	f7ff fc69 	bl	8000d20 <HAL_GetTick>
 800144e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001452:	f7ff fc65 	bl	8000d20 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e399      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001470:	4b40      	ldr	r3, [pc, #256]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3f      	ldr	r2, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	493a      	ldr	r1, [pc, #232]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	4935      	ldr	r1, [pc, #212]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
 80014a2:	e01a      	b.n	80014da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a32      	ldr	r2, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc36 	bl	8000d20 <HAL_GetTick>
 80014b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc32 	bl	8000d20 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e366      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1e0>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d073      	beq.n	80015ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_OscConfig+0x220>
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d10e      	bne.n	8001510 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d063      	beq.n	80015cc <HAL_RCC_OscConfig+0x2f4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d15f      	bne.n	80015cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e343      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x250>
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0x28c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x274>
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x28c>
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_RCC_OscConfig+0x29c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fbd8 	bl	8000d20 <HAL_GetTick>
 8001570:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	e010      	b.n	8001596 <HAL_RCC_OscConfig+0x2be>
 8001574:	40021000 	.word	0x40021000
 8001578:	08005464 	.word	0x08005464
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fbcc 	bl	8000d20 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e300      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x2ac>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbbc 	bl	8000d20 <HAL_GetTick>
 80015a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbb8 	bl	8000d20 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e2ec      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	4b96      	ldr	r3, [pc, #600]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x2d4>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d060      	beq.n	800169c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d005      	beq.n	80015ec <HAL_RCC_OscConfig+0x314>
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d119      	bne.n	800161a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d116      	bne.n	800161a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ec:	4b8a      	ldr	r3, [pc, #552]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_OscConfig+0x32c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e2c9      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	061b      	lsls	r3, r3, #24
 8001612:	4981      	ldr	r1, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	e040      	b.n	800169c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d023      	beq.n	800166a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fb77 	bl	8000d20 <HAL_GetTick>
 8001632:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fb73 	bl	8000d20 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e2a7      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b70      	ldr	r3, [pc, #448]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	496d      	ldr	r1, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e018      	b.n	800169c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fb53 	bl	8000d20 <HAL_GetTick>
 800167a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fb4f 	bl	8000d20 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e283      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d07f      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05f      	beq.n	8001770 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d037      	beq.n	8001736 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e25c      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01b      	beq.n	8001720 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80016e8:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80016ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ee:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016f8:	f7ff fb12 	bl	8000d20 <HAL_GetTick>
 80016fc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fb0e 	bl	8000d20 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b11      	cmp	r3, #17
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e242      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ef      	bne.n	8001700 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001720:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	f023 0210 	bic.w	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	493a      	ldr	r1, [pc, #232]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001730:	4313      	orrs	r3, r2
 8001732:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800173c:	4a36      	ldr	r2, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff faeb 	bl	8000d20 <HAL_GetTick>
 800174a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fae7 	bl	8000d20 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b11      	cmp	r3, #17
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e21b      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0ef      	beq.n	800174e <HAL_RCC_OscConfig+0x476>
 800176e:	e01b      	b.n	80017a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff face 	bl	8000d20 <HAL_GetTick>
 8001784:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff faca 	bl	8000d20 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b11      	cmp	r3, #17
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1fe      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179a:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ef      	bne.n	8001788 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80c1 	beq.w	8001938 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10e      	bne.n	80017e6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80017ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_RCC_OscConfig+0x540>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_OscConfig+0x544>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_OscConfig+0x544>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x544>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa8f 	bl	8000d20 <HAL_GetTick>
 8001802:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001804:	e00c      	b.n	8001820 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff fa8b 	bl	8000d20 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d905      	bls.n	8001820 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1bf      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
 8001818:	40021000 	.word	0x40021000
 800181c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4bb1      	ldr	r3, [pc, #708]	; (8001ae8 <HAL_RCC_OscConfig+0x810>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ec      	beq.n	8001806 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02c      	beq.n	8001892 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001838:	4bac      	ldr	r3, [pc, #688]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	49a8      	ldr	r1, [pc, #672]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800184c:	4313      	orrs	r3, r2
 800184e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800185e:	4ba3      	ldr	r3, [pc, #652]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4aa1      	ldr	r2, [pc, #644]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800186e:	4b9f      	ldr	r3, [pc, #636]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a9d      	ldr	r2, [pc, #628]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	e018      	b.n	80018b2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001880:	4b9a      	ldr	r3, [pc, #616]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a99      	ldr	r2, [pc, #612]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	e00f      	b.n	80018b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001892:	4b96      	ldr	r3, [pc, #600]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	4a94      	ldr	r2, [pc, #592]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018a2:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 80018aa:	f023 0304 	bic.w	r3, r3, #4
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d016      	beq.n	80018e8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fa31 	bl	8000d20 <HAL_GetTick>
 80018be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fa2d 	bl	8000d20 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e15f      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d8:	4b84      	ldr	r3, [pc, #528]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0ed      	beq.n	80018c2 <HAL_RCC_OscConfig+0x5ea>
 80018e6:	e01d      	b.n	8001924 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fa1a 	bl	8000d20 <HAL_GetTick>
 80018ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fa16 	bl	8000d20 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e148      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001906:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1ed      	bne.n	80018f0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a74      	ldr	r2, [pc, #464]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800191c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03c      	beq.n	80019be <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001952:	4a66      	ldr	r2, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f9e0 	bl	8000d20 <HAL_GetTick>
 8001960:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001964:	f7ff f9dc 	bl	8000d20 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e110      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ef      	beq.n	8001964 <HAL_RCC_OscConfig+0x68c>
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001986:	4b59      	ldr	r3, [pc, #356]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800198c:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f9c3 	bl	8000d20 <HAL_GetTick>
 800199a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199e:	f7ff f9bf 	bl	8000d20 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0f3      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b0:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 80019b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ef      	bne.n	800199e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80e7 	beq.w	8001b96 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	f040 80b7 	bne.w	8001b40 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0203 	and.w	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d124      	bne.n	8001a30 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	3b01      	subs	r3, #1
 80019f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d11b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d113      	bne.n	8001a30 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d109      	bne.n	8001a30 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d061      	beq.n	8001af4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d056      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a42:	f7ff f96d 	bl	8000d20 <HAL_GetTick>
 8001a46:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f969 	bl	8000d20 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e09d      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_RCC_OscConfig+0x818>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a78:	3a01      	subs	r2, #1
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a82:	0212      	lsls	r2, r2, #8
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a8a:	0852      	lsrs	r2, r2, #1
 8001a8c:	3a01      	subs	r2, #1
 8001a8e:	0552      	lsls	r2, r2, #21
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a96:	0852      	lsrs	r2, r2, #1
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	0652      	lsls	r2, r2, #25
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	4913      	ldr	r1, [pc, #76]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001abc:	f7ff f930 	bl	8000d20 <HAL_GetTick>
 8001ac0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f92c 	bl	8000d20 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e060      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_OscConfig+0x814>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae2:	e058      	b.n	8001b96 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e057      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d14a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b18:	f7ff f902 	bl	8000d20 <HAL_GetTick>
 8001b1c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8fe 	bl	8000d20 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e032      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x848>
 8001b3e:	e02a      	b.n	8001b96 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d025      	beq.n	8001b92 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f8d9 	bl	8000d20 <HAL_GetTick>
 8001b6e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f8d5 	bl	8000d20 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e009      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_OscConfig+0x8c8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x89a>
 8001b90:	e001      	b.n	8001b96 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0c8      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	4961      	ldr	r1, [pc, #388]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b5f      	ldr	r3, [pc, #380]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b0      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04c      	beq.n	8001c8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d107      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfc:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d121      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e09e      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c14:	4b50      	ldr	r3, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e092      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e086      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e07e      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 0203 	bic.w	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	493f      	ldr	r1, [pc, #252]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c5e:	f7ff f85f 	bl	8000d20 <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7ff f85b 	bl	8000d20 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e066      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 020c 	and.w	r2, r3, #12
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d1eb      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	492c      	ldr	r1, [pc, #176]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d210      	bcs.n	8001cdc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4924      	ldr	r1, [pc, #144]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_ClockConfig+0x1b0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e036      	b.n	8001d4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4918      	ldr	r1, [pc, #96]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4910      	ldr	r1, [pc, #64]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1a:	f000 f825 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_ClockConfig+0x1b4>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	fa21 f303 	lsr.w	r3, r1, r3
 8001d36:	4a0a      	ldr	r2, [pc, #40]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fdd4 	bl	80008ec <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d48:	7afb      	ldrb	r3, [r7, #11]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08005464 	.word	0x08005464
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11e      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e004      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d133      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0xa4>
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0xaa>
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e0e:	617b      	str	r3, [r7, #20]
      break;
 8001e10:	e005      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e14:	617b      	str	r3, [r7, #20]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	617b      	str	r3, [r7, #20]
      break;
 8001e1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	3301      	adds	r3, #1
 8001e2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	fb02 f203 	mul.w	r2, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0e5b      	lsrs	r3, r3, #25
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5e:	69bb      	ldr	r3, [r7, #24]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3724      	adds	r7, #36	; 0x24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	0800547c 	.word	0x0800547c
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08005474 	.word	0x08005474

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec4:	f7ff ffda 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0adb      	lsrs	r3, r3, #11
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	08005474 	.word	0x08005474

08001eec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	220f      	movs	r2, #15
 8001efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0203 	and.w	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCC_GetClockConfig+0x60>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40022000 	.word	0x40022000

08001f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff f952 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	e014      	b.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a24      	ldr	r2, [pc, #144]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b22      	ldr	r3, [pc, #136]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff f942 	bl	8001210 <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d10b      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d919      	bls.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2ba0      	cmp	r3, #160	; 0xa0
 8001fac:	d902      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e013      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e010      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d902      	bls.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e00a      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d102      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e004      	b.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b70      	cmp	r3, #112	; 0x70
 8001fd6:	d101      	bne.n	8001fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f023 0207 	bic.w	r2, r3, #7
 8001fe4:	4909      	ldr	r1, [pc, #36]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002018:	2300      	movs	r3, #0
 800201a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800201c:	2300      	movs	r3, #0
 800201e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 809e 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002042:	2300      	movs	r3, #0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	; 0x58
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002060:	2301      	movs	r3, #1
 8002062:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002064:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a39      	ldr	r2, [pc, #228]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800206a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002070:	f7fe fe56 	bl	8000d20 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002076:	e009      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002078:	f7fe fe52 	bl	8000d20 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d902      	bls.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	74fb      	strb	r3, [r7, #19]
        break;
 800208a:	e005      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ef      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d15a      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209e:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01e      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xde>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d019      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ba:	4b24      	ldr	r3, [pc, #144]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe12 	bl	8000d20 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	e00b      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7fe fe0e 	bl	8000d20 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d902      	bls.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	74fb      	strb	r3, [r7, #19]
            break;
 8002116:	e006      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0ec      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002132:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4904      	ldr	r1, [pc, #16]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002142:	e009      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
 8002148:	e006      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a6d      	ldr	r2, [pc, #436]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4b68      	ldr	r3, [pc, #416]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4964      	ldr	r1, [pc, #400]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002198:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 020c 	bic.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	495c      	ldr	r1, [pc, #368]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ba:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4953      	ldr	r1, [pc, #332]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	494b      	ldr	r1, [pc, #300]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4942      	ldr	r1, [pc, #264]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	493a      	ldr	r1, [pc, #232]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	4931      	ldr	r1, [pc, #196]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	4929      	ldr	r1, [pc, #164]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4920      	ldr	r1, [pc, #128]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	4918      	ldr	r1, [pc, #96]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	490a      	ldr	r1, [pc, #40]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800230c:	7cbb      	ldrb	r3, [r7, #18]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e049      	b.n	80023c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f841 	bl	80023ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f000 f9dc 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d001      	beq.n	80023f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e03b      	b.n	8002470 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIM_Base_Start_IT+0x9c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_TIM_Base_Start_IT+0x4e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d004      	beq.n	800242e <HAL_TIM_Base_Start_IT+0x4e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_TIM_Base_Start_IT+0xa0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d115      	bne.n	800245a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_TIM_Base_Start_IT+0xa4>)
 8002436:	4013      	ands	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d015      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x8c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d011      	beq.n	800246c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002458:	e008      	b.n	800246c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e000      	b.n	800246e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40014000 	.word	0x40014000
 8002484:	00010007 	.word	0x00010007

08002488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b02      	cmp	r3, #2
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0202 	mvn.w	r2, #2
 80024b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f905 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8f7 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f908 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0204 	mvn.w	r2, #4
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8db 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8cd 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8de 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0208 	mvn.w	r2, #8
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8b1 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8a3 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8b4 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0210 	mvn.w	r2, #16
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2208      	movs	r2, #8
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f887 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f879 	bl	80026c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f88a 	bl	80026ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0201 	mvn.w	r2, #1
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f932 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b80      	cmp	r3, #128	; 0x80
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f8de 	bl	80027f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002646:	d10e      	bne.n	8002666 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	2b80      	cmp	r3, #128	; 0x80
 8002654:	d107      	bne.n	8002666 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800265e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f8d1 	bl	8002808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d10e      	bne.n	8002692 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d107      	bne.n	8002692 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800268a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f838 	bl	8002702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b20      	cmp	r3, #32
 800269e:	d10e      	bne.n	80026be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d107      	bne.n	80026be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f06f 0220 	mvn.w	r2, #32
 80026b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f891 	bl	80027e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a2a      	ldr	r2, [pc, #168]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x20>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <TIM_Base_SetConfig+0xc4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <TIM_Base_SetConfig+0xbc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0xa0>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <TIM_Base_SetConfig+0xc0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xa0>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <TIM_Base_SetConfig+0xc4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40014000 	.word	0x40014000
 80027dc:	40014400 	.word	0x40014400

080027e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f99e 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8c0 	bl	80029e0 <UART_SetConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 faea 	bl	8002e4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb71 	bl	8002f90 <UART_CheckIdleState>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 8081 	bne.w	80029d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_Transmit+0x26>
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e079      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_UART_Transmit+0x38>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e072      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2221      	movs	r2, #33	; 0x21
 8002902:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002904:	f7fe fa0c 	bl	8000d20 <HAL_GetTick>
 8002908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d108      	bne.n	8002936 <HAL_UART_Transmit+0x7e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e003      	b.n	800293e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002946:	e02d      	b.n	80029a4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fb61 	bl	800301a <UART_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e039      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10b      	bne.n	8002980 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002974:	b292      	uxth	r2, r2
 8002976:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	3302      	adds	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e008      	b.n	8002992 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b292      	uxth	r2, r2
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1cb      	bne.n	8002948 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2140      	movs	r1, #64	; 0x40
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fb2d 	bl	800301a <UART_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e005      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029e4:	b088      	sub	sp, #32
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4baa      	ldr	r3, [pc, #680]	; (8002cb8 <UART_SetConfig+0x2d8>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4aa0      	ldr	r2, [pc, #640]	; (8002cbc <UART_SetConfig+0x2dc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a97      	ldr	r2, [pc, #604]	; (8002cc0 <UART_SetConfig+0x2e0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d121      	bne.n	8002aac <UART_SetConfig+0xcc>
 8002a68:	4b96      	ldr	r3, [pc, #600]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d816      	bhi.n	8002aa4 <UART_SetConfig+0xc4>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <UART_SetConfig+0x9c>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002a93 	.word	0x08002a93
 8002a88:	08002a9f 	.word	0x08002a9f
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	76fb      	strb	r3, [r7, #27]
 8002a90:	e098      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002a92:	2302      	movs	r3, #2
 8002a94:	76fb      	strb	r3, [r7, #27]
 8002a96:	e095      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	76fb      	strb	r3, [r7, #27]
 8002a9c:	e092      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	76fb      	strb	r3, [r7, #27]
 8002aa2:	e08f      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	76fb      	strb	r3, [r7, #27]
 8002aa8:	bf00      	nop
 8002aaa:	e08b      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a85      	ldr	r2, [pc, #532]	; (8002cc8 <UART_SetConfig+0x2e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d134      	bne.n	8002b20 <UART_SetConfig+0x140>
 8002ab6:	4b83      	ldr	r3, [pc, #524]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d829      	bhi.n	8002b18 <UART_SetConfig+0x138>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <UART_SetConfig+0xec>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002b01 	.word	0x08002b01
 8002ad0:	08002b19 	.word	0x08002b19
 8002ad4:	08002b19 	.word	0x08002b19
 8002ad8:	08002b19 	.word	0x08002b19
 8002adc:	08002b0d 	.word	0x08002b0d
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b07 	.word	0x08002b07
 8002af0:	08002b19 	.word	0x08002b19
 8002af4:	08002b19 	.word	0x08002b19
 8002af8:	08002b19 	.word	0x08002b19
 8002afc:	08002b13 	.word	0x08002b13
 8002b00:	2300      	movs	r3, #0
 8002b02:	76fb      	strb	r3, [r7, #27]
 8002b04:	e05e      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b06:	2302      	movs	r3, #2
 8002b08:	76fb      	strb	r3, [r7, #27]
 8002b0a:	e05b      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	76fb      	strb	r3, [r7, #27]
 8002b10:	e058      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b12:	2308      	movs	r3, #8
 8002b14:	76fb      	strb	r3, [r7, #27]
 8002b16:	e055      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	76fb      	strb	r3, [r7, #27]
 8002b1c:	bf00      	nop
 8002b1e:	e051      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <UART_SetConfig+0x2ec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d120      	bne.n	8002b6c <UART_SetConfig+0x18c>
 8002b2a:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d00f      	beq.n	8002b58 <UART_SetConfig+0x178>
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d802      	bhi.n	8002b42 <UART_SetConfig+0x162>
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <UART_SetConfig+0x16c>
 8002b40:	e010      	b.n	8002b64 <UART_SetConfig+0x184>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d005      	beq.n	8002b52 <UART_SetConfig+0x172>
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d009      	beq.n	8002b5e <UART_SetConfig+0x17e>
 8002b4a:	e00b      	b.n	8002b64 <UART_SetConfig+0x184>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	76fb      	strb	r3, [r7, #27]
 8002b50:	e038      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b52:	2302      	movs	r3, #2
 8002b54:	76fb      	strb	r3, [r7, #27]
 8002b56:	e035      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	76fb      	strb	r3, [r7, #27]
 8002b5c:	e032      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	76fb      	strb	r3, [r7, #27]
 8002b62:	e02f      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b64:	2310      	movs	r3, #16
 8002b66:	76fb      	strb	r3, [r7, #27]
 8002b68:	bf00      	nop
 8002b6a:	e02b      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <UART_SetConfig+0x2dc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d124      	bne.n	8002bc0 <UART_SetConfig+0x1e0>
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <UART_SetConfig+0x2e4>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d012      	beq.n	8002bac <UART_SetConfig+0x1cc>
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8a:	d802      	bhi.n	8002b92 <UART_SetConfig+0x1b2>
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <UART_SetConfig+0x1c0>
 8002b90:	e012      	b.n	8002bb8 <UART_SetConfig+0x1d8>
 8002b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b96:	d006      	beq.n	8002ba6 <UART_SetConfig+0x1c6>
 8002b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b9c:	d009      	beq.n	8002bb2 <UART_SetConfig+0x1d2>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x1d8>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	76fb      	strb	r3, [r7, #27]
 8002ba4:	e00e      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	76fb      	strb	r3, [r7, #27]
 8002baa:	e00b      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002bac:	2304      	movs	r3, #4
 8002bae:	76fb      	strb	r3, [r7, #27]
 8002bb0:	e008      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	76fb      	strb	r3, [r7, #27]
 8002bb6:	e005      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	76fb      	strb	r3, [r7, #27]
 8002bbc:	bf00      	nop
 8002bbe:	e001      	b.n	8002bc4 <UART_SetConfig+0x1e4>
 8002bc0:	2310      	movs	r3, #16
 8002bc2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <UART_SetConfig+0x2dc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	f040 8082 	bne.w	8002cd4 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bd0:	7efb      	ldrb	r3, [r7, #27]
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d823      	bhi.n	8002c1e <UART_SetConfig+0x23e>
 8002bd6:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <UART_SetConfig+0x1fc>)
 8002bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bdc:	08002c01 	.word	0x08002c01
 8002be0:	08002c1f 	.word	0x08002c1f
 8002be4:	08002c09 	.word	0x08002c09
 8002be8:	08002c1f 	.word	0x08002c1f
 8002bec:	08002c0f 	.word	0x08002c0f
 8002bf0:	08002c1f 	.word	0x08002c1f
 8002bf4:	08002c1f 	.word	0x08002c1f
 8002bf8:	08002c1f 	.word	0x08002c1f
 8002bfc:	08002c17 	.word	0x08002c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7ff f948 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002c04:	6178      	str	r0, [r7, #20]
        break;
 8002c06:	e00f      	b.n	8002c28 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c08:	4b31      	ldr	r3, [pc, #196]	; (8002cd0 <UART_SetConfig+0x2f0>)
 8002c0a:	617b      	str	r3, [r7, #20]
        break;
 8002c0c:	e00c      	b.n	8002c28 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0e:	f7ff f8ab 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002c12:	6178      	str	r0, [r7, #20]
        break;
 8002c14:	e008      	b.n	8002c28 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c1a:	617b      	str	r3, [r7, #20]
        break;
 8002c1c:	e004      	b.n	8002c28 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	76bb      	strb	r3, [r7, #26]
        break;
 8002c26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8100 	beq.w	8002e30 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d305      	bcc.n	8002c4c <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d902      	bls.n	8002c52 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	76bb      	strb	r3, [r7, #26]
 8002c50:	e0ee      	b.n	8002e30 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	0214      	lsls	r4, r2, #8
 8002c64:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002c68:	020b      	lsls	r3, r1, #8
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6852      	ldr	r2, [r2, #4]
 8002c6e:	0852      	lsrs	r2, r2, #1
 8002c70:	4611      	mov	r1, r2
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	eb13 0b01 	adds.w	fp, r3, r1
 8002c7a:	eb44 0c02 	adc.w	ip, r4, r2
 8002c7e:	4658      	mov	r0, fp
 8002c80:	4661      	mov	r1, ip
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	f7fd faef 	bl	8000270 <__aeabi_uldivmod>
 8002c92:	4603      	mov	r3, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c9e:	d308      	bcc.n	8002cb2 <UART_SetConfig+0x2d2>
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca6:	d204      	bcs.n	8002cb2 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	e0be      	b.n	8002e30 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	76bb      	strb	r3, [r7, #26]
 8002cb6:	e0bb      	b.n	8002e30 <UART_SetConfig+0x450>
 8002cb8:	efff69f3 	.word	0xefff69f3
 8002cbc:	40008000 	.word	0x40008000
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d15c      	bne.n	8002d98 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002cde:	7efb      	ldrb	r3, [r7, #27]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d828      	bhi.n	8002d36 <UART_SetConfig+0x356>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <UART_SetConfig+0x30c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d21 	.word	0x08002d21
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d27 	.word	0x08002d27
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d37 	.word	0x08002d37
 8002d08:	08002d37 	.word	0x08002d37
 8002d0c:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7ff f8c0 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002d14:	6178      	str	r0, [r7, #20]
        break;
 8002d16:	e013      	b.n	8002d40 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d18:	f7ff f8d2 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	6178      	str	r0, [r7, #20]
        break;
 8002d1e:	e00f      	b.n	8002d40 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b49      	ldr	r3, [pc, #292]	; (8002e48 <UART_SetConfig+0x468>)
 8002d22:	617b      	str	r3, [r7, #20]
        break;
 8002d24:	e00c      	b.n	8002d40 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7ff f81f 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002d2a:	6178      	str	r0, [r7, #20]
        break;
 8002d2c:	e008      	b.n	8002d40 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	617b      	str	r3, [r7, #20]
        break;
 8002d34:	e004      	b.n	8002d40 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	76bb      	strb	r3, [r7, #26]
        break;
 8002d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d074      	beq.n	8002e30 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005a      	lsls	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	441a      	add	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d916      	bls.n	8002d92 <UART_SetConfig+0x3b2>
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d212      	bcs.n	8002d92 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	f023 030f 	bic.w	r3, r3, #15
 8002d74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	89fa      	ldrh	r2, [r7, #14]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e04e      	b.n	8002e30 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	76bb      	strb	r3, [r7, #26]
 8002d96:	e04b      	b.n	8002e30 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d98:	7efb      	ldrb	r3, [r7, #27]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d827      	bhi.n	8002dee <UART_SetConfig+0x40e>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <UART_SetConfig+0x3c4>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002dc9 	.word	0x08002dc9
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002dd9 	.word	0x08002dd9
 8002db0:	08002def 	.word	0x08002def
 8002db4:	08002ddf 	.word	0x08002ddf
 8002db8:	08002def 	.word	0x08002def
 8002dbc:	08002def 	.word	0x08002def
 8002dc0:	08002def 	.word	0x08002def
 8002dc4:	08002de7 	.word	0x08002de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f7ff f864 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	6178      	str	r0, [r7, #20]
        break;
 8002dce:	e013      	b.n	8002df8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dd0:	f7ff f876 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	6178      	str	r0, [r7, #20]
        break;
 8002dd6:	e00f      	b.n	8002df8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <UART_SetConfig+0x468>)
 8002dda:	617b      	str	r3, [r7, #20]
        break;
 8002ddc:	e00c      	b.n	8002df8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dde:	f7fe ffc3 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002de2:	6178      	str	r0, [r7, #20]
        break;
 8002de4:	e008      	b.n	8002df8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dea:	617b      	str	r3, [r7, #20]
        break;
 8002dec:	e004      	b.n	8002df8 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	76bb      	strb	r3, [r7, #26]
        break;
 8002df6:	bf00      	nop
    }

    if (pclk != 0U)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	085a      	lsrs	r2, r3, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d908      	bls.n	8002e2c <UART_SetConfig+0x44c>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d204      	bcs.n	8002e2c <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	e001      	b.n	8002e30 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002e48:	00f42400 	.word	0x00f42400

08002e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01a      	beq.n	8002f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4a:	d10a      	bne.n	8002f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f9e:	f7fd febf 	bl	8000d20 <HAL_GetTick>
 8002fa2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d10e      	bne.n	8002fd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f82a 	bl	800301a <UART_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e020      	b.n	8003012 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d10e      	bne.n	8002ffc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f814 	bl	800301a <UART_WaitOnFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e00a      	b.n	8003012 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800302a:	e05d      	b.n	80030e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d059      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	f7fd fe74 	bl	8000d20 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	429a      	cmp	r2, r3
 8003042:	d302      	bcc.n	800304a <UART_WaitOnFlagUntilTimeout+0x30>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d11b      	bne.n	8003082 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003058:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e042      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02b      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d123      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e00f      	b.n	8003108 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d092      	beq.n	800302c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800311e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003122:	2b84      	cmp	r3, #132	; 0x84
 8003124:	d005      	beq.n	8003132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	3303      	adds	r3, #3
 8003130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003144:	f000 feb2 	bl	8003eac <vTaskStartScheduler>
  
  return osOK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	bd80      	pop	{r7, pc}

0800314e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800314e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003150:	b089      	sub	sp, #36	; 0x24
 8003152:	af04      	add	r7, sp, #16
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <osThreadCreate+0x54>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01c      	beq.n	80031a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685c      	ldr	r4, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681d      	ldr	r5, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691e      	ldr	r6, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ffc8 	bl	8003110 <makeFreeRtosPriority>
 8003180:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800318a:	9202      	str	r2, [sp, #8]
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	9100      	str	r1, [sp, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4632      	mov	r2, r6
 8003194:	4629      	mov	r1, r5
 8003196:	4620      	mov	r0, r4
 8003198:	f000 fcc4 	bl	8003b24 <xTaskCreateStatic>
 800319c:	4603      	mov	r3, r0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e01c      	b.n	80031dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685c      	ldr	r4, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031ae:	b29e      	uxth	r6, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ffaa 	bl	8003110 <makeFreeRtosPriority>
 80031bc:	4602      	mov	r2, r0
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	4632      	mov	r2, r6
 80031ca:	4629      	mov	r1, r5
 80031cc:	4620      	mov	r0, r4
 80031ce:	f000 fd03 	bl	8003bd8 <xTaskCreate>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <osDelay+0x16>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	e000      	b.n	80031fe <osDelay+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fe20 	bl	8003e44 <vTaskDelay>
  
  return osOK;
 8003204:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800321c:	f000 fea4 	bl	8003f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003220:	4b57      	ldr	r3, [pc, #348]	; (8003380 <pvPortMalloc+0x170>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003228:	f000 f90c 	bl	8003444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800322c:	4b55      	ldr	r3, [pc, #340]	; (8003384 <pvPortMalloc+0x174>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 808c 	bne.w	8003352 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01c      	beq.n	800327a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003240:	2208      	movs	r2, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f023 0307 	bic.w	r3, r3, #7
 8003258:	3308      	adds	r3, #8
 800325a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	e7fe      	b.n	8003278 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d068      	beq.n	8003352 <pvPortMalloc+0x142>
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <pvPortMalloc+0x178>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d863      	bhi.n	8003352 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800328a:	4b40      	ldr	r3, [pc, #256]	; (800338c <pvPortMalloc+0x17c>)
 800328c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800328e:	4b3f      	ldr	r3, [pc, #252]	; (800338c <pvPortMalloc+0x17c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003294:	e004      	b.n	80032a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d903      	bls.n	80032b2 <pvPortMalloc+0xa2>
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f1      	bne.n	8003296 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032b2:	4b33      	ldr	r3, [pc, #204]	; (8003380 <pvPortMalloc+0x170>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d04a      	beq.n	8003352 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2208      	movs	r2, #8
 80032c2:	4413      	add	r3, r2
 80032c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad2      	subs	r2, r2, r3
 80032d6:	2308      	movs	r3, #8
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	429a      	cmp	r2, r3
 80032dc:	d91e      	bls.n	800331c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <pvPortMalloc+0xf4>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e7fe      	b.n	8003302 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003316:	69b8      	ldr	r0, [r7, #24]
 8003318:	f000 f8f6 	bl	8003508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <pvPortMalloc+0x178>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <pvPortMalloc+0x178>)
 8003328:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <pvPortMalloc+0x178>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <pvPortMalloc+0x180>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d203      	bcs.n	800333e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <pvPortMalloc+0x178>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <pvPortMalloc+0x180>)
 800333c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <pvPortMalloc+0x174>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	431a      	orrs	r2, r3
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003352:	f000 fe17 	bl	8003f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <pvPortMalloc+0x164>
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e7fe      	b.n	8003372 <pvPortMalloc+0x162>
	return pvReturn;
 8003374:	69fb      	ldr	r3, [r7, #28]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3728      	adds	r7, #40	; 0x28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20001a60 	.word	0x20001a60
 8003384:	20001a6c 	.word	0x20001a6c
 8003388:	20001a64 	.word	0x20001a64
 800338c:	20001a58 	.word	0x20001a58
 8003390:	20001a68 	.word	0x20001a68

08003394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d046      	beq.n	8003434 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033a6:	2308      	movs	r3, #8
 80033a8:	425b      	negs	r3, r3
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4413      	add	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <vPortFree+0xa8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <vPortFree+0x42>
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e7fe      	b.n	80033d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d009      	beq.n	80033f2 <vPortFree+0x5e>
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	e7fe      	b.n	80033f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <vPortFree+0xa8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d019      	beq.n	8003434 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d115      	bne.n	8003434 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <vPortFree+0xa8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003418:	f000 fda6 	bl	8003f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <vPortFree+0xac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	4a06      	ldr	r2, [pc, #24]	; (8003440 <vPortFree+0xac>)
 8003428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800342a:	6938      	ldr	r0, [r7, #16]
 800342c:	f000 f86c 	bl	8003508 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003430:	f000 fda8 	bl	8003f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20001a6c 	.word	0x20001a6c
 8003440:	20001a64 	.word	0x20001a64

08003444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800344a:	f241 7370 	movw	r3, #6000	; 0x1770
 800344e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <prvHeapInit+0xac>)
 8003452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3307      	adds	r3, #7
 8003462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0307 	bic.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <prvHeapInit+0xac>)
 8003474:	4413      	add	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <prvHeapInit+0xb0>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003482:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <prvHeapInit+0xb0>)
 8003484:	2200      	movs	r2, #0
 8003486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003490:	2208      	movs	r2, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <prvHeapInit+0xb4>)
 80034a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <prvHeapInit+0xb4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <prvHeapInit+0xb4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <prvHeapInit+0xb4>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <prvHeapInit+0xb8>)
 80034d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <prvHeapInit+0xbc>)
 80034da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <prvHeapInit+0xc0>)
 80034de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	200002e8 	.word	0x200002e8
 80034f4:	20001a58 	.word	0x20001a58
 80034f8:	20001a60 	.word	0x20001a60
 80034fc:	20001a68 	.word	0x20001a68
 8003500:	20001a64 	.word	0x20001a64
 8003504:	20001a6c 	.word	0x20001a6c

08003508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <prvInsertBlockIntoFreeList+0xac>)
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	e002      	b.n	800351c <prvInsertBlockIntoFreeList+0x14>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	429a      	cmp	r2, r3
 8003524:	d8f7      	bhi.n	8003516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d108      	bne.n	800354a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	441a      	add	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	441a      	add	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d118      	bne.n	8003590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <prvInsertBlockIntoFreeList+0xb0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d00d      	beq.n	8003586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	441a      	add	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e008      	b.n	8003598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <prvInsertBlockIntoFreeList+0xb0>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e003      	b.n	8003598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d002      	beq.n	80035a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20001a58 	.word	0x20001a58
 80035b8:	20001a60 	.word	0x20001a60

080035bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f103 0208 	add.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 0208 	add.w	r2, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f103 0208 	add.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d103      	bne.n	800367e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e00c      	b.n	8003698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e002      	b.n	800368c <vListInsert+0x2e>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d2f6      	bcs.n	8003686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d103      	bne.n	8003704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3b04      	subs	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b04      	subs	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b04      	subs	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <pxPortInitialiseStack+0x64>)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3b14      	subs	r3, #20
 800375e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3b04      	subs	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f06f 0202 	mvn.w	r2, #2
 8003772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b20      	subs	r3, #32
 8003778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	0800378d 	.word	0x0800378d

0800378c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <prvTaskExitError+0x50>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d009      	beq.n	80037b4 <prvTaskExitError+0x28>
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e7fe      	b.n	80037b2 <prvTaskExitError+0x26>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037c6:	bf00      	nop
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0fc      	beq.n	80037c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	2000000c 	.word	0x2000000c

080037e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <pxCurrentTCBConst2>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	6808      	ldr	r0, [r1, #0]
 80037e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ea:	f380 8809 	msr	PSP, r0
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f04f 0000 	mov.w	r0, #0
 80037f6:	f380 8811 	msr	BASEPRI, r0
 80037fa:	4770      	bx	lr
 80037fc:	f3af 8000 	nop.w

08003800 <pxCurrentTCBConst2>:
 8003800:	20001a78 	.word	0x20001a78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop

08003808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <prvPortStartFirstTask+0x24>)
 800380a:	6800      	ldr	r0, [r0, #0]
 800380c:	6800      	ldr	r0, [r0, #0]
 800380e:	f380 8808 	msr	MSP, r0
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f380 8814 	msr	CONTROL, r0
 800381a:	b662      	cpsie	i
 800381c:	b661      	cpsie	f
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	df00      	svc	0
 8003828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800382a:	bf00      	nop
 800382c:	e000ed08 	.word	0xe000ed08

08003830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <xPortStartScheduler+0x118>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a44      	ldr	r2, [pc, #272]	; (800394c <xPortStartScheduler+0x11c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d109      	bne.n	8003854 <xPortStartScheduler+0x24>
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e7fe      	b.n	8003852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003854:	4b3c      	ldr	r3, [pc, #240]	; (8003948 <xPortStartScheduler+0x118>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <xPortStartScheduler+0x120>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d109      	bne.n	8003872 <xPortStartScheduler+0x42>
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e7fe      	b.n	8003870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003872:	4b38      	ldr	r3, [pc, #224]	; (8003954 <xPortStartScheduler+0x124>)
 8003874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	22ff      	movs	r2, #255	; 0xff
 8003882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b30      	ldr	r3, [pc, #192]	; (8003958 <xPortStartScheduler+0x128>)
 8003898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800389a:	4b30      	ldr	r3, [pc, #192]	; (800395c <xPortStartScheduler+0x12c>)
 800389c:	2207      	movs	r2, #7
 800389e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038a0:	e009      	b.n	80038b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80038a2:	4b2e      	ldr	r3, [pc, #184]	; (800395c <xPortStartScheduler+0x12c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	4a2c      	ldr	r2, [pc, #176]	; (800395c <xPortStartScheduler+0x12c>)
 80038aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d0ef      	beq.n	80038a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <xPortStartScheduler+0x12c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1c3 0307 	rsb	r3, r3, #7
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d009      	beq.n	80038e2 <xPortStartScheduler+0xb2>
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	e7fe      	b.n	80038e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <xPortStartScheduler+0x12c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <xPortStartScheduler+0x12c>)
 80038ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <xPortStartScheduler+0x12c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038f4:	4a19      	ldr	r2, [pc, #100]	; (800395c <xPortStartScheduler+0x12c>)
 80038f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <xPortStartScheduler+0x130>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a16      	ldr	r2, [pc, #88]	; (8003960 <xPortStartScheduler+0x130>)
 8003906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800390a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <xPortStartScheduler+0x130>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <xPortStartScheduler+0x130>)
 8003912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003918:	f000 f8d6 	bl	8003ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <xPortStartScheduler+0x134>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003922:	f000 f8f5 	bl	8003b10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <xPortStartScheduler+0x138>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <xPortStartScheduler+0x138>)
 800392c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003932:	f7ff ff69 	bl	8003808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003936:	f000 fc89 	bl	800424c <vTaskSwitchContext>
	prvTaskExitError();
 800393a:	f7ff ff27 	bl	800378c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	e000ed00 	.word	0xe000ed00
 800394c:	410fc271 	.word	0x410fc271
 8003950:	410fc270 	.word	0x410fc270
 8003954:	e000e400 	.word	0xe000e400
 8003958:	20001a70 	.word	0x20001a70
 800395c:	20001a74 	.word	0x20001a74
 8003960:	e000ed20 	.word	0xe000ed20
 8003964:	2000000c 	.word	0x2000000c
 8003968:	e000ef34 	.word	0xe000ef34

0800396c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <vPortEnterCritical+0x54>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <vPortEnterCritical+0x54>)
 800398c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <vPortEnterCritical+0x54>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10e      	bne.n	80039b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <vPortEnterCritical+0x58>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <vPortEnterCritical+0x48>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	e7fe      	b.n	80039b2 <vPortEnterCritical+0x46>
	}
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	2000000c 	.word	0x2000000c
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <vPortExitCritical+0x4c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <vPortExitCritical+0x22>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	e7fe      	b.n	80039e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <vPortExitCritical+0x4c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <vPortExitCritical+0x4c>)
 80039f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <vPortExitCritical+0x4c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <vPortExitCritical+0x3e>
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c
	...

08003a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a20:	f3ef 8009 	mrs	r0, PSP
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <pxCurrentTCBConst>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	f01e 0f10 	tst.w	lr, #16
 8003a30:	bf08      	it	eq
 8003a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3a:	6010      	str	r0, [r2, #0]
 8003a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a44:	f380 8811 	msr	BASEPRI, r0
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f000 fbfc 	bl	800424c <vTaskSwitchContext>
 8003a54:	f04f 0000 	mov.w	r0, #0
 8003a58:	f380 8811 	msr	BASEPRI, r0
 8003a5c:	bc09      	pop	{r0, r3}
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	6808      	ldr	r0, [r1, #0]
 8003a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a66:	f01e 0f10 	tst.w	lr, #16
 8003a6a:	bf08      	it	eq
 8003a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a70:	f380 8809 	msr	PSP, r0
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w

08003a80 <pxCurrentTCBConst>:
 8003a80:	20001a78 	.word	0x20001a78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop

08003a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003aa0:	f000 fb1c 	bl	80040dc <xTaskIncrementTick>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <SysTick_Handler+0x3c>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed04 	.word	0xe000ed04

08003ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <vPortSetupTimerInterrupt+0x34>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <vPortSetupTimerInterrupt+0x38>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <vPortSetupTimerInterrupt+0x3c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <vPortSetupTimerInterrupt+0x40>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <vPortSetupTimerInterrupt+0x44>)
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003aea:	4b04      	ldr	r3, [pc, #16]	; (8003afc <vPortSetupTimerInterrupt+0x34>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e010 	.word	0xe000e010
 8003b00:	e000e018 	.word	0xe000e018
 8003b04:	20000000 	.word	0x20000000
 8003b08:	10624dd3 	.word	0x10624dd3
 8003b0c:	e000e014 	.word	0xe000e014

08003b10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003b10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b20 <vPortEnableVFP+0x10>
 8003b14:	6801      	ldr	r1, [r0, #0]
 8003b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b1a:	6001      	str	r1, [r0, #0]
 8003b1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003b1e:	bf00      	nop
 8003b20:	e000ed88 	.word	0xe000ed88

08003b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af04      	add	r7, sp, #16
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <xTaskCreateStatic+0x28>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	623b      	str	r3, [r7, #32]
 8003b4a:	e7fe      	b.n	8003b4a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <xTaskCreateStatic+0x42>
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e7fe      	b.n	8003b64 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b66:	2354      	movs	r3, #84	; 0x54
 8003b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b54      	cmp	r3, #84	; 0x54
 8003b6e:	d009      	beq.n	8003b84 <xTaskCreateStatic+0x60>
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	e7fe      	b.n	8003b82 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01e      	beq.n	8003bca <xTaskCreateStatic+0xa6>
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01b      	beq.n	8003bca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9303      	str	r3, [sp, #12]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	9302      	str	r3, [sp, #8]
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f850 	bl	8003c62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bc4:	f000 f8d4 	bl	8003d70 <prvAddNewTaskToReadyList>
 8003bc8:	e001      	b.n	8003bce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
	}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08c      	sub	sp, #48	; 0x30
 8003bdc:	af04      	add	r7, sp, #16
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fb0f 	bl	8003210 <pvPortMalloc>
 8003bf2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bfa:	2054      	movs	r0, #84	; 0x54
 8003bfc:	f7ff fb08 	bl	8003210 <pvPortMalloc>
 8003c00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c0e:	e005      	b.n	8003c1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f7ff fbbf 	bl	8003394 <vPortFree>
 8003c16:	e001      	b.n	8003c1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d017      	beq.n	8003c52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9303      	str	r3, [sp, #12]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f80e 	bl	8003c62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c46:	69f8      	ldr	r0, [r7, #28]
 8003c48:	f000 f892 	bl	8003d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e002      	b.n	8003c58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c58:	69bb      	ldr	r3, [r7, #24]
	}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b088      	sub	sp, #32
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f023 0307 	bic.w	r3, r3, #7
 8003c88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d009      	beq.n	8003ca8 <prvInitialiseNewTask+0x46>
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e7fe      	b.n	8003ca6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e012      	b.n	8003cda <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	7819      	ldrb	r1, [r3, #0]
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3334      	adds	r3, #52	; 0x34
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	4413      	add	r3, r2
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b0f      	cmp	r3, #15
 8003cde:	d9e9      	bls.n	8003cb4 <prvInitialiseNewTask+0x52>
 8003ce0:	e000      	b.n	8003ce4 <prvInitialiseNewTask+0x82>
			{
				break;
 8003ce2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cec:	e003      	b.n	8003cf6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2b06      	cmp	r3, #6
 8003cfa:	d901      	bls.n	8003d00 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2200      	movs	r2, #0
 8003d10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	3304      	adds	r3, #4
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fc70 	bl	80035fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	3318      	adds	r3, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fc6b 	bl	80035fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	f1c3 0207 	rsb	r2, r3, #7
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	2200      	movs	r2, #0
 8003d40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	68f9      	ldr	r1, [r7, #12]
 8003d4e:	69b8      	ldr	r0, [r7, #24]
 8003d50:	f7ff fce8 	bl	8003724 <pxPortInitialiseStack>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d66:	bf00      	nop
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d78:	f7ff fdf8 	bl	800396c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <prvAddNewTaskToReadyList+0xb8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <prvAddNewTaskToReadyList+0xb8>)
 8003d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <prvAddNewTaskToReadyList+0xbc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <prvAddNewTaskToReadyList+0xbc>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <prvAddNewTaskToReadyList+0xb8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d110      	bne.n	8003dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d9c:	f000 fac8 	bl	8004330 <prvInitialiseTaskLists>
 8003da0:	e00d      	b.n	8003dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <prvAddNewTaskToReadyList+0xc0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <prvAddNewTaskToReadyList+0xbc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d802      	bhi.n	8003dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <prvAddNewTaskToReadyList+0xbc>)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <prvAddNewTaskToReadyList+0xc4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a1b      	ldr	r2, [pc, #108]	; (8003e34 <prvAddNewTaskToReadyList+0xc4>)
 8003dc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	2201      	movs	r2, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <prvAddNewTaskToReadyList+0xc8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <prvAddNewTaskToReadyList+0xc8>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <prvAddNewTaskToReadyList+0xcc>)
 8003de8:	441a      	add	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f7ff fc10 	bl	8003616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003df6:	f7ff fde7 	bl	80039c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <prvAddNewTaskToReadyList+0xc0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <prvAddNewTaskToReadyList+0xbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d207      	bcs.n	8003e20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <prvAddNewTaskToReadyList+0xd0>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20001b78 	.word	0x20001b78
 8003e2c:	20001a78 	.word	0x20001a78
 8003e30:	20001b84 	.word	0x20001b84
 8003e34:	20001b94 	.word	0x20001b94
 8003e38:	20001b80 	.word	0x20001b80
 8003e3c:	20001a7c 	.word	0x20001a7c
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <vTaskDelay+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <vTaskDelay+0x2e>
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	e7fe      	b.n	8003e70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e72:	f000 f879 	bl	8003f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e76:	2100      	movs	r1, #0
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fb13 	bl	80044a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e7e:	f000 f881 	bl	8003f84 <xTaskResumeAll>
 8003e82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d107      	bne.n	8003e9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e8a:	4b07      	ldr	r3, [pc, #28]	; (8003ea8 <vTaskDelay+0x64>)
 8003e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20001ba0 	.word	0x20001ba0
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eba:	463a      	mov	r2, r7
 8003ebc:	1d39      	adds	r1, r7, #4
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc fb54 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	9202      	str	r2, [sp, #8]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	460a      	mov	r2, r1
 8003eda:	491d      	ldr	r1, [pc, #116]	; (8003f50 <vTaskStartScheduler+0xa4>)
 8003edc:	481d      	ldr	r0, [pc, #116]	; (8003f54 <vTaskStartScheduler+0xa8>)
 8003ede:	f7ff fe21 	bl	8003b24 <xTaskCreateStatic>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <vTaskStartScheduler+0xac>)
 8003ee6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <vTaskStartScheduler+0xac>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	e001      	b.n	8003efa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d115      	bne.n	8003f2c <vTaskStartScheduler+0x80>
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <vTaskStartScheduler+0xb0>)
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <vTaskStartScheduler+0xb4>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <vTaskStartScheduler+0xb8>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f26:	f7ff fc83 	bl	8003830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f2a:	e00d      	b.n	8003f48 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d109      	bne.n	8003f48 <vTaskStartScheduler+0x9c>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e7fe      	b.n	8003f46 <vTaskStartScheduler+0x9a>
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	0800545c 	.word	0x0800545c
 8003f54:	08004301 	.word	0x08004301
 8003f58:	20001b9c 	.word	0x20001b9c
 8003f5c:	20001b98 	.word	0x20001b98
 8003f60:	20001b84 	.word	0x20001b84
 8003f64:	20001b7c 	.word	0x20001b7c

08003f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <vTaskSuspendAll+0x18>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a03      	ldr	r2, [pc, #12]	; (8003f80 <vTaskSuspendAll+0x18>)
 8003f74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20001ba0 	.word	0x20001ba0

08003f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <xTaskResumeAll+0x114>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <xTaskResumeAll+0x2a>
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	e7fe      	b.n	8003fac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fae:	f7ff fcdd 	bl	800396c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <xTaskResumeAll+0x114>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	4a37      	ldr	r2, [pc, #220]	; (8004098 <xTaskResumeAll+0x114>)
 8003fba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fbc:	4b36      	ldr	r3, [pc, #216]	; (8004098 <xTaskResumeAll+0x114>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d161      	bne.n	8004088 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <xTaskResumeAll+0x118>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05d      	beq.n	8004088 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fcc:	e02e      	b.n	800402c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <xTaskResumeAll+0x11c>)
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3318      	adds	r3, #24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fb78 	bl	80036d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fb73 	bl	80036d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	2201      	movs	r2, #1
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <xTaskResumeAll+0x120>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <xTaskResumeAll+0x120>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <xTaskResumeAll+0x124>)
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7ff faff 	bl	8003616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4b23      	ldr	r3, [pc, #140]	; (80040ac <xTaskResumeAll+0x128>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004026:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <xTaskResumeAll+0x12c>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <xTaskResumeAll+0x11c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1cc      	bne.n	8003fce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800403a:	f000 fa13 	bl	8004464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <xTaskResumeAll+0x130>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d010      	beq.n	800406c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800404a:	f000 f847 	bl	80040dc <xTaskIncrementTick>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <xTaskResumeAll+0x12c>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3b01      	subs	r3, #1
 800405e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f1      	bne.n	800404a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <xTaskResumeAll+0x130>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <xTaskResumeAll+0x12c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004074:	2301      	movs	r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <xTaskResumeAll+0x134>)
 800407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004088:	f7ff fc9e 	bl	80039c8 <vPortExitCritical>

	return xAlreadyYielded;
 800408c:	68bb      	ldr	r3, [r7, #8]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20001ba0 	.word	0x20001ba0
 800409c:	20001b78 	.word	0x20001b78
 80040a0:	20001b38 	.word	0x20001b38
 80040a4:	20001b80 	.word	0x20001b80
 80040a8:	20001a7c 	.word	0x20001a7c
 80040ac:	20001a78 	.word	0x20001a78
 80040b0:	20001b8c 	.word	0x20001b8c
 80040b4:	20001b88 	.word	0x20001b88
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <xTaskGetTickCount+0x1c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040c8:	687b      	ldr	r3, [r7, #4]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20001b7c 	.word	0x20001b7c

080040dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e6:	4b4e      	ldr	r3, [pc, #312]	; (8004220 <xTaskIncrementTick+0x144>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 8087 	bne.w	80041fe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040f0:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <xTaskIncrementTick+0x148>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040f8:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <xTaskIncrementTick+0x148>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11f      	bne.n	8004144 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <xTaskIncrementTick+0x14c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <xTaskIncrementTick+0x46>
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	e7fe      	b.n	8004120 <xTaskIncrementTick+0x44>
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <xTaskIncrementTick+0x14c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	4b40      	ldr	r3, [pc, #256]	; (800422c <xTaskIncrementTick+0x150>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <xTaskIncrementTick+0x14c>)
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4a3e      	ldr	r2, [pc, #248]	; (800422c <xTaskIncrementTick+0x150>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <xTaskIncrementTick+0x154>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <xTaskIncrementTick+0x154>)
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	f000 f990 	bl	8004464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <xTaskIncrementTick+0x158>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	429a      	cmp	r2, r3
 800414c:	d348      	bcc.n	80041e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414e:	4b36      	ldr	r3, [pc, #216]	; (8004228 <xTaskIncrementTick+0x14c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004158:	4b36      	ldr	r3, [pc, #216]	; (8004234 <xTaskIncrementTick+0x158>)
 800415a:	f04f 32ff 	mov.w	r2, #4294967295
 800415e:	601a      	str	r2, [r3, #0]
					break;
 8004160:	e03e      	b.n	80041e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <xTaskIncrementTick+0x14c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d203      	bcs.n	8004182 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800417a:	4a2e      	ldr	r2, [pc, #184]	; (8004234 <xTaskIncrementTick+0x158>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004180:	e02e      	b.n	80041e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	3304      	adds	r3, #4
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff faa2 	bl	80036d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3318      	adds	r3, #24
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fa99 	bl	80036d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	2201      	movs	r2, #1
 80041a4:	409a      	lsls	r2, r3
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <xTaskIncrementTick+0x15c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4a22      	ldr	r2, [pc, #136]	; (8004238 <xTaskIncrementTick+0x15c>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a1f      	ldr	r2, [pc, #124]	; (800423c <xTaskIncrementTick+0x160>)
 80041be:	441a      	add	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fa25 	bl	8003616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <xTaskIncrementTick+0x164>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3b9      	bcc.n	800414e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041de:	e7b6      	b.n	800414e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <xTaskIncrementTick+0x164>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e6:	4915      	ldr	r1, [pc, #84]	; (800423c <xTaskIncrementTick+0x160>)
 80041e8:	4613      	mov	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d907      	bls.n	8004208 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	e004      	b.n	8004208 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <xTaskIncrementTick+0x168>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <xTaskIncrementTick+0x168>)
 8004206:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <xTaskIncrementTick+0x16c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004214:	697b      	ldr	r3, [r7, #20]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20001ba0 	.word	0x20001ba0
 8004224:	20001b7c 	.word	0x20001b7c
 8004228:	20001b30 	.word	0x20001b30
 800422c:	20001b34 	.word	0x20001b34
 8004230:	20001b90 	.word	0x20001b90
 8004234:	20001b98 	.word	0x20001b98
 8004238:	20001b80 	.word	0x20001b80
 800423c:	20001a7c 	.word	0x20001a7c
 8004240:	20001a78 	.word	0x20001a78
 8004244:	20001b88 	.word	0x20001b88
 8004248:	20001b8c 	.word	0x20001b8c

0800424c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <vTaskSwitchContext+0xa0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800425a:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <vTaskSwitchContext+0xa4>)
 800425c:	2201      	movs	r2, #1
 800425e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004260:	e03e      	b.n	80042e0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004262:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <vTaskSwitchContext+0xa4>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <vTaskSwitchContext+0xa8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	fab3 f383 	clz	r3, r3
 8004274:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004276:	7afb      	ldrb	r3, [r7, #11]
 8004278:	f1c3 031f 	rsb	r3, r3, #31
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	491e      	ldr	r1, [pc, #120]	; (80042f8 <vTaskSwitchContext+0xac>)
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e7fe      	b.n	80042a4 <vTaskSwitchContext+0x58>
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <vTaskSwitchContext+0xac>)
 80042b2:	4413      	add	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	3308      	adds	r3, #8
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d104      	bne.n	80042d6 <vTaskSwitchContext+0x8a>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a07      	ldr	r2, [pc, #28]	; (80042fc <vTaskSwitchContext+0xb0>)
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	20001ba0 	.word	0x20001ba0
 80042f0:	20001b8c 	.word	0x20001b8c
 80042f4:	20001b80 	.word	0x20001b80
 80042f8:	20001a7c 	.word	0x20001a7c
 80042fc:	20001a78 	.word	0x20001a78

08004300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004308:	f000 f852 	bl	80043b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <prvIdleTask+0x28>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d9f9      	bls.n	8004308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <prvIdleTask+0x2c>)
 8004316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004324:	e7f0      	b.n	8004308 <prvIdleTask+0x8>
 8004326:	bf00      	nop
 8004328:	20001a7c 	.word	0x20001a7c
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004336:	2300      	movs	r3, #0
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	e00c      	b.n	8004356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <prvInitialiseTaskLists+0x60>)
 8004348:	4413      	add	r3, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f936 	bl	80035bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3301      	adds	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b06      	cmp	r3, #6
 800435a:	d9ef      	bls.n	800433c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <prvInitialiseTaskLists+0x64>)
 800435e:	f7ff f92d 	bl	80035bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004362:	480d      	ldr	r0, [pc, #52]	; (8004398 <prvInitialiseTaskLists+0x68>)
 8004364:	f7ff f92a 	bl	80035bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004368:	480c      	ldr	r0, [pc, #48]	; (800439c <prvInitialiseTaskLists+0x6c>)
 800436a:	f7ff f927 	bl	80035bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800436e:	480c      	ldr	r0, [pc, #48]	; (80043a0 <prvInitialiseTaskLists+0x70>)
 8004370:	f7ff f924 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004374:	480b      	ldr	r0, [pc, #44]	; (80043a4 <prvInitialiseTaskLists+0x74>)
 8004376:	f7ff f921 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <prvInitialiseTaskLists+0x78>)
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <prvInitialiseTaskLists+0x64>)
 800437e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004380:	4b0a      	ldr	r3, [pc, #40]	; (80043ac <prvInitialiseTaskLists+0x7c>)
 8004382:	4a05      	ldr	r2, [pc, #20]	; (8004398 <prvInitialiseTaskLists+0x68>)
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20001a7c 	.word	0x20001a7c
 8004394:	20001b08 	.word	0x20001b08
 8004398:	20001b1c 	.word	0x20001b1c
 800439c:	20001b38 	.word	0x20001b38
 80043a0:	20001b4c 	.word	0x20001b4c
 80043a4:	20001b64 	.word	0x20001b64
 80043a8:	20001b30 	.word	0x20001b30
 80043ac:	20001b34 	.word	0x20001b34

080043b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b6:	e019      	b.n	80043ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b8:	f7ff fad8 	bl	800396c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <prvCheckTasksWaitingTermination+0x4c>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff f981 	bl	80036d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <prvCheckTasksWaitingTermination+0x50>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <prvCheckTasksWaitingTermination+0x50>)
 80043d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <prvCheckTasksWaitingTermination+0x54>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <prvCheckTasksWaitingTermination+0x54>)
 80043e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043e2:	f7ff faf1 	bl	80039c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f80e 	bl	8004408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <prvCheckTasksWaitingTermination+0x54>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e1      	bne.n	80043b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20001b4c 	.word	0x20001b4c
 8004400:	20001b78 	.word	0x20001b78
 8004404:	20001b60 	.word	0x20001b60

08004408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe ffb8 	bl	8003394 <vPortFree>
				vPortFree( pxTCB );
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7fe ffb5 	bl	8003394 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800442a:	e017      	b.n	800445c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004432:	2b01      	cmp	r3, #1
 8004434:	d103      	bne.n	800443e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe ffac 	bl	8003394 <vPortFree>
	}
 800443c:	e00e      	b.n	800445c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004444:	2b02      	cmp	r3, #2
 8004446:	d009      	beq.n	800445c <prvDeleteTCB+0x54>
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e7fe      	b.n	800445a <prvDeleteTCB+0x52>
	}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <prvResetNextTaskUnblockTime+0x38>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800447c:	e008      	b.n	8004490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <prvResetNextTaskUnblockTime+0x38>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <prvResetNextTaskUnblockTime+0x3c>)
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	20001b30 	.word	0x20001b30
 80044a0:	20001b98 	.word	0x20001b98

080044a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <prvAddCurrentTaskToDelayedList+0xb0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff f908 	bl	80036d0 <uxListRemove>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	2201      	movs	r2, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43da      	mvns	r2, r3
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4013      	ands	r3, r2
 80044da:	4a20      	ldr	r2, [pc, #128]	; (800455c <prvAddCurrentTaskToDelayedList+0xb8>)
 80044dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d10a      	bne.n	80044fc <prvAddCurrentTaskToDelayedList+0x58>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3304      	adds	r3, #4
 80044f2:	4619      	mov	r1, r3
 80044f4:	481a      	ldr	r0, [pc, #104]	; (8004560 <prvAddCurrentTaskToDelayedList+0xbc>)
 80044f6:	f7ff f88e 	bl	8003616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044fa:	e026      	b.n	800454a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	429a      	cmp	r2, r3
 8004512:	d209      	bcs.n	8004528 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7ff f89c 	bl	800365e <vListInsert>
}
 8004526:	e010      	b.n	800454a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <prvAddCurrentTaskToDelayedList+0xc4>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <prvAddCurrentTaskToDelayedList+0xb4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3304      	adds	r3, #4
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7ff f892 	bl	800365e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <prvAddCurrentTaskToDelayedList+0xc8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	429a      	cmp	r2, r3
 8004542:	d202      	bcs.n	800454a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004544:	4a09      	ldr	r2, [pc, #36]	; (800456c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6013      	str	r3, [r2, #0]
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20001b7c 	.word	0x20001b7c
 8004558:	20001a78 	.word	0x20001a78
 800455c:	20001b80 	.word	0x20001b80
 8004560:	20001b64 	.word	0x20001b64
 8004564:	20001b34 	.word	0x20001b34
 8004568:	20001b30 	.word	0x20001b30
 800456c:	20001b98 	.word	0x20001b98

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000010 	.word	0x20000010

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4e0d      	ldr	r6, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1ba4      	subs	r4, r4, r6
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2500      	movs	r5, #0
 8004588:	42a5      	cmp	r5, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4e0b      	ldr	r6, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 ff04 	bl	800539c <_init>
 8004594:	1ba4      	subs	r4, r4, r6
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2500      	movs	r5, #0
 800459a:	42a5      	cmp	r5, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045a4:	4798      	blx	r3
 80045a6:	3501      	adds	r5, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045ae:	4798      	blx	r3
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	0800554c 	.word	0x0800554c
 80045b8:	0800554c 	.word	0x0800554c
 80045bc:	0800554c 	.word	0x0800554c
 80045c0:	08005550 	.word	0x08005550

080045c4 <memset>:
 80045c4:	4402      	add	r2, r0
 80045c6:	4603      	mov	r3, r0
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d100      	bne.n	80045ce <memset+0xa>
 80045cc:	4770      	bx	lr
 80045ce:	f803 1b01 	strb.w	r1, [r3], #1
 80045d2:	e7f9      	b.n	80045c8 <memset+0x4>

080045d4 <iprintf>:
 80045d4:	b40f      	push	{r0, r1, r2, r3}
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <iprintf+0x2c>)
 80045d8:	b513      	push	{r0, r1, r4, lr}
 80045da:	681c      	ldr	r4, [r3, #0]
 80045dc:	b124      	cbz	r4, 80045e8 <iprintf+0x14>
 80045de:	69a3      	ldr	r3, [r4, #24]
 80045e0:	b913      	cbnz	r3, 80045e8 <iprintf+0x14>
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 f84e 	bl	8004684 <__sinit>
 80045e8:	ab05      	add	r3, sp, #20
 80045ea:	9a04      	ldr	r2, [sp, #16]
 80045ec:	68a1      	ldr	r1, [r4, #8]
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f955 	bl	80048a0 <_vfiprintf_r>
 80045f6:	b002      	add	sp, #8
 80045f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045fc:	b004      	add	sp, #16
 80045fe:	4770      	bx	lr
 8004600:	20000010 	.word	0x20000010

08004604 <std>:
 8004604:	2300      	movs	r3, #0
 8004606:	b510      	push	{r4, lr}
 8004608:	4604      	mov	r4, r0
 800460a:	e9c0 3300 	strd	r3, r3, [r0]
 800460e:	6083      	str	r3, [r0, #8]
 8004610:	8181      	strh	r1, [r0, #12]
 8004612:	6643      	str	r3, [r0, #100]	; 0x64
 8004614:	81c2      	strh	r2, [r0, #14]
 8004616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800461a:	6183      	str	r3, [r0, #24]
 800461c:	4619      	mov	r1, r3
 800461e:	2208      	movs	r2, #8
 8004620:	305c      	adds	r0, #92	; 0x5c
 8004622:	f7ff ffcf 	bl	80045c4 <memset>
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <std+0x38>)
 8004628:	6263      	str	r3, [r4, #36]	; 0x24
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <std+0x3c>)
 800462c:	62a3      	str	r3, [r4, #40]	; 0x28
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <std+0x40>)
 8004630:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <std+0x44>)
 8004634:	6224      	str	r4, [r4, #32]
 8004636:	6323      	str	r3, [r4, #48]	; 0x30
 8004638:	bd10      	pop	{r4, pc}
 800463a:	bf00      	nop
 800463c:	08004dfd 	.word	0x08004dfd
 8004640:	08004e1f 	.word	0x08004e1f
 8004644:	08004e57 	.word	0x08004e57
 8004648:	08004e7b 	.word	0x08004e7b

0800464c <_cleanup_r>:
 800464c:	4901      	ldr	r1, [pc, #4]	; (8004654 <_cleanup_r+0x8>)
 800464e:	f000 b885 	b.w	800475c <_fwalk_reent>
 8004652:	bf00      	nop
 8004654:	08005155 	.word	0x08005155

08004658 <__sfmoreglue>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	1e4a      	subs	r2, r1, #1
 800465c:	2568      	movs	r5, #104	; 0x68
 800465e:	4355      	muls	r5, r2
 8004660:	460e      	mov	r6, r1
 8004662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004666:	f000 f897 	bl	8004798 <_malloc_r>
 800466a:	4604      	mov	r4, r0
 800466c:	b140      	cbz	r0, 8004680 <__sfmoreglue+0x28>
 800466e:	2100      	movs	r1, #0
 8004670:	e9c0 1600 	strd	r1, r6, [r0]
 8004674:	300c      	adds	r0, #12
 8004676:	60a0      	str	r0, [r4, #8]
 8004678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800467c:	f7ff ffa2 	bl	80045c4 <memset>
 8004680:	4620      	mov	r0, r4
 8004682:	bd70      	pop	{r4, r5, r6, pc}

08004684 <__sinit>:
 8004684:	6983      	ldr	r3, [r0, #24]
 8004686:	b510      	push	{r4, lr}
 8004688:	4604      	mov	r4, r0
 800468a:	bb33      	cbnz	r3, 80046da <__sinit+0x56>
 800468c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004690:	6503      	str	r3, [r0, #80]	; 0x50
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <__sinit+0x58>)
 8004694:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <__sinit+0x5c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6282      	str	r2, [r0, #40]	; 0x28
 800469a:	4298      	cmp	r0, r3
 800469c:	bf04      	itt	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	6183      	streq	r3, [r0, #24]
 80046a2:	f000 f81f 	bl	80046e4 <__sfp>
 80046a6:	6060      	str	r0, [r4, #4]
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 f81b 	bl	80046e4 <__sfp>
 80046ae:	60a0      	str	r0, [r4, #8]
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 f817 	bl	80046e4 <__sfp>
 80046b6:	2200      	movs	r2, #0
 80046b8:	60e0      	str	r0, [r4, #12]
 80046ba:	2104      	movs	r1, #4
 80046bc:	6860      	ldr	r0, [r4, #4]
 80046be:	f7ff ffa1 	bl	8004604 <std>
 80046c2:	2201      	movs	r2, #1
 80046c4:	2109      	movs	r1, #9
 80046c6:	68a0      	ldr	r0, [r4, #8]
 80046c8:	f7ff ff9c 	bl	8004604 <std>
 80046cc:	2202      	movs	r2, #2
 80046ce:	2112      	movs	r1, #18
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	f7ff ff97 	bl	8004604 <std>
 80046d6:	2301      	movs	r3, #1
 80046d8:	61a3      	str	r3, [r4, #24]
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	080054ac 	.word	0x080054ac
 80046e0:	0800464d 	.word	0x0800464d

080046e4 <__sfp>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <__sfp+0x70>)
 80046e8:	681e      	ldr	r6, [r3, #0]
 80046ea:	69b3      	ldr	r3, [r6, #24]
 80046ec:	4607      	mov	r7, r0
 80046ee:	b913      	cbnz	r3, 80046f6 <__sfp+0x12>
 80046f0:	4630      	mov	r0, r6
 80046f2:	f7ff ffc7 	bl	8004684 <__sinit>
 80046f6:	3648      	adds	r6, #72	; 0x48
 80046f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	d503      	bpl.n	8004708 <__sfp+0x24>
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	b133      	cbz	r3, 8004712 <__sfp+0x2e>
 8004704:	6836      	ldr	r6, [r6, #0]
 8004706:	e7f7      	b.n	80046f8 <__sfp+0x14>
 8004708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800470c:	b16d      	cbz	r5, 800472a <__sfp+0x46>
 800470e:	3468      	adds	r4, #104	; 0x68
 8004710:	e7f4      	b.n	80046fc <__sfp+0x18>
 8004712:	2104      	movs	r1, #4
 8004714:	4638      	mov	r0, r7
 8004716:	f7ff ff9f 	bl	8004658 <__sfmoreglue>
 800471a:	6030      	str	r0, [r6, #0]
 800471c:	2800      	cmp	r0, #0
 800471e:	d1f1      	bne.n	8004704 <__sfp+0x20>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4604      	mov	r4, r0
 8004726:	4620      	mov	r0, r4
 8004728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800472a:	4b0b      	ldr	r3, [pc, #44]	; (8004758 <__sfp+0x74>)
 800472c:	6665      	str	r5, [r4, #100]	; 0x64
 800472e:	e9c4 5500 	strd	r5, r5, [r4]
 8004732:	60a5      	str	r5, [r4, #8]
 8004734:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004738:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800473c:	2208      	movs	r2, #8
 800473e:	4629      	mov	r1, r5
 8004740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004744:	f7ff ff3e 	bl	80045c4 <memset>
 8004748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800474c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004750:	e7e9      	b.n	8004726 <__sfp+0x42>
 8004752:	bf00      	nop
 8004754:	080054ac 	.word	0x080054ac
 8004758:	ffff0001 	.word	0xffff0001

0800475c <_fwalk_reent>:
 800475c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004760:	4680      	mov	r8, r0
 8004762:	4689      	mov	r9, r1
 8004764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004768:	2600      	movs	r6, #0
 800476a:	b914      	cbnz	r4, 8004772 <_fwalk_reent+0x16>
 800476c:	4630      	mov	r0, r6
 800476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004772:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004776:	3f01      	subs	r7, #1
 8004778:	d501      	bpl.n	800477e <_fwalk_reent+0x22>
 800477a:	6824      	ldr	r4, [r4, #0]
 800477c:	e7f5      	b.n	800476a <_fwalk_reent+0xe>
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d907      	bls.n	8004794 <_fwalk_reent+0x38>
 8004784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004788:	3301      	adds	r3, #1
 800478a:	d003      	beq.n	8004794 <_fwalk_reent+0x38>
 800478c:	4629      	mov	r1, r5
 800478e:	4640      	mov	r0, r8
 8004790:	47c8      	blx	r9
 8004792:	4306      	orrs	r6, r0
 8004794:	3568      	adds	r5, #104	; 0x68
 8004796:	e7ee      	b.n	8004776 <_fwalk_reent+0x1a>

08004798 <_malloc_r>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	1ccd      	adds	r5, r1, #3
 800479c:	f025 0503 	bic.w	r5, r5, #3
 80047a0:	3508      	adds	r5, #8
 80047a2:	2d0c      	cmp	r5, #12
 80047a4:	bf38      	it	cc
 80047a6:	250c      	movcc	r5, #12
 80047a8:	2d00      	cmp	r5, #0
 80047aa:	4606      	mov	r6, r0
 80047ac:	db01      	blt.n	80047b2 <_malloc_r+0x1a>
 80047ae:	42a9      	cmp	r1, r5
 80047b0:	d903      	bls.n	80047ba <_malloc_r+0x22>
 80047b2:	230c      	movs	r3, #12
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	2000      	movs	r0, #0
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	f000 fd6b 	bl	8005294 <__malloc_lock>
 80047be:	4a21      	ldr	r2, [pc, #132]	; (8004844 <_malloc_r+0xac>)
 80047c0:	6814      	ldr	r4, [r2, #0]
 80047c2:	4621      	mov	r1, r4
 80047c4:	b991      	cbnz	r1, 80047ec <_malloc_r+0x54>
 80047c6:	4c20      	ldr	r4, [pc, #128]	; (8004848 <_malloc_r+0xb0>)
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	b91b      	cbnz	r3, 80047d4 <_malloc_r+0x3c>
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 fb05 	bl	8004ddc <_sbrk_r>
 80047d2:	6020      	str	r0, [r4, #0]
 80047d4:	4629      	mov	r1, r5
 80047d6:	4630      	mov	r0, r6
 80047d8:	f000 fb00 	bl	8004ddc <_sbrk_r>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d124      	bne.n	800482a <_malloc_r+0x92>
 80047e0:	230c      	movs	r3, #12
 80047e2:	6033      	str	r3, [r6, #0]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fd56 	bl	8005296 <__malloc_unlock>
 80047ea:	e7e4      	b.n	80047b6 <_malloc_r+0x1e>
 80047ec:	680b      	ldr	r3, [r1, #0]
 80047ee:	1b5b      	subs	r3, r3, r5
 80047f0:	d418      	bmi.n	8004824 <_malloc_r+0x8c>
 80047f2:	2b0b      	cmp	r3, #11
 80047f4:	d90f      	bls.n	8004816 <_malloc_r+0x7e>
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	50cd      	str	r5, [r1, r3]
 80047fa:	18cc      	adds	r4, r1, r3
 80047fc:	4630      	mov	r0, r6
 80047fe:	f000 fd4a 	bl	8005296 <__malloc_unlock>
 8004802:	f104 000b 	add.w	r0, r4, #11
 8004806:	1d23      	adds	r3, r4, #4
 8004808:	f020 0007 	bic.w	r0, r0, #7
 800480c:	1ac3      	subs	r3, r0, r3
 800480e:	d0d3      	beq.n	80047b8 <_malloc_r+0x20>
 8004810:	425a      	negs	r2, r3
 8004812:	50e2      	str	r2, [r4, r3]
 8004814:	e7d0      	b.n	80047b8 <_malloc_r+0x20>
 8004816:	428c      	cmp	r4, r1
 8004818:	684b      	ldr	r3, [r1, #4]
 800481a:	bf16      	itet	ne
 800481c:	6063      	strne	r3, [r4, #4]
 800481e:	6013      	streq	r3, [r2, #0]
 8004820:	460c      	movne	r4, r1
 8004822:	e7eb      	b.n	80047fc <_malloc_r+0x64>
 8004824:	460c      	mov	r4, r1
 8004826:	6849      	ldr	r1, [r1, #4]
 8004828:	e7cc      	b.n	80047c4 <_malloc_r+0x2c>
 800482a:	1cc4      	adds	r4, r0, #3
 800482c:	f024 0403 	bic.w	r4, r4, #3
 8004830:	42a0      	cmp	r0, r4
 8004832:	d005      	beq.n	8004840 <_malloc_r+0xa8>
 8004834:	1a21      	subs	r1, r4, r0
 8004836:	4630      	mov	r0, r6
 8004838:	f000 fad0 	bl	8004ddc <_sbrk_r>
 800483c:	3001      	adds	r0, #1
 800483e:	d0cf      	beq.n	80047e0 <_malloc_r+0x48>
 8004840:	6025      	str	r5, [r4, #0]
 8004842:	e7db      	b.n	80047fc <_malloc_r+0x64>
 8004844:	20001ba4 	.word	0x20001ba4
 8004848:	20001ba8 	.word	0x20001ba8

0800484c <__sfputc_r>:
 800484c:	6893      	ldr	r3, [r2, #8]
 800484e:	3b01      	subs	r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	b410      	push	{r4}
 8004854:	6093      	str	r3, [r2, #8]
 8004856:	da08      	bge.n	800486a <__sfputc_r+0x1e>
 8004858:	6994      	ldr	r4, [r2, #24]
 800485a:	42a3      	cmp	r3, r4
 800485c:	db01      	blt.n	8004862 <__sfputc_r+0x16>
 800485e:	290a      	cmp	r1, #10
 8004860:	d103      	bne.n	800486a <__sfputc_r+0x1e>
 8004862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004866:	f000 bb0d 	b.w	8004e84 <__swbuf_r>
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	1c58      	adds	r0, r3, #1
 800486e:	6010      	str	r0, [r2, #0]
 8004870:	7019      	strb	r1, [r3, #0]
 8004872:	4608      	mov	r0, r1
 8004874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004878:	4770      	bx	lr

0800487a <__sfputs_r>:
 800487a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	4614      	mov	r4, r2
 8004882:	18d5      	adds	r5, r2, r3
 8004884:	42ac      	cmp	r4, r5
 8004886:	d101      	bne.n	800488c <__sfputs_r+0x12>
 8004888:	2000      	movs	r0, #0
 800488a:	e007      	b.n	800489c <__sfputs_r+0x22>
 800488c:	463a      	mov	r2, r7
 800488e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff ffda 	bl	800484c <__sfputc_r>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d1f3      	bne.n	8004884 <__sfputs_r+0xa>
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048a0 <_vfiprintf_r>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	460c      	mov	r4, r1
 80048a6:	b09d      	sub	sp, #116	; 0x74
 80048a8:	4617      	mov	r7, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	4606      	mov	r6, r0
 80048ae:	b118      	cbz	r0, 80048b8 <_vfiprintf_r+0x18>
 80048b0:	6983      	ldr	r3, [r0, #24]
 80048b2:	b90b      	cbnz	r3, 80048b8 <_vfiprintf_r+0x18>
 80048b4:	f7ff fee6 	bl	8004684 <__sinit>
 80048b8:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <_vfiprintf_r+0x20c>)
 80048ba:	429c      	cmp	r4, r3
 80048bc:	d158      	bne.n	8004970 <_vfiprintf_r+0xd0>
 80048be:	6874      	ldr	r4, [r6, #4]
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	0718      	lsls	r0, r3, #28
 80048c4:	d55e      	bpl.n	8004984 <_vfiprintf_r+0xe4>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <_vfiprintf_r+0xe4>
 80048cc:	2300      	movs	r3, #0
 80048ce:	9309      	str	r3, [sp, #36]	; 0x24
 80048d0:	2320      	movs	r3, #32
 80048d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d6:	2330      	movs	r3, #48	; 0x30
 80048d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048dc:	9503      	str	r5, [sp, #12]
 80048de:	f04f 0b01 	mov.w	fp, #1
 80048e2:	46b8      	mov	r8, r7
 80048e4:	4645      	mov	r5, r8
 80048e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048ea:	b10b      	cbz	r3, 80048f0 <_vfiprintf_r+0x50>
 80048ec:	2b25      	cmp	r3, #37	; 0x25
 80048ee:	d154      	bne.n	800499a <_vfiprintf_r+0xfa>
 80048f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80048f4:	d00b      	beq.n	800490e <_vfiprintf_r+0x6e>
 80048f6:	4653      	mov	r3, sl
 80048f8:	463a      	mov	r2, r7
 80048fa:	4621      	mov	r1, r4
 80048fc:	4630      	mov	r0, r6
 80048fe:	f7ff ffbc 	bl	800487a <__sfputs_r>
 8004902:	3001      	adds	r0, #1
 8004904:	f000 80c2 	beq.w	8004a8c <_vfiprintf_r+0x1ec>
 8004908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490a:	4453      	add	r3, sl
 800490c:	9309      	str	r3, [sp, #36]	; 0x24
 800490e:	f898 3000 	ldrb.w	r3, [r8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80ba 	beq.w	8004a8c <_vfiprintf_r+0x1ec>
 8004918:	2300      	movs	r3, #0
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	9307      	str	r3, [sp, #28]
 8004926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492a:	931a      	str	r3, [sp, #104]	; 0x68
 800492c:	46a8      	mov	r8, r5
 800492e:	2205      	movs	r2, #5
 8004930:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004934:	485e      	ldr	r0, [pc, #376]	; (8004ab0 <_vfiprintf_r+0x210>)
 8004936:	f7fb fc4b 	bl	80001d0 <memchr>
 800493a:	9b04      	ldr	r3, [sp, #16]
 800493c:	bb78      	cbnz	r0, 800499e <_vfiprintf_r+0xfe>
 800493e:	06d9      	lsls	r1, r3, #27
 8004940:	bf44      	itt	mi
 8004942:	2220      	movmi	r2, #32
 8004944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004948:	071a      	lsls	r2, r3, #28
 800494a:	bf44      	itt	mi
 800494c:	222b      	movmi	r2, #43	; 0x2b
 800494e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004952:	782a      	ldrb	r2, [r5, #0]
 8004954:	2a2a      	cmp	r2, #42	; 0x2a
 8004956:	d02a      	beq.n	80049ae <_vfiprintf_r+0x10e>
 8004958:	9a07      	ldr	r2, [sp, #28]
 800495a:	46a8      	mov	r8, r5
 800495c:	2000      	movs	r0, #0
 800495e:	250a      	movs	r5, #10
 8004960:	4641      	mov	r1, r8
 8004962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004966:	3b30      	subs	r3, #48	; 0x30
 8004968:	2b09      	cmp	r3, #9
 800496a:	d969      	bls.n	8004a40 <_vfiprintf_r+0x1a0>
 800496c:	b360      	cbz	r0, 80049c8 <_vfiprintf_r+0x128>
 800496e:	e024      	b.n	80049ba <_vfiprintf_r+0x11a>
 8004970:	4b50      	ldr	r3, [pc, #320]	; (8004ab4 <_vfiprintf_r+0x214>)
 8004972:	429c      	cmp	r4, r3
 8004974:	d101      	bne.n	800497a <_vfiprintf_r+0xda>
 8004976:	68b4      	ldr	r4, [r6, #8]
 8004978:	e7a2      	b.n	80048c0 <_vfiprintf_r+0x20>
 800497a:	4b4f      	ldr	r3, [pc, #316]	; (8004ab8 <_vfiprintf_r+0x218>)
 800497c:	429c      	cmp	r4, r3
 800497e:	bf08      	it	eq
 8004980:	68f4      	ldreq	r4, [r6, #12]
 8004982:	e79d      	b.n	80048c0 <_vfiprintf_r+0x20>
 8004984:	4621      	mov	r1, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f000 fae0 	bl	8004f4c <__swsetup_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d09d      	beq.n	80048cc <_vfiprintf_r+0x2c>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	b01d      	add	sp, #116	; 0x74
 8004996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499a:	46a8      	mov	r8, r5
 800499c:	e7a2      	b.n	80048e4 <_vfiprintf_r+0x44>
 800499e:	4a44      	ldr	r2, [pc, #272]	; (8004ab0 <_vfiprintf_r+0x210>)
 80049a0:	1a80      	subs	r0, r0, r2
 80049a2:	fa0b f000 	lsl.w	r0, fp, r0
 80049a6:	4318      	orrs	r0, r3
 80049a8:	9004      	str	r0, [sp, #16]
 80049aa:	4645      	mov	r5, r8
 80049ac:	e7be      	b.n	800492c <_vfiprintf_r+0x8c>
 80049ae:	9a03      	ldr	r2, [sp, #12]
 80049b0:	1d11      	adds	r1, r2, #4
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	db01      	blt.n	80049be <_vfiprintf_r+0x11e>
 80049ba:	9207      	str	r2, [sp, #28]
 80049bc:	e004      	b.n	80049c8 <_vfiprintf_r+0x128>
 80049be:	4252      	negs	r2, r2
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	9207      	str	r2, [sp, #28]
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	f898 3000 	ldrb.w	r3, [r8]
 80049cc:	2b2e      	cmp	r3, #46	; 0x2e
 80049ce:	d10e      	bne.n	80049ee <_vfiprintf_r+0x14e>
 80049d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80049d4:	2b2a      	cmp	r3, #42	; 0x2a
 80049d6:	d138      	bne.n	8004a4a <_vfiprintf_r+0x1aa>
 80049d8:	9b03      	ldr	r3, [sp, #12]
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	9203      	str	r2, [sp, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bfb8      	it	lt
 80049e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e8:	f108 0802 	add.w	r8, r8, #2
 80049ec:	9305      	str	r3, [sp, #20]
 80049ee:	4d33      	ldr	r5, [pc, #204]	; (8004abc <_vfiprintf_r+0x21c>)
 80049f0:	f898 1000 	ldrb.w	r1, [r8]
 80049f4:	2203      	movs	r2, #3
 80049f6:	4628      	mov	r0, r5
 80049f8:	f7fb fbea 	bl	80001d0 <memchr>
 80049fc:	b140      	cbz	r0, 8004a10 <_vfiprintf_r+0x170>
 80049fe:	2340      	movs	r3, #64	; 0x40
 8004a00:	1b40      	subs	r0, r0, r5
 8004a02:	fa03 f000 	lsl.w	r0, r3, r0
 8004a06:	9b04      	ldr	r3, [sp, #16]
 8004a08:	4303      	orrs	r3, r0
 8004a0a:	f108 0801 	add.w	r8, r8, #1
 8004a0e:	9304      	str	r3, [sp, #16]
 8004a10:	f898 1000 	ldrb.w	r1, [r8]
 8004a14:	482a      	ldr	r0, [pc, #168]	; (8004ac0 <_vfiprintf_r+0x220>)
 8004a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a1a:	2206      	movs	r2, #6
 8004a1c:	f108 0701 	add.w	r7, r8, #1
 8004a20:	f7fb fbd6 	bl	80001d0 <memchr>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d037      	beq.n	8004a98 <_vfiprintf_r+0x1f8>
 8004a28:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <_vfiprintf_r+0x224>)
 8004a2a:	bb1b      	cbnz	r3, 8004a74 <_vfiprintf_r+0x1d4>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	3307      	adds	r3, #7
 8004a30:	f023 0307 	bic.w	r3, r3, #7
 8004a34:	3308      	adds	r3, #8
 8004a36:	9303      	str	r3, [sp, #12]
 8004a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3a:	444b      	add	r3, r9
 8004a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3e:	e750      	b.n	80048e2 <_vfiprintf_r+0x42>
 8004a40:	fb05 3202 	mla	r2, r5, r2, r3
 8004a44:	2001      	movs	r0, #1
 8004a46:	4688      	mov	r8, r1
 8004a48:	e78a      	b.n	8004960 <_vfiprintf_r+0xc0>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f108 0801 	add.w	r8, r8, #1
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	4619      	mov	r1, r3
 8004a54:	250a      	movs	r5, #10
 8004a56:	4640      	mov	r0, r8
 8004a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a5c:	3a30      	subs	r2, #48	; 0x30
 8004a5e:	2a09      	cmp	r2, #9
 8004a60:	d903      	bls.n	8004a6a <_vfiprintf_r+0x1ca>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0c3      	beq.n	80049ee <_vfiprintf_r+0x14e>
 8004a66:	9105      	str	r1, [sp, #20]
 8004a68:	e7c1      	b.n	80049ee <_vfiprintf_r+0x14e>
 8004a6a:	fb05 2101 	mla	r1, r5, r1, r2
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4680      	mov	r8, r0
 8004a72:	e7f0      	b.n	8004a56 <_vfiprintf_r+0x1b6>
 8004a74:	ab03      	add	r3, sp, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4622      	mov	r2, r4
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <_vfiprintf_r+0x228>)
 8004a7c:	a904      	add	r1, sp, #16
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f3af 8000 	nop.w
 8004a84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a88:	4681      	mov	r9, r0
 8004a8a:	d1d5      	bne.n	8004a38 <_vfiprintf_r+0x198>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	065b      	lsls	r3, r3, #25
 8004a90:	f53f af7e 	bmi.w	8004990 <_vfiprintf_r+0xf0>
 8004a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a96:	e77d      	b.n	8004994 <_vfiprintf_r+0xf4>
 8004a98:	ab03      	add	r3, sp, #12
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <_vfiprintf_r+0x228>)
 8004aa0:	a904      	add	r1, sp, #16
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f888 	bl	8004bb8 <_printf_i>
 8004aa8:	e7ec      	b.n	8004a84 <_vfiprintf_r+0x1e4>
 8004aaa:	bf00      	nop
 8004aac:	080054d0 	.word	0x080054d0
 8004ab0:	08005510 	.word	0x08005510
 8004ab4:	080054f0 	.word	0x080054f0
 8004ab8:	080054b0 	.word	0x080054b0
 8004abc:	08005516 	.word	0x08005516
 8004ac0:	0800551a 	.word	0x0800551a
 8004ac4:	00000000 	.word	0x00000000
 8004ac8:	0800487b 	.word	0x0800487b

08004acc <_printf_common>:
 8004acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad0:	4691      	mov	r9, r2
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	688a      	ldr	r2, [r1, #8]
 8004ad6:	690b      	ldr	r3, [r1, #16]
 8004ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004adc:	4293      	cmp	r3, r2
 8004ade:	bfb8      	it	lt
 8004ae0:	4613      	movlt	r3, r2
 8004ae2:	f8c9 3000 	str.w	r3, [r9]
 8004ae6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aea:	4606      	mov	r6, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	b112      	cbz	r2, 8004af6 <_printf_common+0x2a>
 8004af0:	3301      	adds	r3, #1
 8004af2:	f8c9 3000 	str.w	r3, [r9]
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	0699      	lsls	r1, r3, #26
 8004afa:	bf42      	ittt	mi
 8004afc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b00:	3302      	addmi	r3, #2
 8004b02:	f8c9 3000 	strmi.w	r3, [r9]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	f015 0506 	ands.w	r5, r5, #6
 8004b0c:	d107      	bne.n	8004b1e <_printf_common+0x52>
 8004b0e:	f104 0a19 	add.w	sl, r4, #25
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	f8d9 2000 	ldr.w	r2, [r9]
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	42ab      	cmp	r3, r5
 8004b1c:	dc28      	bgt.n	8004b70 <_printf_common+0xa4>
 8004b1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	3300      	adds	r3, #0
 8004b26:	bf18      	it	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	0692      	lsls	r2, r2, #26
 8004b2c:	d42d      	bmi.n	8004b8a <_printf_common+0xbe>
 8004b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b32:	4639      	mov	r1, r7
 8004b34:	4630      	mov	r0, r6
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d020      	beq.n	8004b7e <_printf_common+0xb2>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	68e5      	ldr	r5, [r4, #12]
 8004b40:	f8d9 2000 	ldr.w	r2, [r9]
 8004b44:	f003 0306 	and.w	r3, r3, #6
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	bf08      	it	eq
 8004b4c:	1aad      	subeq	r5, r5, r2
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	6922      	ldr	r2, [r4, #16]
 8004b52:	bf0c      	ite	eq
 8004b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b58:	2500      	movne	r5, #0
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	bfc4      	itt	gt
 8004b5e:	1a9b      	subgt	r3, r3, r2
 8004b60:	18ed      	addgt	r5, r5, r3
 8004b62:	f04f 0900 	mov.w	r9, #0
 8004b66:	341a      	adds	r4, #26
 8004b68:	454d      	cmp	r5, r9
 8004b6a:	d11a      	bne.n	8004ba2 <_printf_common+0xd6>
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	e008      	b.n	8004b82 <_printf_common+0xb6>
 8004b70:	2301      	movs	r3, #1
 8004b72:	4652      	mov	r2, sl
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	47c0      	blx	r8
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d103      	bne.n	8004b86 <_printf_common+0xba>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	3501      	adds	r5, #1
 8004b88:	e7c3      	b.n	8004b12 <_printf_common+0x46>
 8004b8a:	18e1      	adds	r1, r4, r3
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	2030      	movs	r0, #48	; 0x30
 8004b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b94:	4422      	add	r2, r4
 8004b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	e7c5      	b.n	8004b2e <_printf_common+0x62>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4630      	mov	r0, r6
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d0e6      	beq.n	8004b7e <_printf_common+0xb2>
 8004bb0:	f109 0901 	add.w	r9, r9, #1
 8004bb4:	e7d8      	b.n	8004b68 <_printf_common+0x9c>
	...

08004bb8 <_printf_i>:
 8004bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	7e09      	ldrb	r1, [r1, #24]
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	296e      	cmp	r1, #110	; 0x6e
 8004bc8:	4617      	mov	r7, r2
 8004bca:	4606      	mov	r6, r0
 8004bcc:	4698      	mov	r8, r3
 8004bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd0:	f000 80b3 	beq.w	8004d3a <_printf_i+0x182>
 8004bd4:	d822      	bhi.n	8004c1c <_printf_i+0x64>
 8004bd6:	2963      	cmp	r1, #99	; 0x63
 8004bd8:	d036      	beq.n	8004c48 <_printf_i+0x90>
 8004bda:	d80a      	bhi.n	8004bf2 <_printf_i+0x3a>
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	f000 80b9 	beq.w	8004d54 <_printf_i+0x19c>
 8004be2:	2958      	cmp	r1, #88	; 0x58
 8004be4:	f000 8083 	beq.w	8004cee <_printf_i+0x136>
 8004be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bf0:	e032      	b.n	8004c58 <_printf_i+0xa0>
 8004bf2:	2964      	cmp	r1, #100	; 0x64
 8004bf4:	d001      	beq.n	8004bfa <_printf_i+0x42>
 8004bf6:	2969      	cmp	r1, #105	; 0x69
 8004bf8:	d1f6      	bne.n	8004be8 <_printf_i+0x30>
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	0605      	lsls	r5, r0, #24
 8004c00:	f103 0104 	add.w	r1, r3, #4
 8004c04:	d52a      	bpl.n	8004c5c <_printf_i+0xa4>
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da03      	bge.n	8004c16 <_printf_i+0x5e>
 8004c0e:	222d      	movs	r2, #45	; 0x2d
 8004c10:	425b      	negs	r3, r3
 8004c12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c16:	486f      	ldr	r0, [pc, #444]	; (8004dd4 <_printf_i+0x21c>)
 8004c18:	220a      	movs	r2, #10
 8004c1a:	e039      	b.n	8004c90 <_printf_i+0xd8>
 8004c1c:	2973      	cmp	r1, #115	; 0x73
 8004c1e:	f000 809d 	beq.w	8004d5c <_printf_i+0x1a4>
 8004c22:	d808      	bhi.n	8004c36 <_printf_i+0x7e>
 8004c24:	296f      	cmp	r1, #111	; 0x6f
 8004c26:	d020      	beq.n	8004c6a <_printf_i+0xb2>
 8004c28:	2970      	cmp	r1, #112	; 0x70
 8004c2a:	d1dd      	bne.n	8004be8 <_printf_i+0x30>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	f043 0320 	orr.w	r3, r3, #32
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	e003      	b.n	8004c3e <_printf_i+0x86>
 8004c36:	2975      	cmp	r1, #117	; 0x75
 8004c38:	d017      	beq.n	8004c6a <_printf_i+0xb2>
 8004c3a:	2978      	cmp	r1, #120	; 0x78
 8004c3c:	d1d4      	bne.n	8004be8 <_printf_i+0x30>
 8004c3e:	2378      	movs	r3, #120	; 0x78
 8004c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c44:	4864      	ldr	r0, [pc, #400]	; (8004dd8 <_printf_i+0x220>)
 8004c46:	e055      	b.n	8004cf4 <_printf_i+0x13c>
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	1d19      	adds	r1, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6011      	str	r1, [r2, #0]
 8004c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e08c      	b.n	8004d76 <_printf_i+0x1be>
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6011      	str	r1, [r2, #0]
 8004c60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c64:	bf18      	it	ne
 8004c66:	b21b      	sxthne	r3, r3
 8004c68:	e7cf      	b.n	8004c0a <_printf_i+0x52>
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	1d18      	adds	r0, r3, #4
 8004c70:	6010      	str	r0, [r2, #0]
 8004c72:	0628      	lsls	r0, r5, #24
 8004c74:	d501      	bpl.n	8004c7a <_printf_i+0xc2>
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	e002      	b.n	8004c80 <_printf_i+0xc8>
 8004c7a:	0668      	lsls	r0, r5, #25
 8004c7c:	d5fb      	bpl.n	8004c76 <_printf_i+0xbe>
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4854      	ldr	r0, [pc, #336]	; (8004dd4 <_printf_i+0x21c>)
 8004c82:	296f      	cmp	r1, #111	; 0x6f
 8004c84:	bf14      	ite	ne
 8004c86:	220a      	movne	r2, #10
 8004c88:	2208      	moveq	r2, #8
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c90:	6865      	ldr	r5, [r4, #4]
 8004c92:	60a5      	str	r5, [r4, #8]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	f2c0 8095 	blt.w	8004dc4 <_printf_i+0x20c>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	f021 0104 	bic.w	r1, r1, #4
 8004ca0:	6021      	str	r1, [r4, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d13d      	bne.n	8004d22 <_printf_i+0x16a>
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	f040 808e 	bne.w	8004dc8 <_printf_i+0x210>
 8004cac:	4665      	mov	r5, ip
 8004cae:	2a08      	cmp	r2, #8
 8004cb0:	d10b      	bne.n	8004cca <_printf_i+0x112>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d508      	bpl.n	8004cca <_printf_i+0x112>
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6862      	ldr	r2, [r4, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	bfde      	ittt	le
 8004cc0:	2330      	movle	r3, #48	; 0x30
 8004cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cca:	ebac 0305 	sub.w	r3, ip, r5
 8004cce:	6123      	str	r3, [r4, #16]
 8004cd0:	f8cd 8000 	str.w	r8, [sp]
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	aa03      	add	r2, sp, #12
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7ff fef6 	bl	8004acc <_printf_common>
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d14d      	bne.n	8004d80 <_printf_i+0x1c8>
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	b005      	add	sp, #20
 8004cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cee:	4839      	ldr	r0, [pc, #228]	; (8004dd4 <_printf_i+0x21c>)
 8004cf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cf4:	6813      	ldr	r3, [r2, #0]
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	1d1d      	adds	r5, r3, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6015      	str	r5, [r2, #0]
 8004cfe:	060a      	lsls	r2, r1, #24
 8004d00:	d50b      	bpl.n	8004d1a <_printf_i+0x162>
 8004d02:	07ca      	lsls	r2, r1, #31
 8004d04:	bf44      	itt	mi
 8004d06:	f041 0120 	orrmi.w	r1, r1, #32
 8004d0a:	6021      	strmi	r1, [r4, #0]
 8004d0c:	b91b      	cbnz	r3, 8004d16 <_printf_i+0x15e>
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	f022 0220 	bic.w	r2, r2, #32
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	2210      	movs	r2, #16
 8004d18:	e7b7      	b.n	8004c8a <_printf_i+0xd2>
 8004d1a:	064d      	lsls	r5, r1, #25
 8004d1c:	bf48      	it	mi
 8004d1e:	b29b      	uxthmi	r3, r3
 8004d20:	e7ef      	b.n	8004d02 <_printf_i+0x14a>
 8004d22:	4665      	mov	r5, ip
 8004d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d28:	fb02 3311 	mls	r3, r2, r1, r3
 8004d2c:	5cc3      	ldrb	r3, [r0, r3]
 8004d2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d32:	460b      	mov	r3, r1
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d1f5      	bne.n	8004d24 <_printf_i+0x16c>
 8004d38:	e7b9      	b.n	8004cae <_printf_i+0xf6>
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	6961      	ldr	r1, [r4, #20]
 8004d40:	1d18      	adds	r0, r3, #4
 8004d42:	6010      	str	r0, [r2, #0]
 8004d44:	0628      	lsls	r0, r5, #24
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	d501      	bpl.n	8004d4e <_printf_i+0x196>
 8004d4a:	6019      	str	r1, [r3, #0]
 8004d4c:	e002      	b.n	8004d54 <_printf_i+0x19c>
 8004d4e:	066a      	lsls	r2, r5, #25
 8004d50:	d5fb      	bpl.n	8004d4a <_printf_i+0x192>
 8004d52:	8019      	strh	r1, [r3, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	4665      	mov	r5, ip
 8004d5a:	e7b9      	b.n	8004cd0 <_printf_i+0x118>
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	1d19      	adds	r1, r3, #4
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	681d      	ldr	r5, [r3, #0]
 8004d64:	6862      	ldr	r2, [r4, #4]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7fb fa31 	bl	80001d0 <memchr>
 8004d6e:	b108      	cbz	r0, 8004d74 <_printf_i+0x1bc>
 8004d70:	1b40      	subs	r0, r0, r5
 8004d72:	6060      	str	r0, [r4, #4]
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	6123      	str	r3, [r4, #16]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7e:	e7a7      	b.n	8004cd0 <_printf_i+0x118>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	462a      	mov	r2, r5
 8004d84:	4639      	mov	r1, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	47c0      	blx	r8
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d0aa      	beq.n	8004ce4 <_printf_i+0x12c>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	079b      	lsls	r3, r3, #30
 8004d92:	d413      	bmi.n	8004dbc <_printf_i+0x204>
 8004d94:	68e0      	ldr	r0, [r4, #12]
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	4298      	cmp	r0, r3
 8004d9a:	bfb8      	it	lt
 8004d9c:	4618      	movlt	r0, r3
 8004d9e:	e7a3      	b.n	8004ce8 <_printf_i+0x130>
 8004da0:	2301      	movs	r3, #1
 8004da2:	464a      	mov	r2, r9
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d09a      	beq.n	8004ce4 <_printf_i+0x12c>
 8004dae:	3501      	adds	r5, #1
 8004db0:	68e3      	ldr	r3, [r4, #12]
 8004db2:	9a03      	ldr	r2, [sp, #12]
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	42ab      	cmp	r3, r5
 8004db8:	dcf2      	bgt.n	8004da0 <_printf_i+0x1e8>
 8004dba:	e7eb      	b.n	8004d94 <_printf_i+0x1dc>
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f5      	b.n	8004db0 <_printf_i+0x1f8>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ac      	bne.n	8004d22 <_printf_i+0x16a>
 8004dc8:	7803      	ldrb	r3, [r0, #0]
 8004dca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd2:	e76c      	b.n	8004cae <_printf_i+0xf6>
 8004dd4:	08005521 	.word	0x08005521
 8004dd8:	08005532 	.word	0x08005532

08004ddc <_sbrk_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4c06      	ldr	r4, [pc, #24]	; (8004df8 <_sbrk_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4605      	mov	r5, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	f7fb fe64 	bl	8000ab4 <_sbrk>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_sbrk_r+0x1a>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_sbrk_r+0x1a>
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20001c80 	.word	0x20001c80

08004dfc <__sread>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	460c      	mov	r4, r1
 8004e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e04:	f000 fa96 	bl	8005334 <_read_r>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	bfab      	itete	ge
 8004e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e10:	181b      	addge	r3, r3, r0
 8004e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e16:	bfac      	ite	ge
 8004e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e1a:	81a3      	strhlt	r3, [r4, #12]
 8004e1c:	bd10      	pop	{r4, pc}

08004e1e <__swrite>:
 8004e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e22:	461f      	mov	r7, r3
 8004e24:	898b      	ldrh	r3, [r1, #12]
 8004e26:	05db      	lsls	r3, r3, #23
 8004e28:	4605      	mov	r5, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	4616      	mov	r6, r2
 8004e2e:	d505      	bpl.n	8004e3c <__swrite+0x1e>
 8004e30:	2302      	movs	r3, #2
 8004e32:	2200      	movs	r2, #0
 8004e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e38:	f000 f9b6 	bl	80051a8 <_lseek_r>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	4632      	mov	r2, r6
 8004e4a:	463b      	mov	r3, r7
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e52:	f000 b869 	b.w	8004f28 <_write_r>

08004e56 <__sseek>:
 8004e56:	b510      	push	{r4, lr}
 8004e58:	460c      	mov	r4, r1
 8004e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5e:	f000 f9a3 	bl	80051a8 <_lseek_r>
 8004e62:	1c43      	adds	r3, r0, #1
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	bf15      	itete	ne
 8004e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e72:	81a3      	strheq	r3, [r4, #12]
 8004e74:	bf18      	it	ne
 8004e76:	81a3      	strhne	r3, [r4, #12]
 8004e78:	bd10      	pop	{r4, pc}

08004e7a <__sclose>:
 8004e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7e:	f000 b8d3 	b.w	8005028 <_close_r>
	...

08004e84 <__swbuf_r>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	460e      	mov	r6, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	4605      	mov	r5, r0
 8004e8c:	b118      	cbz	r0, 8004e96 <__swbuf_r+0x12>
 8004e8e:	6983      	ldr	r3, [r0, #24]
 8004e90:	b90b      	cbnz	r3, 8004e96 <__swbuf_r+0x12>
 8004e92:	f7ff fbf7 	bl	8004684 <__sinit>
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <__swbuf_r+0x98>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	d12a      	bne.n	8004ef2 <__swbuf_r+0x6e>
 8004e9c:	686c      	ldr	r4, [r5, #4]
 8004e9e:	69a3      	ldr	r3, [r4, #24]
 8004ea0:	60a3      	str	r3, [r4, #8]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	071a      	lsls	r2, r3, #28
 8004ea6:	d52e      	bpl.n	8004f06 <__swbuf_r+0x82>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	b363      	cbz	r3, 8004f06 <__swbuf_r+0x82>
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	6820      	ldr	r0, [r4, #0]
 8004eb0:	1ac0      	subs	r0, r0, r3
 8004eb2:	6963      	ldr	r3, [r4, #20]
 8004eb4:	b2f6      	uxtb	r6, r6
 8004eb6:	4283      	cmp	r3, r0
 8004eb8:	4637      	mov	r7, r6
 8004eba:	dc04      	bgt.n	8004ec6 <__swbuf_r+0x42>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 f948 	bl	8005154 <_fflush_r>
 8004ec4:	bb28      	cbnz	r0, 8004f12 <__swbuf_r+0x8e>
 8004ec6:	68a3      	ldr	r3, [r4, #8]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	60a3      	str	r3, [r4, #8]
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	6022      	str	r2, [r4, #0]
 8004ed2:	701e      	strb	r6, [r3, #0]
 8004ed4:	6963      	ldr	r3, [r4, #20]
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	4283      	cmp	r3, r0
 8004eda:	d004      	beq.n	8004ee6 <__swbuf_r+0x62>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	07db      	lsls	r3, r3, #31
 8004ee0:	d519      	bpl.n	8004f16 <__swbuf_r+0x92>
 8004ee2:	2e0a      	cmp	r6, #10
 8004ee4:	d117      	bne.n	8004f16 <__swbuf_r+0x92>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 f933 	bl	8005154 <_fflush_r>
 8004eee:	b190      	cbz	r0, 8004f16 <__swbuf_r+0x92>
 8004ef0:	e00f      	b.n	8004f12 <__swbuf_r+0x8e>
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <__swbuf_r+0x9c>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	d101      	bne.n	8004efc <__swbuf_r+0x78>
 8004ef8:	68ac      	ldr	r4, [r5, #8]
 8004efa:	e7d0      	b.n	8004e9e <__swbuf_r+0x1a>
 8004efc:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <__swbuf_r+0xa0>)
 8004efe:	429c      	cmp	r4, r3
 8004f00:	bf08      	it	eq
 8004f02:	68ec      	ldreq	r4, [r5, #12]
 8004f04:	e7cb      	b.n	8004e9e <__swbuf_r+0x1a>
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f81f 	bl	8004f4c <__swsetup_r>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0cc      	beq.n	8004eac <__swbuf_r+0x28>
 8004f12:	f04f 37ff 	mov.w	r7, #4294967295
 8004f16:	4638      	mov	r0, r7
 8004f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	080054d0 	.word	0x080054d0
 8004f20:	080054f0 	.word	0x080054f0
 8004f24:	080054b0 	.word	0x080054b0

08004f28 <_write_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4c07      	ldr	r4, [pc, #28]	; (8004f48 <_write_r+0x20>)
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	4608      	mov	r0, r1
 8004f30:	4611      	mov	r1, r2
 8004f32:	2200      	movs	r2, #0
 8004f34:	6022      	str	r2, [r4, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f7fb fd6b 	bl	8000a12 <_write>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_write_r+0x1e>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_write_r+0x1e>
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	20001c80 	.word	0x20001c80

08004f4c <__swsetup_r>:
 8004f4c:	4b32      	ldr	r3, [pc, #200]	; (8005018 <__swsetup_r+0xcc>)
 8004f4e:	b570      	push	{r4, r5, r6, lr}
 8004f50:	681d      	ldr	r5, [r3, #0]
 8004f52:	4606      	mov	r6, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	b125      	cbz	r5, 8004f62 <__swsetup_r+0x16>
 8004f58:	69ab      	ldr	r3, [r5, #24]
 8004f5a:	b913      	cbnz	r3, 8004f62 <__swsetup_r+0x16>
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f7ff fb91 	bl	8004684 <__sinit>
 8004f62:	4b2e      	ldr	r3, [pc, #184]	; (800501c <__swsetup_r+0xd0>)
 8004f64:	429c      	cmp	r4, r3
 8004f66:	d10f      	bne.n	8004f88 <__swsetup_r+0x3c>
 8004f68:	686c      	ldr	r4, [r5, #4]
 8004f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	0715      	lsls	r5, r2, #28
 8004f72:	d42c      	bmi.n	8004fce <__swsetup_r+0x82>
 8004f74:	06d0      	lsls	r0, r2, #27
 8004f76:	d411      	bmi.n	8004f9c <__swsetup_r+0x50>
 8004f78:	2209      	movs	r2, #9
 8004f7a:	6032      	str	r2, [r6, #0]
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	e03e      	b.n	8005006 <__swsetup_r+0xba>
 8004f88:	4b25      	ldr	r3, [pc, #148]	; (8005020 <__swsetup_r+0xd4>)
 8004f8a:	429c      	cmp	r4, r3
 8004f8c:	d101      	bne.n	8004f92 <__swsetup_r+0x46>
 8004f8e:	68ac      	ldr	r4, [r5, #8]
 8004f90:	e7eb      	b.n	8004f6a <__swsetup_r+0x1e>
 8004f92:	4b24      	ldr	r3, [pc, #144]	; (8005024 <__swsetup_r+0xd8>)
 8004f94:	429c      	cmp	r4, r3
 8004f96:	bf08      	it	eq
 8004f98:	68ec      	ldreq	r4, [r5, #12]
 8004f9a:	e7e6      	b.n	8004f6a <__swsetup_r+0x1e>
 8004f9c:	0751      	lsls	r1, r2, #29
 8004f9e:	d512      	bpl.n	8004fc6 <__swsetup_r+0x7a>
 8004fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fa2:	b141      	cbz	r1, 8004fb6 <__swsetup_r+0x6a>
 8004fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa8:	4299      	cmp	r1, r3
 8004faa:	d002      	beq.n	8004fb2 <__swsetup_r+0x66>
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f973 	bl	8005298 <_free_r>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6063      	str	r3, [r4, #4]
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	f043 0308 	orr.w	r3, r3, #8
 8004fcc:	81a3      	strh	r3, [r4, #12]
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	b94b      	cbnz	r3, 8004fe6 <__swsetup_r+0x9a>
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d003      	beq.n	8004fe6 <__swsetup_r+0x9a>
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 f917 	bl	8005214 <__smakebuf_r>
 8004fe6:	89a2      	ldrh	r2, [r4, #12]
 8004fe8:	f012 0301 	ands.w	r3, r2, #1
 8004fec:	d00c      	beq.n	8005008 <__swsetup_r+0xbc>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	6963      	ldr	r3, [r4, #20]
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	61a3      	str	r3, [r4, #24]
 8004ff8:	6923      	ldr	r3, [r4, #16]
 8004ffa:	b953      	cbnz	r3, 8005012 <__swsetup_r+0xc6>
 8004ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005000:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005004:	d1ba      	bne.n	8004f7c <__swsetup_r+0x30>
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	0792      	lsls	r2, r2, #30
 800500a:	bf58      	it	pl
 800500c:	6963      	ldrpl	r3, [r4, #20]
 800500e:	60a3      	str	r3, [r4, #8]
 8005010:	e7f2      	b.n	8004ff8 <__swsetup_r+0xac>
 8005012:	2000      	movs	r0, #0
 8005014:	e7f7      	b.n	8005006 <__swsetup_r+0xba>
 8005016:	bf00      	nop
 8005018:	20000010 	.word	0x20000010
 800501c:	080054d0 	.word	0x080054d0
 8005020:	080054f0 	.word	0x080054f0
 8005024:	080054b0 	.word	0x080054b0

08005028 <_close_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4c06      	ldr	r4, [pc, #24]	; (8005044 <_close_r+0x1c>)
 800502c:	2300      	movs	r3, #0
 800502e:	4605      	mov	r5, r0
 8005030:	4608      	mov	r0, r1
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	f7fb fd09 	bl	8000a4a <_close>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_close_r+0x1a>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	b103      	cbz	r3, 8005042 <_close_r+0x1a>
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20001c80 	.word	0x20001c80

08005048 <__sflush_r>:
 8005048:	898a      	ldrh	r2, [r1, #12]
 800504a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800504e:	4605      	mov	r5, r0
 8005050:	0710      	lsls	r0, r2, #28
 8005052:	460c      	mov	r4, r1
 8005054:	d458      	bmi.n	8005108 <__sflush_r+0xc0>
 8005056:	684b      	ldr	r3, [r1, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	dc05      	bgt.n	8005068 <__sflush_r+0x20>
 800505c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	dc02      	bgt.n	8005068 <__sflush_r+0x20>
 8005062:	2000      	movs	r0, #0
 8005064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800506a:	2e00      	cmp	r6, #0
 800506c:	d0f9      	beq.n	8005062 <__sflush_r+0x1a>
 800506e:	2300      	movs	r3, #0
 8005070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005074:	682f      	ldr	r7, [r5, #0]
 8005076:	6a21      	ldr	r1, [r4, #32]
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	d032      	beq.n	80050e2 <__sflush_r+0x9a>
 800507c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	075a      	lsls	r2, r3, #29
 8005082:	d505      	bpl.n	8005090 <__sflush_r+0x48>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	1ac0      	subs	r0, r0, r3
 8005088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800508a:	b10b      	cbz	r3, 8005090 <__sflush_r+0x48>
 800508c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800508e:	1ac0      	subs	r0, r0, r3
 8005090:	2300      	movs	r3, #0
 8005092:	4602      	mov	r2, r0
 8005094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005096:	6a21      	ldr	r1, [r4, #32]
 8005098:	4628      	mov	r0, r5
 800509a:	47b0      	blx	r6
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	d106      	bne.n	80050b0 <__sflush_r+0x68>
 80050a2:	6829      	ldr	r1, [r5, #0]
 80050a4:	291d      	cmp	r1, #29
 80050a6:	d848      	bhi.n	800513a <__sflush_r+0xf2>
 80050a8:	4a29      	ldr	r2, [pc, #164]	; (8005150 <__sflush_r+0x108>)
 80050aa:	40ca      	lsrs	r2, r1
 80050ac:	07d6      	lsls	r6, r2, #31
 80050ae:	d544      	bpl.n	800513a <__sflush_r+0xf2>
 80050b0:	2200      	movs	r2, #0
 80050b2:	6062      	str	r2, [r4, #4]
 80050b4:	04d9      	lsls	r1, r3, #19
 80050b6:	6922      	ldr	r2, [r4, #16]
 80050b8:	6022      	str	r2, [r4, #0]
 80050ba:	d504      	bpl.n	80050c6 <__sflush_r+0x7e>
 80050bc:	1c42      	adds	r2, r0, #1
 80050be:	d101      	bne.n	80050c4 <__sflush_r+0x7c>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b903      	cbnz	r3, 80050c6 <__sflush_r+0x7e>
 80050c4:	6560      	str	r0, [r4, #84]	; 0x54
 80050c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050c8:	602f      	str	r7, [r5, #0]
 80050ca:	2900      	cmp	r1, #0
 80050cc:	d0c9      	beq.n	8005062 <__sflush_r+0x1a>
 80050ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d2:	4299      	cmp	r1, r3
 80050d4:	d002      	beq.n	80050dc <__sflush_r+0x94>
 80050d6:	4628      	mov	r0, r5
 80050d8:	f000 f8de 	bl	8005298 <_free_r>
 80050dc:	2000      	movs	r0, #0
 80050de:	6360      	str	r0, [r4, #52]	; 0x34
 80050e0:	e7c0      	b.n	8005064 <__sflush_r+0x1c>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b0      	blx	r6
 80050e8:	1c41      	adds	r1, r0, #1
 80050ea:	d1c8      	bne.n	800507e <__sflush_r+0x36>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0c5      	beq.n	800507e <__sflush_r+0x36>
 80050f2:	2b1d      	cmp	r3, #29
 80050f4:	d001      	beq.n	80050fa <__sflush_r+0xb2>
 80050f6:	2b16      	cmp	r3, #22
 80050f8:	d101      	bne.n	80050fe <__sflush_r+0xb6>
 80050fa:	602f      	str	r7, [r5, #0]
 80050fc:	e7b1      	b.n	8005062 <__sflush_r+0x1a>
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005104:	81a3      	strh	r3, [r4, #12]
 8005106:	e7ad      	b.n	8005064 <__sflush_r+0x1c>
 8005108:	690f      	ldr	r7, [r1, #16]
 800510a:	2f00      	cmp	r7, #0
 800510c:	d0a9      	beq.n	8005062 <__sflush_r+0x1a>
 800510e:	0793      	lsls	r3, r2, #30
 8005110:	680e      	ldr	r6, [r1, #0]
 8005112:	bf08      	it	eq
 8005114:	694b      	ldreq	r3, [r1, #20]
 8005116:	600f      	str	r7, [r1, #0]
 8005118:	bf18      	it	ne
 800511a:	2300      	movne	r3, #0
 800511c:	eba6 0807 	sub.w	r8, r6, r7
 8005120:	608b      	str	r3, [r1, #8]
 8005122:	f1b8 0f00 	cmp.w	r8, #0
 8005126:	dd9c      	ble.n	8005062 <__sflush_r+0x1a>
 8005128:	4643      	mov	r3, r8
 800512a:	463a      	mov	r2, r7
 800512c:	6a21      	ldr	r1, [r4, #32]
 800512e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005130:	4628      	mov	r0, r5
 8005132:	47b0      	blx	r6
 8005134:	2800      	cmp	r0, #0
 8005136:	dc06      	bgt.n	8005146 <__sflush_r+0xfe>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e78e      	b.n	8005064 <__sflush_r+0x1c>
 8005146:	4407      	add	r7, r0
 8005148:	eba8 0800 	sub.w	r8, r8, r0
 800514c:	e7e9      	b.n	8005122 <__sflush_r+0xda>
 800514e:	bf00      	nop
 8005150:	20400001 	.word	0x20400001

08005154 <_fflush_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	690b      	ldr	r3, [r1, #16]
 8005158:	4605      	mov	r5, r0
 800515a:	460c      	mov	r4, r1
 800515c:	b1db      	cbz	r3, 8005196 <_fflush_r+0x42>
 800515e:	b118      	cbz	r0, 8005168 <_fflush_r+0x14>
 8005160:	6983      	ldr	r3, [r0, #24]
 8005162:	b90b      	cbnz	r3, 8005168 <_fflush_r+0x14>
 8005164:	f7ff fa8e 	bl	8004684 <__sinit>
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <_fflush_r+0x48>)
 800516a:	429c      	cmp	r4, r3
 800516c:	d109      	bne.n	8005182 <_fflush_r+0x2e>
 800516e:	686c      	ldr	r4, [r5, #4]
 8005170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005174:	b17b      	cbz	r3, 8005196 <_fflush_r+0x42>
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800517e:	f7ff bf63 	b.w	8005048 <__sflush_r>
 8005182:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <_fflush_r+0x4c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d101      	bne.n	800518c <_fflush_r+0x38>
 8005188:	68ac      	ldr	r4, [r5, #8]
 800518a:	e7f1      	b.n	8005170 <_fflush_r+0x1c>
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <_fflush_r+0x50>)
 800518e:	429c      	cmp	r4, r3
 8005190:	bf08      	it	eq
 8005192:	68ec      	ldreq	r4, [r5, #12]
 8005194:	e7ec      	b.n	8005170 <_fflush_r+0x1c>
 8005196:	2000      	movs	r0, #0
 8005198:	bd38      	pop	{r3, r4, r5, pc}
 800519a:	bf00      	nop
 800519c:	080054d0 	.word	0x080054d0
 80051a0:	080054f0 	.word	0x080054f0
 80051a4:	080054b0 	.word	0x080054b0

080051a8 <_lseek_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4c07      	ldr	r4, [pc, #28]	; (80051c8 <_lseek_r+0x20>)
 80051ac:	4605      	mov	r5, r0
 80051ae:	4608      	mov	r0, r1
 80051b0:	4611      	mov	r1, r2
 80051b2:	2200      	movs	r2, #0
 80051b4:	6022      	str	r2, [r4, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fb fc6e 	bl	8000a98 <_lseek>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_lseek_r+0x1e>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_lseek_r+0x1e>
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20001c80 	.word	0x20001c80

080051cc <__swhatbuf_r>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	460e      	mov	r6, r1
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	b096      	sub	sp, #88	; 0x58
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	da07      	bge.n	80051ee <__swhatbuf_r+0x22>
 80051de:	2300      	movs	r3, #0
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	89b3      	ldrh	r3, [r6, #12]
 80051e4:	061a      	lsls	r2, r3, #24
 80051e6:	d410      	bmi.n	800520a <__swhatbuf_r+0x3e>
 80051e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ec:	e00e      	b.n	800520c <__swhatbuf_r+0x40>
 80051ee:	466a      	mov	r2, sp
 80051f0:	f000 f8b2 	bl	8005358 <_fstat_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	dbf2      	blt.n	80051de <__swhatbuf_r+0x12>
 80051f8:	9a01      	ldr	r2, [sp, #4]
 80051fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005202:	425a      	negs	r2, r3
 8005204:	415a      	adcs	r2, r3
 8005206:	602a      	str	r2, [r5, #0]
 8005208:	e7ee      	b.n	80051e8 <__swhatbuf_r+0x1c>
 800520a:	2340      	movs	r3, #64	; 0x40
 800520c:	2000      	movs	r0, #0
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	b016      	add	sp, #88	; 0x58
 8005212:	bd70      	pop	{r4, r5, r6, pc}

08005214 <__smakebuf_r>:
 8005214:	898b      	ldrh	r3, [r1, #12]
 8005216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005218:	079d      	lsls	r5, r3, #30
 800521a:	4606      	mov	r6, r0
 800521c:	460c      	mov	r4, r1
 800521e:	d507      	bpl.n	8005230 <__smakebuf_r+0x1c>
 8005220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	2301      	movs	r3, #1
 800522a:	6163      	str	r3, [r4, #20]
 800522c:	b002      	add	sp, #8
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	ab01      	add	r3, sp, #4
 8005232:	466a      	mov	r2, sp
 8005234:	f7ff ffca 	bl	80051cc <__swhatbuf_r>
 8005238:	9900      	ldr	r1, [sp, #0]
 800523a:	4605      	mov	r5, r0
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff faab 	bl	8004798 <_malloc_r>
 8005242:	b948      	cbnz	r0, 8005258 <__smakebuf_r+0x44>
 8005244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d4ef      	bmi.n	800522c <__smakebuf_r+0x18>
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	e7e3      	b.n	8005220 <__smakebuf_r+0xc>
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <__smakebuf_r+0x7c>)
 800525a:	62b3      	str	r3, [r6, #40]	; 0x28
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	6020      	str	r0, [r4, #0]
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	6163      	str	r3, [r4, #20]
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	6120      	str	r0, [r4, #16]
 800526e:	b15b      	cbz	r3, 8005288 <__smakebuf_r+0x74>
 8005270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005274:	4630      	mov	r0, r6
 8005276:	f000 f881 	bl	800537c <_isatty_r>
 800527a:	b128      	cbz	r0, 8005288 <__smakebuf_r+0x74>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	431d      	orrs	r5, r3
 800528c:	81a5      	strh	r5, [r4, #12]
 800528e:	e7cd      	b.n	800522c <__smakebuf_r+0x18>
 8005290:	0800464d 	.word	0x0800464d

08005294 <__malloc_lock>:
 8005294:	4770      	bx	lr

08005296 <__malloc_unlock>:
 8005296:	4770      	bx	lr

08005298 <_free_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4605      	mov	r5, r0
 800529c:	2900      	cmp	r1, #0
 800529e:	d045      	beq.n	800532c <_free_r+0x94>
 80052a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a4:	1f0c      	subs	r4, r1, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bfb8      	it	lt
 80052aa:	18e4      	addlt	r4, r4, r3
 80052ac:	f7ff fff2 	bl	8005294 <__malloc_lock>
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <_free_r+0x98>)
 80052b2:	6813      	ldr	r3, [r2, #0]
 80052b4:	4610      	mov	r0, r2
 80052b6:	b933      	cbnz	r3, 80052c6 <_free_r+0x2e>
 80052b8:	6063      	str	r3, [r4, #4]
 80052ba:	6014      	str	r4, [r2, #0]
 80052bc:	4628      	mov	r0, r5
 80052be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052c2:	f7ff bfe8 	b.w	8005296 <__malloc_unlock>
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	d90c      	bls.n	80052e4 <_free_r+0x4c>
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	1862      	adds	r2, r4, r1
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bf04      	itt	eq
 80052d2:	681a      	ldreq	r2, [r3, #0]
 80052d4:	685b      	ldreq	r3, [r3, #4]
 80052d6:	6063      	str	r3, [r4, #4]
 80052d8:	bf04      	itt	eq
 80052da:	1852      	addeq	r2, r2, r1
 80052dc:	6022      	streq	r2, [r4, #0]
 80052de:	6004      	str	r4, [r0, #0]
 80052e0:	e7ec      	b.n	80052bc <_free_r+0x24>
 80052e2:	4613      	mov	r3, r2
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	b10a      	cbz	r2, 80052ec <_free_r+0x54>
 80052e8:	42a2      	cmp	r2, r4
 80052ea:	d9fa      	bls.n	80052e2 <_free_r+0x4a>
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	1858      	adds	r0, r3, r1
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d10b      	bne.n	800530c <_free_r+0x74>
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	4401      	add	r1, r0
 80052f8:	1858      	adds	r0, r3, r1
 80052fa:	4282      	cmp	r2, r0
 80052fc:	6019      	str	r1, [r3, #0]
 80052fe:	d1dd      	bne.n	80052bc <_free_r+0x24>
 8005300:	6810      	ldr	r0, [r2, #0]
 8005302:	6852      	ldr	r2, [r2, #4]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	4401      	add	r1, r0
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e7d7      	b.n	80052bc <_free_r+0x24>
 800530c:	d902      	bls.n	8005314 <_free_r+0x7c>
 800530e:	230c      	movs	r3, #12
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	e7d3      	b.n	80052bc <_free_r+0x24>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	1821      	adds	r1, r4, r0
 8005318:	428a      	cmp	r2, r1
 800531a:	bf04      	itt	eq
 800531c:	6811      	ldreq	r1, [r2, #0]
 800531e:	6852      	ldreq	r2, [r2, #4]
 8005320:	6062      	str	r2, [r4, #4]
 8005322:	bf04      	itt	eq
 8005324:	1809      	addeq	r1, r1, r0
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	605c      	str	r4, [r3, #4]
 800532a:	e7c7      	b.n	80052bc <_free_r+0x24>
 800532c:	bd38      	pop	{r3, r4, r5, pc}
 800532e:	bf00      	nop
 8005330:	20001ba4 	.word	0x20001ba4

08005334 <_read_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4c07      	ldr	r4, [pc, #28]	; (8005354 <_read_r+0x20>)
 8005338:	4605      	mov	r5, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	6022      	str	r2, [r4, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fb fb48 	bl	80009d8 <_read>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_read_r+0x1e>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	b103      	cbz	r3, 8005352 <_read_r+0x1e>
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20001c80 	.word	0x20001c80

08005358 <_fstat_r>:
 8005358:	b538      	push	{r3, r4, r5, lr}
 800535a:	4c07      	ldr	r4, [pc, #28]	; (8005378 <_fstat_r+0x20>)
 800535c:	2300      	movs	r3, #0
 800535e:	4605      	mov	r5, r0
 8005360:	4608      	mov	r0, r1
 8005362:	4611      	mov	r1, r2
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	f7fb fb7c 	bl	8000a62 <_fstat>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d102      	bne.n	8005374 <_fstat_r+0x1c>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	b103      	cbz	r3, 8005374 <_fstat_r+0x1c>
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	bf00      	nop
 8005378:	20001c80 	.word	0x20001c80

0800537c <_isatty_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4c06      	ldr	r4, [pc, #24]	; (8005398 <_isatty_r+0x1c>)
 8005380:	2300      	movs	r3, #0
 8005382:	4605      	mov	r5, r0
 8005384:	4608      	mov	r0, r1
 8005386:	6023      	str	r3, [r4, #0]
 8005388:	f7fb fb7b 	bl	8000a82 <_isatty>
 800538c:	1c43      	adds	r3, r0, #1
 800538e:	d102      	bne.n	8005396 <_isatty_r+0x1a>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	b103      	cbz	r3, 8005396 <_isatty_r+0x1a>
 8005394:	602b      	str	r3, [r5, #0]
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	20001c80 	.word	0x20001c80

0800539c <_init>:
 800539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539e:	bf00      	nop
 80053a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a2:	bc08      	pop	{r3}
 80053a4:	469e      	mov	lr, r3
 80053a6:	4770      	bx	lr

080053a8 <_fini>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr
