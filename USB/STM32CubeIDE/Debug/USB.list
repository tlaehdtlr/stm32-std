
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008834  08008834  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800883c  0800883c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  200001f4  08008a38  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08008a38  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018228  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003306  00000000  00000000  0003844c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f40  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  0003c698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d015  00000000  00000000  0003d440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001054b  00000000  00000000  0005a455  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a59b4  00000000  00000000  0006a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  001103d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008788 	.word	0x08008788

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	08008788 	.word	0x08008788

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <MX_GPIO_Init+0x108>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <MX_GPIO_Init+0x108>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <MX_GPIO_Init+0x108>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a35      	ldr	r2, [pc, #212]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052e:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b2a      	ldr	r3, [pc, #168]	; (80005e4 <MX_GPIO_Init+0x108>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a29      	ldr	r2, [pc, #164]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b27      	ldr	r3, [pc, #156]	; (80005e4 <MX_GPIO_Init+0x108>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	21b0      	movs	r1, #176	; 0xb0
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 fb2d 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000564:	4820      	ldr	r0, [pc, #128]	; (80005e8 <MX_GPIO_Init+0x10c>)
 8000566:	f001 fb27 	bl	8001bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_GPIO_Init+0x110>)
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	4619      	mov	r1, r3
 800057e:	481c      	ldr	r0, [pc, #112]	; (80005f0 <MX_GPIO_Init+0x114>)
 8000580:	f001 f9a8 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000584:	23b0      	movs	r3, #176	; 0xb0
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f001 f999 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80005a2:	2340      	movs	r3, #64	; 0x40
 80005a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f001 f98c 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x10c>)
 80005d6:	f001 f97d 	bl	80018d4 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	10210000 	.word	0x10210000
 80005f0:	48000800 	.word	0x48000800

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 ffbb 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f83d 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f7ff ff6b 	bl	80004dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f939 	bl	800087c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800060a:	f000 f9d3 	bl	80009b4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint16_t len = strlen((const char*)UserRxBufferFS);
 800060e:	4818      	ldr	r0, [pc, #96]	; (8000670 <main+0x7c>)
 8000610:	f7ff fddc 	bl	80001cc <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	80fb      	strh	r3, [r7, #6]

    if(len > 0)
 8000618:	88fb      	ldrh	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d023      	beq.n	8000666 <main+0x72>
    {
      strncpy((char *)UserTxBufferFS, (const char*)UserRxBufferFS, len);
 800061e:	88fb      	ldrh	r3, [r7, #6]
 8000620:	461a      	mov	r2, r3
 8000622:	4913      	ldr	r1, [pc, #76]	; (8000670 <main+0x7c>)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0x80>)
 8000626:	f008 f897 	bl	8008758 <strncpy>
      strcat((char *)UserTxBufferFS, "\r\n");
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <main+0x80>)
 800062c:	f7ff fdce 	bl	80001cc <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	461a      	mov	r2, r3
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <main+0x80>)
 8000636:	4413      	add	r3, r2
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <main+0x84>)
 800063a:	8811      	ldrh	r1, [r2, #0]
 800063c:	7892      	ldrb	r2, [r2, #2]
 800063e:	8019      	strh	r1, [r3, #0]
 8000640:	709a      	strb	r2, [r3, #2]
      CDC_Transmit_FS((uint8_t*)UserTxBufferFS, strlen((const char*)UserTxBufferFS));
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x80>)
 8000644:	f7ff fdc2 	bl	80001cc <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	4619      	mov	r1, r3
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x80>)
 800064e:	f000 fa75 	bl	8000b3c <CDC_Transmit_FS>
      memset(UserRxBufferFS, 0, sizeof(UserRxBufferFS));
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	2100      	movs	r1, #0
 8000656:	4806      	ldr	r0, [pc, #24]	; (8000670 <main+0x7c>)
 8000658:	f007 ffbe 	bl	80085d8 <memset>
      memset(UserTxBufferFS, 0, sizeof(UserTxBufferFS));
 800065c:	2240      	movs	r2, #64	; 0x40
 800065e:	2100      	movs	r1, #0
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <main+0x80>)
 8000662:	f007 ffb9 	bl	80085d8 <memset>
    }

    HAL_Delay(500);
 8000666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066a:	f000 ffff 	bl	800166c <HAL_Delay>
  {
 800066e:	e7ce      	b.n	800060e <main+0x1a>
 8000670:	20000570 	.word	0x20000570
 8000674:	20000958 	.word	0x20000958
 8000678:	080087a0 	.word	0x080087a0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0a4      	sub	sp, #144	; 0x90
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 ffa4 	bl	80085d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f007 ff96 	bl	80085d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006b0:	f002 fe3e 	bl	8003330 <HAL_PWREx_ControlVoltageScaling>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x42>
  {
    Error_Handler();
 80006ba:	f000 f84c 	bl	8000756 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006be:	2310      	movs	r3, #16
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c2:	2301      	movs	r3, #1
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006ca:	23b0      	movs	r3, #176	; 0xb0
 80006cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d2:	2301      	movs	r3, #1
 80006d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80006d6:	2303      	movs	r3, #3
 80006d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006dc:	2308      	movs	r3, #8
 80006de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fe82 	bl	80033fc <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006fe:	f000 f82a 	bl	8000756 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071a:	2103      	movs	r1, #3
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fad3 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000728:	f000 f815 	bl	8000756 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 800072c:	f242 0302 	movw	r3, #8194	; 0x2002
 8000730:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000736:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fcc6 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800074a:	f000 f804 	bl	8000756 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3790      	adds	r7, #144	; 0x90
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x6>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6613      	str	r3, [r2, #96]	; 0x60
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6593      	str	r3, [r2, #88]	; 0x58
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 ff1a 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <USB_IRQHandler+0x10>)
 8000802:	f001 fb25 	bl	8001e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000f40 	.word	0x20000f40

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f007 fe90 	bl	8008564 <__errno>
 8000844:	4602      	mov	r2, r0
 8000846:	230c      	movs	r3, #12
 8000848:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <_sbrk+0x64>)
 8000860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000a000 	.word	0x2000a000
 8000870:	00000400 	.word	0x00000400
 8000874:	20000210 	.word	0x20000210
 8000878:	20001240 	.word	0x20001240

0800087c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	f003 fd8c 	bl	80043dc <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f7ff ff44 	bl	8000756 <Error_Handler>
  }

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000220 	.word	0x20000220
 80008d8:	40004400 	.word	0x40004400

080008dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x7c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d128      	bne.n	8000950 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <HAL_UART_MspInit+0x80>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_UART_MspInit+0x80>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	6593      	str	r3, [r2, #88]	; 0x58
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_UART_MspInit+0x80>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_MspInit+0x80>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <HAL_UART_MspInit+0x80>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_UART_MspInit+0x80>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f000 ffc2 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000964:	f000 fdd0 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000968:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800096a:	e003      	b.n	8000974 <LoopCopyDataInit>

0800096c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800096e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000970:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000972:	3104      	adds	r1, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000978:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800097a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800097c:	d3f6      	bcc.n	800096c <CopyDataInit>
	ldr	r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000980:	e002      	b.n	8000988 <LoopFillZerobss>

08000982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000982:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000984:	f842 3b04 	str.w	r3, [r2], #4

08000988 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LoopForever+0x16>)
	cmp	r2, r3
 800098a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800098c:	d3f9      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f007 fdef 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff fe2f 	bl	80005f4 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000998:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800099c:	08008844 	.word	0x08008844
	ldr	r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009a4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80009a8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80009ac:	2000123c 	.word	0x2000123c

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80009b8:	2200      	movs	r2, #0
 80009ba:	4912      	ldr	r1, [pc, #72]	; (8000a04 <MX_USB_DEVICE_Init+0x50>)
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_USB_DEVICE_Init+0x54>)
 80009be:	f006 fce1 	bl	8007384 <USBD_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80009c8:	f7ff fec5 	bl	8000756 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80009cc:	490f      	ldr	r1, [pc, #60]	; (8000a0c <MX_USB_DEVICE_Init+0x58>)
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <MX_USB_DEVICE_Init+0x54>)
 80009d0:	f006 fd08 	bl	80073e4 <USBD_RegisterClass>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80009da:	f7ff febc 	bl	8000756 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80009de:	490c      	ldr	r1, [pc, #48]	; (8000a10 <MX_USB_DEVICE_Init+0x5c>)
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_USB_DEVICE_Init+0x54>)
 80009e2:	f006 fc33 	bl	800724c <USBD_CDC_RegisterInterface>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80009ec:	f7ff feb3 	bl	8000756 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USB_DEVICE_Init+0x54>)
 80009f2:	f006 fd1e 	bl	8007432 <USBD_Start>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80009fc:	f7ff feab 	bl	8000756 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000014 	.word	0x20000014
 8000a08:	200002a0 	.word	0x200002a0
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	20000000 	.word	0x20000000

08000a14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <CDC_Init_FS+0x1c>)
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <CDC_Init_FS+0x20>)
 8000a1e:	f006 fc2a 	bl	8007276 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000a22:	4905      	ldr	r1, [pc, #20]	; (8000a38 <CDC_Init_FS+0x24>)
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <CDC_Init_FS+0x20>)
 8000a26:	f006 fc3f 	bl	80072a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000a2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000958 	.word	0x20000958
 8000a34:	200002a0 	.word	0x200002a0
 8000a38:	20000570 	.word	0x20000570

08000a3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000a40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b23      	cmp	r3, #35	; 0x23
 8000a60:	d84a      	bhi.n	8000af8 <CDC_Control_FS+0xac>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <CDC_Control_FS+0x1c>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000af9 	.word	0x08000af9
 8000a6c:	08000af9 	.word	0x08000af9
 8000a70:	08000af9 	.word	0x08000af9
 8000a74:	08000af9 	.word	0x08000af9
 8000a78:	08000af9 	.word	0x08000af9
 8000a7c:	08000af9 	.word	0x08000af9
 8000a80:	08000af9 	.word	0x08000af9
 8000a84:	08000af9 	.word	0x08000af9
 8000a88:	08000af9 	.word	0x08000af9
 8000a8c:	08000af9 	.word	0x08000af9
 8000a90:	08000af9 	.word	0x08000af9
 8000a94:	08000af9 	.word	0x08000af9
 8000a98:	08000af9 	.word	0x08000af9
 8000a9c:	08000af9 	.word	0x08000af9
 8000aa0:	08000af9 	.word	0x08000af9
 8000aa4:	08000af9 	.word	0x08000af9
 8000aa8:	08000af9 	.word	0x08000af9
 8000aac:	08000af9 	.word	0x08000af9
 8000ab0:	08000af9 	.word	0x08000af9
 8000ab4:	08000af9 	.word	0x08000af9
 8000ab8:	08000af9 	.word	0x08000af9
 8000abc:	08000af9 	.word	0x08000af9
 8000ac0:	08000af9 	.word	0x08000af9
 8000ac4:	08000af9 	.word	0x08000af9
 8000ac8:	08000af9 	.word	0x08000af9
 8000acc:	08000af9 	.word	0x08000af9
 8000ad0:	08000af9 	.word	0x08000af9
 8000ad4:	08000af9 	.word	0x08000af9
 8000ad8:	08000af9 	.word	0x08000af9
 8000adc:	08000af9 	.word	0x08000af9
 8000ae0:	08000af9 	.word	0x08000af9
 8000ae4:	08000af9 	.word	0x08000af9
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000af9 	.word	0x08000af9
 8000af0:	08000af9 	.word	0x08000af9
 8000af4:	08000af9 	.word	0x08000af9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000af8:	bf00      	nop
  }

  return (USBD_OK);
 8000afa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <CDC_Receive_FS+0x30>)
 8000b16:	f006 fbc7 	bl	80072a8 <USBD_CDC_SetRxBuffer>
  Buf[*Len] = 0;
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <CDC_Receive_FS+0x30>)
 8000b28:	f006 fc02 	bl	8007330 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000b2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200002a0 	.word	0x200002a0

08000b3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <CDC_Transmit_FS+0x48>)
 8000b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000b52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00b      	b.n	8000b7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	461a      	mov	r2, r3
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <CDC_Transmit_FS+0x48>)
 8000b6a:	f006 fb84 	bl	8007276 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <CDC_Transmit_FS+0x48>)
 8000b70:	f006 fbae 	bl	80072d0 <USBD_CDC_TransmitPacket>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200002a0 	.word	0x200002a0

08000b88 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2212      	movs	r2, #18
 8000bbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000bbe:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000034 	.word	0x20000034

08000bd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2204      	movs	r2, #4
 8000be0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000be2:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20000054 	.word	0x20000054

08000bf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <USBD_FS_ProductStrDescriptor+0x34>)
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <USBD_FS_ProductStrDescriptor+0x38>)
 8000c0c:	f007 fbc9 	bl	80083a2 <USBD_GetString>
 8000c10:	e004      	b.n	8000c1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	4904      	ldr	r1, [pc, #16]	; (8000c28 <USBD_FS_ProductStrDescriptor+0x34>)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <USBD_FS_ProductStrDescriptor+0x38>)
 8000c18:	f007 fbc3 	bl	80083a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000d40 	.word	0x20000d40
 8000c2c:	080087a4 	.word	0x080087a4

08000c30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	4904      	ldr	r1, [pc, #16]	; (8000c50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000c42:	f007 fbae 	bl	80083a2 <USBD_GetString>
  return USBD_StrDesc;
 8000c46:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000d40 	.word	0x20000d40
 8000c54:	080087bc 	.word	0x080087bc

08000c58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	221a      	movs	r2, #26
 8000c68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000c6a:	f000 f855 	bl	8000d18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000c6e:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000058 	.word	0x20000058

08000c7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d105      	bne.n	8000c9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000c94:	f007 fb85 	bl	80083a2 <USBD_GetString>
 8000c98:	e004      	b.n	8000ca4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000c9a:	683a      	ldr	r2, [r7, #0]
 8000c9c:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000ca0:	f007 fb7f 	bl	80083a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000d40 	.word	0x20000d40
 8000cb4:	080087d0 	.word	0x080087d0

08000cb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000cd0:	f007 fb67 	bl	80083a2 <USBD_GetString>
 8000cd4:	e004      	b.n	8000ce0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	4904      	ldr	r1, [pc, #16]	; (8000cec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000cdc:	f007 fb61 	bl	80083a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000d40 	.word	0x20000d40
 8000cf0:	080087dc 	.word	0x080087dc

08000cf4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	220c      	movs	r2, #12
 8000d04:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8000d06:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000048 	.word	0x20000048

08000d18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <Get_SerialNum+0x44>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <Get_SerialNum+0x48>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <Get_SerialNum+0x4c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d009      	beq.n	8000d52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4909      	ldr	r1, [pc, #36]	; (8000d68 <Get_SerialNum+0x50>)
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f000 f814 	bl	8000d70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000d48:	2204      	movs	r2, #4
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <Get_SerialNum+0x54>)
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f000 f80f 	bl	8000d70 <IntToUnicode>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	1fff7590 	.word	0x1fff7590
 8000d60:	1fff7594 	.word	0x1fff7594
 8000d64:	1fff7598 	.word	0x1fff7598
 8000d68:	2000005a 	.word	0x2000005a
 8000d6c:	2000006a 	.word	0x2000006a

08000d70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	75fb      	strb	r3, [r7, #23]
 8000d86:	e027      	b.n	8000dd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	0f1b      	lsrs	r3, r3, #28
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d80b      	bhi.n	8000da8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	0f1b      	lsrs	r3, r3, #28
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	440b      	add	r3, r1
 8000da0:	3230      	adds	r2, #48	; 0x30
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e00a      	b.n	8000dbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	0f1b      	lsrs	r3, r3, #28
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	7dfb      	ldrb	r3, [r7, #23]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4619      	mov	r1, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	440b      	add	r3, r1
 8000db8:	3237      	adds	r2, #55	; 0x37
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	3301      	adds	r3, #1
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	75fb      	strb	r3, [r7, #23]
 8000dd8:	7dfa      	ldrb	r2, [r7, #23]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3d3      	bcc.n	8000d88 <IntToUnicode+0x18>
  }
}
 8000de0:	bf00      	nop
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <HAL_PCD_MspInit+0x90>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d131      	bne.n	8000e72 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8000e38:	230a      	movs	r3, #10
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f000 fd45 	bl	80018d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_PCD_MspInit+0x94>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2043      	movs	r0, #67	; 0x43
 8000e68:	f000 fcfd 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8000e6c:	2043      	movs	r0, #67	; 0x43
 8000e6e:	f000 fd16 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40006800 	.word	0x40006800
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	f006 fb14 	bl	80074c8 <USBD_LL_SetupStage>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f006 fb4c 	bl	800756e <USBD_LL_DataOutStage>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	440b      	add	r3, r1
 8000efe:	333c      	adds	r3, #60	; 0x3c
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f006 fb95 	bl	8007634 <USBD_LL_DataInStage>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f006 fc99 	bl	8007858 <USBD_LL_SOF>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d001      	beq.n	8000f46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8000f42:	f7ff fc08 	bl	8000756 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 fc46 	bl	80077e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fbff 	bl	8007760 <USBD_LL_Reset>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fc41 	bl	8007802 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <HAL_PCD_SuspendCallback+0x30>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_PCD_SuspendCallback+0x30>)
 8000f8e:	f043 0306 	orr.w	r3, r3, #6
 8000f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_PCD_ResumeCallback+0x34>)
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_PCD_ResumeCallback+0x34>)
 8000fb6:	f023 0306 	bic.w	r3, r3, #6
 8000fba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8000fbc:	f000 fa9e 	bl	80014fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f006 fc30 	bl	800782c <USBD_LL_Resume>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8000fe0:	f002 f9fc 	bl	80033dc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <USBD_LL_Init+0xbc>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <USBD_LL_Init+0xbc>)
 8000ff0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <USBD_LL_Init+0xbc>)
 8000ff6:	4a28      	ldr	r2, [pc, #160]	; (8001098 <USBD_LL_Init+0xc0>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <USBD_LL_Init+0xbc>)
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <USBD_LL_Init+0xbc>)
 8001002:	2202      	movs	r2, #2
 8001004:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <USBD_LL_Init+0xbc>)
 8001008:	2202      	movs	r2, #2
 800100a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <USBD_LL_Init+0xbc>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <USBD_LL_Init+0xbc>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <USBD_LL_Init+0xbc>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <USBD_LL_Init+0xbc>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001024:	481b      	ldr	r0, [pc, #108]	; (8001094 <USBD_LL_Init+0xbc>)
 8001026:	f000 fddf 	bl	8001be8 <HAL_PCD_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8001030:	f7ff fb91 	bl	8000756 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800103a:	2318      	movs	r3, #24
 800103c:	2200      	movs	r2, #0
 800103e:	2100      	movs	r1, #0
 8001040:	f002 f8fa 	bl	8003238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800104a:	2358      	movs	r3, #88	; 0x58
 800104c:	2200      	movs	r2, #0
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	f002 f8f2 	bl	8003238 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800105a:	23c0      	movs	r3, #192	; 0xc0
 800105c:	2200      	movs	r2, #0
 800105e:	2181      	movs	r1, #129	; 0x81
 8001060:	f002 f8ea 	bl	8003238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800106a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	f002 f8e1 	bl	8003238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800107c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001080:	2200      	movs	r2, #0
 8001082:	2182      	movs	r1, #130	; 0x82
 8001084:	f002 f8d8 	bl	8003238 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000f40 	.word	0x20000f40
 8001098:	40006800 	.word	0x40006800

0800109c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 feaa 	bl	8001e0c <HAL_PCD_Start>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d816      	bhi.n	80010f0 <USBD_LL_Start+0x54>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <USBD_LL_Start+0x2c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010d9 	.word	0x080010d9
 80010cc:	080010df 	.word	0x080010df
 80010d0:	080010e5 	.word	0x080010e5
 80010d4:	080010eb 	.word	0x080010eb
    case HAL_OK :
      usb_status = USBD_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
    break;
 80010dc:	e00b      	b.n	80010f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80010de:	2303      	movs	r3, #3
 80010e0:	73fb      	strb	r3, [r7, #15]
    break;
 80010e2:	e008      	b.n	80010f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
    break;
 80010e8:	e005      	b.n	80010f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80010ea:	2303      	movs	r3, #3
 80010ec:	73fb      	strb	r3, [r7, #15]
    break;
 80010ee:	e002      	b.n	80010f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80010f0:	2303      	movs	r3, #3
 80010f2:	73fb      	strb	r3, [r7, #15]
    break;
 80010f4:	bf00      	nop
  }
  return usb_status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4603      	mov	r3, r0
 8001110:	70fb      	strb	r3, [r7, #3]
 8001112:	460b      	mov	r3, r1
 8001114:	70bb      	strb	r3, [r7, #2]
 8001116:	4613      	mov	r3, r2
 8001118:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001128:	78bb      	ldrb	r3, [r7, #2]
 800112a:	883a      	ldrh	r2, [r7, #0]
 800112c:	78f9      	ldrb	r1, [r7, #3]
 800112e:	f001 f802 	bl	8002136 <HAL_PCD_EP_Open>
 8001132:	4603      	mov	r3, r0
 8001134:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001136:	7bbb      	ldrb	r3, [r7, #14]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d817      	bhi.n	800116c <USBD_LL_OpenEP+0x6c>
 800113c:	a201      	add	r2, pc, #4	; (adr r2, 8001144 <USBD_LL_OpenEP+0x44>)
 800113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001142:	bf00      	nop
 8001144:	08001155 	.word	0x08001155
 8001148:	0800115b 	.word	0x0800115b
 800114c:	08001161 	.word	0x08001161
 8001150:	08001167 	.word	0x08001167
    case HAL_OK :
      usb_status = USBD_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
    break;
 8001158:	e00b      	b.n	8001172 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800115a:	2303      	movs	r3, #3
 800115c:	73fb      	strb	r3, [r7, #15]
    break;
 800115e:	e008      	b.n	8001172 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
    break;
 8001164:	e005      	b.n	8001172 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001166:	2303      	movs	r3, #3
 8001168:	73fb      	strb	r3, [r7, #15]
    break;
 800116a:	e002      	b.n	8001172 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800116c:	2303      	movs	r3, #3
 800116e:	73fb      	strb	r3, [r7, #15]
    break;
 8001170:	bf00      	nop
  }
  return usb_status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001196:	78fa      	ldrb	r2, [r7, #3]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f831 	bl	8002202 <HAL_PCD_EP_Close>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d816      	bhi.n	80011d8 <USBD_LL_CloseEP+0x5c>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <USBD_LL_CloseEP+0x34>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011c7 	.word	0x080011c7
 80011b8:	080011cd 	.word	0x080011cd
 80011bc:	080011d3 	.word	0x080011d3
    case HAL_OK :
      usb_status = USBD_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
    break;
 80011c4:	e00b      	b.n	80011de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80011c6:	2303      	movs	r3, #3
 80011c8:	73fb      	strb	r3, [r7, #15]
    break;
 80011ca:	e008      	b.n	80011de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
    break;
 80011d0:	e005      	b.n	80011de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80011d2:	2303      	movs	r3, #3
 80011d4:	73fb      	strb	r3, [r7, #15]
    break;
 80011d6:	e002      	b.n	80011de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80011d8:	2303      	movs	r3, #3
 80011da:	73fb      	strb	r3, [r7, #15]
    break;
 80011dc:	bf00      	nop
  }
  return usb_status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001202:	78fa      	ldrb	r2, [r7, #3]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f001 f8db 	bl	80023c2 <HAL_PCD_EP_SetStall>
 800120c:	4603      	mov	r3, r0
 800120e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d816      	bhi.n	8001244 <USBD_LL_StallEP+0x5c>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <USBD_LL_StallEP+0x34>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800122d 	.word	0x0800122d
 8001220:	08001233 	.word	0x08001233
 8001224:	08001239 	.word	0x08001239
 8001228:	0800123f 	.word	0x0800123f
    case HAL_OK :
      usb_status = USBD_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
    break;
 8001230:	e00b      	b.n	800124a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001232:	2303      	movs	r3, #3
 8001234:	73fb      	strb	r3, [r7, #15]
    break;
 8001236:	e008      	b.n	800124a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
    break;
 800123c:	e005      	b.n	800124a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800123e:	2303      	movs	r3, #3
 8001240:	73fb      	strb	r3, [r7, #15]
    break;
 8001242:	e002      	b.n	800124a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8001244:	2303      	movs	r3, #3
 8001246:	73fb      	strb	r3, [r7, #15]
    break;
 8001248:	bf00      	nop
  }
  return usb_status;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f905 	bl	8002482 <HAL_PCD_EP_ClrStall>
 8001278:	4603      	mov	r3, r0
 800127a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d816      	bhi.n	80012b0 <USBD_LL_ClearStallEP+0x5c>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <USBD_LL_ClearStallEP+0x34>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08001299 	.word	0x08001299
 800128c:	0800129f 	.word	0x0800129f
 8001290:	080012a5 	.word	0x080012a5
 8001294:	080012ab 	.word	0x080012ab
    case HAL_OK :
      usb_status = USBD_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]
    break;
 800129c:	e00b      	b.n	80012b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800129e:	2303      	movs	r3, #3
 80012a0:	73fb      	strb	r3, [r7, #15]
    break;
 80012a2:	e008      	b.n	80012b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
    break;
 80012a8:	e005      	b.n	80012b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80012aa:	2303      	movs	r3, #3
 80012ac:	73fb      	strb	r3, [r7, #15]
    break;
 80012ae:	e002      	b.n	80012b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80012b0:	2303      	movs	r3, #3
 80012b2:	73fb      	strb	r3, [r7, #15]
    break;
 80012b4:	bf00      	nop
  }
  return usb_status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80012d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80012d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da0c      	bge.n	80012f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	3302      	adds	r3, #2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	e00b      	b.n	800130e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80012fc:	68f9      	ldr	r1, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	440b      	add	r3, r1
 8001308:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800130c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001336:	78fa      	ldrb	r2, [r7, #3]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fed6 	bl	80020ec <HAL_PCD_SetAddress>
 8001340:	4603      	mov	r3, r0
 8001342:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d816      	bhi.n	8001378 <USBD_LL_SetUSBAddress+0x5c>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <USBD_LL_SetUSBAddress+0x34>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	08001367 	.word	0x08001367
 8001358:	0800136d 	.word	0x0800136d
 800135c:	08001373 	.word	0x08001373
    case HAL_OK :
      usb_status = USBD_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]
    break;
 8001364:	e00b      	b.n	800137e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001366:	2303      	movs	r3, #3
 8001368:	73fb      	strb	r3, [r7, #15]
    break;
 800136a:	e008      	b.n	800137e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
    break;
 8001370:	e005      	b.n	800137e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001372:	2303      	movs	r3, #3
 8001374:	73fb      	strb	r3, [r7, #15]
    break;
 8001376:	e002      	b.n	800137e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8001378:	2303      	movs	r3, #3
 800137a:	73fb      	strb	r3, [r7, #15]
    break;
 800137c:	bf00      	nop
  }
  return usb_status;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	460b      	mov	r3, r1
 8001396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80013a6:	7af9      	ldrb	r1, [r7, #11]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	f000 ffc6 	bl	800233c <HAL_PCD_EP_Transmit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d816      	bhi.n	80013e8 <USBD_LL_Transmit+0x60>
 80013ba:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <USBD_LL_Transmit+0x38>)
 80013bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013d7 	.word	0x080013d7
 80013c8:	080013dd 	.word	0x080013dd
 80013cc:	080013e3 	.word	0x080013e3
    case HAL_OK :
      usb_status = USBD_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	75fb      	strb	r3, [r7, #23]
    break;
 80013d4:	e00b      	b.n	80013ee <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80013d6:	2303      	movs	r3, #3
 80013d8:	75fb      	strb	r3, [r7, #23]
    break;
 80013da:	e008      	b.n	80013ee <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80013dc:	2301      	movs	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
    break;
 80013e0:	e005      	b.n	80013ee <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80013e2:	2303      	movs	r3, #3
 80013e4:	75fb      	strb	r3, [r7, #23]
    break;
 80013e6:	e002      	b.n	80013ee <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80013e8:	2303      	movs	r3, #3
 80013ea:	75fb      	strb	r3, [r7, #23]
    break;
 80013ec:	bf00      	nop
  }
  return usb_status;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	460b      	mov	r3, r1
 8001406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001416:	7af9      	ldrb	r1, [r7, #11]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	f000 ff39 	bl	8002292 <HAL_PCD_EP_Receive>
 8001420:	4603      	mov	r3, r0
 8001422:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8001424:	7dbb      	ldrb	r3, [r7, #22]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d816      	bhi.n	8001458 <USBD_LL_PrepareReceive+0x60>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <USBD_LL_PrepareReceive+0x38>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	08001447 	.word	0x08001447
 8001438:	0800144d 	.word	0x0800144d
 800143c:	08001453 	.word	0x08001453
    case HAL_OK :
      usb_status = USBD_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
    break;
 8001444:	e00b      	b.n	800145e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001446:	2303      	movs	r3, #3
 8001448:	75fb      	strb	r3, [r7, #23]
    break;
 800144a:	e008      	b.n	800145e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800144c:	2301      	movs	r3, #1
 800144e:	75fb      	strb	r3, [r7, #23]
    break;
 8001450:	e005      	b.n	800145e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001452:	2303      	movs	r3, #3
 8001454:	75fb      	strb	r3, [r7, #23]
    break;
 8001456:	e002      	b.n	800145e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8001458:	2303      	movs	r3, #3
 800145a:	75fb      	strb	r3, [r7, #23]
    break;
 800145c:	bf00      	nop
  }
  return usb_status;
 800145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f000 ff44 	bl	800230c <HAL_PCD_EP_GetRxCount>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <HAL_PCDEx_LPM_Callback+0x18>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d013      	beq.n	80014ce <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80014a6:	e023      	b.n	80014f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80014b0:	f000 f824 	bl	80014fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80014ba:	f023 0306 	bic.w	r3, r3, #6
 80014be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f006 f9b0 	bl	800782c <USBD_LL_Resume>
    break;
 80014cc:	e010      	b.n	80014f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f994 	bl	8007802 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_PCDEx_LPM_Callback+0x68>)
 80014e8:	f043 0306 	orr.w	r3, r3, #6
 80014ec:	6113      	str	r3, [r2, #16]
    break;
 80014ee:	bf00      	nop
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8001500:	f7ff f8bc 	bl	800067c <SystemClock_Config>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <SystemInit+0x64>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a16      	ldr	r2, [pc, #88]	; (800156c <SystemInit+0x64>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <SystemInit+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <SystemInit+0x68>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <SystemInit+0x68>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <SystemInit+0x68>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <SystemInit+0x68>)
 8001534:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001538:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800153c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <SystemInit+0x68>)
 8001540:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001544:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <SystemInit+0x68>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <SystemInit+0x68>)
 800154c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <SystemInit+0x68>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <SystemInit+0x64>)
 800155a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155e:	609a      	str	r2, [r3, #8]
#endif
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_Init+0x3c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x3c>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001588:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f960 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001590:	2000      	movs	r0, #0
 8001592:	f000 f80f 	bl	80015b4 <HAL_InitTick>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	e001      	b.n	80015a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a2:	f7ff f8dd 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a6:	79fb      	ldrb	r3, [r7, #7]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40022000 	.word	0x40022000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_InitTick+0x6c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_InitTick+0x70>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f96b 	bl	80018ba <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d809      	bhi.n	8001604 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f935 	bl	8001866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_InitTick+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e007      	b.n	8001614 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e004      	b.n	8001614 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e001      	b.n	8001614 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000007c 	.word	0x2000007c
 8001624:	20000074 	.word	0x20000074
 8001628:	20000078 	.word	0x20000078

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	2000007c 	.word	0x2000007c
 8001650:	20001234 	.word	0x20001234

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20001234 	.word	0x20001234

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_Delay+0x40>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000007c 	.word	0x2000007c

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e14e      	b.n	8001b82 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8140 	beq.w	8001b7c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d00b      	beq.n	800191c <HAL_GPIO_Init+0x48>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b02      	cmp	r3, #2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001910:	2b11      	cmp	r3, #17
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d130      	bne.n	800197e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001952:	2201      	movs	r2, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 0201 	and.w	r2, r3, #1
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0xea>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d123      	bne.n	8001a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	08da      	lsrs	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3208      	adds	r2, #8
 8001a00:	6939      	ldr	r1, [r7, #16]
 8001a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0203 	and.w	r2, r3, #3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 809a 	beq.w	8001b7c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	4b55      	ldr	r3, [pc, #340]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4c:	4a54      	ldr	r2, [pc, #336]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6613      	str	r3, [r2, #96]	; 0x60
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_GPIO_Init+0x2cc>)
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a8a:	d013      	beq.n	8001ab4 <HAL_GPIO_Init+0x1e0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <HAL_GPIO_Init+0x2d4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d00d      	beq.n	8001ab0 <HAL_GPIO_Init+0x1dc>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a45      	ldr	r2, [pc, #276]	; (8001bac <HAL_GPIO_Init+0x2d8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d007      	beq.n	8001aac <HAL_GPIO_Init+0x1d8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <HAL_GPIO_Init+0x2dc>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d101      	bne.n	8001aa8 <HAL_GPIO_Init+0x1d4>
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x1e2>
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x1e2>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x1e2>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x1e2>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac6:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ad4:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af8:	4a2e      	ldr	r2, [pc, #184]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b28:	4b22      	ldr	r3, [pc, #136]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_GPIO_Init+0x2e0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f aea9 	bne.w	80018e4 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	40010400 	.word	0x40010400

08001bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bea:	b08b      	sub	sp, #44	; 0x2c
 8001bec:	af06      	add	r7, sp, #24
 8001bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e104      	b.n	8001e04 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff f8ec 	bl	8000dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 ffe9 	bl	8004bf8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	687e      	ldr	r6, [r7, #4]
 8001c2e:	466d      	mov	r5, sp
 8001c30:	f106 0410 	add.w	r4, r6, #16
 8001c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	602b      	str	r3, [r5, #0]
 8001c3c:	1d33      	adds	r3, r6, #4
 8001c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c40:	6838      	ldr	r0, [r7, #0]
 8001c42:	f002 ffb1 	bl	8004ba8 <USB_CoreInit>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0d5      	b.n	8001e04 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f002 ffe5 	bl	8004c2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e04c      	b.n	8001d04 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3336      	adds	r3, #54	; 0x36
 8001ca8:	4602      	mov	r2, r0
 8001caa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	3338      	adds	r3, #56	; 0x38
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cd6:	7bfa      	ldrb	r2, [r7, #15]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	333c      	adds	r3, #60	; 0x3c
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3340      	adds	r3, #64	; 0x40
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	3301      	adds	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3ad      	bcc.n	8001c6a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e044      	b.n	8001d9e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3b5      	bcc.n	8001d14 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	687e      	ldr	r6, [r7, #4]
 8001db0:	466d      	mov	r5, sp
 8001db2:	f106 0410 	add.w	r4, r6, #16
 8001db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	602b      	str	r3, [r5, #0]
 8001dbe:	1d33      	adds	r3, r6, #4
 8001dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc2:	6838      	ldr	r0, [r7, #0]
 8001dc4:	f002 ff40 	bl	8004c48 <USB_DevInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e014      	b.n	8001e04 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f001 fa63 	bl	80032be <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fef9 	bl	8006bf4 <USB_DevDisconnect>

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_Start+0x16>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e012      	b.n	8001e48 <HAL_PCD_Start+0x3c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fecb 	bl	8004bca <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 fec4 	bl	8006bc6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 fede 	bl	8006c1e <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6c:	d102      	bne.n	8001e74 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb5b 	bl	800252a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fed0 	bl	8006c1e <USB_ReadInterrupts>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d112      	bne.n	8001eb0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f843 	bl	8000f2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f91e 	bl	80020ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 feb2 	bl	8006c1e <USB_ReadInterrupts>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec4:	d10b      	bne.n	8001ede <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 fe9b 	bl	8006c1e <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	d10b      	bne.n	8001f0c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f06:	b292      	uxth	r2, r2
 8001f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 fe84 	bl	8006c1e <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f20:	d133      	bne.n	8001f8a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0204 	bic.w	r2, r2, #4
 8001f34:	b292      	uxth	r2, r2
 8001f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f64:	2100      	movs	r1, #0
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fa92 	bl	8001490 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff f817 	bl	8000fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f84:	b292      	uxth	r2, r2
 8001f86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 fe45 	bl	8006c1e <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f9e:	d126      	bne.n	8001fee <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0204 	orr.w	r2, r2, #4
 8001fe2:	b292      	uxth	r2, r2
 8001fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe ffbf 	bl	8000f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 fe13 	bl	8006c1e <USB_ReadInterrupts>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffe:	2b80      	cmp	r3, #128	; 0x80
 8002000:	d13f      	bne.n	8002082 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002014:	b292      	uxth	r2, r2
 8002016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d12b      	bne.n	800207c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0204 	orr.w	r2, r2, #4
 8002036:	b292      	uxth	r2, r2
 8002038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0208 	orr.w	r2, r2, #8
 800204e:	b292      	uxth	r2, r2
 8002050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002064:	b29b      	uxth	r3, r3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002072:	2101      	movs	r1, #1
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fa0b 	bl	8001490 <HAL_PCDEx_LPM_Callback>
 800207a:	e002      	b.n	8002082 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7fe ff75 	bl	8000f6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fdc9 	bl	8006c1e <USB_ReadInterrupts>
 800208c:	4603      	mov	r3, r0
 800208e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002096:	d10e      	bne.n	80020b6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020aa:	b292      	uxth	r2, r2
 80020ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7fe ff2e 	bl	8000f12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fdaf 	bl	8006c1e <USB_ReadInterrupts>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ca:	d10b      	bne.n	80020e4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020de:	b292      	uxth	r2, r2
 80020e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_SetAddress+0x1a>
 8002102:	2302      	movs	r3, #2
 8002104:	e013      	b.n	800212e <HAL_PCD_SetAddress+0x42>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fd3d 	bl	8006b9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	4608      	mov	r0, r1
 8002140:	4611      	mov	r1, r2
 8002142:	461a      	mov	r2, r3
 8002144:	4603      	mov	r3, r0
 8002146:	70fb      	strb	r3, [r7, #3]
 8002148:	460b      	mov	r3, r1
 800214a:	803b      	strh	r3, [r7, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002154:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002158:	2b00      	cmp	r3, #0
 800215a:	da0e      	bge.n	800217a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	705a      	strb	r2, [r3, #1]
 8002178:	e00e      	b.n	8002198 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 0207 	and.w	r2, r3, #7
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021a4:	883a      	ldrh	r2, [r7, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	78ba      	ldrb	r2, [r7, #2]
 80021ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d004      	beq.n	80021c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021c2:	78bb      	ldrb	r3, [r7, #2]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d102      	bne.n	80021ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_PCD_EP_Open+0xa6>
 80021d8:	2302      	movs	r3, #2
 80021da:	e00e      	b.n	80021fa <HAL_PCD_EP_Open+0xc4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68f9      	ldr	r1, [r7, #12]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 fd4e 	bl	8004c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021f8:	7afb      	ldrb	r3, [r7, #11]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800220e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	da0e      	bge.n	8002234 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
 8002232:	e00e      	b.n	8002252 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	f003 0207 	and.w	r2, r3, #7
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_PCD_EP_Close+0x6a>
 8002268:	2302      	movs	r3, #2
 800226a:	e00e      	b.n	800228a <HAL_PCD_EP_Close+0x88>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f874 	bl	8005368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	460b      	mov	r3, r1
 80022a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	f003 0207 	and.w	r2, r3, #7
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d106      	bne.n	80022f6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6979      	ldr	r1, [r7, #20]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fa27 	bl	8005742 <USB_EPStartXfer>
 80022f4:	e005      	b.n	8002302 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fa20 	bl	8005742 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 0207 	and.w	r2, r3, #7
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	460b      	mov	r3, r1
 800234a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2201      	movs	r2, #1
 8002386:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	b2da      	uxtb	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6979      	ldr	r1, [r7, #20]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 f9cc 	bl	8005742 <USB_EPStartXfer>
 80023aa:	e005      	b.n	80023b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6979      	ldr	r1, [r7, #20]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f9c5 	bl	8005742 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0207 	and.w	r2, r3, #7
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d901      	bls.n	80023e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e04c      	b.n	800247a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da0e      	bge.n	8002406 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	705a      	strb	r2, [r3, #1]
 8002404:	e00c      	b.n	8002420 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_EP_SetStall+0x7e>
 800243c:	2302      	movs	r3, #2
 800243e:	e01c      	b.n	800247a <HAL_PCD_EP_SetStall+0xb8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 faa6 	bl	80069a0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f004 fbe7 	bl	8006c3e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d901      	bls.n	80024a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e040      	b.n	8002522 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da0e      	bge.n	80024c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	705a      	strb	r2, [r3, #1]
 80024c4:	e00e      	b.n	80024e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 0207 	and.w	r2, r3, #7
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_PCD_EP_ClrStall+0x82>
 8002500:	2302      	movs	r3, #2
 8002502:	e00e      	b.n	8002522 <HAL_PCD_EP_ClrStall+0xa0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	4618      	mov	r0, r3
 8002514:	f004 fa95 	bl	8006a42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b08e      	sub	sp, #56	; 0x38
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002532:	e2d1      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800253c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800253e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800254a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8152 	bne.w	80027f8 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	d150      	bne.n	8002600 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800256a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256e:	81fb      	strh	r3, [r7, #14]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	89fb      	ldrh	r3, [r7, #14]
 8002576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800257a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257e:	b29b      	uxth	r3, r3
 8002580:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3328      	adds	r3, #40	; 0x28
 8002586:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	441a      	add	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025be:	2100      	movs	r1, #0
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fe fc8c 	bl	8000ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8282 	beq.w	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 827d 	bne.w	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b292      	uxth	r2, r2
 80025f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025fe:	e26b      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002616:	2b00      	cmp	r3, #0
 8002618:	d032      	beq.n	8002680 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4413      	add	r3, r2
 8002634:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002654:	b29b      	uxth	r3, r3
 8002656:	f004 fb3f 	bl	8006cd8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002666:	4013      	ands	r3, r2
 8002668:	823b      	strh	r3, [r7, #16]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	8a3a      	ldrh	r2, [r7, #16]
 8002670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002674:	b292      	uxth	r2, r2
 8002676:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fe fc03 	bl	8000e84 <HAL_PCD_SetupStageCallback>
 800267e:	e22b      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002680:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002684:	2b00      	cmp	r3, #0
 8002686:	f280 8227 	bge.w	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	b29a      	uxth	r2, r3
 8002692:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002696:	4013      	ands	r3, r2
 8002698:	83bb      	strh	r3, [r7, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	8bba      	ldrh	r2, [r7, #28]
 80026a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026a4:	b292      	uxth	r2, r2
 80026a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d019      	beq.n	800270c <PCD_EP_ISR_Handler+0x1e2>
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d015      	beq.n	800270c <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	6959      	ldr	r1, [r3, #20]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f004 faf1 	bl	8006cd8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	441a      	add	r2, r3
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002704:	2100      	movs	r1, #0
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fbce 	bl	8000ea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800271a:	b29b      	uxth	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4413      	add	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d112      	bne.n	800275a <PCD_EP_ISR_Handler+0x230>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800273e:	b29a      	uxth	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800274e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002752:	b29a      	uxth	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	801a      	strh	r2, [r3, #0]
 8002758:	e02f      	b.n	80027ba <PCD_EP_ISR_Handler+0x290>
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b3e      	cmp	r3, #62	; 0x3e
 8002760:	d813      	bhi.n	800278a <PCD_EP_ISR_Handler+0x260>
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <PCD_EP_ISR_Handler+0x252>
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	3301      	adds	r3, #1
 800277a:	633b      	str	r3, [r7, #48]	; 0x30
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	b29b      	uxth	r3, r3
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	b29a      	uxth	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	e017      	b.n	80027ba <PCD_EP_ISR_Handler+0x290>
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <PCD_EP_ISR_Handler+0x27a>
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	3b01      	subs	r3, #1
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	827b      	strh	r3, [r7, #18]
 80027cc:	8a7b      	ldrh	r3, [r7, #18]
 80027ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027d2:	827b      	strh	r3, [r7, #18]
 80027d4:	8a7b      	ldrh	r3, [r7, #18]
 80027d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027da:	827b      	strh	r3, [r7, #18]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	8a7b      	ldrh	r3, [r7, #18]
 80027e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8013      	strh	r3, [r2, #0]
 80027f6:	e16f      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800280a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800280e:	2b00      	cmp	r3, #0
 8002810:	f280 80e4 	bge.w	80029dc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29a      	uxth	r2, r3
 8002826:	f640 738f 	movw	r3, #3983	; 0xf8f
 800282a:	4013      	ands	r3, r2
 800282c:	853b      	strh	r3, [r7, #40]	; 0x28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800283e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002842:	b292      	uxth	r2, r2
 8002844:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002846:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	7b1b      	ldrb	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800286c:	b29b      	uxth	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4413      	add	r3, r2
 800287e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800288a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8083 	beq.w	8002998 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	6959      	ldr	r1, [r3, #20]
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	88da      	ldrh	r2, [r3, #6]
 800289e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a0:	f004 fa1a 	bl	8006cd8 <USB_ReadPMA>
 80028a4:	e078      	b.n	8002998 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	78db      	ldrb	r3, [r3, #3]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d108      	bne.n	80028c0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80028ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028b0:	461a      	mov	r2, r3
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f91d 	bl	8002af4 <HAL_PCD_EP_DB_Receive>
 80028ba:	4603      	mov	r3, r0
 80028bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80028be:	e06b      	b.n	8002998 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	847b      	strh	r3, [r7, #34]	; 0x22
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	441a      	add	r2, r3
 80028ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01f      	beq.n	800295a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4413      	add	r3, r2
 8002934:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002940:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	6959      	ldr	r1, [r3, #20]
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	891a      	ldrh	r2, [r3, #8]
 8002952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002954:	f004 f9c0 	bl	8006cd8 <USB_ReadPMA>
 8002958:	e01e      	b.n	8002998 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002962:	b29b      	uxth	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	4413      	add	r3, r2
 8002974:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002980:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	6959      	ldr	r1, [r3, #20]
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	895a      	ldrh	r2, [r3, #10]
 8002992:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002994:	f004 f9a0 	bl	8006cd8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800299e:	441a      	add	r2, r3
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029aa:	441a      	add	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <PCD_EP_ISR_Handler+0x498>
 80029b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d206      	bcs.n	80029d0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe fa6d 	bl	8000ea8 <HAL_PCD_DataOutStageCallback>
 80029ce:	e005      	b.n	80029dc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 feb3 	bl	8005742 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d078      	beq.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80029e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a14:	843b      	strh	r3, [r7, #32]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	8c3b      	ldrh	r3, [r7, #32]
 8002a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	78db      	ldrb	r3, [r3, #3]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d108      	bne.n	8002a4c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d144      	bne.n	8002acc <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13f      	bne.n	8002acc <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	8bfb      	ldrh	r3, [r7, #30]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d906      	bls.n	8002a8a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	8bfb      	ldrh	r3, [r7, #30]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	619a      	str	r2, [r3, #24]
 8002a88:	e002      	b.n	8002a90 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fa1d 	bl	8000ede <HAL_PCD_DataInStageCallback>
 8002aa4:	e018      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	8bfb      	ldrh	r3, [r7, #30]
 8002aac:	441a      	add	r2, r3
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	8bfb      	ldrh	r3, [r7, #30]
 8002ab8:	441a      	add	r2, r3
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f002 fe3c 	bl	8005742 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002aca:	e005      	b.n	8002ad8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f917 	bl	8002d06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f6ff ad25 	blt.w	8002534 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3738      	adds	r7, #56	; 0x38
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d07c      	beq.n	8002c06 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	4413      	add	r3, r2
 8002b26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b30:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	8b7b      	ldrh	r3, [r7, #26]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d306      	bcc.n	8002b4a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	8b7b      	ldrh	r3, [r7, #26]
 8002b42:	1ad2      	subs	r2, r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	619a      	str	r2, [r3, #24]
 8002b48:	e002      	b.n	8002b50 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d123      	bne.n	8002ba0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	833b      	strh	r3, [r7, #24]
 8002b74:	8b3b      	ldrh	r3, [r7, #24]
 8002b76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b7a:	833b      	strh	r3, [r7, #24]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	441a      	add	r2, r3
 8002b8a:	8b3b      	ldrh	r3, [r7, #24]
 8002b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01f      	beq.n	8002bea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	82fb      	strh	r3, [r7, #22]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	8afb      	ldrh	r3, [r7, #22]
 8002bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8085 	beq.w	8002cfc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	891a      	ldrh	r2, [r3, #8]
 8002bfe:	8b7b      	ldrh	r3, [r7, #26]
 8002c00:	f004 f86a 	bl	8006cd8 <USB_ReadPMA>
 8002c04:	e07a      	b.n	8002cfc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	8b7b      	ldrh	r3, [r7, #26]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d306      	bcc.n	8002c44 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	8b7b      	ldrh	r3, [r7, #26]
 8002c3c:	1ad2      	subs	r2, r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	619a      	str	r2, [r3, #24]
 8002c42:	e002      	b.n	8002c4a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d123      	bne.n	8002c9a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	83fb      	strh	r3, [r7, #30]
 8002c6e:	8bfb      	ldrh	r3, [r7, #30]
 8002c70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c74:	83fb      	strh	r3, [r7, #30]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	8bfb      	ldrh	r3, [r7, #30]
 8002c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d11f      	bne.n	8002ce4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	83bb      	strh	r3, [r7, #28]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	8bbb      	ldrh	r3, [r7, #28]
 8002cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6959      	ldr	r1, [r3, #20]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	895a      	ldrh	r2, [r3, #10]
 8002cf6:	8b7b      	ldrh	r3, [r7, #26]
 8002cf8:	f003 ffee 	bl	8006cd8 <USB_ReadPMA>
    }
  }

  return count;
 8002cfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b092      	sub	sp, #72	; 0x48
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	4613      	mov	r3, r2
 8002d12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8130 	beq.w	8002f80 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d44:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d906      	bls.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d56:	1ad2      	subs	r2, r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	e002      	b.n	8002d64 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d12c      	bne.n	8002dc6 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7fe f8b3 	bl	8000ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 822d 	beq.w	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	827b      	strh	r3, [r7, #18]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	8013      	strh	r3, [r2, #0]
 8002dc4:	e20b      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01f      	beq.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 81e1 	bne.w	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e22:	441a      	add	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e2e:	441a      	add	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d309      	bcc.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6a1a      	ldr	r2, [r3, #32]
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	1ad2      	subs	r2, r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	621a      	str	r2, [r3, #32]
 8002e52:	e014      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002e5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e68:	e009      	b.n	8002e7e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	785b      	ldrb	r3, [r3, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d155      	bne.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00da      	lsls	r2, r3, #3
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d112      	bne.n	8002eda <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	801a      	strh	r2, [r3, #0]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	e047      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x264>
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	2b3e      	cmp	r3, #62	; 0x3e
 8002ede:	d811      	bhi.n	8002f04 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	e032      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x264>
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x214>
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	3b01      	subs	r3, #1
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	029b      	lsls	r3, r3, #10
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	801a      	strh	r2, [r3, #0]
 8002f30:	e01b      	b.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x264>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	785b      	ldrb	r3, [r3, #1]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d117      	bne.n	8002f6a <HAL_PCD_EP_DB_Transmit+0x264>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	4413      	add	r3, r2
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	00da      	lsls	r2, r3, #3
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6959      	ldr	r1, [r3, #20]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	891a      	ldrh	r2, [r3, #8]
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f003 fe6c 	bl	8006c56 <USB_WritePMA>
 8002f7e:	e12e      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d306      	bcc.n	8002fbe <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fb6:	1ad2      	subs	r2, r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	619a      	str	r2, [r3, #24]
 8002fbc:	e002      	b.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d12c      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7fd ff83 	bl	8000ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 80fd 	bne.w	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003020:	b29b      	uxth	r3, r3
 8003022:	8013      	strh	r3, [r2, #0]
 8003024:	e0db      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11f      	bne.n	8003070 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	441a      	add	r2, r3
 800305a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800305c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	b29b      	uxth	r3, r3
 800306e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 80b1 	bne.w	80031de <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003082:	441a      	add	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800308e:	441a      	add	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d309      	bcc.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ac:	1ad2      	subs	r2, r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	621a      	str	r2, [r3, #32]
 80030b2:	e014      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80030bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030c8:	e009      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d155      	bne.n	8003198 <HAL_PCD_EP_DB_Transmit+0x492>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003100:	4413      	add	r3, r2
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	00da      	lsls	r2, r3, #3
 800310a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310c:	4413      	add	r3, r2
 800310e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d112      	bne.n	8003140 <HAL_PCD_EP_DB_Transmit+0x43a>
 800311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003124:	b29a      	uxth	r2, r3
 8003126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003138:	b29a      	uxth	r2, r3
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	e044      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	2b3e      	cmp	r3, #62	; 0x3e
 8003144:	d811      	bhi.n	800316a <HAL_PCD_EP_DB_Transmit+0x464>
 8003146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_PCD_EP_DB_Transmit+0x456>
 8003156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003158:	3301      	adds	r3, #1
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315e:	b29b      	uxth	r3, r3
 8003160:	029b      	lsls	r3, r3, #10
 8003162:	b29a      	uxth	r2, r3
 8003164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	e02f      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <HAL_PCD_EP_DB_Transmit+0x47a>
 800317a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317c:	3b01      	subs	r3, #1
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003182:	b29b      	uxth	r3, r3
 8003184:	029b      	lsls	r3, r3, #10
 8003186:	b29b      	uxth	r3, r3
 8003188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800318c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003190:	b29a      	uxth	r2, r3
 8003192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003194:	801a      	strh	r2, [r3, #0]
 8003196:	e018      	b.n	80031ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d114      	bne.n	80031ca <HAL_PCD_EP_DB_Transmit+0x4c4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ae:	4413      	add	r3, r2
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00da      	lsls	r2, r3, #3
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	4413      	add	r3, r2
 80031bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031c0:	633b      	str	r3, [r7, #48]	; 0x30
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	6959      	ldr	r1, [r3, #20]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	895a      	ldrh	r2, [r3, #10]
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f003 fd3c 	bl	8006c56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f8:	823b      	strh	r3, [r7, #16]
 80031fa:	8a3b      	ldrh	r3, [r7, #16]
 80031fc:	f083 0310 	eor.w	r3, r3, #16
 8003200:	823b      	strh	r3, [r7, #16]
 8003202:	8a3b      	ldrh	r3, [r7, #16]
 8003204:	f083 0320 	eor.w	r3, r3, #32
 8003208:	823b      	strh	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	8a3b      	ldrh	r3, [r7, #16]
 800321a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800321e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322a:	b29b      	uxth	r3, r3
 800322c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3748      	adds	r7, #72	; 0x48
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	4613      	mov	r3, r2
 8003248:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e009      	b.n	8003282 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800326e:	897a      	ldrh	r2, [r7, #10]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003282:	893b      	ldrh	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2200      	movs	r2, #0
 800328c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	b29a      	uxth	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	80da      	strh	r2, [r3, #6]
 8003296:	e00b      	b.n	80032b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2201      	movs	r2, #1
 800329c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <HAL_PWREx_GetVoltageRange+0x18>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40007000 	.word	0x40007000

08003330 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800333e:	d130      	bne.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d038      	beq.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2232      	movs	r2, #50	; 0x32
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0c9b      	lsrs	r3, r3, #18
 8003370:	3301      	adds	r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003374:	e002      	b.n	800337c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3b01      	subs	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d102      	bne.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x60>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f2      	bne.n	8003376 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d110      	bne.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e00f      	b.n	80033c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d007      	beq.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b8:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000
 80033d4:	20000074 	.word	0x20000074
 80033d8:	431bde83 	.word	0x431bde83

080033dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80033e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ea:	6053      	str	r3, [r2, #4]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40007000 	.word	0x40007000

080033fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d102      	bne.n	8003410 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f000 bc56 	b.w	8003cbc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003410:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800341a:	4b9f      	ldr	r3, [pc, #636]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80e6 	beq.w	80035fe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <HAL_RCC_OscConfig+0x4c>
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	2b0c      	cmp	r3, #12
 800343c:	f040 808d 	bne.w	800355a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b01      	cmp	r3, #1
 8003444:	f040 8089 	bne.w	800355a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003448:	4b93      	ldr	r3, [pc, #588]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d006      	beq.n	8003462 <HAL_RCC_OscConfig+0x66>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f000 bc2d 	b.w	8003cbc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003466:	4b8c      	ldr	r3, [pc, #560]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d004      	beq.n	800347c <HAL_RCC_OscConfig+0x80>
 8003472:	4b89      	ldr	r3, [pc, #548]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347a:	e005      	b.n	8003488 <HAL_RCC_OscConfig+0x8c>
 800347c:	4b86      	ldr	r3, [pc, #536]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003488:	4293      	cmp	r3, r2
 800348a:	d224      	bcs.n	80034d6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fdbd 	bl	8004010 <RCC_SetFlashLatencyFromMSIRange>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f000 bc0d 	b.w	8003cbc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034a8:	f043 0308 	orr.w	r3, r3, #8
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b7a      	ldr	r3, [pc, #488]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	4977      	ldr	r1, [pc, #476]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c0:	4b75      	ldr	r3, [pc, #468]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	4972      	ldr	r1, [pc, #456]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	e025      	b.n	8003522 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d6:	4b70      	ldr	r3, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6f      	ldr	r2, [pc, #444]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034dc:	f043 0308 	orr.w	r3, r3, #8
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	496a      	ldr	r1, [pc, #424]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034f4:	4b68      	ldr	r3, [pc, #416]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	021b      	lsls	r3, r3, #8
 8003502:	4965      	ldr	r1, [pc, #404]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd7c 	bl	8004010 <RCC_SetFlashLatencyFromMSIRange>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e3cc      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003522:	f000 fcb3 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003526:	4601      	mov	r1, r0
 8003528:	4b5b      	ldr	r3, [pc, #364]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	4a5a      	ldr	r2, [pc, #360]	; (800369c <HAL_RCC_OscConfig+0x2a0>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	fa21 f303 	lsr.w	r3, r1, r3
 800353e:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_OscConfig+0x2a4>)
 8003540:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003542:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_RCC_OscConfig+0x2a8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f834 	bl	80015b4 <HAL_InitTick>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d052      	beq.n	80035fc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	e3b0      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d032      	beq.n	80035c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a4c      	ldr	r2, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800356e:	f7fe f871 	bl	8001654 <HAL_GetTick>
 8003572:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003576:	f7fe f86d 	bl	8001654 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e399      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003588:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003594:	4b40      	ldr	r3, [pc, #256]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3f      	ldr	r2, [pc, #252]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800359a:	f043 0308 	orr.w	r3, r3, #8
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b3d      	ldr	r3, [pc, #244]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	493a      	ldr	r1, [pc, #232]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b2:	4b39      	ldr	r3, [pc, #228]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	4935      	ldr	r1, [pc, #212]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
 80035c6:	e01a      	b.n	80035fe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035c8:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a32      	ldr	r2, [pc, #200]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035d4:	f7fe f83e 	bl	8001654 <HAL_GetTick>
 80035d8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035dc:	f7fe f83a 	bl	8001654 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e366      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x1e0>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d073      	beq.n	80036f2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d005      	beq.n	800361c <HAL_RCC_OscConfig+0x220>
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d10e      	bne.n	8003634 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d063      	beq.n	80036f0 <HAL_RCC_OscConfig+0x2f4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d15f      	bne.n	80036f0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e343      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x250>
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a15      	ldr	r2, [pc, #84]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0x28c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x274>
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a0c      	ldr	r2, [pc, #48]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x28c>
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a08      	ldr	r2, [pc, #32]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a05      	ldr	r2, [pc, #20]	; (8003698 <HAL_RCC_OscConfig+0x29c>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ffe0 	bl	8001654 <HAL_GetTick>
 8003694:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003696:	e010      	b.n	80036ba <HAL_RCC_OscConfig+0x2be>
 8003698:	40021000 	.word	0x40021000
 800369c:	080087ec 	.word	0x080087ec
 80036a0:	20000074 	.word	0x20000074
 80036a4:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd ffd4 	bl	8001654 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e300      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x2ac>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fd ffc4 	bl	8001654 <HAL_GetTick>
 80036cc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd ffc0 	bl	8001654 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2ec      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e2:	4b96      	ldr	r3, [pc, #600]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2d4>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d060      	beq.n	80037c0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d005      	beq.n	8003710 <HAL_RCC_OscConfig+0x314>
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d119      	bne.n	800373e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d116      	bne.n	800373e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003710:	4b8a      	ldr	r3, [pc, #552]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_OscConfig+0x32c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e2c9      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b84      	ldr	r3, [pc, #528]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	4981      	ldr	r1, [pc, #516]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	e040      	b.n	80037c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d023      	beq.n	800378e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003746:	4b7d      	ldr	r3, [pc, #500]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7c      	ldr	r2, [pc, #496]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003752:	f7fd ff7f 	bl	8001654 <HAL_GetTick>
 8003756:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375a:	f7fd ff7b 	bl	8001654 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e2a7      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376c:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	496d      	ldr	r1, [pc, #436]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
 800378c:	e018      	b.n	80037c0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378e:	4b6b      	ldr	r3, [pc, #428]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fd ff5b 	bl	8001654 <HAL_GetTick>
 800379e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fd ff57 	bl	8001654 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e283      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b4:	4b61      	ldr	r3, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d07f      	beq.n	80038cc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05f      	beq.n	8003894 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80037d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037da:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d037      	beq.n	800385a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e25c      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01b      	beq.n	8003844 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800380c:	4b4b      	ldr	r3, [pc, #300]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800380e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003812:	4a4a      	ldr	r2, [pc, #296]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800381c:	f7fd ff1a 	bl	8001654 <HAL_GetTick>
 8003820:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003824:	f7fd ff16 	bl	8001654 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b11      	cmp	r3, #17
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e242      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003836:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ef      	bne.n	8003824 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003844:	4b3d      	ldr	r3, [pc, #244]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	f023 0210 	bic.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	493a      	ldr	r1, [pc, #232]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	4a36      	ldr	r2, [pc, #216]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fd fef3 	bl	8001654 <HAL_GetTick>
 800386e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fd feef 	bl	8001654 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b11      	cmp	r3, #17
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e21b      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ef      	beq.n	8003872 <HAL_RCC_OscConfig+0x476>
 8003892:	e01b      	b.n	80038cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x540>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <HAL_RCC_OscConfig+0x540>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a4:	f7fd fed6 	bl	8001654 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ac:	f7fd fed2 	bl	8001654 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b11      	cmp	r3, #17
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1fe      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1ef      	bne.n	80038ac <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80c1 	beq.w	8003a5c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10e      	bne.n	800390a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCC_OscConfig+0x540>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <HAL_RCC_OscConfig+0x544>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_OscConfig+0x544>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x544>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003922:	f7fd fe97 	bl	8001654 <HAL_GetTick>
 8003926:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003928:	e00c      	b.n	8003944 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800392a:	f7fd fe93 	bl	8001654 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d905      	bls.n	8003944 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e1bf      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
 800393c:	40021000 	.word	0x40021000
 8003940:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003944:	4bb1      	ldr	r3, [pc, #708]	; (8003c0c <HAL_RCC_OscConfig+0x810>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ec      	beq.n	800392a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800395c:	4bac      	ldr	r3, [pc, #688]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	49a8      	ldr	r1, [pc, #672]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003982:	4ba3      	ldr	r3, [pc, #652]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	4aa1      	ldr	r2, [pc, #644]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003992:	4b9f      	ldr	r3, [pc, #636]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	4a9d      	ldr	r2, [pc, #628]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a2:	e018      	b.n	80039d6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039a4:	4b9a      	ldr	r3, [pc, #616]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	4a99      	ldr	r2, [pc, #612]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b4:	e00f      	b.n	80039d6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039b6:	4b96      	ldr	r3, [pc, #600]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	4a94      	ldr	r2, [pc, #592]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039c6:	4b92      	ldr	r3, [pc, #584]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	4a90      	ldr	r2, [pc, #576]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039ce:	f023 0304 	bic.w	r3, r3, #4
 80039d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fd fe39 	bl	8001654 <HAL_GetTick>
 80039e2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e4:	e00a      	b.n	80039fc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e6:	f7fd fe35 	bl	8001654 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e15f      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039fc:	4b84      	ldr	r3, [pc, #528]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0ed      	beq.n	80039e6 <HAL_RCC_OscConfig+0x5ea>
 8003a0a:	e01d      	b.n	8003a48 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fd fe22 	bl	8001654 <HAL_GetTick>
 8003a10:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fd fe1e 	bl	8001654 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e148      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ed      	bne.n	8003a14 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	4a74      	ldr	r2, [pc, #464]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a50:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03c      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a70:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a76:	4a66      	ldr	r2, [pc, #408]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd fde8 	bl	8001654 <HAL_GetTick>
 8003a84:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a88:	f7fd fde4 	bl	8001654 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e110      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ef      	beq.n	8003a88 <HAL_RCC_OscConfig+0x68c>
 8003aa8:	e01b      	b.n	8003ae2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aaa:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ab0:	4a57      	ldr	r2, [pc, #348]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003ab2:	f023 0301 	bic.w	r3, r3, #1
 8003ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fd fdcb 	bl	8001654 <HAL_GetTick>
 8003abe:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ac2:	f7fd fdc7 	bl	8001654 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0f3      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ad4:	4b4e      	ldr	r3, [pc, #312]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1ef      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80e7 	beq.w	8003cba <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f040 80b7 	bne.w	8003c64 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003af6:	4b46      	ldr	r3, [pc, #280]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d124      	bne.n	8003b54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	3b01      	subs	r3, #1
 8003b16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d11b      	bne.n	8003b54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d113      	bne.n	8003b54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d109      	bne.n	8003b54 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d061      	beq.n	8003c18 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d056      	beq.n	8003c08 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b66:	f7fd fd75 	bl	8001654 <HAL_GetTick>
 8003b6a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fd fd71 	bl	8001654 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e09d      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b80:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	4b20      	ldr	r3, [pc, #128]	; (8003c14 <HAL_RCC_OscConfig+0x818>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba6:	0212      	lsls	r2, r2, #8
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bae:	0852      	lsrs	r2, r2, #1
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	0552      	lsls	r2, r2, #21
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0652      	lsls	r2, r2, #25
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	4913      	ldr	r1, [pc, #76]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bc8:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a10      	ldr	r2, [pc, #64]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be0:	f7fd fd38 	bl	8001654 <HAL_GetTick>
 8003be4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd fd34 	bl	8001654 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e060      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_OscConfig+0x814>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c06:	e058      	b.n	8003cba <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e057      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	40021000 	.word	0x40021000
 8003c14:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d14a      	bne.n	8003cba <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c24:	4b27      	ldr	r3, [pc, #156]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c3c:	f7fd fd0a 	bl	8001654 <HAL_GetTick>
 8003c40:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7fd fd06 	bl	8001654 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e032      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x848>
 8003c62:	e02a      	b.n	8003cba <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d025      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c74:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c7c:	f023 0303 	bic.w	r3, r3, #3
 8003c80:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	4a0f      	ldr	r2, [pc, #60]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003c88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c8c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fce1 	bl	8001654 <HAL_GetTick>
 8003c92:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fd fcdd 	bl	8001654 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e009      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca8:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_OscConfig+0x8c8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x89a>
 8003cb4:	e001      	b.n	8003cba <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	; 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0c8      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4961      	ldr	r1, [pc, #388]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b0      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d04c      	beq.n	8003db2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d20:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d121      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e09e      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d107      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d115      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e092      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d50:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d109      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e086      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e07e      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 0203 	bic.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	493f      	ldr	r1, [pc, #252]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d82:	f7fd fc67 	bl	8001654 <HAL_GetTick>
 8003d86:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d8a:	f7fd fc63 	bl	8001654 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e066      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 020c 	and.w	r2, r3, #12
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d1eb      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	492c      	ldr	r1, [pc, #176]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d210      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 0207 	bic.w	r2, r3, #7
 8003de6:	4924      	ldr	r1, [pc, #144]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <HAL_RCC_ClockConfig+0x1b0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e036      	b.n	8003e6e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4918      	ldr	r1, [pc, #96]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4910      	ldr	r1, [pc, #64]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e3e:	f000 f825 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 8003e42:	4601      	mov	r1, r0
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCC_ClockConfig+0x1b4>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	4a0c      	ldr	r2, [pc, #48]	; (8003e80 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	5cd3      	ldrb	r3, [r2, r3]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	fa21 f303 	lsr.w	r3, r1, r3
 8003e5a:	4a0a      	ldr	r2, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd fba6 	bl	80015b4 <HAL_InitTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40022000 	.word	0x40022000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	080087ec 	.word	0x080087ec
 8003e84:	20000074 	.word	0x20000074
 8003e88:	20000078 	.word	0x20000078

08003e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea4:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0c      	cmp	r3, #12
 8003eb8:	d121      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11e      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d107      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e005      	b.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003edc:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ee8:	4a2a      	ldr	r2, [pc, #168]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b0c      	cmp	r3, #12
 8003f18:	d133      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa4>
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0xaa>
 8003f2e:	e005      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f32:	617b      	str	r3, [r7, #20]
      break;
 8003f34:	e005      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f36:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x110>)
 8003f38:	617b      	str	r3, [r7, #20]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	617b      	str	r3, [r7, #20]
      break;
 8003f40:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f42:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	fb02 f203 	mul.w	r2, r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	0e5b      	lsrs	r3, r3, #25
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	3301      	adds	r3, #1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f80:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f82:	69bb      	ldr	r3, [r7, #24]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3724      	adds	r7, #36	; 0x24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40021000 	.word	0x40021000
 8003f94:	08008804 	.word	0x08008804
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000074 	.word	0x20000074

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	080087fc 	.word	0x080087fc

08003fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fe8:	f7ff ffda 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fec:	4601      	mov	r1, r0
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	0adb      	lsrs	r3, r3, #11
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	f003 031f 	and.w	r3, r3, #31
 8004000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	080087fc 	.word	0x080087fc

08004010 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004018:	2300      	movs	r3, #0
 800401a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800401c:	4b2a      	ldr	r3, [pc, #168]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004028:	f7ff f974 	bl	8003314 <HAL_PWREx_GetVoltageRange>
 800402c:	6178      	str	r0, [r7, #20]
 800402e:	e014      	b.n	800405a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6593      	str	r3, [r2, #88]	; 0x58
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004048:	f7ff f964 	bl	8003314 <HAL_PWREx_GetVoltageRange>
 800404c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004058:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004060:	d10b      	bne.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b80      	cmp	r3, #128	; 0x80
 8004066:	d919      	bls.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2ba0      	cmp	r3, #160	; 0xa0
 800406c:	d902      	bls.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800406e:	2302      	movs	r3, #2
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	e013      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004074:	2301      	movs	r3, #1
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e010      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b80      	cmp	r3, #128	; 0x80
 800407e:	d902      	bls.n	8004086 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004080:	2303      	movs	r3, #3
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	e00a      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d102      	bne.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800408c:	2302      	movs	r3, #2
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e004      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b70      	cmp	r3, #112	; 0x70
 8004096:	d101      	bne.n	800409c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004098:	2301      	movs	r3, #1
 800409a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 0207 	bic.w	r2, r3, #7
 80040a4:	4909      	ldr	r1, [pc, #36]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d001      	beq.n	80040be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40022000 	.word	0x40022000

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040d8:	2300      	movs	r3, #0
 80040da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 809e 	beq.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ee:	2300      	movs	r3, #0
 80040f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f2:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004108:	4b40      	ldr	r3, [pc, #256]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	4a3f      	ldr	r2, [pc, #252]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	; 0x58
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004120:	2301      	movs	r3, #1
 8004122:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004124:	4b3a      	ldr	r3, [pc, #232]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a39      	ldr	r2, [pc, #228]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800412a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004130:	f7fd fa90 	bl	8001654 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004136:	e009      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004138:	f7fd fa8c 	bl	8001654 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d902      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	74fb      	strb	r3, [r7, #19]
        break;
 800414a:	e005      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800414c:	4b30      	ldr	r3, [pc, #192]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ef      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d15a      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800415e:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004168:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01e      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	429a      	cmp	r2, r3
 8004178:	d019      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800417a:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004184:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800418e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004196:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a1b      	ldr	r2, [pc, #108]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041a6:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d016      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd fa4c 	bl	8001654 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	e00b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fa48 	bl	8001654 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d902      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	74fb      	strb	r3, [r7, #19]
            break;
 80041d6:	e006      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0ec      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4904      	ldr	r1, [pc, #16]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	74bb      	strb	r3, [r7, #18]
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004218:	7c7b      	ldrb	r3, [r7, #17]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4b6e      	ldr	r3, [pc, #440]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	4a6d      	ldr	r2, [pc, #436]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004236:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 0203 	bic.w	r2, r3, #3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4964      	ldr	r1, [pc, #400]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004258:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 020c 	bic.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	495c      	ldr	r1, [pc, #368]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800427a:	4b57      	ldr	r3, [pc, #348]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4953      	ldr	r1, [pc, #332]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800429c:	4b4e      	ldr	r3, [pc, #312]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	494b      	ldr	r1, [pc, #300]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4942      	ldr	r1, [pc, #264]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042e0:	4b3d      	ldr	r3, [pc, #244]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	493a      	ldr	r1, [pc, #232]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004302:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	4931      	ldr	r1, [pc, #196]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	4929      	ldr	r1, [pc, #164]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4920      	ldr	r1, [pc, #128]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	4918      	ldr	r1, [pc, #96]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004386:	d105      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800438e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004392:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d015      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043be:	d105      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000

080043dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e040      	b.n	8004470 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc fa6c 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f82c 	bl	8004478 <UART_SetConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e022      	b.n	8004470 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa56 	bl	80048e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004446:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004456:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fadd 	bl	8004a28 <UART_CheckIdleState>
 800446e:	4603      	mov	r3, r0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4313      	orrs	r3, r2
 800449c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4baa      	ldr	r3, [pc, #680]	; (8004750 <UART_SetConfig+0x2d8>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	69f9      	ldr	r1, [r7, #28]
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4aa0      	ldr	r2, [pc, #640]	; (8004754 <UART_SetConfig+0x2dc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d004      	beq.n	80044e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a97      	ldr	r2, [pc, #604]	; (8004758 <UART_SetConfig+0x2e0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d121      	bne.n	8004544 <UART_SetConfig+0xcc>
 8004500:	4b96      	ldr	r3, [pc, #600]	; (800475c <UART_SetConfig+0x2e4>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b03      	cmp	r3, #3
 800450c:	d816      	bhi.n	800453c <UART_SetConfig+0xc4>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0x9c>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004525 	.word	0x08004525
 8004518:	08004531 	.word	0x08004531
 800451c:	0800452b 	.word	0x0800452b
 8004520:	08004537 	.word	0x08004537
 8004524:	2301      	movs	r3, #1
 8004526:	76fb      	strb	r3, [r7, #27]
 8004528:	e098      	b.n	800465c <UART_SetConfig+0x1e4>
 800452a:	2302      	movs	r3, #2
 800452c:	76fb      	strb	r3, [r7, #27]
 800452e:	e095      	b.n	800465c <UART_SetConfig+0x1e4>
 8004530:	2304      	movs	r3, #4
 8004532:	76fb      	strb	r3, [r7, #27]
 8004534:	e092      	b.n	800465c <UART_SetConfig+0x1e4>
 8004536:	2308      	movs	r3, #8
 8004538:	76fb      	strb	r3, [r7, #27]
 800453a:	e08f      	b.n	800465c <UART_SetConfig+0x1e4>
 800453c:	2310      	movs	r3, #16
 800453e:	76fb      	strb	r3, [r7, #27]
 8004540:	bf00      	nop
 8004542:	e08b      	b.n	800465c <UART_SetConfig+0x1e4>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a85      	ldr	r2, [pc, #532]	; (8004760 <UART_SetConfig+0x2e8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d134      	bne.n	80045b8 <UART_SetConfig+0x140>
 800454e:	4b83      	ldr	r3, [pc, #524]	; (800475c <UART_SetConfig+0x2e4>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d829      	bhi.n	80045b0 <UART_SetConfig+0x138>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0xec>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004599 	.word	0x08004599
 8004568:	080045b1 	.word	0x080045b1
 800456c:	080045b1 	.word	0x080045b1
 8004570:	080045b1 	.word	0x080045b1
 8004574:	080045a5 	.word	0x080045a5
 8004578:	080045b1 	.word	0x080045b1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045b1 	.word	0x080045b1
 8004584:	0800459f 	.word	0x0800459f
 8004588:	080045b1 	.word	0x080045b1
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b1 	.word	0x080045b1
 8004594:	080045ab 	.word	0x080045ab
 8004598:	2300      	movs	r3, #0
 800459a:	76fb      	strb	r3, [r7, #27]
 800459c:	e05e      	b.n	800465c <UART_SetConfig+0x1e4>
 800459e:	2302      	movs	r3, #2
 80045a0:	76fb      	strb	r3, [r7, #27]
 80045a2:	e05b      	b.n	800465c <UART_SetConfig+0x1e4>
 80045a4:	2304      	movs	r3, #4
 80045a6:	76fb      	strb	r3, [r7, #27]
 80045a8:	e058      	b.n	800465c <UART_SetConfig+0x1e4>
 80045aa:	2308      	movs	r3, #8
 80045ac:	76fb      	strb	r3, [r7, #27]
 80045ae:	e055      	b.n	800465c <UART_SetConfig+0x1e4>
 80045b0:	2310      	movs	r3, #16
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	bf00      	nop
 80045b6:	e051      	b.n	800465c <UART_SetConfig+0x1e4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a69      	ldr	r2, [pc, #420]	; (8004764 <UART_SetConfig+0x2ec>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d120      	bne.n	8004604 <UART_SetConfig+0x18c>
 80045c2:	4b66      	ldr	r3, [pc, #408]	; (800475c <UART_SetConfig+0x2e4>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d00f      	beq.n	80045f0 <UART_SetConfig+0x178>
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d802      	bhi.n	80045da <UART_SetConfig+0x162>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <UART_SetConfig+0x16c>
 80045d8:	e010      	b.n	80045fc <UART_SetConfig+0x184>
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d005      	beq.n	80045ea <UART_SetConfig+0x172>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d009      	beq.n	80045f6 <UART_SetConfig+0x17e>
 80045e2:	e00b      	b.n	80045fc <UART_SetConfig+0x184>
 80045e4:	2300      	movs	r3, #0
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e038      	b.n	800465c <UART_SetConfig+0x1e4>
 80045ea:	2302      	movs	r3, #2
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e035      	b.n	800465c <UART_SetConfig+0x1e4>
 80045f0:	2304      	movs	r3, #4
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e032      	b.n	800465c <UART_SetConfig+0x1e4>
 80045f6:	2308      	movs	r3, #8
 80045f8:	76fb      	strb	r3, [r7, #27]
 80045fa:	e02f      	b.n	800465c <UART_SetConfig+0x1e4>
 80045fc:	2310      	movs	r3, #16
 80045fe:	76fb      	strb	r3, [r7, #27]
 8004600:	bf00      	nop
 8004602:	e02b      	b.n	800465c <UART_SetConfig+0x1e4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a52      	ldr	r2, [pc, #328]	; (8004754 <UART_SetConfig+0x2dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d124      	bne.n	8004658 <UART_SetConfig+0x1e0>
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <UART_SetConfig+0x2e4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461c:	d012      	beq.n	8004644 <UART_SetConfig+0x1cc>
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d802      	bhi.n	800462a <UART_SetConfig+0x1b2>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <UART_SetConfig+0x1c0>
 8004628:	e012      	b.n	8004650 <UART_SetConfig+0x1d8>
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d006      	beq.n	800463e <UART_SetConfig+0x1c6>
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004634:	d009      	beq.n	800464a <UART_SetConfig+0x1d2>
 8004636:	e00b      	b.n	8004650 <UART_SetConfig+0x1d8>
 8004638:	2300      	movs	r3, #0
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e00e      	b.n	800465c <UART_SetConfig+0x1e4>
 800463e:	2302      	movs	r3, #2
 8004640:	76fb      	strb	r3, [r7, #27]
 8004642:	e00b      	b.n	800465c <UART_SetConfig+0x1e4>
 8004644:	2304      	movs	r3, #4
 8004646:	76fb      	strb	r3, [r7, #27]
 8004648:	e008      	b.n	800465c <UART_SetConfig+0x1e4>
 800464a:	2308      	movs	r3, #8
 800464c:	76fb      	strb	r3, [r7, #27]
 800464e:	e005      	b.n	800465c <UART_SetConfig+0x1e4>
 8004650:	2310      	movs	r3, #16
 8004652:	76fb      	strb	r3, [r7, #27]
 8004654:	bf00      	nop
 8004656:	e001      	b.n	800465c <UART_SetConfig+0x1e4>
 8004658:	2310      	movs	r3, #16
 800465a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <UART_SetConfig+0x2dc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f040 8082 	bne.w	800476c <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004668:	7efb      	ldrb	r3, [r7, #27]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d823      	bhi.n	80046b6 <UART_SetConfig+0x23e>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x1fc>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004699 	.word	0x08004699
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046a7 	.word	0x080046a7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046b7 	.word	0x080046b7
 8004690:	080046b7 	.word	0x080046b7
 8004694:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7ff fc8e 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 800469c:	6178      	str	r0, [r7, #20]
        break;
 800469e:	e00f      	b.n	80046c0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b31      	ldr	r3, [pc, #196]	; (8004768 <UART_SetConfig+0x2f0>)
 80046a2:	617b      	str	r3, [r7, #20]
        break;
 80046a4:	e00c      	b.n	80046c0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7ff fbf1 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80046aa:	6178      	str	r0, [r7, #20]
        break;
 80046ac:	e008      	b.n	80046c0 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	617b      	str	r3, [r7, #20]
        break;
 80046b4:	e004      	b.n	80046c0 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	76bb      	strb	r3, [r7, #26]
        break;
 80046be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8100 	beq.w	80048c8 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d305      	bcc.n	80046e4 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d902      	bls.n	80046ea <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	76bb      	strb	r3, [r7, #26]
 80046e8:	e0ee      	b.n	80048c8 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	f04f 0400 	mov.w	r4, #0
 80046fa:	0214      	lsls	r4, r2, #8
 80046fc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004700:	020b      	lsls	r3, r1, #8
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6852      	ldr	r2, [r2, #4]
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	4611      	mov	r1, r2
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	eb13 0b01 	adds.w	fp, r3, r1
 8004712:	eb44 0c02 	adc.w	ip, r4, r2
 8004716:	4658      	mov	r0, fp
 8004718:	4661      	mov	r1, ip
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f04f 0400 	mov.w	r4, #0
 8004722:	461a      	mov	r2, r3
 8004724:	4623      	mov	r3, r4
 8004726:	f7fb fd59 	bl	80001dc <__aeabi_uldivmod>
 800472a:	4603      	mov	r3, r0
 800472c:	460c      	mov	r4, r1
 800472e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004736:	d308      	bcc.n	800474a <UART_SetConfig+0x2d2>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d204      	bcs.n	800474a <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e0be      	b.n	80048c8 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	76bb      	strb	r3, [r7, #26]
 800474e:	e0bb      	b.n	80048c8 <UART_SetConfig+0x450>
 8004750:	efff69f3 	.word	0xefff69f3
 8004754:	40008000 	.word	0x40008000
 8004758:	40013800 	.word	0x40013800
 800475c:	40021000 	.word	0x40021000
 8004760:	40004400 	.word	0x40004400
 8004764:	40004800 	.word	0x40004800
 8004768:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d15c      	bne.n	8004830 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8004776:	7efb      	ldrb	r3, [r7, #27]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d828      	bhi.n	80047ce <UART_SetConfig+0x356>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x30c>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7ff fc06 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 80047ac:	6178      	str	r0, [r7, #20]
        break;
 80047ae:	e013      	b.n	80047d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7ff fc18 	bl	8003fe4 <HAL_RCC_GetPCLK2Freq>
 80047b4:	6178      	str	r0, [r7, #20]
        break;
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b49      	ldr	r3, [pc, #292]	; (80048e0 <UART_SetConfig+0x468>)
 80047ba:	617b      	str	r3, [r7, #20]
        break;
 80047bc:	e00c      	b.n	80047d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7ff fb65 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 80047c2:	6178      	str	r0, [r7, #20]
        break;
 80047c4:	e008      	b.n	80047d8 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ca:	617b      	str	r3, [r7, #20]
        break;
 80047cc:	e004      	b.n	80047d8 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	76bb      	strb	r3, [r7, #26]
        break;
 80047d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d074      	beq.n	80048c8 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005a      	lsls	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d916      	bls.n	800482a <UART_SetConfig+0x3b2>
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d212      	bcs.n	800482a <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f023 030f 	bic.w	r3, r3, #15
 800480c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	b29a      	uxth	r2, r3
 800481a:	89fb      	ldrh	r3, [r7, #14]
 800481c:	4313      	orrs	r3, r2
 800481e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	89fa      	ldrh	r2, [r7, #14]
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e04e      	b.n	80048c8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	76bb      	strb	r3, [r7, #26]
 800482e:	e04b      	b.n	80048c8 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004830:	7efb      	ldrb	r3, [r7, #27]
 8004832:	2b08      	cmp	r3, #8
 8004834:	d827      	bhi.n	8004886 <UART_SetConfig+0x40e>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <UART_SetConfig+0x3c4>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004861 	.word	0x08004861
 8004840:	08004869 	.word	0x08004869
 8004844:	08004871 	.word	0x08004871
 8004848:	08004887 	.word	0x08004887
 800484c:	08004877 	.word	0x08004877
 8004850:	08004887 	.word	0x08004887
 8004854:	08004887 	.word	0x08004887
 8004858:	08004887 	.word	0x08004887
 800485c:	0800487f 	.word	0x0800487f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004860:	f7ff fbaa 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 8004864:	6178      	str	r0, [r7, #20]
        break;
 8004866:	e013      	b.n	8004890 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004868:	f7ff fbbc 	bl	8003fe4 <HAL_RCC_GetPCLK2Freq>
 800486c:	6178      	str	r0, [r7, #20]
        break;
 800486e:	e00f      	b.n	8004890 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004870:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <UART_SetConfig+0x468>)
 8004872:	617b      	str	r3, [r7, #20]
        break;
 8004874:	e00c      	b.n	8004890 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004876:	f7ff fb09 	bl	8003e8c <HAL_RCC_GetSysClockFreq>
 800487a:	6178      	str	r0, [r7, #20]
        break;
 800487c:	e008      	b.n	8004890 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004882:	617b      	str	r3, [r7, #20]
        break;
 8004884:	e004      	b.n	8004890 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	76bb      	strb	r3, [r7, #26]
        break;
 800488e:	bf00      	nop
    }

    if (pclk != 0U)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085a      	lsrs	r2, r3, #1
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	441a      	add	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d908      	bls.n	80048c4 <UART_SetConfig+0x44c>
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d204      	bcs.n	80048c4 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	e001      	b.n	80048c8 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80048e0:	00f42400 	.word	0x00f42400

080048e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01a      	beq.n	80049fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e2:	d10a      	bne.n	80049fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a36:	f7fc fe0d 	bl	8001654 <HAL_GetTick>
 8004a3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d10e      	bne.n	8004a68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f82a 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e020      	b.n	8004aaa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d10e      	bne.n	8004a94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f814 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e00a      	b.n	8004aaa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac2:	e05d      	b.n	8004b80 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d059      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7fc fdc2 	bl	8001654 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d302      	bcc.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11b      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2220      	movs	r2, #32
 8004b06:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e042      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02b      	beq.n	8004b80 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b36:	d123      	bne.n	8004b80 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b50:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e00f      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d092      	beq.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ba8:	b084      	sub	sp, #16
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	f107 0014 	add.w	r0, r7, #20
 8004bb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	b004      	add	sp, #16
 8004bc8:	4770      	bx	lr

08004bca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bda:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004bde:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c00:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004c04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c48:	b084      	sub	sp, #16
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	f107 0014 	add.w	r0, r7, #20
 8004c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	b004      	add	sp, #16
 8004c88:	4770      	bx	lr
	...

08004c8c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b09b      	sub	sp, #108	; 0x6c
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d81f      	bhi.n	8004cfe <USB_ActivateEndpoint+0x72>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <USB_ActivateEndpoint+0x38>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004d07 	.word	0x08004d07
 8004cd0:	08004ce3 	.word	0x08004ce3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ce0:	e012      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004ce2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ce6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004cea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cee:	e00b      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cfc:	e004      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d04:	e000      	b.n	8004d08 <USB_ActivateEndpoint+0x7c>
      break;
 8004d06:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	b21a      	sxth	r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	7b1b      	ldrb	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 8149 	bne.w	8005010 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8084 	beq.w	8004e90 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00da      	lsls	r2, r3, #3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	88db      	ldrh	r3, [r3, #6]
 8004db0:	085b      	lsrs	r3, r3, #1
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	81fb      	strh	r3, [r7, #14]
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01b      	beq.n	8004e0c <USB_ActivateEndpoint+0x180>
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	81bb      	strh	r3, [r7, #12]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	441a      	add	r2, r3
 8004df6:	89bb      	ldrh	r3, [r7, #12]
 8004df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	78db      	ldrb	r3, [r3, #3]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d020      	beq.n	8004e56 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	813b      	strh	r3, [r7, #8]
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	f083 0320 	eor.w	r3, r3, #32
 8004e32:	813b      	strh	r3, [r7, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	441a      	add	r2, r3
 8004e3e:	893b      	ldrh	r3, [r7, #8]
 8004e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	8013      	strh	r3, [r2, #0]
 8004e54:	e27f      	b.n	8005356 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e6c:	817b      	strh	r3, [r7, #10]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	897b      	ldrh	r3, [r7, #10]
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
 8004e8e:	e262      	b.n	8005356 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	4413      	add	r3, r2
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	00da      	lsls	r2, r3, #3
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	88db      	ldrh	r3, [r3, #6]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	4413      	add	r3, r2
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	00da      	lsls	r2, r3, #3
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ee6:	623b      	str	r3, [r7, #32]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d112      	bne.n	8004f16 <USB_ActivateEndpoint+0x28a>
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	e02f      	b.n	8004f76 <USB_ActivateEndpoint+0x2ea>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f1c:	d813      	bhi.n	8004f46 <USB_ActivateEndpoint+0x2ba>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <USB_ActivateEndpoint+0x2ac>
 8004f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f34:	3301      	adds	r3, #1
 8004f36:	663b      	str	r3, [r7, #96]	; 0x60
 8004f38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	801a      	strh	r2, [r3, #0]
 8004f44:	e017      	b.n	8004f76 <USB_ActivateEndpoint+0x2ea>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <USB_ActivateEndpoint+0x2d4>
 8004f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	83fb      	strh	r3, [r7, #30]
 8004f84:	8bfb      	ldrh	r3, [r7, #30]
 8004f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01b      	beq.n	8004fc6 <USB_ActivateEndpoint+0x33a>
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa4:	83bb      	strh	r3, [r7, #28]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	8bbb      	ldrh	r3, [r7, #28]
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fdc:	837b      	strh	r3, [r7, #26]
 8004fde:	8b7b      	ldrh	r3, [r7, #26]
 8004fe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004fe4:	837b      	strh	r3, [r7, #26]
 8004fe6:	8b7b      	ldrh	r3, [r7, #26]
 8004fe8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004fec:	837b      	strh	r3, [r7, #26]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	441a      	add	r2, r3
 8004ff8:	8b7b      	ldrh	r3, [r7, #26]
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
 800500e:	e1a2      	b.n	8005356 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005040:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005056:	b29b      	uxth	r3, r3
 8005058:	461a      	mov	r2, r3
 800505a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800505c:	4413      	add	r3, r2
 800505e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005068:	4413      	add	r3, r2
 800506a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	891b      	ldrh	r3, [r3, #8]
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507e:	801a      	strh	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	653b      	str	r3, [r7, #80]	; 0x50
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005090:	4413      	add	r3, r2
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	00da      	lsls	r2, r3, #3
 800509a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800509c:	4413      	add	r3, r2
 800509e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	895b      	ldrh	r3, [r3, #10]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8091 	bne.w	80051e0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01b      	beq.n	800510e <USB_ActivateEndpoint+0x482>
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	873b      	strh	r3, [r7, #56]	; 0x38
 800511c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01b      	beq.n	800515e <USB_ActivateEndpoint+0x4d2>
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	441a      	add	r2, r3
 8005148:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800514a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800515a:	b29b      	uxth	r3, r3
 800515c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005174:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005176:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005178:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800517c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800517e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005180:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005184:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800519a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	441a      	add	r2, r3
 80051c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051da:	b29b      	uxth	r3, r3
 80051dc:	8013      	strh	r3, [r2, #0]
 80051de:	e0ba      	b.n	8005356 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01d      	beq.n	8005238 <USB_ActivateEndpoint+0x5ac>
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005212:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005248:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01d      	beq.n	8005290 <USB_ActivateEndpoint+0x604>
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	78db      	ldrb	r3, [r3, #3]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d024      	beq.n	80052e2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052b6:	f083 0320 	eor.w	r3, r3, #32
 80052ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	b29b      	uxth	r3, r3
 80052de:	8013      	strh	r3, [r2, #0]
 80052e0:	e01d      	b.n	800531e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	441a      	add	r2, r3
 8005306:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800530a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531a:	b29b      	uxth	r3, r3
 800531c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005356:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800535a:	4618      	mov	r0, r3
 800535c:	376c      	adds	r7, #108	; 0x6c
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005368:	b480      	push	{r7}
 800536a:	b08d      	sub	sp, #52	; 0x34
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	7b1b      	ldrb	r3, [r3, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 808e 	bne.w	8005498 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d044      	beq.n	800540e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	81bb      	strh	r3, [r7, #12]
 8005392:	89bb      	ldrh	r3, [r7, #12]
 8005394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01b      	beq.n	80053d4 <USB_DeactivateEndpoint+0x6c>
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b2:	817b      	strh	r3, [r7, #10]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	897b      	ldrh	r3, [r7, #10]
 80053c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ea:	813b      	strh	r3, [r7, #8]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	441a      	add	r2, r3
 80053f6:	893b      	ldrh	r3, [r7, #8]
 80053f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005408:	b29b      	uxth	r3, r3
 800540a:	8013      	strh	r3, [r2, #0]
 800540c:	e192      	b.n	8005734 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	827b      	strh	r3, [r7, #18]
 800541c:	8a7b      	ldrh	r3, [r7, #18]
 800541e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01b      	beq.n	800545e <USB_DeactivateEndpoint+0xf6>
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	823b      	strh	r3, [r7, #16]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	441a      	add	r2, r3
 8005448:	8a3b      	ldrh	r3, [r7, #16]
 800544a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545a:	b29b      	uxth	r3, r3
 800545c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29b      	uxth	r3, r3
 800546c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	81fb      	strh	r3, [r7, #14]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
 8005496:	e14d      	b.n	8005734 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 80a5 	bne.w	80055ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	843b      	strh	r3, [r7, #32]
 80054b0:	8c3b      	ldrh	r3, [r7, #32]
 80054b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01b      	beq.n	80054f2 <USB_DeactivateEndpoint+0x18a>
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d0:	83fb      	strh	r3, [r7, #30]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	8bfb      	ldrh	r3, [r7, #30]
 80054de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	83bb      	strh	r3, [r7, #28]
 8005500:	8bbb      	ldrh	r3, [r7, #28]
 8005502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01b      	beq.n	8005542 <USB_DeactivateEndpoint+0x1da>
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	837b      	strh	r3, [r7, #26]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	8b7b      	ldrh	r3, [r7, #26]
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	833b      	strh	r3, [r7, #24]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	8b3b      	ldrh	r3, [r7, #24]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	82fb      	strh	r3, [r7, #22]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	441a      	add	r2, r3
 800559c:	8afb      	ldrh	r3, [r7, #22]
 800559e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c8:	82bb      	strh	r3, [r7, #20]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	8abb      	ldrh	r3, [r7, #20]
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
 80055ea:	e0a3      	b.n	8005734 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <USB_DeactivateEndpoint+0x2d4>
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005638:	b29b      	uxth	r3, r3
 800563a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	857b      	strh	r3, [r7, #42]	; 0x2a
 800564a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <USB_DeactivateEndpoint+0x324>
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	853b      	strh	r3, [r7, #40]	; 0x28
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800567c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005688:	b29b      	uxth	r3, r3
 800568a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	441a      	add	r2, r3
 80056e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	847b      	strh	r3, [r7, #34]	; 0x22
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3734      	adds	r7, #52	; 0x34
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b0c4      	sub	sp, #272	; 0x110
 8005746:	af00      	add	r7, sp, #0
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	6018      	str	r0, [r3, #0]
 800574c:	463b      	mov	r3, r7
 800574e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	463b      	mov	r3, r7
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	2b01      	cmp	r3, #1
 8005758:	f040 8566 	bne.w	8006228 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d905      	bls.n	8005778 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800576c:	463b      	mov	r3, r7
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005776:	e004      	b.n	8005782 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	7b1b      	ldrb	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d12c      	bne.n	80057e6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6959      	ldr	r1, [r3, #20]
 8005792:	463b      	mov	r3, r7
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	88da      	ldrh	r2, [r3, #6]
 8005798:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800579c:	b29b      	uxth	r3, r3
 800579e:	1d38      	adds	r0, r7, #4
 80057a0:	6800      	ldr	r0, [r0, #0]
 80057a2:	f001 fa58 	bl	8006c56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	1d3b      	adds	r3, r7, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	00da      	lsls	r2, r3, #3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057d8:	b29a      	uxth	r2, r3
 80057da:	f107 0310 	add.w	r3, r7, #16
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	f000 bcec 	b.w	80061be <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	f040 8356 	bne.w	8005e9e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	f240 82fa 	bls.w	8005df8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005822:	1d3b      	adds	r3, r7, #4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	441a      	add	r2, r3
 8005830:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a1a      	ldr	r2, [r3, #32]
 8005858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	463b      	mov	r3, r7
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005864:	1d3b      	adds	r3, r7, #4
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	463b      	mov	r3, r7
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 815e 	beq.w	8005b3c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
 8005886:	463b      	mov	r3, r7
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d164      	bne.n	800595a <USB_EPStartXfer+0x218>
 8005890:	1d3b      	adds	r3, r7, #4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	4413      	add	r3, r2
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00da      	lsls	r2, r3, #3
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	4413      	add	r3, r2
 80058b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d112      	bne.n	80058e8 <USB_EPStartXfer+0x1a6>
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e054      	b.n	8005992 <USB_EPStartXfer+0x250>
 80058e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d817      	bhi.n	8005920 <USB_EPStartXfer+0x1de>
 80058f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <USB_EPStartXfer+0x1ce>
 8005906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005914:	b29b      	uxth	r3, r3
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	b29a      	uxth	r2, r3
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e038      	b.n	8005992 <USB_EPStartXfer+0x250>
 8005920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800592a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2b00      	cmp	r3, #0
 8005934:	d104      	bne.n	8005940 <USB_EPStartXfer+0x1fe>
 8005936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593a:	3b01      	subs	r3, #1
 800593c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800594e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005952:	b29a      	uxth	r2, r3
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	e01b      	b.n	8005992 <USB_EPStartXfer+0x250>
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d116      	bne.n	8005992 <USB_EPStartXfer+0x250>
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005972:	4413      	add	r3, r2
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00da      	lsls	r2, r3, #3
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	4413      	add	r3, r2
 8005982:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005986:	633b      	str	r3, [r7, #48]	; 0x30
 8005988:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800598c:	b29a      	uxth	r2, r3
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	895b      	ldrh	r3, [r3, #10]
 8005998:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6959      	ldr	r1, [r3, #20]
 80059a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80059ac:	1d38      	adds	r0, r7, #4
 80059ae:	6800      	ldr	r0, [r0, #0]
 80059b0:	f001 f951 	bl	8006c56 <USB_WritePMA>
            ep->xfer_buff += len;
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059be:	441a      	add	r2, r3
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1a      	ldr	r2, [r3, #32]
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90e      	bls.n	80059f4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ea:	1ad2      	subs	r2, r2, r3
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	621a      	str	r2, [r3, #32]
 80059f2:	e008      	b.n	8005a06 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d164      	bne.n	8005ada <USB_EPStartXfer+0x398>
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	463b      	mov	r3, r7
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00da      	lsls	r2, r3, #3
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d112      	bne.n	8005a68 <USB_EPStartXfer+0x326>
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e057      	b.n	8005b18 <USB_EPStartXfer+0x3d6>
 8005a68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a6e:	d817      	bhi.n	8005aa0 <USB_EPStartXfer+0x35e>
 8005a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a74:	085b      	lsrs	r3, r3, #1
 8005a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <USB_EPStartXfer+0x34e>
 8005a86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e03b      	b.n	8005b18 <USB_EPStartXfer+0x3d6>
 8005aa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <USB_EPStartXfer+0x37e>
 8005ab6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aba:	3b01      	subs	r3, #1
 8005abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ac0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	029b      	lsls	r3, r3, #10
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e01e      	b.n	8005b18 <USB_EPStartXfer+0x3d6>
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d119      	bne.n	8005b18 <USB_EPStartXfer+0x3d6>
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aea:	1d3b      	adds	r3, r7, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	4413      	add	r3, r2
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	00da      	lsls	r2, r3, #3
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	4413      	add	r3, r2
 8005b08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b0c:	623b      	str	r3, [r7, #32]
 8005b0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b18:	463b      	mov	r3, r7
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	891b      	ldrh	r3, [r3, #8]
 8005b1e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6959      	ldr	r1, [r3, #20]
 8005b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005b32:	1d38      	adds	r0, r7, #4
 8005b34:	6800      	ldr	r0, [r0, #0]
 8005b36:	f001 f88e 	bl	8006c56 <USB_WritePMA>
 8005b3a:	e340      	b.n	80061be <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	785b      	ldrb	r3, [r3, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d164      	bne.n	8005c10 <USB_EPStartXfer+0x4ce>
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	1d3b      	adds	r3, r7, #4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	4413      	add	r3, r2
 8005b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5e:	463b      	mov	r3, r7
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	00da      	lsls	r2, r3, #3
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d112      	bne.n	8005b9e <USB_EPStartXfer+0x45c>
 8005b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e057      	b.n	8005c4e <USB_EPStartXfer+0x50c>
 8005b9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba4:	d817      	bhi.n	8005bd6 <USB_EPStartXfer+0x494>
 8005ba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <USB_EPStartXfer+0x484>
 8005bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	e03b      	b.n	8005c4e <USB_EPStartXfer+0x50c>
 8005bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bda:	095b      	lsrs	r3, r3, #5
 8005bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <USB_EPStartXfer+0x4b4>
 8005bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	029b      	lsls	r3, r3, #10
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e01e      	b.n	8005c4e <USB_EPStartXfer+0x50c>
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d119      	bne.n	8005c4e <USB_EPStartXfer+0x50c>
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c20:	1d3b      	adds	r3, r7, #4
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2e:	4413      	add	r3, r2
 8005c30:	657b      	str	r3, [r7, #84]	; 0x54
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	00da      	lsls	r2, r3, #3
 8005c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c42:	653b      	str	r3, [r7, #80]	; 0x50
 8005c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c4e:	463b      	mov	r3, r7
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	891b      	ldrh	r3, [r3, #8]
 8005c54:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6959      	ldr	r1, [r3, #20]
 8005c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005c68:	1d38      	adds	r0, r7, #4
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	f000 fff3 	bl	8006c56 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c7a:	441a      	add	r2, r3
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6a1a      	ldr	r2, [r3, #32]
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90e      	bls.n	8005cb0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005c9c:	463b      	mov	r3, r7
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6a1a      	ldr	r2, [r3, #32]
 8005ca2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	621a      	str	r2, [r3, #32]
 8005cae:	e008      	b.n	8005cc2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc8:	463b      	mov	r3, r7
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d164      	bne.n	8005d9c <USB_EPStartXfer+0x65a>
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd8:	1d3b      	adds	r3, r7, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	00da      	lsls	r2, r3, #3
 8005cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d112      	bne.n	8005d2a <USB_EPStartXfer+0x5e8>
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e054      	b.n	8005dd4 <USB_EPStartXfer+0x692>
 8005d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d30:	d817      	bhi.n	8005d62 <USB_EPStartXfer+0x620>
 8005d32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <USB_EPStartXfer+0x610>
 8005d48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	029b      	lsls	r3, r3, #10
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	e038      	b.n	8005dd4 <USB_EPStartXfer+0x692>
 8005d62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <USB_EPStartXfer+0x640>
 8005d78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e01b      	b.n	8005dd4 <USB_EPStartXfer+0x692>
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d116      	bne.n	8005dd4 <USB_EPStartXfer+0x692>
 8005da6:	1d3b      	adds	r3, r7, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db4:	4413      	add	r3, r2
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	00da      	lsls	r2, r3, #3
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dd4:	463b      	mov	r3, r7
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	895b      	ldrh	r3, [r3, #10]
 8005dda:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6959      	ldr	r1, [r3, #20]
 8005de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005dee:	1d38      	adds	r0, r7, #4
 8005df0:	6800      	ldr	r0, [r0, #0]
 8005df2:	f000 ff30 	bl	8006c56 <USB_WritePMA>
 8005df6:	e1e2      	b.n	80061be <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005df8:	463b      	mov	r3, r7
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005e02:	1d3b      	adds	r3, r7, #4
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	463b      	mov	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	463b      	mov	r3, r7
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e4c:	1d3b      	adds	r3, r7, #4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e5a:	4413      	add	r3, r2
 8005e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	00da      	lsls	r2, r3, #3
 8005e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e68:	4413      	add	r3, r2
 8005e6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e78:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	891b      	ldrh	r3, [r3, #8]
 8005e80:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6959      	ldr	r1, [r3, #20]
 8005e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005e94:	1d38      	adds	r0, r7, #4
 8005e96:	6800      	ldr	r0, [r0, #0]
 8005e98:	f000 fedd 	bl	8006c56 <USB_WritePMA>
 8005e9c:	e18f      	b.n	80061be <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	463b      	mov	r3, r7
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 808f 	beq.w	8005fd8 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d164      	bne.n	8005f94 <USB_EPStartXfer+0x852>
 8005eca:	1d3b      	adds	r3, r7, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	461a      	mov	r2, r3
 8005edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ede:	4413      	add	r3, r2
 8005ee0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00da      	lsls	r2, r3, #3
 8005eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eec:	4413      	add	r3, r2
 8005eee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d112      	bne.n	8005f22 <USB_EPStartXfer+0x7e0>
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e054      	b.n	8005fcc <USB_EPStartXfer+0x88a>
 8005f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f26:	2b3e      	cmp	r3, #62	; 0x3e
 8005f28:	d817      	bhi.n	8005f5a <USB_EPStartXfer+0x818>
 8005f2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d004      	beq.n	8005f4a <USB_EPStartXfer+0x808>
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	3301      	adds	r3, #1
 8005f46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	029b      	lsls	r3, r3, #10
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	e038      	b.n	8005fcc <USB_EPStartXfer+0x88a>
 8005f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d104      	bne.n	8005f7a <USB_EPStartXfer+0x838>
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	3b01      	subs	r3, #1
 8005f76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	029b      	lsls	r3, r3, #10
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e01b      	b.n	8005fcc <USB_EPStartXfer+0x88a>
 8005f94:	463b      	mov	r3, r7
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d116      	bne.n	8005fcc <USB_EPStartXfer+0x88a>
 8005f9e:	1d3b      	adds	r3, r7, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fac:	4413      	add	r3, r2
 8005fae:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fb0:	463b      	mov	r3, r7
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fba:	4413      	add	r3, r2
 8005fbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fc0:	677b      	str	r3, [r7, #116]	; 0x74
 8005fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	895b      	ldrh	r3, [r3, #10]
 8005fd2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005fd6:	e097      	b.n	8006108 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fd8:	463b      	mov	r3, r7
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d168      	bne.n	80060b4 <USB_EPStartXfer+0x972>
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006000:	463b      	mov	r3, r7
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	00da      	lsls	r2, r3, #3
 8006008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800600c:	4413      	add	r3, r2
 800600e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006012:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006014:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006018:	2b00      	cmp	r3, #0
 800601a:	d112      	bne.n	8006042 <USB_EPStartXfer+0x900>
 800601c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006026:	b29a      	uxth	r2, r3
 8006028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603a:	b29a      	uxth	r2, r3
 800603c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800603e:	801a      	strh	r2, [r3, #0]
 8006040:	e05d      	b.n	80060fe <USB_EPStartXfer+0x9bc>
 8006042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006046:	2b3e      	cmp	r3, #62	; 0x3e
 8006048:	d817      	bhi.n	800607a <USB_EPStartXfer+0x938>
 800604a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0x928>
 8006060:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800606a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29a      	uxth	r2, r3
 8006074:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e041      	b.n	80060fe <USB_EPStartXfer+0x9bc>
 800607a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006084:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006088:	f003 031f 	and.w	r3, r3, #31
 800608c:	2b00      	cmp	r3, #0
 800608e:	d104      	bne.n	800609a <USB_EPStartXfer+0x958>
 8006090:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006094:	3b01      	subs	r3, #1
 8006096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800609a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800609e:	b29b      	uxth	r3, r3
 80060a0:	029b      	lsls	r3, r3, #10
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e024      	b.n	80060fe <USB_EPStartXfer+0x9bc>
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	785b      	ldrb	r3, [r3, #1]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d11f      	bne.n	80060fe <USB_EPStartXfer+0x9bc>
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d6:	4413      	add	r3, r2
 80060d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	00da      	lsls	r2, r3, #3
 80060e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060e8:	4413      	add	r3, r2
 80060ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	891b      	ldrh	r3, [r3, #8]
 8006104:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6959      	ldr	r1, [r3, #20]
 800610e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006112:	b29b      	uxth	r3, r3
 8006114:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006118:	1d38      	adds	r0, r7, #4
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	f000 fd9b 	bl	8006c56 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d122      	bne.n	8006170 <USB_EPStartXfer+0xa2e>
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006148:	1d3b      	adds	r3, r7, #4
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800615a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800615e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006166:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800616a:	b29b      	uxth	r3, r3
 800616c:	8013      	strh	r3, [r2, #0]
 800616e:	e026      	b.n	80061be <USB_EPStartXfer+0xa7c>
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d121      	bne.n	80061be <USB_EPStartXfer+0xa7c>
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006198:	1d3b      	adds	r3, r7, #4
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80061aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061be:	1d3b      	adds	r3, r7, #4
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	463b      	mov	r3, r7
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f107 020e 	add.w	r2, r7, #14
 80061d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061dc:	8013      	strh	r3, [r2, #0]
 80061de:	f107 030e 	add.w	r3, r7, #14
 80061e2:	f107 020e 	add.w	r2, r7, #14
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	f082 0210 	eor.w	r2, r2, #16
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	f107 030e 	add.w	r3, r7, #14
 80061f2:	f107 020e 	add.w	r2, r7, #14
 80061f6:	8812      	ldrh	r2, [r2, #0]
 80061f8:	f082 0220 	eor.w	r2, r2, #32
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	463b      	mov	r3, r7
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	441a      	add	r2, r3
 800620c:	f107 030e 	add.w	r3, r7, #14
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
 8006226:	e3b5      	b.n	8006994 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006228:	463b      	mov	r3, r7
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	7b1b      	ldrb	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 8090 	bne.w	8006354 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	463b      	mov	r3, r7
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d90e      	bls.n	8006262 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800624e:	463b      	mov	r3, r7
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	619a      	str	r2, [r3, #24]
 8006260:	e008      	b.n	8006274 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006262:	463b      	mov	r3, r7
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2200      	movs	r2, #0
 8006272:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	00da      	lsls	r2, r3, #3
 800629a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800629e:	4413      	add	r3, r2
 80062a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d116      	bne.n	80062de <USB_EPStartXfer+0xb9c>
 80062b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e32c      	b.n	8006938 <USB_EPStartXfer+0x11f6>
 80062de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062e2:	2b3e      	cmp	r3, #62	; 0x3e
 80062e4:	d818      	bhi.n	8006318 <USB_EPStartXfer+0xbd6>
 80062e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_EPStartXfer+0xbc4>
 80062fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006300:	3301      	adds	r3, #1
 8006302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006306:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800630a:	b29b      	uxth	r3, r3
 800630c:	029b      	lsls	r3, r3, #10
 800630e:	b29a      	uxth	r2, r3
 8006310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e30f      	b.n	8006938 <USB_EPStartXfer+0x11f6>
 8006318:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006322:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <USB_EPStartXfer+0xbf6>
 800632e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006332:	3b01      	subs	r3, #1
 8006334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006338:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800633c:	b29b      	uxth	r3, r3
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e2f1      	b.n	8006938 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	78db      	ldrb	r3, [r3, #3]
 800635a:	2b02      	cmp	r3, #2
 800635c:	f040 818f 	bne.w	800667e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d175      	bne.n	8006456 <USB_EPStartXfer+0xd14>
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006382:	4413      	add	r3, r2
 8006384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006388:	463b      	mov	r3, r7
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	00da      	lsls	r2, r3, #3
 8006390:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006394:	4413      	add	r3, r2
 8006396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800639a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <USB_EPStartXfer+0xc94>
 80063a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e065      	b.n	80064a2 <USB_EPStartXfer+0xd60>
 80063d6:	463b      	mov	r3, r7
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b3e      	cmp	r3, #62	; 0x3e
 80063de:	d81a      	bhi.n	8006416 <USB_EPStartXfer+0xcd4>
 80063e0:	463b      	mov	r3, r7
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ec:	463b      	mov	r3, r7
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <USB_EPStartXfer+0xcc2>
 80063fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063fe:	3301      	adds	r3, #1
 8006400:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006404:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29a      	uxth	r2, r3
 800640e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e045      	b.n	80064a2 <USB_EPStartXfer+0xd60>
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <USB_EPStartXfer+0xcf8>
 8006430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006434:	3b01      	subs	r3, #1
 8006436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800643a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800643e:	b29b      	uxth	r3, r3
 8006440:	029b      	lsls	r3, r3, #10
 8006442:	b29b      	uxth	r3, r3
 8006444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644c:	b29a      	uxth	r2, r3
 800644e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006452:	801a      	strh	r2, [r3, #0]
 8006454:	e025      	b.n	80064a2 <USB_EPStartXfer+0xd60>
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d120      	bne.n	80064a2 <USB_EPStartXfer+0xd60>
 8006460:	1d3b      	adds	r3, r7, #4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006468:	1d3b      	adds	r3, r7, #4
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006470:	b29b      	uxth	r3, r3
 8006472:	461a      	mov	r2, r3
 8006474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006478:	4413      	add	r3, r2
 800647a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800647e:	463b      	mov	r3, r7
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	00da      	lsls	r2, r3, #3
 8006486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648a:	4413      	add	r3, r2
 800648c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d175      	bne.n	80065a0 <USB_EPStartXfer+0xe5e>
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064cc:	4413      	add	r3, r2
 80064ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00da      	lsls	r2, r3, #3
 80064da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064de:	4413      	add	r3, r2
 80064e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064e8:	463b      	mov	r3, r7
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d116      	bne.n	8006520 <USB_EPStartXfer+0xdde>
 80064f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006516:	b29a      	uxth	r2, r3
 8006518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e061      	b.n	80065e4 <USB_EPStartXfer+0xea2>
 8006520:	463b      	mov	r3, r7
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b3e      	cmp	r3, #62	; 0x3e
 8006528:	d81a      	bhi.n	8006560 <USB_EPStartXfer+0xe1e>
 800652a:	463b      	mov	r3, r7
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006536:	463b      	mov	r3, r7
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <USB_EPStartXfer+0xe0c>
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	3301      	adds	r3, #1
 800654a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e041      	b.n	80065e4 <USB_EPStartXfer+0xea2>
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2b00      	cmp	r3, #0
 8006578:	d104      	bne.n	8006584 <USB_EPStartXfer+0xe42>
 800657a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657e:	3b01      	subs	r3, #1
 8006580:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	b29b      	uxth	r3, r3
 800658a:	029b      	lsls	r3, r3, #10
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800659c:	801a      	strh	r2, [r3, #0]
 800659e:	e021      	b.n	80065e4 <USB_EPStartXfer+0xea2>
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d11c      	bne.n	80065e4 <USB_EPStartXfer+0xea2>
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065ba:	4413      	add	r3, r2
 80065bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	00da      	lsls	r2, r3, #3
 80065c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065cc:	4413      	add	r3, r2
 80065ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065e2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 81a4 	beq.w	8006938 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006604:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USB_EPStartXfer+0xeda>
 8006610:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800661c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8187 	bne.w	8006938 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800662a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 8180 	bne.w	8006938 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	463b      	mov	r3, r7
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	441a      	add	r2, r3
 8006664:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
 800667c:	e15c      	b.n	8006938 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	78db      	ldrb	r3, [r3, #3]
 8006684:	2b01      	cmp	r3, #1
 8006686:	f040 8155 	bne.w	8006934 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	699a      	ldr	r2, [r3, #24]
 8006690:	463b      	mov	r3, r7
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	429a      	cmp	r2, r3
 8006698:	d90e      	bls.n	80066b8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	619a      	str	r2, [r3, #24]
 80066b6:	e008      	b.n	80066ca <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066ca:	463b      	mov	r3, r7
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d16f      	bne.n	80067b4 <USB_EPStartXfer+0x1072>
 80066d4:	1d3b      	adds	r3, r7, #4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066dc:	1d3b      	adds	r3, r7, #4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066ec:	4413      	add	r3, r2
 80066ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	00da      	lsls	r2, r3, #3
 80066fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066fe:	4413      	add	r3, r2
 8006700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800670c:	2b00      	cmp	r3, #0
 800670e:	d116      	bne.n	800673e <USB_EPStartXfer+0xffc>
 8006710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800673a:	801a      	strh	r2, [r3, #0]
 800673c:	e05f      	b.n	80067fe <USB_EPStartXfer+0x10bc>
 800673e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006742:	2b3e      	cmp	r3, #62	; 0x3e
 8006744:	d818      	bhi.n	8006778 <USB_EPStartXfer+0x1036>
 8006746:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006750:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <USB_EPStartXfer+0x1024>
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	3301      	adds	r3, #1
 8006762:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676a:	b29b      	uxth	r3, r3
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	b29a      	uxth	r2, r3
 8006770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e042      	b.n	80067fe <USB_EPStartXfer+0x10bc>
 8006778:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2b00      	cmp	r3, #0
 800678c:	d104      	bne.n	8006798 <USB_EPStartXfer+0x1056>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	3b01      	subs	r3, #1
 8006794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	e024      	b.n	80067fe <USB_EPStartXfer+0x10bc>
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d11f      	bne.n	80067fe <USB_EPStartXfer+0x10bc>
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d6:	4413      	add	r3, r2
 80067d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067dc:	463b      	mov	r3, r7
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	00da      	lsls	r2, r3, #3
 80067e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006806:	463b      	mov	r3, r7
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	785b      	ldrb	r3, [r3, #1]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d16f      	bne.n	80068f0 <USB_EPStartXfer+0x11ae>
 8006810:	1d3b      	adds	r3, r7, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006828:	4413      	add	r3, r2
 800682a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	00da      	lsls	r2, r3, #3
 8006836:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800683a:	4413      	add	r3, r2
 800683c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006848:	2b00      	cmp	r3, #0
 800684a:	d116      	bne.n	800687a <USB_EPStartXfer+0x1138>
 800684c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006858:	b29a      	uxth	r2, r3
 800685a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800685e:	801a      	strh	r2, [r3, #0]
 8006860:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006870:	b29a      	uxth	r2, r3
 8006872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e05e      	b.n	8006938 <USB_EPStartXfer+0x11f6>
 800687a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800687e:	2b3e      	cmp	r3, #62	; 0x3e
 8006880:	d818      	bhi.n	80068b4 <USB_EPStartXfer+0x1172>
 8006882:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800688c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <USB_EPStartXfer+0x1160>
 8006898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689c:	3301      	adds	r3, #1
 800689e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068b0:	801a      	strh	r2, [r3, #0]
 80068b2:	e041      	b.n	8006938 <USB_EPStartXfer+0x11f6>
 80068b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <USB_EPStartXfer+0x1192>
 80068ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ce:	3b01      	subs	r3, #1
 80068d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d8:	b29b      	uxth	r3, r3
 80068da:	029b      	lsls	r3, r3, #10
 80068dc:	b29b      	uxth	r3, r3
 80068de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068ec:	801a      	strh	r2, [r3, #0]
 80068ee:	e023      	b.n	8006938 <USB_EPStartXfer+0x11f6>
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d11e      	bne.n	8006938 <USB_EPStartXfer+0x11f6>
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800690a:	4413      	add	r3, r2
 800690c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006910:	463b      	mov	r3, r7
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	00da      	lsls	r2, r3, #3
 8006918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800691c:	4413      	add	r3, r2
 800691e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800692a:	b29a      	uxth	r2, r3
 800692c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e001      	b.n	8006938 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e02e      	b.n	8006996 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006938:	1d3b      	adds	r3, r7, #4
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	463b      	mov	r3, r7
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006956:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800695a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800695e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006962:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006966:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800696a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800696e:	1d3b      	adds	r3, r7, #4
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d020      	beq.n	80069f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c8:	81bb      	strh	r3, [r7, #12]
 80069ca:	89bb      	ldrh	r3, [r7, #12]
 80069cc:	f083 0310 	eor.w	r3, r3, #16
 80069d0:	81bb      	strh	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	89bb      	ldrh	r3, [r7, #12]
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
 80069f2:	e01f      	b.n	8006a34 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	81fb      	strh	r3, [r7, #14]
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a12:	81fb      	strh	r3, [r7, #14]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	89fb      	ldrh	r3, [r7, #14]
 8006a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	7b1b      	ldrb	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f040 809d 	bne.w	8006b90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d04c      	beq.n	8006af8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	823b      	strh	r3, [r7, #16]
 8006a6c:	8a3b      	ldrh	r3, [r7, #16]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01b      	beq.n	8006aae <USB_EPClearStall+0x6c>
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8c:	81fb      	strh	r3, [r7, #14]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	441a      	add	r2, r3
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	78db      	ldrb	r3, [r3, #3]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d06c      	beq.n	8006b90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006acc:	81bb      	strh	r3, [r7, #12]
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f083 0320 	eor.w	r3, r3, #32
 8006ad4:	81bb      	strh	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	8013      	strh	r3, [r2, #0]
 8006af6:	e04b      	b.n	8006b90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	82fb      	strh	r3, [r7, #22]
 8006b06:	8afb      	ldrh	r3, [r7, #22]
 8006b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d01b      	beq.n	8006b48 <USB_EPClearStall+0x106>
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b26:	82bb      	strh	r3, [r7, #20]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	8abb      	ldrh	r3, [r7, #20]
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	827b      	strh	r3, [r7, #18]
 8006b60:	8a7b      	ldrh	r3, [r7, #18]
 8006b62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b66:	827b      	strh	r3, [r7, #18]
 8006b68:	8a7b      	ldrh	r3, [r7, #18]
 8006b6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b6e:	827b      	strh	r3, [r7, #18]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	8a7b      	ldrh	r3, [r7, #18]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2280      	movs	r2, #128	; 0x80
 8006bb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c30:	68fb      	ldr	r3, [r7, #12]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b08d      	sub	sp, #52	; 0x34
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	4611      	mov	r1, r2
 8006c62:	461a      	mov	r2, r3
 8006c64:	460b      	mov	r3, r1
 8006c66:	80fb      	strh	r3, [r7, #6]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c6c:	88bb      	ldrh	r3, [r7, #4]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8c:	e01b      	b.n	8006cc6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	3301      	adds	r3, #1
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e0      	bne.n	8006c8e <USB_WritePMA+0x38>
  }
}
 8006ccc:	bf00      	nop
 8006cce:	3734      	adds	r7, #52	; 0x34
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b08b      	sub	sp, #44	; 0x2c
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	80fb      	strh	r3, [r7, #6]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cee:	88bb      	ldrh	r3, [r7, #4]
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d08:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0e:	e018      	b.n	8006d42 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e3      	bne.n	8006d10 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d48:	88bb      	ldrh	r3, [r7, #4]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	701a      	strb	r2, [r3, #0]
  }
}
 8006d64:	bf00      	nop
 8006d66:	372c      	adds	r7, #44	; 0x2c
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d80:	f001 fc1a 	bl	80085b8 <malloc>
 8006d84:	4603      	mov	r3, r0
 8006d86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d96:	2302      	movs	r3, #2
 8006d98:	e066      	b.n	8006e68 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7c1b      	ldrb	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d119      	bne.n	8006dde <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dae:	2202      	movs	r2, #2
 8006db0:	2181      	movs	r1, #129	; 0x81
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fa f9a4 	bl	8001100 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fa f99a 	bl	8001100 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006ddc:	e016      	b.n	8006e0c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	2202      	movs	r2, #2
 8006de2:	2181      	movs	r1, #129	; 0x81
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fa f98b 	bl	8001100 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006df0:	2340      	movs	r3, #64	; 0x40
 8006df2:	2202      	movs	r2, #2
 8006df4:	2101      	movs	r1, #1
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fa f982 	bl	8001100 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2210      	movs	r2, #16
 8006e08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	2203      	movs	r2, #3
 8006e10:	2182      	movs	r1, #130	; 0x82
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fa f974 	bl	8001100 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7c1b      	ldrb	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fa fad2 	bl	80013f8 <USBD_LL_PrepareReceive>
 8006e54:	e007      	b.n	8006e66 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	2101      	movs	r1, #1
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7fa fac9 	bl	80013f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e7c:	2181      	movs	r1, #129	; 0x81
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fa f97c 	bl	800117c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fa f975 	bl	800117c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e9a:	2182      	movs	r1, #130	; 0x82
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fa f96d 	bl	800117c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00e      	beq.n	8006eda <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fb7b 	bl	80085c8 <free>
    pdev->pClassData = NULL;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d03a      	beq.n	8006f84 <USBD_CDC_Setup+0xa0>
 8006f0e:	2b20      	cmp	r3, #32
 8006f10:	f040 8097 	bne.w	8007042 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	88db      	ldrh	r3, [r3, #6]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d029      	beq.n	8006f70 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da11      	bge.n	8006f4a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006f32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	88d2      	ldrh	r2, [r2, #6]
 8006f38:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f3a:	6939      	ldr	r1, [r7, #16]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	88db      	ldrh	r3, [r3, #6]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 fa8d 	bl	8008462 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006f48:	e082      	b.n	8007050 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785a      	ldrb	r2, [r3, #1]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	88db      	ldrh	r3, [r3, #6]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f60:	6939      	ldr	r1, [r7, #16]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88db      	ldrh	r3, [r3, #6]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 faa6 	bl	80084ba <USBD_CtlPrepareRx>
      break;
 8006f6e:	e06f      	b.n	8007050 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	7850      	ldrb	r0, [r2, #1]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4798      	blx	r3
      break;
 8006f82:	e065      	b.n	8007050 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b0b      	cmp	r3, #11
 8006f8a:	d84f      	bhi.n	800702c <USBD_CDC_Setup+0x148>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <USBD_CDC_Setup+0xb0>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	0800703b 	.word	0x0800703b
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	0800702d 	.word	0x0800702d
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	0800702d 	.word	0x0800702d
 8006fb0:	0800702d 	.word	0x0800702d
 8006fb4:	0800702d 	.word	0x0800702d
 8006fb8:	0800702d 	.word	0x0800702d
 8006fbc:	08006fed 	.word	0x08006fed
 8006fc0:	08007015 	.word	0x08007015
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d107      	bne.n	8006fde <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fce:	f107 030c 	add.w	r3, r7, #12
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fa43 	bl	8008462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fdc:	e030      	b.n	8007040 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f001 f9cd 	bl	8008380 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fea:	e029      	b.n	8007040 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d107      	bne.n	8007006 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ff6:	f107 030f 	add.w	r3, r7, #15
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fa2f 	bl	8008462 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007004:	e01c      	b.n	8007040 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 f9b9 	bl	8008380 <USBD_CtlError>
            ret = USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	75fb      	strb	r3, [r7, #23]
          break;
 8007012:	e015      	b.n	8007040 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701a:	2b03      	cmp	r3, #3
 800701c:	d00f      	beq.n	800703e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f001 f9ad 	bl	8008380 <USBD_CtlError>
            ret = USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800702a:	e008      	b.n	800703e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 f9a6 	bl	8008380 <USBD_CtlError>
          ret = USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	75fb      	strb	r3, [r7, #23]
          break;
 8007038:	e002      	b.n	8007040 <USBD_CDC_Setup+0x15c>
          break;
 800703a:	bf00      	nop
 800703c:	e008      	b.n	8007050 <USBD_CDC_Setup+0x16c>
          break;
 800703e:	bf00      	nop
      }
      break;
 8007040:	e006      	b.n	8007050 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f99b 	bl	8008380 <USBD_CtlError>
      ret = USBD_FAIL;
 800704a:	2303      	movs	r3, #3
 800704c:	75fb      	strb	r3, [r7, #23]
      break;
 800704e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007050:	7dfb      	ldrb	r3, [r7, #23]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop

0800705c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800706e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	e04f      	b.n	800711e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007084:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	3318      	adds	r3, #24
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d029      	beq.n	80070f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	3318      	adds	r3, #24
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	78f9      	ldrb	r1, [r7, #3]
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	460b      	mov	r3, r1
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4403      	add	r3, r0
 80070bc:	3338      	adds	r3, #56	; 0x38
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80070c4:	fb03 f301 	mul.w	r3, r3, r1
 80070c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d110      	bne.n	80070f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	3318      	adds	r3, #24
 80070de:	2200      	movs	r2, #0
 80070e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070e2:	78f9      	ldrb	r1, [r7, #3]
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fa f94d 	bl	8001388 <USBD_LL_Transmit>
 80070ee:	e015      	b.n	800711c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007138:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	e015      	b.n	8007174 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fa f98b 	bl	8001468 <USBD_LL_GetRxDataSize>
 8007152:	4602      	mov	r2, r0
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800716e:	4611      	mov	r1, r2
 8007170:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800718a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d015      	beq.n	80071c2 <USBD_CDC_EP0_RxReady+0x46>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800719c:	2bff      	cmp	r3, #255	; 0xff
 800719e:	d010      	beq.n	80071c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80071ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071b6:	b292      	uxth	r2, r2
 80071b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	22ff      	movs	r2, #255	; 0xff
 80071be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2243      	movs	r2, #67	; 0x43
 80071d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80071da:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	20000108 	.word	0x20000108

080071ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2243      	movs	r2, #67	; 0x43
 80071f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	; (8007208 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	200000c4 	.word	0x200000c4

0800720c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2243      	movs	r2, #67	; 0x43
 8007218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	2000014c 	.word	0x2000014c

0800722c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	220a      	movs	r2, #10
 8007238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800723a:	4b03      	ldr	r3, [pc, #12]	; (8007248 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	20000080 	.word	0x20000080

0800724c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e004      	b.n	800726a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007276:	b480      	push	{r7}
 8007278:	b087      	sub	sp, #28
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007288:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e01a      	b.n	8007328 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d114      	bne.n	8007326 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800731a:	2181      	movs	r1, #129	; 0x81
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7fa f833 	bl	8001388 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800734a:	2303      	movs	r3, #3
 800734c:	e016      	b.n	800737c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	7c1b      	ldrb	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	2101      	movs	r1, #1
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fa f848 	bl	80013f8 <USBD_LL_PrepareReceive>
 8007368:	e007      	b.n	800737a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007370:	2340      	movs	r3, #64	; 0x40
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7fa f83f 	bl	80013f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800737a:	2300      	movs	r3, #0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	e01f      	b.n	80073dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	79fa      	ldrb	r2, [r7, #7]
 80073ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7f9 fe01 	bl	8000fd8 <USBD_LL_Init>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073da:	7dfb      	ldrb	r3, [r7, #23]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e016      	b.n	800742a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	f107 020e 	add.w	r2, r7, #14
 800741c:	4610      	mov	r0, r2
 800741e:	4798      	blx	r3
 8007420:	4602      	mov	r2, r0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7f9 fe2e 	bl	800109c <USBD_LL_Start>
 8007440:	4603      	mov	r3, r0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	78fa      	ldrb	r2, [r7, #3]
 8007484:	4611      	mov	r1, r2
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
 800748a:	4603      	mov	r3, r0
 800748c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	4611      	mov	r1, r2
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
  }

  return USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 ff16 	bl	800830c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2b01      	cmp	r3, #1
 8007502:	d00e      	beq.n	8007522 <USBD_LL_SetupStage+0x5a>
 8007504:	2b01      	cmp	r3, #1
 8007506:	d302      	bcc.n	800750e <USBD_LL_SetupStage+0x46>
 8007508:	2b02      	cmp	r3, #2
 800750a:	d014      	beq.n	8007536 <USBD_LL_SetupStage+0x6e>
 800750c:	e01d      	b.n	800754a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9d6 	bl	80078c8 <USBD_StdDevReq>
 800751c:	4603      	mov	r3, r0
 800751e:	73fb      	strb	r3, [r7, #15]
      break;
 8007520:	e020      	b.n	8007564 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa3a 	bl	80079a4 <USBD_StdItfReq>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e016      	b.n	8007564 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa76 	bl	8007a30 <USBD_StdEPReq>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
      break;
 8007548:	e00c      	b.n	8007564 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007550:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7f9 fe45 	bl	80011e8 <USBD_LL_StallEP>
 800755e:	4603      	mov	r3, r0
 8007560:	73fb      	strb	r3, [r7, #15]
      break;
 8007562:	bf00      	nop
  }

  return ret;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	60f8      	str	r0, [r7, #12]
 8007576:	460b      	mov	r3, r1
 8007578:	607a      	str	r2, [r7, #4]
 800757a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d137      	bne.n	80075f2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007588:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007590:	2b03      	cmp	r3, #3
 8007592:	d14a      	bne.n	800762a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d913      	bls.n	80075c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bf28      	it	cs
 80075ba:	4613      	movcs	r3, r2
 80075bc:	461a      	mov	r2, r3
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 ff97 	bl	80084f4 <USBD_CtlContinueRx>
 80075c6:	e030      	b.n	800762a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00a      	beq.n	80075ea <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d105      	bne.n	80075ea <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 ff93 	bl	8008516 <USBD_CtlSendStatus>
 80075f0:	e01b      	b.n	800762a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d013      	beq.n	8007626 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007604:	2b03      	cmp	r3, #3
 8007606:	d10e      	bne.n	8007626 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	7afa      	ldrb	r2, [r7, #11]
 8007612:	4611      	mov	r1, r2
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	4798      	blx	r3
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	e002      	b.n	800762c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007626:	2303      	movs	r3, #3
 8007628:	e000      	b.n	800762c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	460b      	mov	r3, r1
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007642:	7afb      	ldrb	r3, [r7, #11]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d16a      	bne.n	800771e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3314      	adds	r3, #20
 800764c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007654:	2b02      	cmp	r3, #2
 8007656:	d155      	bne.n	8007704 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	429a      	cmp	r2, r3
 8007662:	d914      	bls.n	800768e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	461a      	mov	r2, r3
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 ff0c 	bl	8008498 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007680:	2300      	movs	r3, #0
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7f9 feb6 	bl	80013f8 <USBD_LL_PrepareReceive>
 800768c:	e03a      	b.n	8007704 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	d11c      	bne.n	80076d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d316      	bcc.n	80076d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d20f      	bcs.n	80076d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 feed 	bl	8008498 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	2100      	movs	r1, #0
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7f9 fe93 	bl	80013f8 <USBD_LL_PrepareReceive>
 80076d2:	e017      	b.n	8007704 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d105      	bne.n	80076f6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7f9 fd75 	bl	80011e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 ff1c 	bl	800853c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800770a:	2b01      	cmp	r3, #1
 800770c:	d123      	bne.n	8007756 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7ff fe9b 	bl	800744a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800771c:	e01b      	b.n	8007756 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d013      	beq.n	8007752 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007730:	2b03      	cmp	r3, #3
 8007732:	d10e      	bne.n	8007752 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	7afa      	ldrb	r2, [r7, #11]
 800773e:	4611      	mov	r1, r2
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	4798      	blx	r3
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	e002      	b.n	8007758 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007752:	2303      	movs	r3, #3
 8007754:	e000      	b.n	8007758 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6852      	ldr	r2, [r2, #4]
 800779c:	b2d2      	uxtb	r2, r2
 800779e:	4611      	mov	r1, r2
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7f9 fca8 	bl	8001100 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7f9 fc9a 	bl	8001100 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	78fa      	ldrb	r2, [r7, #3]
 80077f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800783a:	2b04      	cmp	r3, #4
 800783c:	d105      	bne.n	800784a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007866:	2b03      	cmp	r3, #3
 8007868:	d10b      	bne.n	8007882 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80078aa:	8a3b      	ldrh	r3, [r7, #16]
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b21a      	sxth	r2, r3
 80078b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	b21b      	sxth	r3, r3
 80078b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80078ba:	89fb      	ldrh	r3, [r7, #14]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d004      	beq.n	80078ec <USBD_StdDevReq+0x24>
 80078e2:	2b40      	cmp	r3, #64	; 0x40
 80078e4:	d002      	beq.n	80078ec <USBD_StdDevReq+0x24>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <USBD_StdDevReq+0x38>
 80078ea:	e050      	b.n	800798e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
    break;
 80078fe:	e04b      	b.n	8007998 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	785b      	ldrb	r3, [r3, #1]
 8007904:	2b09      	cmp	r3, #9
 8007906:	d83c      	bhi.n	8007982 <USBD_StdDevReq+0xba>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <USBD_StdDevReq+0x48>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007965 	.word	0x08007965
 8007914:	08007979 	.word	0x08007979
 8007918:	08007983 	.word	0x08007983
 800791c:	0800796f 	.word	0x0800796f
 8007920:	08007983 	.word	0x08007983
 8007924:	08007943 	.word	0x08007943
 8007928:	08007939 	.word	0x08007939
 800792c:	08007983 	.word	0x08007983
 8007930:	0800795b 	.word	0x0800795b
 8007934:	0800794d 	.word	0x0800794d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f9d0 	bl	8007ce0 <USBD_GetDescriptor>
      break;
 8007940:	e024      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fb5f 	bl	8008008 <USBD_SetAddress>
      break;
 800794a:	e01f      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fb9c 	bl	800808c <USBD_SetConfig>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
      break;
 8007958:	e018      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc39 	bl	80081d4 <USBD_GetConfig>
      break;
 8007962:	e013      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc68 	bl	800823c <USBD_GetStatus>
      break;
 800796c:	e00e      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fc96 	bl	80082a2 <USBD_SetFeature>
      break;
 8007976:	e009      	b.n	800798c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fca5 	bl	80082ca <USBD_ClrFeature>
      break;
 8007980:	e004      	b.n	800798c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fcfb 	bl	8008380 <USBD_CtlError>
      break;
 800798a:	bf00      	nop
    }
    break;
 800798c:	e004      	b.n	8007998 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fcf5 	bl	8008380 <USBD_CtlError>
    break;
 8007996:	bf00      	nop
  }

  return ret;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop

080079a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ba:	2b20      	cmp	r3, #32
 80079bc:	d003      	beq.n	80079c6 <USBD_StdItfReq+0x22>
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d001      	beq.n	80079c6 <USBD_StdItfReq+0x22>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12a      	bne.n	8007a1c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079cc:	3b01      	subs	r3, #1
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d81d      	bhi.n	8007a0e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	889b      	ldrh	r3, [r3, #4]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d813      	bhi.n	8007a04 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d110      	bne.n	8007a18 <USBD_StdItfReq+0x74>
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10d      	bne.n	8007a18 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fd8a 	bl	8008516 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007a02:	e009      	b.n	8007a18 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fcba 	bl	8008380 <USBD_CtlError>
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fcb5 	bl	8008380 <USBD_CtlError>
      break;
 8007a16:	e000      	b.n	8007a1a <USBD_StdItfReq+0x76>
      break;
 8007a18:	bf00      	nop
    }
    break;
 8007a1a:	e004      	b.n	8007a26 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fcae 	bl	8008380 <USBD_CtlError>
    break;
 8007a24:	bf00      	nop
  }

  return ret;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	889b      	ldrh	r3, [r3, #4]
 8007a42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d004      	beq.n	8007a5a <USBD_StdEPReq+0x2a>
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d002      	beq.n	8007a5a <USBD_StdEPReq+0x2a>
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <USBD_StdEPReq+0x3e>
 8007a58:	e137      	b.n	8007cca <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6c:	e132      	b.n	8007cd4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d03e      	beq.n	8007af4 <USBD_StdEPReq+0xc4>
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d002      	beq.n	8007a80 <USBD_StdEPReq+0x50>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d079      	beq.n	8007b72 <USBD_StdEPReq+0x142>
 8007a7e:	e11e      	b.n	8007cbe <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d002      	beq.n	8007a90 <USBD_StdEPReq+0x60>
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d015      	beq.n	8007aba <USBD_StdEPReq+0x8a>
 8007a8e:	e02b      	b.n	8007ae8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00c      	beq.n	8007ab0 <USBD_StdEPReq+0x80>
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b80      	cmp	r3, #128	; 0x80
 8007a9a:	d009      	beq.n	8007ab0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7f9 fba1 	bl	80011e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aa6:	2180      	movs	r1, #128	; 0x80
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7f9 fb9d 	bl	80011e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007aae:	e020      	b.n	8007af2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 fc64 	bl	8008380 <USBD_CtlError>
        break;
 8007ab8:	e01b      	b.n	8007af2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	885b      	ldrh	r3, [r3, #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10e      	bne.n	8007ae0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_StdEPReq+0xb0>
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d008      	beq.n	8007ae0 <USBD_StdEPReq+0xb0>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	88db      	ldrh	r3, [r3, #6]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7f9 fb84 	bl	80011e8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fd18 	bl	8008516 <USBD_CtlSendStatus>

        break;
 8007ae6:	e004      	b.n	8007af2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc48 	bl	8008380 <USBD_CtlError>
        break;
 8007af0:	bf00      	nop
      }
      break;
 8007af2:	e0e9      	b.n	8007cc8 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d002      	beq.n	8007b04 <USBD_StdEPReq+0xd4>
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d015      	beq.n	8007b2e <USBD_StdEPReq+0xfe>
 8007b02:	e02f      	b.n	8007b64 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00c      	beq.n	8007b24 <USBD_StdEPReq+0xf4>
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d009      	beq.n	8007b24 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7f9 fb67 	bl	80011e8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b1a:	2180      	movs	r1, #128	; 0x80
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7f9 fb63 	bl	80011e8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b22:	e025      	b.n	8007b70 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fc2a 	bl	8008380 <USBD_CtlError>
        break;
 8007b2c:	e020      	b.n	8007b70 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d11b      	bne.n	8007b6e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7f9 fb85 	bl	8001254 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fce3 	bl	8008516 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b62:	e004      	b.n	8007b6e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fc0a 	bl	8008380 <USBD_CtlError>
        break;
 8007b6c:	e000      	b.n	8007b70 <USBD_StdEPReq+0x140>
        break;
 8007b6e:	bf00      	nop
      }
      break;
 8007b70:	e0aa      	b.n	8007cc8 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d002      	beq.n	8007b82 <USBD_StdEPReq+0x152>
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d032      	beq.n	8007be6 <USBD_StdEPReq+0x1b6>
 8007b80:	e097      	b.n	8007cb2 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <USBD_StdEPReq+0x168>
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b80      	cmp	r3, #128	; 0x80
 8007b8c:	d004      	beq.n	8007b98 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fbf5 	bl	8008380 <USBD_CtlError>
          break;
 8007b96:	e091      	b.n	8007cbc <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	da0b      	bge.n	8007bb8 <USBD_StdEPReq+0x188>
 8007ba0:	7bbb      	ldrb	r3, [r7, #14]
 8007ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3310      	adds	r3, #16
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	e00b      	b.n	8007bd0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fc3f 	bl	8008462 <USBD_CtlSendData>
        break;
 8007be4:	e06a      	b.n	8007cbc <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da11      	bge.n	8007c12 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f003 020f 	and.w	r2, r3, #15
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	3324      	adds	r3, #36	; 0x24
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d117      	bne.n	8007c38 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fbb8 	bl	8008380 <USBD_CtlError>
            break;
 8007c10:	e054      	b.n	8007cbc <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c28:	881b      	ldrh	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007c2e:	6839      	ldr	r1, [r7, #0]
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fba5 	bl	8008380 <USBD_CtlError>
            break;
 8007c36:	e041      	b.n	8007cbc <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da0b      	bge.n	8007c58 <USBD_StdEPReq+0x228>
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	3310      	adds	r3, #16
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	3304      	adds	r3, #4
 8007c56:	e00b      	b.n	8007c70 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <USBD_StdEPReq+0x24e>
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b80      	cmp	r3, #128	; 0x80
 8007c7c:	d103      	bne.n	8007c86 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	e00e      	b.n	8007ca4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7f9 fb18 	bl	80012c0 <USBD_LL_IsStallEP>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e002      	b.n	8007ca4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fbd9 	bl	8008462 <USBD_CtlSendData>
          break;
 8007cb0:	e004      	b.n	8007cbc <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fb63 	bl	8008380 <USBD_CtlError>
        break;
 8007cba:	bf00      	nop
      }
      break;
 8007cbc:	e004      	b.n	8007cc8 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007cbe:	6839      	ldr	r1, [r7, #0]
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fb5d 	bl	8008380 <USBD_CtlError>
      break;
 8007cc6:	bf00      	nop
    }
    break;
 8007cc8:	e004      	b.n	8007cd4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fb57 	bl	8008380 <USBD_CtlError>
    break;
 8007cd2:	bf00      	nop
  }

  return ret;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	0a1b      	lsrs	r3, r3, #8
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	2b0e      	cmp	r3, #14
 8007d02:	f200 8152 	bhi.w	8007faa <USBD_GetDescriptor+0x2ca>
 8007d06:	a201      	add	r2, pc, #4	; (adr r2, 8007d0c <USBD_GetDescriptor+0x2c>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d7d 	.word	0x08007d7d
 8007d10:	08007d95 	.word	0x08007d95
 8007d14:	08007dd5 	.word	0x08007dd5
 8007d18:	08007fab 	.word	0x08007fab
 8007d1c:	08007fab 	.word	0x08007fab
 8007d20:	08007f4b 	.word	0x08007f4b
 8007d24:	08007f77 	.word	0x08007f77
 8007d28:	08007fab 	.word	0x08007fab
 8007d2c:	08007fab 	.word	0x08007fab
 8007d30:	08007fab 	.word	0x08007fab
 8007d34:	08007fab 	.word	0x08007fab
 8007d38:	08007fab 	.word	0x08007fab
 8007d3c:	08007fab 	.word	0x08007fab
 8007d40:	08007fab 	.word	0x08007fab
 8007d44:	08007d49 	.word	0x08007d49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d6a:	e126      	b.n	8007fba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb06 	bl	8008380 <USBD_CtlError>
      err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
    break;
 8007d7a:	e11e      	b.n	8007fba <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
    break;
 8007d92:	e112      	b.n	8007fba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7c1b      	ldrb	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	f107 0208 	add.w	r2, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3301      	adds	r3, #1
 8007db2:	2202      	movs	r2, #2
 8007db4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007db6:	e100      	b.n	8007fba <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f107 0208 	add.w	r2, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	2202      	movs	r2, #2
 8007dd0:	701a      	strb	r2, [r3, #0]
    break;
 8007dd2:	e0f2      	b.n	8007fba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	f200 80ac 	bhi.w	8007f38 <USBD_GetDescriptor+0x258>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <USBD_GetDescriptor+0x108>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e35 	.word	0x08007e35
 8007df0:	08007e69 	.word	0x08007e69
 8007df4:	08007e9d 	.word	0x08007e9d
 8007df8:	08007ed1 	.word	0x08007ed1
 8007dfc:	08007f05 	.word	0x08007f05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e22:	e091      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 faaa 	bl	8008380 <USBD_CtlError>
        err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
      break;
 8007e32:	e089      	b.n	8007f48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e56:	e077      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa90 	bl	8008380 <USBD_CtlError>
        err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
      break;
 8007e66:	e06f      	b.n	8007f48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00b      	beq.n	8007e8c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	7c12      	ldrb	r2, [r2, #16]
 8007e80:	f107 0108 	add.w	r1, r7, #8
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
 8007e88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e8a:	e05d      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa76 	bl	8008380 <USBD_CtlError>
        err++;
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	3301      	adds	r3, #1
 8007e98:	72fb      	strb	r3, [r7, #11]
      break;
 8007e9a:	e055      	b.n	8007f48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	7c12      	ldrb	r2, [r2, #16]
 8007eb4:	f107 0108 	add.w	r1, r7, #8
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4798      	blx	r3
 8007ebc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ebe:	e043      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa5c 	bl	8008380 <USBD_CtlError>
        err++;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8007ece:	e03b      	b.n	8007f48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	7c12      	ldrb	r2, [r2, #16]
 8007ee8:	f107 0108 	add.w	r1, r7, #8
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
 8007ef0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef2:	e029      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa42 	bl	8008380 <USBD_CtlError>
        err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
      break;
 8007f02:	e021      	b.n	8007f48 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00b      	beq.n	8007f28 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7c12      	ldrb	r2, [r2, #16]
 8007f1c:	f107 0108 	add.w	r1, r7, #8
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
 8007f24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f26:	e00f      	b.n	8007f48 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa28 	bl	8008380 <USBD_CtlError>
        err++;
 8007f30:	7afb      	ldrb	r3, [r7, #11]
 8007f32:	3301      	adds	r3, #1
 8007f34:	72fb      	strb	r3, [r7, #11]
      break;
 8007f36:	e007      	b.n	8007f48 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa20 	bl	8008380 <USBD_CtlError>
      err++;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	3301      	adds	r3, #1
 8007f44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007f46:	bf00      	nop
    }
    break;
 8007f48:	e037      	b.n	8007fba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7c1b      	ldrb	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5a:	f107 0208 	add.w	r2, r7, #8
 8007f5e:	4610      	mov	r0, r2
 8007f60:	4798      	blx	r3
 8007f62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007f64:	e029      	b.n	8007fba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa09 	bl	8008380 <USBD_CtlError>
      err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
    break;
 8007f74:	e021      	b.n	8007fba <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7c1b      	ldrb	r3, [r3, #16]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	f107 0208 	add.w	r2, r7, #8
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
 8007f8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	2207      	movs	r2, #7
 8007f96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007f98:	e00f      	b.n	8007fba <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9ef 	bl	8008380 <USBD_CtlError>
      err++;
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	72fb      	strb	r3, [r7, #11]
    break;
 8007fa8:	e007      	b.n	8007fba <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9e7 	bl	8008380 <USBD_CtlError>
    err++;
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	72fb      	strb	r3, [r7, #11]
    break;
 8007fb8:	bf00      	nop
  }

  if (err != 0U)
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d11e      	bne.n	8007ffe <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007fc8:	893b      	ldrh	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00e      	beq.n	8007fec <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88da      	ldrh	r2, [r3, #6]
 8007fd2:	893b      	ldrh	r3, [r7, #8]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	bf28      	it	cs
 8007fd8:	4613      	movcs	r3, r2
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fde:	893b      	ldrh	r3, [r7, #8]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68f9      	ldr	r1, [r7, #12]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fa3c 	bl	8008462 <USBD_CtlSendData>
 8007fea:	e009      	b.n	8008000 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f9c6 	bl	8008380 <USBD_CtlError>
 8007ff4:	e004      	b.n	8008000 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa8d 	bl	8008516 <USBD_CtlSendStatus>
 8007ffc:	e000      	b.n	8008000 <USBD_GetDescriptor+0x320>
    return;
 8007ffe:	bf00      	nop
    }
  }
}
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop

08008008 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	889b      	ldrh	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d130      	bne.n	800807c <USBD_SetAddress+0x74>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	88db      	ldrh	r3, [r3, #6]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12c      	bne.n	800807c <USBD_SetAddress+0x74>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	2b7f      	cmp	r3, #127	; 0x7f
 8008028:	d828      	bhi.n	800807c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803c:	2b03      	cmp	r3, #3
 800803e:	d104      	bne.n	800804a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f99c 	bl	8008380 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008048:	e01c      	b.n	8008084 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7f9 f960 	bl	800131c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa5a 	bl	8008516 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008070:	e008      	b.n	8008084 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	e003      	b.n	8008084 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f97e 	bl	8008380 <USBD_CtlError>
  }
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	4b4b      	ldr	r3, [pc, #300]	; (80081d0 <USBD_SetConfig+0x144>)
 80080a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080a4:	4b4a      	ldr	r3, [pc, #296]	; (80081d0 <USBD_SetConfig+0x144>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d905      	bls.n	80080b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f966 	bl	8008380 <USBD_CtlError>
    return USBD_FAIL;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e087      	b.n	80081c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d002      	beq.n	80080c8 <USBD_SetConfig+0x3c>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d025      	beq.n	8008112 <USBD_SetConfig+0x86>
 80080c6:	e071      	b.n	80081ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80080c8:	4b41      	ldr	r3, [pc, #260]	; (80081d0 <USBD_SetConfig+0x144>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01c      	beq.n	800810a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80080d0:	4b3f      	ldr	r3, [pc, #252]	; (80081d0 <USBD_SetConfig+0x144>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80080da:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <USBD_SetConfig+0x144>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff f9bd 	bl	8007460 <USBD_SetClassConfig>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f944 	bl	8008380 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80080f8:	e065      	b.n	80081c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa0b 	bl	8008516 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2203      	movs	r2, #3
 8008104:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008108:	e05d      	b.n	80081c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa03 	bl	8008516 <USBD_CtlSendStatus>
    break;
 8008110:	e059      	b.n	80081c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008112:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <USBD_SetConfig+0x144>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d112      	bne.n	8008140 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008122:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <USBD_SetConfig+0x144>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800812c:	4b28      	ldr	r3, [pc, #160]	; (80081d0 <USBD_SetConfig+0x144>)
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff f9b0 	bl	8007498 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f9ec 	bl	8008516 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800813e:	e042      	b.n	80081c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <USBD_SetConfig+0x144>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d02a      	beq.n	80081a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff f99e 	bl	8007498 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <USBD_SetConfig+0x144>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008166:	4b1a      	ldr	r3, [pc, #104]	; (80081d0 <USBD_SetConfig+0x144>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff f977 	bl	8007460 <USBD_SetClassConfig>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00f      	beq.n	800819c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8fe 	bl	8008380 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff f983 	bl	8007498 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800819a:	e014      	b.n	80081c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f9ba 	bl	8008516 <USBD_CtlSendStatus>
    break;
 80081a2:	e010      	b.n	80081c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f9b6 	bl	8008516 <USBD_CtlSendStatus>
    break;
 80081aa:	e00c      	b.n	80081c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f8e6 	bl	8008380 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <USBD_SetConfig+0x144>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7ff f96c 	bl	8007498 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	bf00      	nop
  }

  return ret;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20000214 	.word	0x20000214

080081d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	88db      	ldrh	r3, [r3, #6]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d004      	beq.n	80081f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f8c9 	bl	8008380 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80081ee:	e021      	b.n	8008234 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	db17      	blt.n	800822a <USBD_GetConfig+0x56>
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	dd02      	ble.n	8008204 <USBD_GetConfig+0x30>
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d00b      	beq.n	800821a <USBD_GetConfig+0x46>
 8008202:	e012      	b.n	800822a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3308      	adds	r3, #8
 800820e:	2201      	movs	r2, #1
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f925 	bl	8008462 <USBD_CtlSendData>
      break;
 8008218:	e00c      	b.n	8008234 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3304      	adds	r3, #4
 800821e:	2201      	movs	r2, #1
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f91d 	bl	8008462 <USBD_CtlSendData>
      break;
 8008228:	e004      	b.n	8008234 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f8a7 	bl	8008380 <USBD_CtlError>
      break;
 8008232:	bf00      	nop
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824c:	3b01      	subs	r3, #1
 800824e:	2b02      	cmp	r3, #2
 8008250:	d81e      	bhi.n	8008290 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	88db      	ldrh	r3, [r3, #6]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d004      	beq.n	8008264 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f88f 	bl	8008380 <USBD_CtlError>
      break;
 8008262:	e01a      	b.n	800829a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f043 0202 	orr.w	r2, r3, #2
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	330c      	adds	r3, #12
 8008284:	2202      	movs	r2, #2
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8ea 	bl	8008462 <USBD_CtlSendData>
    break;
 800828e:	e004      	b.n	800829a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f874 	bl	8008380 <USBD_CtlError>
    break;
 8008298:	bf00      	nop
  }
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	885b      	ldrh	r3, [r3, #2]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d106      	bne.n	80082c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f92a 	bl	8008516 <USBD_CtlSendStatus>
  }
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d80b      	bhi.n	80082f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	885b      	ldrh	r3, [r3, #2]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d10c      	bne.n	8008302 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f910 	bl	8008516 <USBD_CtlSendStatus>
      }
      break;
 80082f6:	e004      	b.n	8008302 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f840 	bl	8008380 <USBD_CtlError>
      break;
 8008300:	e000      	b.n	8008304 <USBD_ClrFeature+0x3a>
      break;
 8008302:	bf00      	nop
  }
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3301      	adds	r3, #1
 8008326:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	781a      	ldrb	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff faa8 	bl	800788c <SWAPBYTE>
 800833c:	4603      	mov	r3, r0
 800833e:	461a      	mov	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fa9b 	bl	800788c <SWAPBYTE>
 8008356:	4603      	mov	r3, r0
 8008358:	461a      	mov	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	3301      	adds	r3, #1
 8008362:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3301      	adds	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff fa8e 	bl	800788c <SWAPBYTE>
 8008370:	4603      	mov	r3, r0
 8008372:	461a      	mov	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	80da      	strh	r2, [r3, #6]
}
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7f8 ff2b 	bl	80011e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008392:	2100      	movs	r1, #0
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7f8 ff27 	bl	80011e8 <USBD_LL_StallEP>
}
 800839a:	bf00      	nop
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b086      	sub	sp, #24
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d036      	beq.n	8008426 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083bc:	6938      	ldr	r0, [r7, #16]
 80083be:	f000 f836 	bl	800842e <USBD_GetLen>
 80083c2:	4603      	mov	r3, r0
 80083c4:	3301      	adds	r3, #1
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4413      	add	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	7812      	ldrb	r2, [r2, #0]
 80083da:	701a      	strb	r2, [r3, #0]
  idx++;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	3301      	adds	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083e2:	7dfb      	ldrb	r3, [r7, #23]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	2203      	movs	r2, #3
 80083ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	3301      	adds	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083f2:	e013      	b.n	800841c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	7812      	ldrb	r2, [r2, #0]
 80083fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3301      	adds	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
    idx++;
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	3301      	adds	r3, #1
 800840a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
    idx++;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	3301      	adds	r3, #1
 800841a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e7      	bne.n	80083f4 <USBD_GetString+0x52>
 8008424:	e000      	b.n	8008428 <USBD_GetString+0x86>
    return;
 8008426:	bf00      	nop
  }
}
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800843e:	e005      	b.n	800844c <USBD_GetLen+0x1e>
  {
    len++;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	3301      	adds	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3301      	adds	r3, #1
 800844a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f5      	bne.n	8008440 <USBD_GetLen+0x12>
  }

  return len;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2202      	movs	r2, #2
 8008472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	2100      	movs	r1, #0
 8008488:	68f8      	ldr	r0, [r7, #12]
 800848a:	f7f8 ff7d 	bl	8001388 <USBD_LL_Transmit>

  return USBD_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7f8 ff6c 	bl	8001388 <USBD_LL_Transmit>

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2203      	movs	r2, #3
 80084ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	2100      	movs	r1, #0
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7f8 ff87 	bl	80013f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	2100      	movs	r1, #0
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7f8 ff76 	bl	80013f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2204      	movs	r2, #4
 8008522:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008526:	2300      	movs	r3, #0
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7f8 ff2b 	bl	8001388 <USBD_LL_Transmit>

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2205      	movs	r2, #5
 8008548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854c:	2300      	movs	r3, #0
 800854e:	2200      	movs	r2, #0
 8008550:	2100      	movs	r1, #0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7f8 ff50 	bl	80013f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <__errno>:
 8008564:	4b01      	ldr	r3, [pc, #4]	; (800856c <__errno+0x8>)
 8008566:	6818      	ldr	r0, [r3, #0]
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000190 	.word	0x20000190

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4e0d      	ldr	r6, [pc, #52]	; (80085a8 <__libc_init_array+0x38>)
 8008574:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008576:	1ba4      	subs	r4, r4, r6
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	2500      	movs	r5, #0
 800857c:	42a5      	cmp	r5, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	4e0b      	ldr	r6, [pc, #44]	; (80085b0 <__libc_init_array+0x40>)
 8008582:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <__libc_init_array+0x44>)
 8008584:	f000 f900 	bl	8008788 <_init>
 8008588:	1ba4      	subs	r4, r4, r6
 800858a:	10a4      	asrs	r4, r4, #2
 800858c:	2500      	movs	r5, #0
 800858e:	42a5      	cmp	r5, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008598:	4798      	blx	r3
 800859a:	3501      	adds	r5, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a2:	4798      	blx	r3
 80085a4:	3501      	adds	r5, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	0800883c 	.word	0x0800883c
 80085ac:	0800883c 	.word	0x0800883c
 80085b0:	0800883c 	.word	0x0800883c
 80085b4:	08008840 	.word	0x08008840

080085b8 <malloc>:
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <malloc+0xc>)
 80085ba:	4601      	mov	r1, r0
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f000 b861 	b.w	8008684 <_malloc_r>
 80085c2:	bf00      	nop
 80085c4:	20000190 	.word	0x20000190

080085c8 <free>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <free+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f000 b80b 	b.w	80085e8 <_free_r>
 80085d2:	bf00      	nop
 80085d4:	20000190 	.word	0x20000190

080085d8 <memset>:
 80085d8:	4402      	add	r2, r0
 80085da:	4603      	mov	r3, r0
 80085dc:	4293      	cmp	r3, r2
 80085de:	d100      	bne.n	80085e2 <memset+0xa>
 80085e0:	4770      	bx	lr
 80085e2:	f803 1b01 	strb.w	r1, [r3], #1
 80085e6:	e7f9      	b.n	80085dc <memset+0x4>

080085e8 <_free_r>:
 80085e8:	b538      	push	{r3, r4, r5, lr}
 80085ea:	4605      	mov	r5, r0
 80085ec:	2900      	cmp	r1, #0
 80085ee:	d045      	beq.n	800867c <_free_r+0x94>
 80085f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f4:	1f0c      	subs	r4, r1, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfb8      	it	lt
 80085fa:	18e4      	addlt	r4, r4, r3
 80085fc:	f000 f8c1 	bl	8008782 <__malloc_lock>
 8008600:	4a1f      	ldr	r2, [pc, #124]	; (8008680 <_free_r+0x98>)
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	4610      	mov	r0, r2
 8008606:	b933      	cbnz	r3, 8008616 <_free_r+0x2e>
 8008608:	6063      	str	r3, [r4, #4]
 800860a:	6014      	str	r4, [r2, #0]
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008612:	f000 b8b7 	b.w	8008784 <__malloc_unlock>
 8008616:	42a3      	cmp	r3, r4
 8008618:	d90c      	bls.n	8008634 <_free_r+0x4c>
 800861a:	6821      	ldr	r1, [r4, #0]
 800861c:	1862      	adds	r2, r4, r1
 800861e:	4293      	cmp	r3, r2
 8008620:	bf04      	itt	eq
 8008622:	681a      	ldreq	r2, [r3, #0]
 8008624:	685b      	ldreq	r3, [r3, #4]
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	bf04      	itt	eq
 800862a:	1852      	addeq	r2, r2, r1
 800862c:	6022      	streq	r2, [r4, #0]
 800862e:	6004      	str	r4, [r0, #0]
 8008630:	e7ec      	b.n	800860c <_free_r+0x24>
 8008632:	4613      	mov	r3, r2
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	b10a      	cbz	r2, 800863c <_free_r+0x54>
 8008638:	42a2      	cmp	r2, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x4a>
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	1858      	adds	r0, r3, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x74>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1858      	adds	r0, r3, r1
 800864a:	4282      	cmp	r2, r0
 800864c:	6019      	str	r1, [r3, #0]
 800864e:	d1dd      	bne.n	800860c <_free_r+0x24>
 8008650:	6810      	ldr	r0, [r2, #0]
 8008652:	6852      	ldr	r2, [r2, #4]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	4401      	add	r1, r0
 8008658:	6019      	str	r1, [r3, #0]
 800865a:	e7d7      	b.n	800860c <_free_r+0x24>
 800865c:	d902      	bls.n	8008664 <_free_r+0x7c>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d3      	b.n	800860c <_free_r+0x24>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428a      	cmp	r2, r1
 800866a:	bf04      	itt	eq
 800866c:	6811      	ldreq	r1, [r2, #0]
 800866e:	6852      	ldreq	r2, [r2, #4]
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	bf04      	itt	eq
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	605c      	str	r4, [r3, #4]
 800867a:	e7c7      	b.n	800860c <_free_r+0x24>
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	20000218 	.word	0x20000218

08008684 <_malloc_r>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	1ccd      	adds	r5, r1, #3
 8008688:	f025 0503 	bic.w	r5, r5, #3
 800868c:	3508      	adds	r5, #8
 800868e:	2d0c      	cmp	r5, #12
 8008690:	bf38      	it	cc
 8008692:	250c      	movcc	r5, #12
 8008694:	2d00      	cmp	r5, #0
 8008696:	4606      	mov	r6, r0
 8008698:	db01      	blt.n	800869e <_malloc_r+0x1a>
 800869a:	42a9      	cmp	r1, r5
 800869c:	d903      	bls.n	80086a6 <_malloc_r+0x22>
 800869e:	230c      	movs	r3, #12
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	2000      	movs	r0, #0
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	f000 f86c 	bl	8008782 <__malloc_lock>
 80086aa:	4a21      	ldr	r2, [pc, #132]	; (8008730 <_malloc_r+0xac>)
 80086ac:	6814      	ldr	r4, [r2, #0]
 80086ae:	4621      	mov	r1, r4
 80086b0:	b991      	cbnz	r1, 80086d8 <_malloc_r+0x54>
 80086b2:	4c20      	ldr	r4, [pc, #128]	; (8008734 <_malloc_r+0xb0>)
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	b91b      	cbnz	r3, 80086c0 <_malloc_r+0x3c>
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 f83d 	bl	8008738 <_sbrk_r>
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f000 f838 	bl	8008738 <_sbrk_r>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d124      	bne.n	8008716 <_malloc_r+0x92>
 80086cc:	230c      	movs	r3, #12
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f857 	bl	8008784 <__malloc_unlock>
 80086d6:	e7e4      	b.n	80086a2 <_malloc_r+0x1e>
 80086d8:	680b      	ldr	r3, [r1, #0]
 80086da:	1b5b      	subs	r3, r3, r5
 80086dc:	d418      	bmi.n	8008710 <_malloc_r+0x8c>
 80086de:	2b0b      	cmp	r3, #11
 80086e0:	d90f      	bls.n	8008702 <_malloc_r+0x7e>
 80086e2:	600b      	str	r3, [r1, #0]
 80086e4:	50cd      	str	r5, [r1, r3]
 80086e6:	18cc      	adds	r4, r1, r3
 80086e8:	4630      	mov	r0, r6
 80086ea:	f000 f84b 	bl	8008784 <__malloc_unlock>
 80086ee:	f104 000b 	add.w	r0, r4, #11
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	f020 0007 	bic.w	r0, r0, #7
 80086f8:	1ac3      	subs	r3, r0, r3
 80086fa:	d0d3      	beq.n	80086a4 <_malloc_r+0x20>
 80086fc:	425a      	negs	r2, r3
 80086fe:	50e2      	str	r2, [r4, r3]
 8008700:	e7d0      	b.n	80086a4 <_malloc_r+0x20>
 8008702:	428c      	cmp	r4, r1
 8008704:	684b      	ldr	r3, [r1, #4]
 8008706:	bf16      	itet	ne
 8008708:	6063      	strne	r3, [r4, #4]
 800870a:	6013      	streq	r3, [r2, #0]
 800870c:	460c      	movne	r4, r1
 800870e:	e7eb      	b.n	80086e8 <_malloc_r+0x64>
 8008710:	460c      	mov	r4, r1
 8008712:	6849      	ldr	r1, [r1, #4]
 8008714:	e7cc      	b.n	80086b0 <_malloc_r+0x2c>
 8008716:	1cc4      	adds	r4, r0, #3
 8008718:	f024 0403 	bic.w	r4, r4, #3
 800871c:	42a0      	cmp	r0, r4
 800871e:	d005      	beq.n	800872c <_malloc_r+0xa8>
 8008720:	1a21      	subs	r1, r4, r0
 8008722:	4630      	mov	r0, r6
 8008724:	f000 f808 	bl	8008738 <_sbrk_r>
 8008728:	3001      	adds	r0, #1
 800872a:	d0cf      	beq.n	80086cc <_malloc_r+0x48>
 800872c:	6025      	str	r5, [r4, #0]
 800872e:	e7db      	b.n	80086e8 <_malloc_r+0x64>
 8008730:	20000218 	.word	0x20000218
 8008734:	2000021c 	.word	0x2000021c

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4c06      	ldr	r4, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4605      	mov	r5, r0
 8008740:	4608      	mov	r0, r1
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	f7f8 f864 	bl	8000810 <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20001238 	.word	0x20001238

08008758 <strncpy>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	3901      	subs	r1, #1
 800875c:	4604      	mov	r4, r0
 800875e:	b902      	cbnz	r2, 8008762 <strncpy+0xa>
 8008760:	bd70      	pop	{r4, r5, r6, pc}
 8008762:	4623      	mov	r3, r4
 8008764:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008768:	f803 5b01 	strb.w	r5, [r3], #1
 800876c:	1e56      	subs	r6, r2, #1
 800876e:	b92d      	cbnz	r5, 800877c <strncpy+0x24>
 8008770:	4414      	add	r4, r2
 8008772:	42a3      	cmp	r3, r4
 8008774:	d0f4      	beq.n	8008760 <strncpy+0x8>
 8008776:	f803 5b01 	strb.w	r5, [r3], #1
 800877a:	e7fa      	b.n	8008772 <strncpy+0x1a>
 800877c:	461c      	mov	r4, r3
 800877e:	4632      	mov	r2, r6
 8008780:	e7ed      	b.n	800875e <strncpy+0x6>

08008782 <__malloc_lock>:
 8008782:	4770      	bx	lr

08008784 <__malloc_unlock>:
 8008784:	4770      	bx	lr
	...

08008788 <_init>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

08008794 <_fini>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr
