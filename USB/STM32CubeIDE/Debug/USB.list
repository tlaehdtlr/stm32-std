
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080086b0  080086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008740  08008740  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008748  08008748  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  200001f4  08008944  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08008944  0002123c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181ce  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032d6  00000000  00000000  000383f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f40  00000000  00000000  0003b6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  0003c608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d009  00000000  00000000  0003d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010543  00000000  00000000  0005a3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a598c  00000000  00000000  0006a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  00110304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008698 	.word	0x08008698

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	08008698 	.word	0x08008698

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b3c      	ldr	r3, [pc, #240]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a3b      	ldr	r2, [pc, #236]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <MX_GPIO_Init+0x108>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0x108>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <MX_GPIO_Init+0x108>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	21b0      	movs	r1, #176	; 0xb0
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 fad3 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <MX_GPIO_Init+0x10c>)
 8000556:	f001 facd 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <MX_GPIO_Init+0x110>)
 8000562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	4619      	mov	r1, r3
 800056e:	481c      	ldr	r0, [pc, #112]	; (80005e0 <MX_GPIO_Init+0x114>)
 8000570:	f001 f94e 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000574:	23b0      	movs	r3, #176	; 0xb0
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	4619      	mov	r1, r3
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f001 f93f 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800059a:	2301      	movs	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f001 f932 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005c6:	f001 f923 	bl	8001810 <HAL_GPIO_Init>

}
 80005ca:	bf00      	nop
 80005cc:	3728      	adds	r7, #40	; 0x28
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	48000400 	.word	0x48000400
 80005dc:	10210000 	.word	0x10210000
 80005e0:	48000800 	.word	0x48000800

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 ff84 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f807 	bl	80005fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff6c 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f902 	bl	80007fc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f000 f99c 	bl	8000934 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x18>

080005fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b0a4      	sub	sp, #144	; 0x90
 8000602:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000608:	2244      	movs	r2, #68	; 0x44
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f007 ff81 	bl	8008514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2234      	movs	r2, #52	; 0x34
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f007 ff73 	bl	8008514 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f002 fe1b 	bl	800326c <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x42>
  {
    Error_Handler();
 800063c:	f000 f84c 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000640:	2310      	movs	r3, #16
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800064c:	23b0      	movs	r3, #176	; 0xb0
 800064e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 8;
 800065e:	2308      	movs	r3, #8
 8000660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fe5f 	bl	8003338 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000680:	f000 f82a 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2303      	movs	r3, #3
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000698:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fab0 	bl	8003c04 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006aa:	f000 f815 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 80006ae:	f242 0302 	movw	r3, #8194	; 0x2002
 80006b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80006b8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fca3 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006cc:	f000 f804 	bl	80006d8 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3790      	adds	r7, #144	; 0x90
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006de:	e7fe      	b.n	80006de <Error_Handler+0x6>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x44>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6613      	str	r3, [r2, #96]	; 0x60
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_MspInit+0x44>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000708:	6593      	str	r3, [r2, #88]	; 0x58
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 ff1a 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <USB_IRQHandler+0x10>)
 8000782:	f001 fb03 	bl	8001d8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000f40 	.word	0x20000f40

08000790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000798:	4a14      	ldr	r2, [pc, #80]	; (80007ec <_sbrk+0x5c>)
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <_sbrk+0x60>)
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d102      	bne.n	80007b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <_sbrk+0x64>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <_sbrk+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d207      	bcs.n	80007d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c0:	f007 fe6e 	bl	80084a0 <__errno>
 80007c4:	4602      	mov	r2, r0
 80007c6:	230c      	movs	r3, #12
 80007c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	e009      	b.n	80007e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <_sbrk+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <_sbrk+0x64>)
 80007e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000a000 	.word	0x2000a000
 80007f0:	00000400 	.word	0x00000400
 80007f4:	20000210 	.word	0x20000210
 80007f8:	20001240 	.word	0x20001240

080007fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART2_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x58>)
 8000840:	f003 fd6a 	bl	8004318 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f7ff ff45 	bl	80006d8 <Error_Handler>
  }

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000220 	.word	0x20000220
 8000858:	40004400 	.word	0x40004400

0800085c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_UART_MspInit+0x7c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d128      	bne.n	80008d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_UART_MspInit+0x80>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_UART_MspInit+0x80>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <HAL_UART_MspInit+0x80>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_UART_MspInit+0x80>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ae:	230c      	movs	r3, #12
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008be:	2307      	movs	r3, #7
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 ffa0 	bl	8001810 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40021000 	.word	0x40021000

080008e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f000 fdd0 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008ea:	e003      	b.n	80008f4 <LoopCopyDataInit>

080008ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008f2:	3104      	adds	r1, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008f4:	480a      	ldr	r0, [pc, #40]	; (8000920 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008fc:	d3f6      	bcc.n	80008ec <CopyDataInit>
	ldr	r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000900:	e002      	b.n	8000908 <LoopFillZerobss>

08000902 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000902:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000904:	f842 3b04 	str.w	r3, [r2], #4

08000908 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <LoopForever+0x16>)
	cmp	r2, r3
 800090a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800090c:	d3f9      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f007 fdcd 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000912:	f7ff fe67 	bl	80005e4 <main>

08000916 <LoopForever>:

LoopForever:
    b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800091c:	08008750 	.word	0x08008750
	ldr	r0, =_sdata
 8000920:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000924:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000928:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 800092c:	2000123c 	.word	0x2000123c

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000938:	2200      	movs	r2, #0
 800093a:	4912      	ldr	r1, [pc, #72]	; (8000984 <MX_USB_DEVICE_Init+0x50>)
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_USB_DEVICE_Init+0x54>)
 800093e:	f006 fcbf 	bl	80072c0 <USBD_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000948:	f7ff fec6 	bl	80006d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800094c:	490f      	ldr	r1, [pc, #60]	; (800098c <MX_USB_DEVICE_Init+0x58>)
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_USB_DEVICE_Init+0x54>)
 8000950:	f006 fce6 	bl	8007320 <USBD_RegisterClass>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800095a:	f7ff febd 	bl	80006d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <MX_USB_DEVICE_Init+0x5c>)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_USB_DEVICE_Init+0x54>)
 8000962:	f006 fc11 	bl	8007188 <USBD_CDC_RegisterInterface>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800096c:	f7ff feb4 	bl	80006d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USB_DEVICE_Init+0x54>)
 8000972:	f006 fcfc 	bl	800736e <USBD_Start>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800097c:	f7ff feac 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000014 	.word	0x20000014
 8000988:	200002a0 	.word	0x200002a0
 800098c:	2000008c 	.word	0x2000008c
 8000990:	20000000 	.word	0x20000000

08000994 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	4905      	ldr	r1, [pc, #20]	; (80009b0 <CDC_Init_FS+0x1c>)
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <CDC_Init_FS+0x20>)
 800099e:	f006 fc08 	bl	80071b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80009a2:	4905      	ldr	r1, [pc, #20]	; (80009b8 <CDC_Init_FS+0x24>)
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <CDC_Init_FS+0x20>)
 80009a6:	f006 fc1d 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80009aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000958 	.word	0x20000958
 80009b4:	200002a0 	.word	0x200002a0
 80009b8:	20000570 	.word	0x20000570

080009bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80009c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b23      	cmp	r3, #35	; 0x23
 80009e0:	d84a      	bhi.n	8000a78 <CDC_Control_FS+0xac>
 80009e2:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <CDC_Control_FS+0x1c>)
 80009e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e8:	08000a79 	.word	0x08000a79
 80009ec:	08000a79 	.word	0x08000a79
 80009f0:	08000a79 	.word	0x08000a79
 80009f4:	08000a79 	.word	0x08000a79
 80009f8:	08000a79 	.word	0x08000a79
 80009fc:	08000a79 	.word	0x08000a79
 8000a00:	08000a79 	.word	0x08000a79
 8000a04:	08000a79 	.word	0x08000a79
 8000a08:	08000a79 	.word	0x08000a79
 8000a0c:	08000a79 	.word	0x08000a79
 8000a10:	08000a79 	.word	0x08000a79
 8000a14:	08000a79 	.word	0x08000a79
 8000a18:	08000a79 	.word	0x08000a79
 8000a1c:	08000a79 	.word	0x08000a79
 8000a20:	08000a79 	.word	0x08000a79
 8000a24:	08000a79 	.word	0x08000a79
 8000a28:	08000a79 	.word	0x08000a79
 8000a2c:	08000a79 	.word	0x08000a79
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a79 	.word	0x08000a79
 8000a38:	08000a79 	.word	0x08000a79
 8000a3c:	08000a79 	.word	0x08000a79
 8000a40:	08000a79 	.word	0x08000a79
 8000a44:	08000a79 	.word	0x08000a79
 8000a48:	08000a79 	.word	0x08000a79
 8000a4c:	08000a79 	.word	0x08000a79
 8000a50:	08000a79 	.word	0x08000a79
 8000a54:	08000a79 	.word	0x08000a79
 8000a58:	08000a79 	.word	0x08000a79
 8000a5c:	08000a79 	.word	0x08000a79
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000a79 	.word	0x08000a79
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a79 	.word	0x08000a79
 8000a70:	08000a79 	.word	0x08000a79
 8000a74:	08000a79 	.word	0x08000a79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000a78:	bf00      	nop
  }

  return (USBD_OK);
 8000a7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f80e 	bl	8000abc <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <CDC_Receive_FS+0x30>)
 8000aa4:	f006 fb9e 	bl	80071e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <CDC_Receive_FS+0x30>)
 8000aaa:	f006 fbdf 	bl	800726c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000aae:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002a0 	.word	0x200002a0

08000abc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <CDC_Transmit_FS+0x48>)
 8000ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000ad2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00b      	b.n	8000afa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <CDC_Transmit_FS+0x48>)
 8000aea:	f006 fb62 	bl	80071b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <CDC_Transmit_FS+0x48>)
 8000af0:	f006 fb8c 	bl	800720c <USBD_CDC_TransmitPacket>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200002a0 	.word	0x200002a0

08000b08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2212      	movs	r2, #18
 8000b3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000b3e:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000034 	.word	0x20000034

08000b50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000b62:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000054 	.word	0x20000054

08000b74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d105      	bne.n	8000b92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8000b8a:	4808      	ldr	r0, [pc, #32]	; (8000bac <USBD_FS_ProductStrDescriptor+0x38>)
 8000b8c:	f007 fba7 	bl	80082de <USBD_GetString>
 8000b90:	e004      	b.n	8000b9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <USBD_FS_ProductStrDescriptor+0x34>)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <USBD_FS_ProductStrDescriptor+0x38>)
 8000b98:	f007 fba1 	bl	80082de <USBD_GetString>
  }
  return USBD_StrDesc;
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000d40 	.word	0x20000d40
 8000bac:	080086b0 	.word	0x080086b0

08000bb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	4904      	ldr	r1, [pc, #16]	; (8000bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000bc2:	f007 fb8c 	bl	80082de <USBD_GetString>
  return USBD_StrDesc;
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000d40 	.word	0x20000d40
 8000bd4:	080086c8 	.word	0x080086c8

08000bd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	221a      	movs	r2, #26
 8000be8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000bea:	f000 f855 	bl	8000c98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000bee:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000058 	.word	0x20000058

08000bfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d105      	bne.n	8000c1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000c12:	4808      	ldr	r0, [pc, #32]	; (8000c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000c14:	f007 fb63 	bl	80082de <USBD_GetString>
 8000c18:	e004      	b.n	8000c24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000c20:	f007 fb5d 	bl	80082de <USBD_GetString>
  }
  return USBD_StrDesc;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000d40 	.word	0x20000d40
 8000c34:	080086dc 	.word	0x080086dc

08000c38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d105      	bne.n	8000c56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	4907      	ldr	r1, [pc, #28]	; (8000c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000c4e:	4808      	ldr	r0, [pc, #32]	; (8000c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000c50:	f007 fb45 	bl	80082de <USBD_GetString>
 8000c54:	e004      	b.n	8000c60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000c5c:	f007 fb3f 	bl	80082de <USBD_GetString>
  }
  return USBD_StrDesc;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000d40 	.word	0x20000d40
 8000c70:	080086e8 	.word	0x080086e8

08000c74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	220c      	movs	r2, #12
 8000c84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8000c86:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20000048 	.word	0x20000048

08000c98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <Get_SerialNum+0x44>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <Get_SerialNum+0x48>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <Get_SerialNum+0x4c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d009      	beq.n	8000cd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <Get_SerialNum+0x50>)
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f814 	bl	8000cf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000cc8:	2204      	movs	r2, #4
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <Get_SerialNum+0x54>)
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f000 f80f 	bl	8000cf0 <IntToUnicode>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	1fff7590 	.word	0x1fff7590
 8000ce0:	1fff7594 	.word	0x1fff7594
 8000ce4:	1fff7598 	.word	0x1fff7598
 8000ce8:	2000005a 	.word	0x2000005a
 8000cec:	2000006a 	.word	0x2000006a

08000cf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	75fb      	strb	r3, [r7, #23]
 8000d06:	e027      	b.n	8000d58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	0f1b      	lsrs	r3, r3, #28
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d80b      	bhi.n	8000d28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	0f1b      	lsrs	r3, r3, #28
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	440b      	add	r3, r1
 8000d20:	3230      	adds	r2, #48	; 0x30
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e00a      	b.n	8000d3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	0f1b      	lsrs	r3, r3, #28
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	440b      	add	r3, r1
 8000d38:	3237      	adds	r2, #55	; 0x37
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	3301      	adds	r3, #1
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	3301      	adds	r3, #1
 8000d56:	75fb      	strb	r3, [r7, #23]
 8000d58:	7dfa      	ldrb	r2, [r7, #23]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d3d3      	bcc.n	8000d08 <IntToUnicode+0x18>
  }
}
 8000d60:	bf00      	nop
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <HAL_PCD_MspInit+0x90>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d131      	bne.n	8000df2 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000da6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8000db8:	230a      	movs	r3, #10
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f000 fd23 	bl	8001810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_PCD_MspInit+0x94>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2043      	movs	r0, #67	; 0x43
 8000de8:	f000 fcdb 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8000dec:	2043      	movs	r0, #67	; 0x43
 8000dee:	f000 fcf4 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40006800 	.word	0x40006800
 8000e00:	40021000 	.word	0x40021000

08000e04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	f006 faf2 	bl	8007404 <USBD_LL_SetupStage>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f006 fb2a 	bl	80074aa <USBD_LL_DataOutStage>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8000e70:	78fa      	ldrb	r2, [r7, #3]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	333c      	adds	r3, #60	; 0x3c
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f006 fb73 	bl	8007570 <USBD_LL_DataInStage>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fc77 	bl	8007794 <USBD_LL_SOF>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d001      	beq.n	8000ec6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8000ec2:	f7ff fc09 	bl	80006d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f006 fc24 	bl	800771e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fbdd 	bl	800769c <USBD_LL_Reset>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fc1f 	bl	800773e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_PCD_SuspendCallback+0x30>)
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	4a03      	ldr	r2, [pc, #12]	; (8000f1c <HAL_PCD_SuspendCallback+0x30>)
 8000f0e:	f043 0306 	orr.w	r3, r3, #6
 8000f12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_PCD_ResumeCallback+0x34>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_PCD_ResumeCallback+0x34>)
 8000f36:	f023 0306 	bic.w	r3, r3, #6
 8000f3a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8000f3c:	f000 fa9e 	bl	800147c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f006 fc0e 	bl	8007768 <USBD_LL_Resume>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8000f60:	f002 f9da 	bl	8003318 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8000f64:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a29      	ldr	r2, [pc, #164]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8000f74:	4b27      	ldr	r3, [pc, #156]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <USBD_LL_Init+0xc0>)
 8000f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f7a:	4b26      	ldr	r3, [pc, #152]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <USBD_LL_Init+0xbc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <USBD_LL_Init+0xbc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000fa4:	481b      	ldr	r0, [pc, #108]	; (8001014 <USBD_LL_Init+0xbc>)
 8000fa6:	f000 fdbd 	bl	8001b24 <HAL_PCD_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8000fb0:	f7ff fb92 	bl	80006d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8000fba:	2318      	movs	r3, #24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f002 f8d8 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8000fca:	2358      	movs	r3, #88	; 0x58
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	f002 f8d0 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2181      	movs	r1, #129	; 0x81
 8000fe0:	f002 f8c8 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8000fea:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	f002 f8bf 	bl	8003174 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	2200      	movs	r2, #0
 8001002:	2182      	movs	r1, #130	; 0x82
 8001004:	f002 f8b6 	bl	8003174 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000f40 	.word	0x20000f40
 8001018:	40006800 	.word	0x40006800

0800101c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fe88 	bl	8001d48 <HAL_PCD_Start>
 8001038:	4603      	mov	r3, r0
 800103a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d816      	bhi.n	8001070 <USBD_LL_Start+0x54>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <USBD_LL_Start+0x2c>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	08001059 	.word	0x08001059
 800104c:	0800105f 	.word	0x0800105f
 8001050:	08001065 	.word	0x08001065
 8001054:	0800106b 	.word	0x0800106b
    case HAL_OK :
      usb_status = USBD_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
    break;
 800105c:	e00b      	b.n	8001076 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800105e:	2303      	movs	r3, #3
 8001060:	73fb      	strb	r3, [r7, #15]
    break;
 8001062:	e008      	b.n	8001076 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
    break;
 8001068:	e005      	b.n	8001076 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800106a:	2303      	movs	r3, #3
 800106c:	73fb      	strb	r3, [r7, #15]
    break;
 800106e:	e002      	b.n	8001076 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8001070:	2303      	movs	r3, #3
 8001072:	73fb      	strb	r3, [r7, #15]
    break;
 8001074:	bf00      	nop
  }
  return usb_status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	70fb      	strb	r3, [r7, #3]
 8001092:	460b      	mov	r3, r1
 8001094:	70bb      	strb	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80010a8:	78bb      	ldrb	r3, [r7, #2]
 80010aa:	883a      	ldrh	r2, [r7, #0]
 80010ac:	78f9      	ldrb	r1, [r7, #3]
 80010ae:	f000 ffe0 	bl	8002072 <HAL_PCD_EP_Open>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d817      	bhi.n	80010ec <USBD_LL_OpenEP+0x6c>
 80010bc:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <USBD_LL_OpenEP+0x44>)
 80010be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c2:	bf00      	nop
 80010c4:	080010d5 	.word	0x080010d5
 80010c8:	080010db 	.word	0x080010db
 80010cc:	080010e1 	.word	0x080010e1
 80010d0:	080010e7 	.word	0x080010e7
    case HAL_OK :
      usb_status = USBD_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
    break;
 80010d8:	e00b      	b.n	80010f2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80010da:	2303      	movs	r3, #3
 80010dc:	73fb      	strb	r3, [r7, #15]
    break;
 80010de:	e008      	b.n	80010f2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
    break;
 80010e4:	e005      	b.n	80010f2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80010e6:	2303      	movs	r3, #3
 80010e8:	73fb      	strb	r3, [r7, #15]
    break;
 80010ea:	e002      	b.n	80010f2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80010ec:	2303      	movs	r3, #3
 80010ee:	73fb      	strb	r3, [r7, #15]
    break;
 80010f0:	bf00      	nop
  }
  return usb_status;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001116:	78fa      	ldrb	r2, [r7, #3]
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f80f 	bl	800213e <HAL_PCD_EP_Close>
 8001120:	4603      	mov	r3, r0
 8001122:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d816      	bhi.n	8001158 <USBD_LL_CloseEP+0x5c>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <USBD_LL_CloseEP+0x34>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001141 	.word	0x08001141
 8001134:	08001147 	.word	0x08001147
 8001138:	0800114d 	.word	0x0800114d
 800113c:	08001153 	.word	0x08001153
    case HAL_OK :
      usb_status = USBD_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
    break;
 8001144:	e00b      	b.n	800115e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001146:	2303      	movs	r3, #3
 8001148:	73fb      	strb	r3, [r7, #15]
    break;
 800114a:	e008      	b.n	800115e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
    break;
 8001150:	e005      	b.n	800115e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001152:	2303      	movs	r3, #3
 8001154:	73fb      	strb	r3, [r7, #15]
    break;
 8001156:	e002      	b.n	800115e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8001158:	2303      	movs	r3, #3
 800115a:	73fb      	strb	r3, [r7, #15]
    break;
 800115c:	bf00      	nop
  }
  return usb_status;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001182:	78fa      	ldrb	r2, [r7, #3]
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f8b9 	bl	80022fe <HAL_PCD_EP_SetStall>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d816      	bhi.n	80011c4 <USBD_LL_StallEP+0x5c>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <USBD_LL_StallEP+0x34>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011b3 	.word	0x080011b3
 80011a4:	080011b9 	.word	0x080011b9
 80011a8:	080011bf 	.word	0x080011bf
    case HAL_OK :
      usb_status = USBD_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
    break;
 80011b0:	e00b      	b.n	80011ca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80011b2:	2303      	movs	r3, #3
 80011b4:	73fb      	strb	r3, [r7, #15]
    break;
 80011b6:	e008      	b.n	80011ca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
    break;
 80011bc:	e005      	b.n	80011ca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80011be:	2303      	movs	r3, #3
 80011c0:	73fb      	strb	r3, [r7, #15]
    break;
 80011c2:	e002      	b.n	80011ca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80011c4:	2303      	movs	r3, #3
 80011c6:	73fb      	strb	r3, [r7, #15]
    break;
 80011c8:	bf00      	nop
  }
  return usb_status;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80011ee:	78fa      	ldrb	r2, [r7, #3]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 f8e3 	bl	80023be <HAL_PCD_EP_ClrStall>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d816      	bhi.n	8001230 <USBD_LL_ClearStallEP+0x5c>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <USBD_LL_ClearStallEP+0x34>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001219 	.word	0x08001219
 800120c:	0800121f 	.word	0x0800121f
 8001210:	08001225 	.word	0x08001225
 8001214:	0800122b 	.word	0x0800122b
    case HAL_OK :
      usb_status = USBD_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
    break;
 800121c:	e00b      	b.n	8001236 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800121e:	2303      	movs	r3, #3
 8001220:	73fb      	strb	r3, [r7, #15]
    break;
 8001222:	e008      	b.n	8001236 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
    break;
 8001228:	e005      	b.n	8001236 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800122a:	2303      	movs	r3, #3
 800122c:	73fb      	strb	r3, [r7, #15]
    break;
 800122e:	e002      	b.n	8001236 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8001230:	2303      	movs	r3, #3
 8001232:	73fb      	strb	r3, [r7, #15]
    break;
 8001234:	bf00      	nop
  }
  return usb_status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001252:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da0c      	bge.n	8001276 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	3302      	adds	r3, #2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	e00b      	b.n	800128e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800127c:	68f9      	ldr	r1, [r7, #12]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800128c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 feb4 	bl	8002028 <HAL_PCD_SetAddress>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d816      	bhi.n	80012f8 <USBD_LL_SetUSBAddress+0x5c>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <USBD_LL_SetUSBAddress+0x34>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	080012e7 	.word	0x080012e7
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012f3 	.word	0x080012f3
    case HAL_OK :
      usb_status = USBD_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
    break;
 80012e4:	e00b      	b.n	80012fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80012e6:	2303      	movs	r3, #3
 80012e8:	73fb      	strb	r3, [r7, #15]
    break;
 80012ea:	e008      	b.n	80012fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
    break;
 80012f0:	e005      	b.n	80012fe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80012f2:	2303      	movs	r3, #3
 80012f4:	73fb      	strb	r3, [r7, #15]
    break;
 80012f6:	e002      	b.n	80012fe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80012f8:	2303      	movs	r3, #3
 80012fa:	73fb      	strb	r3, [r7, #15]
    break;
 80012fc:	bf00      	nop
  }
  return usb_status;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	460b      	mov	r3, r1
 8001316:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001326:	7af9      	ldrb	r1, [r7, #11]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	f000 ffa4 	bl	8002278 <HAL_PCD_EP_Transmit>
 8001330:	4603      	mov	r3, r0
 8001332:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d816      	bhi.n	8001368 <USBD_LL_Transmit+0x60>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <USBD_LL_Transmit+0x38>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001351 	.word	0x08001351
 8001344:	08001357 	.word	0x08001357
 8001348:	0800135d 	.word	0x0800135d
 800134c:	08001363 	.word	0x08001363
    case HAL_OK :
      usb_status = USBD_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	75fb      	strb	r3, [r7, #23]
    break;
 8001354:	e00b      	b.n	800136e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001356:	2303      	movs	r3, #3
 8001358:	75fb      	strb	r3, [r7, #23]
    break;
 800135a:	e008      	b.n	800136e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800135c:	2301      	movs	r3, #1
 800135e:	75fb      	strb	r3, [r7, #23]
    break;
 8001360:	e005      	b.n	800136e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001362:	2303      	movs	r3, #3
 8001364:	75fb      	strb	r3, [r7, #23]
    break;
 8001366:	e002      	b.n	800136e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8001368:	2303      	movs	r3, #3
 800136a:	75fb      	strb	r3, [r7, #23]
    break;
 800136c:	bf00      	nop
  }
  return usb_status;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	460b      	mov	r3, r1
 8001386:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001396:	7af9      	ldrb	r1, [r7, #11]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	f000 ff17 	bl	80021ce <HAL_PCD_EP_Receive>
 80013a0:	4603      	mov	r3, r0
 80013a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d816      	bhi.n	80013d8 <USBD_LL_PrepareReceive+0x60>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <USBD_LL_PrepareReceive+0x38>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013c7 	.word	0x080013c7
 80013b8:	080013cd 	.word	0x080013cd
 80013bc:	080013d3 	.word	0x080013d3
    case HAL_OK :
      usb_status = USBD_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
    break;
 80013c4:	e00b      	b.n	80013de <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80013c6:	2303      	movs	r3, #3
 80013c8:	75fb      	strb	r3, [r7, #23]
    break;
 80013ca:	e008      	b.n	80013de <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80013cc:	2301      	movs	r3, #1
 80013ce:	75fb      	strb	r3, [r7, #23]
    break;
 80013d0:	e005      	b.n	80013de <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80013d2:	2303      	movs	r3, #3
 80013d4:	75fb      	strb	r3, [r7, #23]
    break;
 80013d6:	e002      	b.n	80013de <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80013d8:	2303      	movs	r3, #3
 80013da:	75fb      	strb	r3, [r7, #23]
    break;
 80013dc:	bf00      	nop
  }
  return usb_status;
 80013de:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ff22 	bl	8002248 <HAL_PCD_EP_GetRxCount>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_PCDEx_LPM_Callback+0x18>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d013      	beq.n	800144e <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8001426:	e023      	b.n	8001470 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8001430:	f000 f824 	bl	800147c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_PCDEx_LPM_Callback+0x68>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_PCDEx_LPM_Callback+0x68>)
 800143a:	f023 0306 	bic.w	r3, r3, #6
 800143e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001446:	4618      	mov	r0, r3
 8001448:	f006 f98e 	bl	8007768 <USBD_LL_Resume>
    break;
 800144c:	e010      	b.n	8001470 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001454:	4618      	mov	r0, r3
 8001456:	f006 f972 	bl	800773e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_PCDEx_LPM_Callback+0x68>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_PCDEx_LPM_Callback+0x68>)
 8001468:	f043 0306 	orr.w	r3, r3, #6
 800146c:	6113      	str	r3, [r2, #16]
    break;
 800146e:	bf00      	nop
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8001480:	f7ff f8bd 	bl	80005fe <SystemClock_Config>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <SystemInit+0x64>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <SystemInit+0x64>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <SystemInit+0x68>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <SystemInit+0x68>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <SystemInit+0x68>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x68>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <SystemInit+0x68>)
 80014b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <SystemInit+0x68>)
 80014c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <SystemInit+0x68>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <SystemInit+0x68>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <SystemInit+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SystemInit+0x64>)
 80014da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014de:	609a      	str	r2, [r3, #8]
#endif
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_Init+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_Init+0x3c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f000 f93e 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f80f 	bl	8001534 <HAL_InitTick>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e001      	b.n	8001526 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001522:	f7ff f8dd 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_InitTick+0x6c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_InitTick+0x70>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_InitTick+0x6c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f949 	bl	80017f6 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d809      	bhi.n	8001584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f913 	bl	80017a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_InitTick+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e007      	b.n	8001594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e004      	b.n	8001594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000007c 	.word	0x2000007c
 80015a4:	20000074 	.word	0x20000074
 80015a8:	20000078 	.word	0x20000078

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000007c 	.word	0x2000007c
 80015d0:	20001234 	.word	0x20001234

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20001234 	.word	0x20001234

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	; (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff3e 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff8e 	bl	80016e0 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5d 	bl	800168c <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff31 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa2 	bl	8001748 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e14e      	b.n	8001abe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8140 	beq.w	8001ab8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d00b      	beq.n	8001858 <HAL_GPIO_Init+0x48>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800184c:	2b11      	cmp	r3, #17
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b12      	cmp	r3, #18
 8001856:	d130      	bne.n	80018ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 0201 	and.w	r2, r3, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0xea>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d123      	bne.n	8001942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	6939      	ldr	r1, [r7, #16]
 800193e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0203 	and.w	r2, r3, #3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 809a 	beq.w	8001ab8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001984:	4b55      	ldr	r3, [pc, #340]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	4a54      	ldr	r2, [pc, #336]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6613      	str	r3, [r2, #96]	; 0x60
 8001990:	4b52      	ldr	r3, [pc, #328]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800199c:	4a50      	ldr	r2, [pc, #320]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c6:	d013      	beq.n	80019f0 <HAL_GPIO_Init+0x1e0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_GPIO_Init+0x2d4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1dc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a45      	ldr	r2, [pc, #276]	; (8001ae8 <HAL_GPIO_Init+0x2d8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1d8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a44      	ldr	r2, [pc, #272]	; (8001aec <HAL_GPIO_Init+0x2dc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1d4>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e006      	b.n	80019f2 <HAL_GPIO_Init+0x1e2>
 80019e4:	2307      	movs	r3, #7
 80019e6:	e004      	b.n	80019f2 <HAL_GPIO_Init+0x1e2>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e002      	b.n	80019f2 <HAL_GPIO_Init+0x1e2>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <HAL_GPIO_Init+0x1e2>
 80019f0:	2300      	movs	r3, #0
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	0092      	lsls	r2, r2, #2
 80019fa:	4093      	lsls	r3, r2
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a02:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a10:	4b37      	ldr	r3, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a34:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5e:	4a24      	ldr	r2, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a64:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_GPIO_Init+0x2e0>)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f47f aea9 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001ace:	bf00      	nop
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	48000c00 	.word	0x48000c00
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b08b      	sub	sp, #44	; 0x2c
 8001b28:	af06      	add	r7, sp, #24
 8001b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e104      	b.n	8001d40 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff f90e 	bl	8000d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 ffe9 	bl	8004b34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	687e      	ldr	r6, [r7, #4]
 8001b6a:	466d      	mov	r5, sp
 8001b6c:	f106 0410 	add.w	r4, r6, #16
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	1d33      	adds	r3, r6, #4
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	6838      	ldr	r0, [r7, #0]
 8001b7e:	f002 ffb1 	bl	8004ae4 <USB_CoreInit>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0d5      	b.n	8001d40 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 ffe5 	bl	8004b6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e04c      	b.n	8001c40 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3336      	adds	r3, #54	; 0x36
 8001be4:	4602      	mov	r2, r0
 8001be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3338      	adds	r3, #56	; 0x38
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	333c      	adds	r3, #60	; 0x3c
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3340      	adds	r3, #64	; 0x40
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3ad      	bcc.n	8001ba6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e044      	b.n	8001cda <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c92:	7bfa      	ldrb	r2, [r7, #15]
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d3b5      	bcc.n	8001c50 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	687e      	ldr	r6, [r7, #4]
 8001cec:	466d      	mov	r5, sp
 8001cee:	f106 0410 	add.w	r4, r6, #16
 8001cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	602b      	str	r3, [r5, #0]
 8001cfa:	1d33      	adds	r3, r6, #4
 8001cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfe:	6838      	ldr	r0, [r7, #0]
 8001d00:	f002 ff40 	bl	8004b84 <USB_DevInit>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e014      	b.n	8001d40 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f001 fa63 	bl	80031fa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fef9 	bl	8006b30 <USB_DevDisconnect>

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_PCD_Start+0x16>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e012      	b.n	8001d84 <HAL_PCD_Start+0x3c>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fecb 	bl	8004b06 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fec4 	bl	8006b02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 fede 	bl	8006b5a <USB_ReadInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da8:	d102      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fb5b 	bl	8002466 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 fed0 	bl	8006b5a <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc4:	d112      	bne.n	8001dec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f865 	bl	8000eae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f91e 	bl	8002028 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 feb2 	bl	8006b5a <USB_ReadInterrupts>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e00:	d10b      	bne.n	8001e1a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e14:	b292      	uxth	r2, r2
 8001e16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fe9b 	bl	8006b5a <USB_ReadInterrupts>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2e:	d10b      	bne.n	8001e48 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e42:	b292      	uxth	r2, r2
 8001e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f004 fe84 	bl	8006b5a <USB_ReadInterrupts>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5c:	d133      	bne.n	8001ec6 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	b292      	uxth	r2, r2
 8001e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fab4 	bl	8001410 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff f839 	bl	8000f20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 fe45 	bl	8006b5a <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eda:	d126      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0208 	orr.w	r2, r2, #8
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f06:	b292      	uxth	r2, r2
 8001f08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0204 	orr.w	r2, r2, #4
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7fe ffe1 	bl	8000eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 fe13 	bl	8006b5a <USB_ReadInterrupts>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d13f      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f50:	b292      	uxth	r2, r2
 8001f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d12b      	bne.n	8001fb8 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0204 	orr.w	r2, r2, #4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0208 	orr.w	r2, r2, #8
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001fae:	2101      	movs	r1, #1
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fa2d 	bl	8001410 <HAL_PCDEx_LPM_Callback>
 8001fb6:	e002      	b.n	8001fbe <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe ff97 	bl	8000eec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fdc9 	bl	8006b5a <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7fe ff50 	bl	8000e92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fdaf 	bl	8006b5a <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002006:	d10b      	bne.n	8002020 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800201a:	b292      	uxth	r2, r2
 800201c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_SetAddress+0x1a>
 800203e:	2302      	movs	r3, #2
 8002040:	e013      	b.n	800206a <HAL_PCD_SetAddress+0x42>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	4611      	mov	r1, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fd3d 	bl	8006ada <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4603      	mov	r3, r0
 8002082:	70fb      	strb	r3, [r7, #3]
 8002084:	460b      	mov	r3, r1
 8002086:	803b      	strh	r3, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da0e      	bge.n	80020b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	705a      	strb	r2, [r3, #1]
 80020b4:	e00e      	b.n	80020d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 0207 	and.w	r2, r3, #7
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020e0:	883a      	ldrh	r2, [r7, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	78ba      	ldrb	r2, [r7, #2]
 80020ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	785b      	ldrb	r3, [r3, #1]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020fe:	78bb      	ldrb	r3, [r7, #2]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d102      	bne.n	800210a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_PCD_EP_Open+0xa6>
 8002114:	2302      	movs	r3, #2
 8002116:	e00e      	b.n	8002136 <HAL_PCD_EP_Open+0xc4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68f9      	ldr	r1, [r7, #12]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fd4e 	bl	8004bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002134:	7afb      	ldrb	r3, [r7, #11]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800214a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214e:	2b00      	cmp	r3, #0
 8002150:	da0e      	bge.n	8002170 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	705a      	strb	r2, [r3, #1]
 800216e:	e00e      	b.n	800218e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	f003 0207 	and.w	r2, r3, #7
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b2da      	uxtb	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_PCD_EP_Close+0x6a>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e00e      	b.n	80021c6 <HAL_PCD_EP_Close+0x88>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f874 	bl	80052a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 0207 	and.w	r2, r3, #7
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fa27 	bl	800567e <USB_EPStartXfer>
 8002230:	e005      	b.n	800223e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6979      	ldr	r1, [r7, #20]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 fa20 	bl	800567e <USB_EPStartXfer>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	460b      	mov	r3, r1
 8002286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2201      	movs	r2, #1
 80022c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6979      	ldr	r1, [r7, #20]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 f9cc 	bl	800567e <USB_EPStartXfer>
 80022e6:	e005      	b.n	80022f4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6979      	ldr	r1, [r7, #20]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 f9c5 	bl	800567e <USB_EPStartXfer>
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 0207 	and.w	r2, r3, #7
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d901      	bls.n	800231c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04c      	b.n	80023b6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800231c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002320:	2b00      	cmp	r3, #0
 8002322:	da0e      	bge.n	8002342 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	705a      	strb	r2, [r3, #1]
 8002340:	e00c      	b.n	800235c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_PCD_EP_SetStall+0x7e>
 8002378:	2302      	movs	r3, #2
 800237a:	e01c      	b.n	80023b6 <HAL_PCD_EP_SetStall+0xb8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	4618      	mov	r0, r3
 800238c:	f004 faa6 	bl	80068dc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	2b00      	cmp	r3, #0
 8002398:	d108      	bne.n	80023ac <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f004 fbe7 	bl	8006b7a <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 020f 	and.w	r2, r3, #15
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d901      	bls.n	80023dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e040      	b.n	800245e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da0e      	bge.n	8002402 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
 8002400:	e00e      	b.n	8002420 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	f003 0207 	and.w	r2, r3, #7
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_EP_ClrStall+0x82>
 800243c:	2302      	movs	r3, #2
 800243e:	e00e      	b.n	800245e <HAL_PCD_EP_ClrStall+0xa0>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f004 fa95 	bl	800697e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b08e      	sub	sp, #56	; 0x38
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800246e:	e2d1      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002478:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800247a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002486:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 8152 	bne.w	8002734 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002490:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d150      	bne.n	800253c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024aa:	81fb      	strh	r3, [r7, #14]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	89fb      	ldrh	r3, [r7, #14]
 80024b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3328      	adds	r3, #40	; 0x28
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7fe fcae 	bl	8000e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8282 	beq.w	8002a14 <PCD_EP_ISR_Handler+0x5ae>
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 827d 	bne.w	8002a14 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b292      	uxth	r2, r2
 800252e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253a:	e26b      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	2b00      	cmp	r3, #0
 8002554:	d032      	beq.n	80025bc <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002590:	b29b      	uxth	r3, r3
 8002592:	f004 fb3f 	bl	8006c14 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29a      	uxth	r2, r3
 800259e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a2:	4013      	ands	r3, r2
 80025a4:	823b      	strh	r3, [r7, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	8a3a      	ldrh	r2, [r7, #16]
 80025ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b0:	b292      	uxth	r2, r2
 80025b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe fc25 	bl	8000e04 <HAL_PCD_SetupStageCallback>
 80025ba:	e22b      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025bc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f280 8227 	bge.w	8002a14 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d2:	4013      	ands	r3, r2
 80025d4:	83bb      	strh	r3, [r7, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	8bba      	ldrh	r2, [r7, #28]
 80025dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	4413      	add	r3, r2
 80025fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d019      	beq.n	8002648 <PCD_EP_ISR_Handler+0x1e2>
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d015      	beq.n	8002648 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	6959      	ldr	r1, [r3, #20]
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800262c:	b29b      	uxth	r3, r3
 800262e:	f004 faf1 	bl	8006c14 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	441a      	add	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002640:	2100      	movs	r1, #0
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fbf0 	bl	8000e28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002656:	b29b      	uxth	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4413      	add	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <PCD_EP_ISR_Handler+0x230>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800267a:	b29a      	uxth	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	801a      	strh	r2, [r3, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800268a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268e:	b29a      	uxth	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	801a      	strh	r2, [r3, #0]
 8002694:	e02f      	b.n	80026f6 <PCD_EP_ISR_Handler+0x290>
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b3e      	cmp	r3, #62	; 0x3e
 800269c:	d813      	bhi.n	80026c6 <PCD_EP_ISR_Handler+0x260>
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <PCD_EP_ISR_Handler+0x252>
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	3301      	adds	r3, #1
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	029b      	lsls	r3, r3, #10
 80026be:	b29a      	uxth	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	801a      	strh	r2, [r3, #0]
 80026c4:	e017      	b.n	80026f6 <PCD_EP_ISR_Handler+0x290>
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <PCD_EP_ISR_Handler+0x27a>
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	3b01      	subs	r3, #1
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002706:	827b      	strh	r3, [r7, #18]
 8002708:	8a7b      	ldrh	r3, [r7, #18]
 800270a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800270e:	827b      	strh	r3, [r7, #18]
 8002710:	8a7b      	ldrh	r3, [r7, #18]
 8002712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002716:	827b      	strh	r3, [r7, #18]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	8a7b      	ldrh	r3, [r7, #18]
 800271e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	b29b      	uxth	r3, r3
 8002730:	8013      	strh	r3, [r2, #0]
 8002732:	e16f      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002746:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800274a:	2b00      	cmp	r3, #0
 800274c:	f280 80e4 	bge.w	8002918 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29a      	uxth	r2, r3
 8002762:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002766:	4013      	ands	r3, r2
 8002768:	853b      	strh	r3, [r7, #40]	; 0x28
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800277a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277e:	b292      	uxth	r2, r2
 8002780:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002782:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	7b1b      	ldrb	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d120      	bne.n	80027e2 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8083 	beq.w	80028d4 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	6959      	ldr	r1, [r3, #20]
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	88da      	ldrh	r2, [r3, #6]
 80027da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027dc:	f004 fa1a 	bl	8006c14 <USB_ReadPMA>
 80027e0:	e078      	b.n	80028d4 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d108      	bne.n	80027fc <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027ec:	461a      	mov	r2, r3
 80027ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f91d 	bl	8002a30 <HAL_PCD_EP_DB_Receive>
 80027f6:	4603      	mov	r3, r0
 80027f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027fa:	e06b      	b.n	80028d4 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	847b      	strh	r3, [r7, #34]	; 0x22
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	441a      	add	r2, r3
 8002826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800282c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002834:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01f      	beq.n	8002896 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	2b00      	cmp	r3, #0
 8002880:	d028      	beq.n	80028d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	6959      	ldr	r1, [r3, #20]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	891a      	ldrh	r2, [r3, #8]
 800288e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002890:	f004 f9c0 	bl	8006c14 <USB_ReadPMA>
 8002894:	e01e      	b.n	80028d4 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ba:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	6959      	ldr	r1, [r3, #20]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	895a      	ldrh	r2, [r3, #10]
 80028ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028d0:	f004 f9a0 	bl	8006c14 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028da:	441a      	add	r2, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e6:	441a      	add	r2, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <PCD_EP_ISR_Handler+0x498>
 80028f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d206      	bcs.n	800290c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7fe fa8f 	bl	8000e28 <HAL_PCD_DataOutStageCallback>
 800290a:	e005      	b.n	8002918 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002912:	4618      	mov	r0, r3
 8002914:	f002 feb3 	bl	800567e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002918:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d078      	beq.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002922:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	843b      	strh	r3, [r7, #32]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	441a      	add	r2, r3
 8002960:	8c3b      	ldrh	r3, [r7, #32]
 8002962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800296a:	b29b      	uxth	r3, r3
 800296c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d108      	bne.n	8002988 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800297a:	2b02      	cmp	r3, #2
 800297c:	d144      	bne.n	8002a08 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800297e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d13f      	bne.n	8002a08 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ac:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	8bfb      	ldrh	r3, [r7, #30]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d906      	bls.n	80029c6 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	8bfb      	ldrh	r3, [r7, #30]
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	e002      	b.n	80029cc <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fa3f 	bl	8000e5e <HAL_PCD_DataInStageCallback>
 80029e0:	e018      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	441a      	add	r2, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	8bfb      	ldrh	r3, [r7, #30]
 80029f4:	441a      	add	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fe3c 	bl	800567e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a06:	e005      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f917 	bl	8002c42 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f6ff ad25 	blt.w	8002470 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07c      	beq.n	8002b42 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	8b7b      	ldrh	r3, [r7, #26]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d306      	bcc.n	8002a86 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	8b7b      	ldrh	r3, [r7, #26]
 8002a7e:	1ad2      	subs	r2, r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	619a      	str	r2, [r3, #24]
 8002a84:	e002      	b.n	8002a8c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d123      	bne.n	8002adc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	833b      	strh	r3, [r7, #24]
 8002ab0:	8b3b      	ldrh	r3, [r7, #24]
 8002ab2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ab6:	833b      	strh	r3, [r7, #24]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	8b3b      	ldrh	r3, [r7, #24]
 8002ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01f      	beq.n	8002b26 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b00:	82fb      	strh	r3, [r7, #22]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	8afb      	ldrh	r3, [r7, #22]
 8002b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b26:	8b7b      	ldrh	r3, [r7, #26]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8085 	beq.w	8002c38 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6959      	ldr	r1, [r3, #20]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	891a      	ldrh	r2, [r3, #8]
 8002b3a:	8b7b      	ldrh	r3, [r7, #26]
 8002b3c:	f004 f86a 	bl	8006c14 <USB_ReadPMA>
 8002b40:	e07a      	b.n	8002c38 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b66:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	8b7b      	ldrh	r3, [r7, #26]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d306      	bcc.n	8002b80 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	8b7b      	ldrh	r3, [r7, #26]
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	619a      	str	r2, [r3, #24]
 8002b7e:	e002      	b.n	8002b86 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d123      	bne.n	8002bd6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba8:	83fb      	strh	r3, [r7, #30]
 8002baa:	8bfb      	ldrh	r3, [r7, #30]
 8002bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb0:	83fb      	strh	r3, [r7, #30]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	441a      	add	r2, r3
 8002bc0:	8bfb      	ldrh	r3, [r7, #30]
 8002bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11f      	bne.n	8002c20 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	83bb      	strh	r3, [r7, #28]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	8bbb      	ldrh	r3, [r7, #28]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c20:	8b7b      	ldrh	r3, [r7, #26]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6959      	ldr	r1, [r3, #20]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	895a      	ldrh	r2, [r3, #10]
 8002c32:	8b7b      	ldrh	r3, [r7, #26]
 8002c34:	f003 ffee 	bl	8006c14 <USB_ReadPMA>
    }
  }

  return count;
 8002c38:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b092      	sub	sp, #72	; 0x48
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	60f8      	str	r0, [r7, #12]
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8130 	beq.w	8002ebc <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d906      	bls.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	619a      	str	r2, [r3, #24]
 8002c98:	e002      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12c      	bne.n	8002d02 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7fe f8d5 	bl	8000e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 822d 	beq.w	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	827b      	strh	r3, [r7, #18]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	8a7b      	ldrh	r3, [r7, #18]
 8002cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	8013      	strh	r3, [r2, #0]
 8002d00:	e20b      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01f      	beq.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	f040 81e1 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d5e:	441a      	add	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6a:	441a      	add	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	6a1a      	ldr	r2, [r3, #32]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d309      	bcc.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	1ad2      	subs	r2, r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	621a      	str	r2, [r3, #32]
 8002d8e:	e014      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d9a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da4:	e009      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d155      	bne.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x22c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00da      	lsls	r2, r3, #3
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d112      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e047      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	2b3e      	cmp	r3, #62	; 0x3e
 8002e1a:	d811      	bhi.n	8002e40 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	3301      	adds	r3, #1
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	029b      	lsls	r3, r3, #10
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	e032      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x214>
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	3b01      	subs	r3, #1
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	801a      	strh	r2, [r3, #0]
 8002e6c:	e01b      	b.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d117      	bne.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x264>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	00da      	lsls	r2, r3, #3
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	4413      	add	r3, r2
 8002e98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	6959      	ldr	r1, [r3, #20]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	891a      	ldrh	r2, [r3, #8]
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f003 fe6c 	bl	8006b92 <USB_WritePMA>
 8002eba:	e12e      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d306      	bcc.n	8002efa <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	619a      	str	r2, [r3, #24]
 8002ef8:	e002      	b.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12c      	bne.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7fd ffa5 	bl	8000e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 80fd 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8013      	strh	r3, [r2, #0]
 8002f60:	e0db      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11f      	bne.n	8002fac <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	f040 80b1 	bne.w	800311a <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fca:	441a      	add	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6a1a      	ldr	r2, [r3, #32]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d309      	bcc.n	8002ff0 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6a1a      	ldr	r2, [r3, #32]
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	1ad2      	subs	r2, r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	621a      	str	r2, [r3, #32]
 8002fee:	e014      	b.n	800301a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002ff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003004:	e009      	b.n	800301a <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2200      	movs	r2, #0
 8003010:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d155      	bne.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x492>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	647b      	str	r3, [r7, #68]	; 0x44
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303c:	4413      	add	r3, r2
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	00da      	lsls	r2, r3, #3
 8003046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003048:	4413      	add	r3, r2
 800304a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	2b00      	cmp	r3, #0
 8003054:	d112      	bne.n	800307c <HAL_PCD_EP_DB_Transmit+0x43a>
 8003056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003060:	b29a      	uxth	r2, r3
 8003062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003064:	801a      	strh	r2, [r3, #0]
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003074:	b29a      	uxth	r2, r3
 8003076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003078:	801a      	strh	r2, [r3, #0]
 800307a:	e044      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307e:	2b3e      	cmp	r3, #62	; 0x3e
 8003080:	d811      	bhi.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x464>
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	085b      	lsrs	r3, r3, #1
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_PCD_EP_DB_Transmit+0x456>
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	3301      	adds	r3, #1
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	b29b      	uxth	r3, r3
 800309c:	029b      	lsls	r3, r3, #10
 800309e:	b29a      	uxth	r2, r3
 80030a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	e02f      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <HAL_PCD_EP_DB_Transmit+0x47a>
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	3b01      	subs	r3, #1
 80030ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030be:	b29b      	uxth	r3, r3
 80030c0:	029b      	lsls	r3, r3, #10
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	e018      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d114      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x4c4>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ea:	4413      	add	r3, r2
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	b29a      	uxth	r2, r3
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6959      	ldr	r1, [r3, #20]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	895a      	ldrh	r2, [r3, #10]
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	b29b      	uxth	r3, r3
 8003116:	f003 fd3c 	bl	8006b92 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003134:	823b      	strh	r3, [r7, #16]
 8003136:	8a3b      	ldrh	r3, [r7, #16]
 8003138:	f083 0310 	eor.w	r3, r3, #16
 800313c:	823b      	strh	r3, [r7, #16]
 800313e:	8a3b      	ldrh	r3, [r7, #16]
 8003140:	f083 0320 	eor.w	r3, r3, #32
 8003144:	823b      	strh	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	8a3b      	ldrh	r3, [r7, #16]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3748      	adds	r7, #72	; 0x48
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	4613      	mov	r3, r2
 8003184:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e009      	b.n	80031be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031aa:	897a      	ldrh	r2, [r7, #10]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	80da      	strh	r2, [r3, #6]
 80031d2:	e00b      	b.n	80031ec <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2201      	movs	r2, #1
 80031d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	371c      	adds	r7, #28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800321e:	b29b      	uxth	r3, r3
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003232:	b29b      	uxth	r3, r3
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_PWREx_GetVoltageRange+0x18>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d130      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d038      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003292:	4a1e      	ldr	r2, [pc, #120]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2232      	movs	r2, #50	; 0x32
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0c9b      	lsrs	r3, r3, #18
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b0:	e002      	b.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c4:	d102      	bne.n	80032cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f2      	bne.n	80032b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d8:	d110      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d007      	beq.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f4:	4a05      	ldr	r2, [pc, #20]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000
 8003310:	20000074 	.word	0x20000074
 8003314:	431bde83 	.word	0x431bde83

08003318 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003326:	6053      	str	r3, [r2, #4]
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40007000 	.word	0x40007000

08003338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f000 bc56 	b.w	8003bf8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800334c:	4ba1      	ldr	r3, [pc, #644]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003356:	4b9f      	ldr	r3, [pc, #636]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80e6 	beq.w	800353a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_RCC_OscConfig+0x4c>
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	f040 808d 	bne.w	8003496 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	f040 8089 	bne.w	8003496 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003384:	4b93      	ldr	r3, [pc, #588]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d006      	beq.n	800339e <HAL_RCC_OscConfig+0x66>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f000 bc2d 	b.w	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a2:	4b8c      	ldr	r3, [pc, #560]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_RCC_OscConfig+0x80>
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_OscConfig+0x8c>
 80033b8:	4b86      	ldr	r3, [pc, #536]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d224      	bcs.n	8003412 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fdbd 	bl	8003f4c <RCC_SetFlashLatencyFromMSIRange>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f000 bc0d 	b.w	8003bf8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033de:	4b7d      	ldr	r3, [pc, #500]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7c      	ldr	r2, [pc, #496]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b7a      	ldr	r3, [pc, #488]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	4977      	ldr	r1, [pc, #476]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fc:	4b75      	ldr	r3, [pc, #468]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	4972      	ldr	r1, [pc, #456]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
 8003410:	e025      	b.n	800345e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003412:	4b70      	ldr	r3, [pc, #448]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6f      	ldr	r2, [pc, #444]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b6d      	ldr	r3, [pc, #436]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	496a      	ldr	r1, [pc, #424]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fd7c 	bl	8003f4c <RCC_SetFlashLatencyFromMSIRange>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e3cc      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800345e:	f000 fcb3 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003462:	4601      	mov	r1, r0
 8003464:	4b5b      	ldr	r3, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	4a5a      	ldr	r2, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x2a0>)
 8003470:	5cd3      	ldrb	r3, [r2, r3]
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	fa21 f303 	lsr.w	r3, r1, r3
 800347a:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCC_OscConfig+0x2a4>)
 800347c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800347e:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCC_OscConfig+0x2a8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f856 	bl	8001534 <HAL_InitTick>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d052      	beq.n	8003538 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	e3b0      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d032      	beq.n	8003504 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800349e:	4b4d      	ldr	r3, [pc, #308]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034aa:	f7fe f893 	bl	80015d4 <HAL_GetTick>
 80034ae:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b2:	f7fe f88f 	bl	80015d4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e399      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3f      	ldr	r2, [pc, #252]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034d6:	f043 0308 	orr.w	r3, r3, #8
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b3d      	ldr	r3, [pc, #244]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	493a      	ldr	r1, [pc, #232]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ee:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	4935      	ldr	r1, [pc, #212]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
 8003502:	e01a      	b.n	800353a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003504:	4b33      	ldr	r3, [pc, #204]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003510:	f7fe f860 	bl	80015d4 <HAL_GetTick>
 8003514:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003518:	f7fe f85c 	bl	80015d4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e366      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800352a:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1e0>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d073      	beq.n	800362e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d005      	beq.n	8003558 <HAL_RCC_OscConfig+0x220>
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d10e      	bne.n	8003570 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d063      	beq.n	800362c <HAL_RCC_OscConfig+0x2f4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d15f      	bne.n	800362c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e343      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d106      	bne.n	8003588 <HAL_RCC_OscConfig+0x250>
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e01d      	b.n	80035c4 <HAL_RCC_OscConfig+0x28c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x274>
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 8003598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x28c>
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a08      	ldr	r2, [pc, #32]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <HAL_RCC_OscConfig+0x29c>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01b      	beq.n	8003604 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe f802 	bl	80015d4 <HAL_GetTick>
 80035d0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	e010      	b.n	80035f6 <HAL_RCC_OscConfig+0x2be>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	080086f8 	.word	0x080086f8
 80035dc:	20000074 	.word	0x20000074
 80035e0:	20000078 	.word	0x20000078
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fff6 	bl	80015d4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e300      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	4ba0      	ldr	r3, [pc, #640]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x2ac>
 8003602:	e014      	b.n	800362e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd ffe6 	bl	80015d4 <HAL_GetTick>
 8003608:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fd ffe2 	bl	80015d4 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e2ec      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800361e:	4b96      	ldr	r3, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x2d4>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d060      	beq.n	80036fc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d005      	beq.n	800364c <HAL_RCC_OscConfig+0x314>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d119      	bne.n	800367a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d116      	bne.n	800367a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364c:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_OscConfig+0x32c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e2c9      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	4981      	ldr	r1, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	e040      	b.n	80036fc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d023      	beq.n	80036ca <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fd ffa1 	bl	80015d4 <HAL_GetTick>
 8003692:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7fd ff9d 	bl	80015d4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e2a7      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b70      	ldr	r3, [pc, #448]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	496d      	ldr	r1, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	e018      	b.n	80036fc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ca:	4b6b      	ldr	r3, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6a      	ldr	r2, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd ff7d 	bl	80015d4 <HAL_GetTick>
 80036da:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7fd ff79 	bl	80015d4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e283      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d07f      	beq.n	8003808 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d05f      	beq.n	80037d0 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0310 	and.w	r3, r3, #16
 8003722:	429a      	cmp	r2, r3
 8003724:	d037      	beq.n	8003796 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d006      	beq.n	800373e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e25c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8003748:	4b4b      	ldr	r3, [pc, #300]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003758:	f7fd ff3c 	bl	80015d4 <HAL_GetTick>
 800375c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003760:	f7fd ff38 	bl	80015d4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b11      	cmp	r3, #17
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e242      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003772:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003786:	f023 0210 	bic.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	493a      	ldr	r1, [pc, #232]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd ff15 	bl	80015d4 <HAL_GetTick>
 80037aa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd ff11 	bl	80015d4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b11      	cmp	r3, #17
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e21b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c0:	4b2d      	ldr	r3, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <HAL_RCC_OscConfig+0x476>
 80037ce:	e01b      	b.n	8003808 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fd fef8 	bl	80015d4 <HAL_GetTick>
 80037e4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fd fef4 	bl	80015d4 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b11      	cmp	r3, #17
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1fe      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1ef      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80c1 	beq.w	8003998 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10e      	bne.n	8003846 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003828:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003832:	6593      	str	r3, [r2, #88]	; 0x58
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCC_OscConfig+0x540>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <HAL_RCC_OscConfig+0x544>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_RCC_OscConfig+0x544>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_OscConfig+0x544>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385e:	f7fd feb9 	bl	80015d4 <HAL_GetTick>
 8003862:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003864:	e00c      	b.n	8003880 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003866:	f7fd feb5 	bl	80015d4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d905      	bls.n	8003880 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1bf      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	4bb1      	ldr	r3, [pc, #708]	; (8003b48 <HAL_RCC_OscConfig+0x810>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ec      	beq.n	8003866 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02c      	beq.n	80038f2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003898:	4bac      	ldr	r3, [pc, #688]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	49a8      	ldr	r1, [pc, #672]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80038be:	4ba3      	ldr	r3, [pc, #652]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c4:	4aa1      	ldr	r2, [pc, #644]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038ce:	4b9f      	ldr	r3, [pc, #636]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	4a9d      	ldr	r2, [pc, #628]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038de:	e018      	b.n	8003912 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038e0:	4b9a      	ldr	r3, [pc, #616]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	4a99      	ldr	r2, [pc, #612]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f0:	e00f      	b.n	8003912 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80038f2:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	4a94      	ldr	r2, [pc, #592]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003902:	4b92      	ldr	r3, [pc, #584]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	4a90      	ldr	r2, [pc, #576]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fd fe5b 	bl	80015d4 <HAL_GetTick>
 800391e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fd fe57 	bl	80015d4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e15f      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003938:	4b84      	ldr	r3, [pc, #528]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0ed      	beq.n	8003922 <HAL_RCC_OscConfig+0x5ea>
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fd fe44 	bl	80015d4 <HAL_GetTick>
 800394c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800394e:	e00a      	b.n	8003966 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003950:	f7fd fe40 	bl	80015d4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e148      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ed      	bne.n	8003950 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003974:	4b75      	ldr	r3, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a74      	ldr	r2, [pc, #464]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 800397c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003990:	4a6e      	ldr	r2, [pc, #440]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d03c      	beq.n	8003a1e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01c      	beq.n	80039e6 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ac:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80039ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039b2:	4a66      	ldr	r2, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fd fe0a 	bl	80015d4 <HAL_GetTick>
 80039c0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039c4:	f7fd fe06 	bl	80015d4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e110      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80039d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ef      	beq.n	80039c4 <HAL_RCC_OscConfig+0x68c>
 80039e4:	e01b      	b.n	8003a1e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039e6:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80039e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f6:	f7fd fded 	bl	80015d4 <HAL_GetTick>
 80039fa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039fe:	f7fd fde9 	bl	80015d4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e0f3      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a10:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1ef      	bne.n	80039fe <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80e7 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f040 80b7 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a32:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0203 	and.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d124      	bne.n	8003a90 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	3b01      	subs	r3, #1
 8003a52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d11b      	bne.n	8003a90 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d113      	bne.n	8003a90 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d109      	bne.n	8003a90 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d061      	beq.n	8003b54 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d056      	beq.n	8003b44 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a96:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa2:	f7fd fd97 	bl	80015d4 <HAL_GetTick>
 8003aa6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd fd93 	bl	80015d4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e09d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_OscConfig+0x818>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae2:	0212      	lsls	r2, r2, #8
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aea:	0852      	lsrs	r2, r2, #1
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0552      	lsls	r2, r2, #21
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0652      	lsls	r2, r2, #25
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4913      	ldr	r1, [pc, #76]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a0d      	ldr	r2, [pc, #52]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b1c:	f7fd fd5a 	bl	80015d4 <HAL_GetTick>
 8003b20:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd fd56 	bl	80015d4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e060      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_OscConfig+0x814>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b42:	e058      	b.n	8003bf6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e057      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d14a      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7fd fd2c 	bl	80015d4 <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd fd28 	bl	80015d4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e032      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x848>
 8003b9e:	e02a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d025      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003bb8:	f023 0303 	bic.w	r3, r3, #3
 8003bbc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003bc4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd fd03 	bl	80015d4 <HAL_GetTick>
 8003bce:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd fcff 	bl	80015d4 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e009      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x8c8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x89a>
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3728      	adds	r7, #40	; 0x28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0c8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4961      	ldr	r1, [pc, #388]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b5f      	ldr	r3, [pc, #380]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0b0      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d04c      	beq.n	8003cee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5c:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d121      	bne.n	8003cac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e09e      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d115      	bne.n	8003cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e092      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8c:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e086      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e07e      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f023 0203 	bic.w	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	493f      	ldr	r1, [pc, #252]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fc89 	bl	80015d4 <HAL_GetTick>
 8003cc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc6:	f7fd fc85 	bl	80015d4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e066      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cdc:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 020c 	and.w	r2, r3, #12
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d1eb      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	492c      	ldr	r1, [pc, #176]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d210      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4924      	ldr	r1, [pc, #144]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e036      	b.n	8003daa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4918      	ldr	r1, [pc, #96]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4910      	ldr	r1, [pc, #64]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d7a:	f000 f825 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d8c:	5cd3      	ldrb	r3, [r2, r3]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	fa21 f303 	lsr.w	r3, r1, r3
 8003d96:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd fbc8 	bl	8001534 <HAL_InitTick>
 8003da4:	4603      	mov	r3, r0
 8003da6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003da8:	7afb      	ldrb	r3, [r7, #11]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40022000 	.word	0x40022000
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	080086f8 	.word	0x080086f8
 8003dc0:	20000074 	.word	0x20000074
 8003dc4:	20000078 	.word	0x20000078

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de0:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d121      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d11e      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e24:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e40:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e004      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d133      	bne.n	8003ebe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0xa4>
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0xaa>
 8003e6a:	e005      	b.n	8003e78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e6e:	617b      	str	r3, [r7, #20]
      break;
 8003e70:	e005      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e74:	617b      	str	r3, [r7, #20]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	617b      	str	r3, [r7, #20]
      break;
 8003e7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	3301      	adds	r3, #1
 8003e8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	fb02 f203 	mul.w	r2, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_GetSysClockFreq+0x104>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0e5b      	lsrs	r3, r3, #25
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3724      	adds	r7, #36	; 0x24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08008710 	.word	0x08008710
 8003ed4:	00f42400 	.word	0x00f42400
 8003ed8:	007a1200 	.word	0x007a1200

08003edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000074 	.word	0x20000074

08003ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ef8:	f7ff fff0 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003efc:	4601      	mov	r1, r0
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	08008708 	.word	0x08008708

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f24:	f7ff ffda 	bl	8003edc <HAL_RCC_GetHCLKFreq>
 8003f28:	4601      	mov	r1, r0
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0adb      	lsrs	r3, r3, #11
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	f003 031f 	and.w	r3, r3, #31
 8003f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40021000 	.word	0x40021000
 8003f48:	08008708 	.word	0x08008708

08003f4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f58:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f64:	f7ff f974 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003f68:	6178      	str	r0, [r7, #20]
 8003f6a:	e014      	b.n	8003f96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	4a24      	ldr	r2, [pc, #144]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f76:	6593      	str	r3, [r2, #88]	; 0x58
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f964 	bl	8003250 <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d10b      	bne.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b80      	cmp	r3, #128	; 0x80
 8003fa2:	d919      	bls.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fa8:	d902      	bls.n	8003fb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003faa:	2302      	movs	r3, #2
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	e013      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	e010      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d902      	bls.n	8003fc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	e00a      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b80      	cmp	r3, #128	; 0x80
 8003fc6:	d102      	bne.n	8003fce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fc8:	2302      	movs	r3, #2
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	e004      	b.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d101      	bne.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 0207 	bic.w	r2, r3, #7
 8003fe0:	4909      	ldr	r1, [pc, #36]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d001      	beq.n	8003ffa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	40022000 	.word	0x40022000

0800400c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004014:	2300      	movs	r3, #0
 8004016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004018:	2300      	movs	r3, #0
 800401a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 809e 	beq.w	8004166 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800402e:	4b46      	ldr	r3, [pc, #280]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b40      	ldr	r3, [pc, #256]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	6593      	str	r3, [r2, #88]	; 0x58
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405c:	2301      	movs	r3, #1
 800405e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004060:	4b3a      	ldr	r3, [pc, #232]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a39      	ldr	r2, [pc, #228]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800406c:	f7fd fab2 	bl	80015d4 <HAL_GetTick>
 8004070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004072:	e009      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7fd faae 	bl	80015d4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	74fb      	strb	r3, [r7, #19]
        break;
 8004086:	e005      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ef      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d15a      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01e      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d019      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040e2:	4a19      	ldr	r2, [pc, #100]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd fa6e 	bl	80015d4 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	e00b      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f7fd fa6a 	bl	80015d4 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d902      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	74fb      	strb	r3, [r7, #19]
            break;
 8004112:	e006      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0ec      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4904      	ldr	r1, [pc, #16]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800413e:	e009      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
 8004144:	e006      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000
 800414c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7cfb      	ldrb	r3, [r7, #19]
 8004152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004154:	7c7b      	ldrb	r3, [r7, #17]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b6e      	ldr	r3, [pc, #440]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415e:	4a6d      	ldr	r2, [pc, #436]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004172:	4b68      	ldr	r3, [pc, #416]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	f023 0203 	bic.w	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4964      	ldr	r1, [pc, #400]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004194:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 020c 	bic.w	r2, r3, #12
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	495c      	ldr	r1, [pc, #368]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041b6:	4b57      	ldr	r3, [pc, #348]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4953      	ldr	r1, [pc, #332]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d8:	4b4e      	ldr	r3, [pc, #312]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	494b      	ldr	r1, [pc, #300]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b46      	ldr	r3, [pc, #280]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4942      	ldr	r1, [pc, #264]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421c:	4b3d      	ldr	r3, [pc, #244]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	493a      	ldr	r1, [pc, #232]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800423e:	4b35      	ldr	r3, [pc, #212]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4931      	ldr	r1, [pc, #196]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	4929      	ldr	r1, [pc, #164]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4920      	ldr	r1, [pc, #128]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	4918      	ldr	r1, [pc, #96]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	490a      	ldr	r1, [pc, #40]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004306:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004308:	7cbb      	ldrb	r3, [r7, #18]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3718      	adds	r7, #24
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e040      	b.n	80043ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fc fa8e 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f82c 	bl	80043b4 <UART_SetConfig>
 800435c:	4603      	mov	r3, r0
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e022      	b.n	80043ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa56 	bl	8004820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fadd 	bl	8004964 <UART_CheckIdleState>
 80043aa:	4603      	mov	r3, r0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	4baa      	ldr	r3, [pc, #680]	; (800468c <UART_SetConfig+0x2d8>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	69f9      	ldr	r1, [r7, #28]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4aa0      	ldr	r2, [pc, #640]	; (8004690 <UART_SetConfig+0x2dc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	69fa      	ldr	r2, [r7, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a97      	ldr	r2, [pc, #604]	; (8004694 <UART_SetConfig+0x2e0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d121      	bne.n	8004480 <UART_SetConfig+0xcc>
 800443c:	4b96      	ldr	r3, [pc, #600]	; (8004698 <UART_SetConfig+0x2e4>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b03      	cmp	r3, #3
 8004448:	d816      	bhi.n	8004478 <UART_SetConfig+0xc4>
 800444a:	a201      	add	r2, pc, #4	; (adr r2, 8004450 <UART_SetConfig+0x9c>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004461 	.word	0x08004461
 8004454:	0800446d 	.word	0x0800446d
 8004458:	08004467 	.word	0x08004467
 800445c:	08004473 	.word	0x08004473
 8004460:	2301      	movs	r3, #1
 8004462:	76fb      	strb	r3, [r7, #27]
 8004464:	e098      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004466:	2302      	movs	r3, #2
 8004468:	76fb      	strb	r3, [r7, #27]
 800446a:	e095      	b.n	8004598 <UART_SetConfig+0x1e4>
 800446c:	2304      	movs	r3, #4
 800446e:	76fb      	strb	r3, [r7, #27]
 8004470:	e092      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004472:	2308      	movs	r3, #8
 8004474:	76fb      	strb	r3, [r7, #27]
 8004476:	e08f      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004478:	2310      	movs	r3, #16
 800447a:	76fb      	strb	r3, [r7, #27]
 800447c:	bf00      	nop
 800447e:	e08b      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a85      	ldr	r2, [pc, #532]	; (800469c <UART_SetConfig+0x2e8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d134      	bne.n	80044f4 <UART_SetConfig+0x140>
 800448a:	4b83      	ldr	r3, [pc, #524]	; (8004698 <UART_SetConfig+0x2e4>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d829      	bhi.n	80044ec <UART_SetConfig+0x138>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0xec>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044ed 	.word	0x080044ed
 80044a8:	080044ed 	.word	0x080044ed
 80044ac:	080044ed 	.word	0x080044ed
 80044b0:	080044e1 	.word	0x080044e1
 80044b4:	080044ed 	.word	0x080044ed
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	080044ed 	.word	0x080044ed
 80044c0:	080044db 	.word	0x080044db
 80044c4:	080044ed 	.word	0x080044ed
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	080044ed 	.word	0x080044ed
 80044d0:	080044e7 	.word	0x080044e7
 80044d4:	2300      	movs	r3, #0
 80044d6:	76fb      	strb	r3, [r7, #27]
 80044d8:	e05e      	b.n	8004598 <UART_SetConfig+0x1e4>
 80044da:	2302      	movs	r3, #2
 80044dc:	76fb      	strb	r3, [r7, #27]
 80044de:	e05b      	b.n	8004598 <UART_SetConfig+0x1e4>
 80044e0:	2304      	movs	r3, #4
 80044e2:	76fb      	strb	r3, [r7, #27]
 80044e4:	e058      	b.n	8004598 <UART_SetConfig+0x1e4>
 80044e6:	2308      	movs	r3, #8
 80044e8:	76fb      	strb	r3, [r7, #27]
 80044ea:	e055      	b.n	8004598 <UART_SetConfig+0x1e4>
 80044ec:	2310      	movs	r3, #16
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	bf00      	nop
 80044f2:	e051      	b.n	8004598 <UART_SetConfig+0x1e4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a69      	ldr	r2, [pc, #420]	; (80046a0 <UART_SetConfig+0x2ec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d120      	bne.n	8004540 <UART_SetConfig+0x18c>
 80044fe:	4b66      	ldr	r3, [pc, #408]	; (8004698 <UART_SetConfig+0x2e4>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004508:	2b10      	cmp	r3, #16
 800450a:	d00f      	beq.n	800452c <UART_SetConfig+0x178>
 800450c:	2b10      	cmp	r3, #16
 800450e:	d802      	bhi.n	8004516 <UART_SetConfig+0x162>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <UART_SetConfig+0x16c>
 8004514:	e010      	b.n	8004538 <UART_SetConfig+0x184>
 8004516:	2b20      	cmp	r3, #32
 8004518:	d005      	beq.n	8004526 <UART_SetConfig+0x172>
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d009      	beq.n	8004532 <UART_SetConfig+0x17e>
 800451e:	e00b      	b.n	8004538 <UART_SetConfig+0x184>
 8004520:	2300      	movs	r3, #0
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e038      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004526:	2302      	movs	r3, #2
 8004528:	76fb      	strb	r3, [r7, #27]
 800452a:	e035      	b.n	8004598 <UART_SetConfig+0x1e4>
 800452c:	2304      	movs	r3, #4
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	e032      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004532:	2308      	movs	r3, #8
 8004534:	76fb      	strb	r3, [r7, #27]
 8004536:	e02f      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004538:	2310      	movs	r3, #16
 800453a:	76fb      	strb	r3, [r7, #27]
 800453c:	bf00      	nop
 800453e:	e02b      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <UART_SetConfig+0x2dc>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d124      	bne.n	8004594 <UART_SetConfig+0x1e0>
 800454a:	4b53      	ldr	r3, [pc, #332]	; (8004698 <UART_SetConfig+0x2e4>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004558:	d012      	beq.n	8004580 <UART_SetConfig+0x1cc>
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455e:	d802      	bhi.n	8004566 <UART_SetConfig+0x1b2>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <UART_SetConfig+0x1c0>
 8004564:	e012      	b.n	800458c <UART_SetConfig+0x1d8>
 8004566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456a:	d006      	beq.n	800457a <UART_SetConfig+0x1c6>
 800456c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004570:	d009      	beq.n	8004586 <UART_SetConfig+0x1d2>
 8004572:	e00b      	b.n	800458c <UART_SetConfig+0x1d8>
 8004574:	2300      	movs	r3, #0
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e00e      	b.n	8004598 <UART_SetConfig+0x1e4>
 800457a:	2302      	movs	r3, #2
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e00b      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004580:	2304      	movs	r3, #4
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	e008      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004586:	2308      	movs	r3, #8
 8004588:	76fb      	strb	r3, [r7, #27]
 800458a:	e005      	b.n	8004598 <UART_SetConfig+0x1e4>
 800458c:	2310      	movs	r3, #16
 800458e:	76fb      	strb	r3, [r7, #27]
 8004590:	bf00      	nop
 8004592:	e001      	b.n	8004598 <UART_SetConfig+0x1e4>
 8004594:	2310      	movs	r3, #16
 8004596:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <UART_SetConfig+0x2dc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	f040 8082 	bne.w	80046a8 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045a4:	7efb      	ldrb	r3, [r7, #27]
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d823      	bhi.n	80045f2 <UART_SetConfig+0x23e>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x1fc>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045f3 	.word	0x080045f3
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	080045f3 	.word	0x080045f3
 80045c0:	080045e3 	.word	0x080045e3
 80045c4:	080045f3 	.word	0x080045f3
 80045c8:	080045f3 	.word	0x080045f3
 80045cc:	080045f3 	.word	0x080045f3
 80045d0:	080045eb 	.word	0x080045eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7ff fc8e 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80045d8:	6178      	str	r0, [r7, #20]
        break;
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045dc:	4b31      	ldr	r3, [pc, #196]	; (80046a4 <UART_SetConfig+0x2f0>)
 80045de:	617b      	str	r3, [r7, #20]
        break;
 80045e0:	e00c      	b.n	80045fc <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e2:	f7ff fbf1 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 80045e6:	6178      	str	r0, [r7, #20]
        break;
 80045e8:	e008      	b.n	80045fc <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ee:	617b      	str	r3, [r7, #20]
        break;
 80045f0:	e004      	b.n	80045fc <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	76bb      	strb	r3, [r7, #26]
        break;
 80045fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8100 	beq.w	8004804 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d305      	bcc.n	8004620 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	76bb      	strb	r3, [r7, #26]
 8004624:	e0ee      	b.n	8004804 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	f04f 0400 	mov.w	r4, #0
 8004636:	0214      	lsls	r4, r2, #8
 8004638:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800463c:	020b      	lsls	r3, r1, #8
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6852      	ldr	r2, [r2, #4]
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	4611      	mov	r1, r2
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	eb13 0b01 	adds.w	fp, r3, r1
 800464e:	eb44 0c02 	adc.w	ip, r4, r2
 8004652:	4658      	mov	r0, fp
 8004654:	4661      	mov	r1, ip
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f04f 0400 	mov.w	r4, #0
 800465e:	461a      	mov	r2, r3
 8004660:	4623      	mov	r3, r4
 8004662:	f7fb fdb3 	bl	80001cc <__aeabi_uldivmod>
 8004666:	4603      	mov	r3, r0
 8004668:	460c      	mov	r4, r1
 800466a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004672:	d308      	bcc.n	8004686 <UART_SetConfig+0x2d2>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467a:	d204      	bcs.n	8004686 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	e0be      	b.n	8004804 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	76bb      	strb	r3, [r7, #26]
 800468a:	e0bb      	b.n	8004804 <UART_SetConfig+0x450>
 800468c:	efff69f3 	.word	0xefff69f3
 8004690:	40008000 	.word	0x40008000
 8004694:	40013800 	.word	0x40013800
 8004698:	40021000 	.word	0x40021000
 800469c:	40004400 	.word	0x40004400
 80046a0:	40004800 	.word	0x40004800
 80046a4:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	d15c      	bne.n	800476c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 80046b2:	7efb      	ldrb	r3, [r7, #27]
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d828      	bhi.n	800470a <UART_SetConfig+0x356>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <UART_SetConfig+0x30c>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	080046f5 	.word	0x080046f5
 80046cc:	0800470b 	.word	0x0800470b
 80046d0:	080046fb 	.word	0x080046fb
 80046d4:	0800470b 	.word	0x0800470b
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7ff fc06 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80046e8:	6178      	str	r0, [r7, #20]
        break;
 80046ea:	e013      	b.n	8004714 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7ff fc18 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80046f0:	6178      	str	r0, [r7, #20]
        break;
 80046f2:	e00f      	b.n	8004714 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b49      	ldr	r3, [pc, #292]	; (800481c <UART_SetConfig+0x468>)
 80046f6:	617b      	str	r3, [r7, #20]
        break;
 80046f8:	e00c      	b.n	8004714 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7ff fb65 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 80046fe:	6178      	str	r0, [r7, #20]
        break;
 8004700:	e008      	b.n	8004714 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e004      	b.n	8004714 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	76bb      	strb	r3, [r7, #26]
        break;
 8004712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d074      	beq.n	8004804 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	005a      	lsls	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	441a      	add	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d916      	bls.n	8004766 <UART_SetConfig+0x3b2>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d212      	bcs.n	8004766 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f023 030f 	bic.w	r3, r3, #15
 8004748:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b29a      	uxth	r2, r3
 8004756:	89fb      	ldrh	r3, [r7, #14]
 8004758:	4313      	orrs	r3, r2
 800475a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	89fa      	ldrh	r2, [r7, #14]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e04e      	b.n	8004804 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	76bb      	strb	r3, [r7, #26]
 800476a:	e04b      	b.n	8004804 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 800476c:	7efb      	ldrb	r3, [r7, #27]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d827      	bhi.n	80047c2 <UART_SetConfig+0x40e>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0x3c4>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	080047c3 	.word	0x080047c3
 8004788:	080047b3 	.word	0x080047b3
 800478c:	080047c3 	.word	0x080047c3
 8004790:	080047c3 	.word	0x080047c3
 8004794:	080047c3 	.word	0x080047c3
 8004798:	080047bb 	.word	0x080047bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800479c:	f7ff fbaa 	bl	8003ef4 <HAL_RCC_GetPCLK1Freq>
 80047a0:	6178      	str	r0, [r7, #20]
        break;
 80047a2:	e013      	b.n	80047cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a4:	f7ff fbbc 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 80047a8:	6178      	str	r0, [r7, #20]
        break;
 80047aa:	e00f      	b.n	80047cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <UART_SetConfig+0x468>)
 80047ae:	617b      	str	r3, [r7, #20]
        break;
 80047b0:	e00c      	b.n	80047cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b2:	f7ff fb09 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 80047b6:	6178      	str	r0, [r7, #20]
        break;
 80047b8:	e008      	b.n	80047cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	617b      	str	r3, [r7, #20]
        break;
 80047c0:	e004      	b.n	80047cc <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	76bb      	strb	r3, [r7, #26]
        break;
 80047ca:	bf00      	nop
    }

    if (pclk != 0U)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d018      	beq.n	8004804 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	085a      	lsrs	r2, r3, #1
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d908      	bls.n	8004800 <UART_SetConfig+0x44c>
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d204      	bcs.n	8004800 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	e001      	b.n	8004804 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004810:	7ebb      	ldrb	r3, [r7, #26]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800481c:	00f42400 	.word	0x00f42400

08004820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0310 	and.w	r3, r3, #16
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01a      	beq.n	8004936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491e:	d10a      	bne.n	8004936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004972:	f7fc fe2f 	bl	80015d4 <HAL_GetTick>
 8004976:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b08      	cmp	r3, #8
 8004984:	d10e      	bne.n	80049a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004986:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f82a 	bl	80049ee <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e020      	b.n	80049e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d10e      	bne.n	80049d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f814 	bl	80049ee <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e00a      	b.n	80049e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	4613      	mov	r3, r2
 80049fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049fe:	e05d      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a06:	d059      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a08:	f7fc fde4 	bl	80015d4 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11b      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a2c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0201 	bic.w	r2, r2, #1
 8004a3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e042      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02b      	beq.n	8004abc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a72:	d123      	bne.n	8004abc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a8c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00f      	b.n	8004adc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d092      	beq.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	f107 0014 	add.w	r0, r7, #20
 8004af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	b004      	add	sp, #16
 8004b04:	4770      	bx	lr

08004b06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b16:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004b40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4013      	ands	r3, r2
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b84:	b084      	sub	sp, #16
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	f107 0014 	add.w	r0, r7, #20
 8004b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	b004      	add	sp, #16
 8004bc4:	4770      	bx	lr
	...

08004bc8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b09b      	sub	sp, #108	; 0x6c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	78db      	ldrb	r3, [r3, #3]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d81f      	bhi.n	8004c3a <USB_ActivateEndpoint+0x72>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <USB_ActivateEndpoint+0x38>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c2d 	.word	0x08004c2d
 8004c08:	08004c43 	.word	0x08004c43
 8004c0c:	08004c1f 	.word	0x08004c1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c1c:	e012      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c2a:	e00b      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c38:	e004      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004c40:	e000      	b.n	8004c44 <USB_ActivateEndpoint+0x7c>
      break;
 8004c42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	b21b      	sxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	b21a      	sxth	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b21b      	sxth	r3, r3
 8004c86:	4313      	orrs	r3, r2
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	7b1b      	ldrb	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f040 8149 	bne.w	8004f4c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8084 	beq.w	8004dcc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	00da      	lsls	r2, r3, #3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	88db      	ldrh	r3, [r3, #6]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	81fb      	strh	r3, [r7, #14]
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d01b      	beq.n	8004d48 <USB_ActivateEndpoint+0x180>
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	81bb      	strh	r3, [r7, #12]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	441a      	add	r2, r3
 8004d32:	89bb      	ldrh	r3, [r7, #12]
 8004d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	78db      	ldrb	r3, [r3, #3]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d020      	beq.n	8004d92 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	813b      	strh	r3, [r7, #8]
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	f083 0320 	eor.w	r3, r3, #32
 8004d6e:	813b      	strh	r3, [r7, #8]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	893b      	ldrh	r3, [r7, #8]
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]
 8004d90:	e27f      	b.n	8005292 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	897b      	ldrh	r3, [r7, #10]
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]
 8004dca:	e262      	b.n	8005292 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	4413      	add	r3, r2
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	00da      	lsls	r2, r3, #3
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	88db      	ldrh	r3, [r3, #6]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	4413      	add	r3, r2
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	00da      	lsls	r2, r3, #3
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d112      	bne.n	8004e52 <USB_ActivateEndpoint+0x28a>
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	801a      	strh	r2, [r3, #0]
 8004e50:	e02f      	b.n	8004eb2 <USB_ActivateEndpoint+0x2ea>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b3e      	cmp	r3, #62	; 0x3e
 8004e58:	d813      	bhi.n	8004e82 <USB_ActivateEndpoint+0x2ba>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	085b      	lsrs	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <USB_ActivateEndpoint+0x2ac>
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e70:	3301      	adds	r3, #1
 8004e72:	663b      	str	r3, [r7, #96]	; 0x60
 8004e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	029b      	lsls	r3, r3, #10
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e017      	b.n	8004eb2 <USB_ActivateEndpoint+0x2ea>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	663b      	str	r3, [r7, #96]	; 0x60
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 031f 	and.w	r3, r3, #31
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <USB_ActivateEndpoint+0x2d4>
 8004e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	83fb      	strh	r3, [r7, #30]
 8004ec0:	8bfb      	ldrh	r3, [r7, #30]
 8004ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01b      	beq.n	8004f02 <USB_ActivateEndpoint+0x33a>
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee0:	83bb      	strh	r3, [r7, #28]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8bbb      	ldrh	r3, [r7, #28]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f18:	837b      	strh	r3, [r7, #26]
 8004f1a:	8b7b      	ldrh	r3, [r7, #26]
 8004f1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f20:	837b      	strh	r3, [r7, #26]
 8004f22:	8b7b      	ldrh	r3, [r7, #26]
 8004f24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f28:	837b      	strh	r3, [r7, #26]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8b7b      	ldrh	r3, [r7, #26]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]
 8004f4a:	e1a2      	b.n	8005292 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	441a      	add	r2, r3
 8004f70:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f98:	4413      	add	r3, r2
 8004f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	00da      	lsls	r2, r3, #3
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004faa:	657b      	str	r3, [r7, #84]	; 0x54
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	891b      	ldrh	r3, [r3, #8]
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fcc:	4413      	add	r3, r2
 8004fce:	653b      	str	r3, [r7, #80]	; 0x50
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	00da      	lsls	r2, r3, #3
 8004fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	895b      	ldrh	r3, [r3, #10]
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f040 8091 	bne.w	800511c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005008:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800500a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01b      	beq.n	800504a <USB_ActivateEndpoint+0x482>
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	877b      	strh	r3, [r7, #58]	; 0x3a
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	873b      	strh	r3, [r7, #56]	; 0x38
 8005058:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01b      	beq.n	800509a <USB_ActivateEndpoint+0x4d2>
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005078:	86fb      	strh	r3, [r7, #54]	; 0x36
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	441a      	add	r2, r3
 80050cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	867b      	strh	r3, [r7, #50]	; 0x32
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	441a      	add	r2, r3
 8005104:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005116:	b29b      	uxth	r3, r3
 8005118:	8013      	strh	r3, [r2, #0]
 800511a:	e0ba      	b.n	8005292 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800512c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01d      	beq.n	8005174 <USB_ActivateEndpoint+0x5ac>
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005184:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01d      	beq.n	80051cc <USB_ActivateEndpoint+0x604>
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80051b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	78db      	ldrb	r3, [r3, #3]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d024      	beq.n	800521e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051f2:	f083 0320 	eor.w	r3, r3, #32
 80051f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	441a      	add	r2, r3
 8005204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	b29b      	uxth	r3, r3
 800521a:	8013      	strh	r3, [r2, #0]
 800521c:	e01d      	b.n	800525a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005234:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800524a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005256:	b29b      	uxth	r3, r3
 8005258:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29b      	uxth	r3, r3
 8005268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800526c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005270:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	441a      	add	r2, r3
 800527c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800527e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528e:	b29b      	uxth	r3, r3
 8005290:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005292:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005296:	4618      	mov	r0, r3
 8005298:	376c      	adds	r7, #108	; 0x6c
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop

080052a4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b08d      	sub	sp, #52	; 0x34
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 808e 	bne.w	80053d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d044      	beq.n	800534a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	81bb      	strh	r3, [r7, #12]
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01b      	beq.n	8005310 <USB_DeactivateEndpoint+0x6c>
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ee:	817b      	strh	r3, [r7, #10]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	897b      	ldrh	r3, [r7, #10]
 80052fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005326:	813b      	strh	r3, [r7, #8]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	441a      	add	r2, r3
 8005332:	893b      	ldrh	r3, [r7, #8]
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]
 8005348:	e192      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	827b      	strh	r3, [r7, #18]
 8005358:	8a7b      	ldrh	r3, [r7, #18]
 800535a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <USB_DeactivateEndpoint+0xf6>
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005378:	823b      	strh	r3, [r7, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8a3b      	ldrh	r3, [r7, #16]
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	81fb      	strh	r3, [r7, #14]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	89fb      	ldrh	r3, [r7, #14]
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
 80053d2:	e14d      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 80a5 	bne.w	8005528 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	843b      	strh	r3, [r7, #32]
 80053ec:	8c3b      	ldrh	r3, [r7, #32]
 80053ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01b      	beq.n	800542e <USB_DeactivateEndpoint+0x18a>
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	83fb      	strh	r3, [r7, #30]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	83bb      	strh	r3, [r7, #28]
 800543c:	8bbb      	ldrh	r3, [r7, #28]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <USB_DeactivateEndpoint+0x1da>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	837b      	strh	r3, [r7, #26]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8b7b      	ldrh	r3, [r7, #26]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005494:	833b      	strh	r3, [r7, #24]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	8b3b      	ldrh	r3, [r7, #24]
 80054a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	82fb      	strh	r3, [r7, #22]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8afb      	ldrh	r3, [r7, #22]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	82bb      	strh	r3, [r7, #20]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	8abb      	ldrh	r3, [r7, #20]
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]
 8005526:	e0a3      	b.n	8005670 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <USB_DeactivateEndpoint+0x2d4>
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005586:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <USB_DeactivateEndpoint+0x324>
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	b29b      	uxth	r3, r3
 800559e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	441a      	add	r2, r3
 80055b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	441a      	add	r2, r3
 80055ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005616:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	b29b      	uxth	r3, r3
 8005636:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3734      	adds	r7, #52	; 0x34
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b0c4      	sub	sp, #272	; 0x110
 8005682:	af00      	add	r7, sp, #0
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	6018      	str	r0, [r3, #0]
 8005688:	463b      	mov	r3, r7
 800568a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800568c:	463b      	mov	r3, r7
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	2b01      	cmp	r3, #1
 8005694:	f040 8566 	bne.w	8006164 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005698:	463b      	mov	r3, r7
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	463b      	mov	r3, r7
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d905      	bls.n	80056b4 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80056b2:	e004      	b.n	80056be <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	7b1b      	ldrb	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d12c      	bne.n	8005722 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056c8:	463b      	mov	r3, r7
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6959      	ldr	r1, [r3, #20]
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	88da      	ldrh	r2, [r3, #6]
 80056d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056d8:	b29b      	uxth	r3, r3
 80056da:	1d38      	adds	r0, r7, #4
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f001 fa58 	bl	8006b92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	4413      	add	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	00da      	lsls	r2, r3, #3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005714:	b29a      	uxth	r2, r3
 8005716:	f107 0310 	add.w	r3, r7, #16
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	f000 bcec 	b.w	80060fa <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	78db      	ldrb	r3, [r3, #3]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f040 8356 	bne.w	8005dda <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800572e:	463b      	mov	r3, r7
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	429a      	cmp	r2, r3
 800573c:	f240 82fa 	bls.w	8005d34 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	463b      	mov	r3, r7
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	441a      	add	r2, r3
 800576c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 815e 	beq.w	8005a78 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d164      	bne.n	8005896 <USB_EPStartXfer+0x218>
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057da:	b29b      	uxth	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e0:	4413      	add	r3, r2
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	00da      	lsls	r2, r3, #3
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	4413      	add	r3, r2
 80057f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d112      	bne.n	8005824 <USB_EPStartXfer+0x1a6>
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005808:	b29a      	uxth	r2, r3
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800581c:	b29a      	uxth	r2, r3
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	801a      	strh	r2, [r3, #0]
 8005822:	e054      	b.n	80058ce <USB_EPStartXfer+0x250>
 8005824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005828:	2b3e      	cmp	r3, #62	; 0x3e
 800582a:	d817      	bhi.n	800585c <USB_EPStartXfer+0x1de>
 800582c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005836:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <USB_EPStartXfer+0x1ce>
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005846:	3301      	adds	r3, #1
 8005848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	b29b      	uxth	r3, r3
 8005852:	029b      	lsls	r3, r3, #10
 8005854:	b29a      	uxth	r2, r3
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e038      	b.n	80058ce <USB_EPStartXfer+0x250>
 800585c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2b00      	cmp	r3, #0
 8005870:	d104      	bne.n	800587c <USB_EPStartXfer+0x1fe>
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005876:	3b01      	subs	r3, #1
 8005878:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588e:	b29a      	uxth	r2, r3
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e01b      	b.n	80058ce <USB_EPStartXfer+0x250>
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d116      	bne.n	80058ce <USB_EPStartXfer+0x250>
 80058a0:	1d3b      	adds	r3, r7, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ae:	4413      	add	r3, r2
 80058b0:	637b      	str	r3, [r7, #52]	; 0x34
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	00da      	lsls	r2, r3, #3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	4413      	add	r3, r2
 80058be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058c2:	633b      	str	r3, [r7, #48]	; 0x30
 80058c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	895b      	ldrh	r3, [r3, #10]
 80058d4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6959      	ldr	r1, [r3, #20]
 80058de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80058e8:	1d38      	adds	r0, r7, #4
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	f001 f951 	bl	8006b92 <USB_WritePMA>
            ep->xfer_buff += len;
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058fa:	441a      	add	r2, r3
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	d90e      	bls.n	8005930 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800591c:	463b      	mov	r3, r7
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a1a      	ldr	r2, [r3, #32]
 8005922:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005926:	1ad2      	subs	r2, r2, r3
 8005928:	463b      	mov	r3, r7
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	621a      	str	r2, [r3, #32]
 800592e:	e008      	b.n	8005942 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005942:	463b      	mov	r3, r7
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d164      	bne.n	8005a16 <USB_EPStartXfer+0x398>
 800594c:	1d3b      	adds	r3, r7, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	463b      	mov	r3, r7
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	00da      	lsls	r2, r3, #3
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800597a:	2b00      	cmp	r3, #0
 800597c:	d112      	bne.n	80059a4 <USB_EPStartXfer+0x326>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	b29b      	uxth	r3, r3
 8005984:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005988:	b29a      	uxth	r2, r3
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29a      	uxth	r2, r3
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e057      	b.n	8005a54 <USB_EPStartXfer+0x3d6>
 80059a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059a8:	2b3e      	cmp	r3, #62	; 0x3e
 80059aa:	d817      	bhi.n	80059dc <USB_EPStartXfer+0x35e>
 80059ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <USB_EPStartXfer+0x34e>
 80059c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059c6:	3301      	adds	r3, #1
 80059c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e03b      	b.n	8005a54 <USB_EPStartXfer+0x3d6>
 80059dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d104      	bne.n	80059fc <USB_EPStartXfer+0x37e>
 80059f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059f6:	3b01      	subs	r3, #1
 80059f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80059fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	029b      	lsls	r3, r3, #10
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e01e      	b.n	8005a54 <USB_EPStartXfer+0x3d6>
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d119      	bne.n	8005a54 <USB_EPStartXfer+0x3d6>
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	4413      	add	r3, r2
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	00da      	lsls	r2, r3, #3
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	4413      	add	r3, r2
 8005a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	891b      	ldrh	r3, [r3, #8]
 8005a5a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6959      	ldr	r1, [r3, #20]
 8005a64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005a6e:	1d38      	adds	r0, r7, #4
 8005a70:	6800      	ldr	r0, [r0, #0]
 8005a72:	f001 f88e 	bl	8006b92 <USB_WritePMA>
 8005a76:	e340      	b.n	80060fa <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d164      	bne.n	8005b4c <USB_EPStartXfer+0x4ce>
 8005a82:	1d3b      	adds	r3, r7, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	4413      	add	r3, r2
 8005a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	00da      	lsls	r2, r3, #3
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d112      	bne.n	8005ada <USB_EPStartXfer+0x45c>
 8005ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e057      	b.n	8005b8a <USB_EPStartXfer+0x50c>
 8005ada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ade:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae0:	d817      	bhi.n	8005b12 <USB_EPStartXfer+0x494>
 8005ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d004      	beq.n	8005b02 <USB_EPStartXfer+0x484>
 8005af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afc:	3301      	adds	r3, #1
 8005afe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	029b      	lsls	r3, r3, #10
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0e:	801a      	strh	r2, [r3, #0]
 8005b10:	e03b      	b.n	8005b8a <USB_EPStartXfer+0x50c>
 8005b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b20:	f003 031f 	and.w	r3, r3, #31
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <USB_EPStartXfer+0x4b4>
 8005b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	e01e      	b.n	8005b8a <USB_EPStartXfer+0x50c>
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <USB_EPStartXfer+0x50c>
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6a:	4413      	add	r3, r2
 8005b6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6e:	463b      	mov	r3, r7
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	00da      	lsls	r2, r3, #3
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	4413      	add	r3, r2
 8005b7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	891b      	ldrh	r3, [r3, #8]
 8005b90:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b94:	463b      	mov	r3, r7
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6959      	ldr	r1, [r3, #20]
 8005b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005ba4:	1d38      	adds	r0, r7, #4
 8005ba6:	6800      	ldr	r0, [r0, #0]
 8005ba8:	f000 fff3 	bl	8006b92 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb6:	441a      	add	r2, r3
 8005bb8:	463b      	mov	r3, r7
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d90e      	bls.n	8005bec <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	621a      	str	r2, [r3, #32]
 8005bea:	e008      	b.n	8005bfe <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bec:	463b      	mov	r3, r7
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8005bf6:	463b      	mov	r3, r7
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	647b      	str	r3, [r7, #68]	; 0x44
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d164      	bne.n	8005cd8 <USB_EPStartXfer+0x65a>
 8005c0e:	1d3b      	adds	r3, r7, #4
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	4413      	add	r3, r2
 8005c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	00da      	lsls	r2, r3, #3
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c30:	4413      	add	r3, r2
 8005c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d112      	bne.n	8005c66 <USB_EPStartXfer+0x5e8>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e054      	b.n	8005d10 <USB_EPStartXfer+0x692>
 8005c66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6c:	d817      	bhi.n	8005c9e <USB_EPStartXfer+0x620>
 8005c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <USB_EPStartXfer+0x610>
 8005c84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e038      	b.n	8005d10 <USB_EPStartXfer+0x692>
 8005c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ca8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <USB_EPStartXfer+0x640>
 8005cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	801a      	strh	r2, [r3, #0]
 8005cd6:	e01b      	b.n	8005d10 <USB_EPStartXfer+0x692>
 8005cd8:	463b      	mov	r3, r7
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d116      	bne.n	8005d10 <USB_EPStartXfer+0x692>
 8005ce2:	1d3b      	adds	r3, r7, #4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf0:	4413      	add	r3, r2
 8005cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	00da      	lsls	r2, r3, #3
 8005cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfe:	4413      	add	r3, r2
 8005d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d04:	643b      	str	r3, [r7, #64]	; 0x40
 8005d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	895b      	ldrh	r3, [r3, #10]
 8005d16:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6959      	ldr	r1, [r3, #20]
 8005d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005d2a:	1d38      	adds	r0, r7, #4
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f000 ff30 	bl	8006b92 <USB_WritePMA>
 8005d32:	e1e2      	b.n	80060fa <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8005d34:	463b      	mov	r3, r7
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d3e:	1d3b      	adds	r3, r7, #4
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d58:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005d5c:	1d3b      	adds	r3, r7, #4
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	663b      	str	r3, [r7, #96]	; 0x60
 8005d88:	1d3b      	adds	r3, r7, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d96:	4413      	add	r3, r2
 8005d98:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	00da      	lsls	r2, r3, #3
 8005da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	891b      	ldrh	r3, [r3, #8]
 8005dbc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6959      	ldr	r1, [r3, #20]
 8005dc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005dd0:	1d38      	adds	r0, r7, #4
 8005dd2:	6800      	ldr	r0, [r0, #0]
 8005dd4:	f000 fedd 	bl	8006b92 <USB_WritePMA>
 8005dd8:	e18f      	b.n	80060fa <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	463b      	mov	r3, r7
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 808f 	beq.w	8005f14 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	785b      	ldrb	r3, [r3, #1]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d164      	bne.n	8005ed0 <USB_EPStartXfer+0x852>
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e0c:	1d3b      	adds	r3, r7, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e1a:	4413      	add	r3, r2
 8005e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	00da      	lsls	r2, r3, #3
 8005e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d112      	bne.n	8005e5e <USB_EPStartXfer+0x7e0>
 8005e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e054      	b.n	8005f08 <USB_EPStartXfer+0x88a>
 8005e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e62:	2b3e      	cmp	r3, #62	; 0x3e
 8005e64:	d817      	bhi.n	8005e96 <USB_EPStartXfer+0x818>
 8005e66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <USB_EPStartXfer+0x808>
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	e038      	b.n	8005f08 <USB_EPStartXfer+0x88a>
 8005e96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ea4:	f003 031f 	and.w	r3, r3, #31
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d104      	bne.n	8005eb6 <USB_EPStartXfer+0x838>
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e01b      	b.n	8005f08 <USB_EPStartXfer+0x88a>
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d116      	bne.n	8005f08 <USB_EPStartXfer+0x88a>
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee8:	4413      	add	r3, r2
 8005eea:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00da      	lsls	r2, r3, #3
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005efc:	677b      	str	r3, [r7, #116]	; 0x74
 8005efe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f08:	463b      	mov	r3, r7
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005f12:	e097      	b.n	8006044 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d168      	bne.n	8005ff0 <USB_EPStartXfer+0x972>
 8005f1e:	1d3b      	adds	r3, r7, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f26:	1d3b      	adds	r3, r7, #4
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	00da      	lsls	r2, r3, #3
 8005f44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d112      	bne.n	8005f7e <USB_EPStartXfer+0x900>
 8005f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e05d      	b.n	800603a <USB_EPStartXfer+0x9bc>
 8005f7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f82:	2b3e      	cmp	r3, #62	; 0x3e
 8005f84:	d817      	bhi.n	8005fb6 <USB_EPStartXfer+0x938>
 8005f86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005f90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <USB_EPStartXfer+0x928>
 8005f9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e041      	b.n	800603a <USB_EPStartXfer+0x9bc>
 8005fb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USB_EPStartXfer+0x958>
 8005fcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	e024      	b.n	800603a <USB_EPStartXfer+0x9bc>
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d11f      	bne.n	800603a <USB_EPStartXfer+0x9bc>
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600a:	b29b      	uxth	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006012:	4413      	add	r3, r2
 8006014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006018:	463b      	mov	r3, r7
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006024:	4413      	add	r3, r2
 8006026:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800602a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800602e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006038:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800603a:	463b      	mov	r3, r7
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	891b      	ldrh	r3, [r3, #8]
 8006040:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006044:	463b      	mov	r3, r7
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6959      	ldr	r1, [r3, #20]
 800604a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800604e:	b29b      	uxth	r3, r3
 8006050:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006054:	1d38      	adds	r0, r7, #4
 8006056:	6800      	ldr	r0, [r0, #0]
 8006058:	f000 fd9b 	bl	8006b92 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800605c:	463b      	mov	r3, r7
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d122      	bne.n	80060ac <USB_EPStartXfer+0xa2e>
 8006066:	1d3b      	adds	r3, r7, #4
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	463b      	mov	r3, r7
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006080:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006084:	1d3b      	adds	r3, r7, #4
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	8013      	strh	r3, [r2, #0]
 80060aa:	e026      	b.n	80060fa <USB_EPStartXfer+0xa7c>
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d121      	bne.n	80060fa <USB_EPStartXfer+0xa7c>
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f107 020e 	add.w	r2, r7, #14
 8006110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	8013      	strh	r3, [r2, #0]
 800611a:	f107 030e 	add.w	r3, r7, #14
 800611e:	f107 020e 	add.w	r2, r7, #14
 8006122:	8812      	ldrh	r2, [r2, #0]
 8006124:	f082 0210 	eor.w	r2, r2, #16
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	f107 030e 	add.w	r3, r7, #14
 800612e:	f107 020e 	add.w	r2, r7, #14
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	f082 0220 	eor.w	r2, r2, #32
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	1d3b      	adds	r3, r7, #4
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	f107 030e 	add.w	r3, r7, #14
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]
 8006162:	e3b5      	b.n	80068d0 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	7b1b      	ldrb	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f040 8090 	bne.w	8006290 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	463b      	mov	r3, r7
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	429a      	cmp	r2, r3
 800617e:	d90e      	bls.n	800619e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006180:	463b      	mov	r3, r7
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699a      	ldr	r2, [r3, #24]
 8006190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	463b      	mov	r3, r7
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	619a      	str	r2, [r3, #24]
 800619c:	e008      	b.n	80061b0 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2200      	movs	r2, #0
 80061ae:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061b0:	1d3b      	adds	r3, r7, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061c8:	4413      	add	r3, r2
 80061ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ce:	463b      	mov	r3, r7
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	00da      	lsls	r2, r3, #3
 80061d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061da:	4413      	add	r3, r2
 80061dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d116      	bne.n	800621a <USB_EPStartXfer+0xb9c>
 80061ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e32c      	b.n	8006874 <USB_EPStartXfer+0x11f6>
 800621a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800621e:	2b3e      	cmp	r3, #62	; 0x3e
 8006220:	d818      	bhi.n	8006254 <USB_EPStartXfer+0xbd6>
 8006222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800622c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <USB_EPStartXfer+0xbc4>
 8006238:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800623c:	3301      	adds	r3, #1
 800623e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006242:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29a      	uxth	r2, r3
 800624c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e30f      	b.n	8006874 <USB_EPStartXfer+0x11f6>
 8006254:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800625e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <USB_EPStartXfer+0xbf6>
 800626a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800626e:	3b01      	subs	r3, #1
 8006270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006278:	b29b      	uxth	r3, r3
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	b29b      	uxth	r3, r3
 800627e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800628c:	801a      	strh	r2, [r3, #0]
 800628e:	e2f1      	b.n	8006874 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006290:	463b      	mov	r3, r7
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b02      	cmp	r3, #2
 8006298:	f040 818f 	bne.w	80065ba <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d175      	bne.n	8006392 <USB_EPStartXfer+0xd14>
 80062a6:	1d3b      	adds	r3, r7, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062ae:	1d3b      	adds	r3, r7, #4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062be:	4413      	add	r3, r2
 80062c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	00da      	lsls	r2, r3, #3
 80062cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d116      	bne.n	8006312 <USB_EPStartXfer+0xc94>
 80062e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e065      	b.n	80063de <USB_EPStartXfer+0xd60>
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b3e      	cmp	r3, #62	; 0x3e
 800631a:	d81a      	bhi.n	8006352 <USB_EPStartXfer+0xcd4>
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <USB_EPStartXfer+0xcc2>
 8006336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800633a:	3301      	adds	r3, #1
 800633c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006344:	b29b      	uxth	r3, r3
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	b29a      	uxth	r2, r3
 800634a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800634e:	801a      	strh	r2, [r3, #0]
 8006350:	e045      	b.n	80063de <USB_EPStartXfer+0xd60>
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <USB_EPStartXfer+0xcf8>
 800636c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006370:	3b01      	subs	r3, #1
 8006372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800637a:	b29b      	uxth	r3, r3
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29a      	uxth	r2, r3
 800638a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	e025      	b.n	80063de <USB_EPStartXfer+0xd60>
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d120      	bne.n	80063de <USB_EPStartXfer+0xd60>
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	461a      	mov	r2, r3
 80063b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063b4:	4413      	add	r3, r2
 80063b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	00da      	lsls	r2, r3, #3
 80063c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063e6:	463b      	mov	r3, r7
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d175      	bne.n	80064dc <USB_EPStartXfer+0xe5e>
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006408:	4413      	add	r3, r2
 800640a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800640e:	463b      	mov	r3, r7
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	00da      	lsls	r2, r3, #3
 8006416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800641a:	4413      	add	r3, r2
 800641c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006424:	463b      	mov	r3, r7
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d116      	bne.n	800645c <USB_EPStartXfer+0xdde>
 800642e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800643a:	b29a      	uxth	r2, r3
 800643c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	b29b      	uxth	r3, r3
 800644a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800644e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006452:	b29a      	uxth	r2, r3
 8006454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006458:	801a      	strh	r2, [r3, #0]
 800645a:	e061      	b.n	8006520 <USB_EPStartXfer+0xea2>
 800645c:	463b      	mov	r3, r7
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b3e      	cmp	r3, #62	; 0x3e
 8006464:	d81a      	bhi.n	800649c <USB_EPStartXfer+0xe1e>
 8006466:	463b      	mov	r3, r7
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <USB_EPStartXfer+0xe0c>
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006484:	3301      	adds	r3, #1
 8006486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29a      	uxth	r2, r3
 8006494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e041      	b.n	8006520 <USB_EPStartXfer+0xea2>
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064a8:	463b      	mov	r3, r7
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <USB_EPStartXfer+0xe42>
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	3b01      	subs	r3, #1
 80064bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	029b      	lsls	r3, r3, #10
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064d8:	801a      	strh	r2, [r3, #0]
 80064da:	e021      	b.n	8006520 <USB_EPStartXfer+0xea2>
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	785b      	ldrb	r3, [r3, #1]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d11c      	bne.n	8006520 <USB_EPStartXfer+0xea2>
 80064e6:	1d3b      	adds	r3, r7, #4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064f6:	4413      	add	r3, r2
 80064f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064fc:	463b      	mov	r3, r7
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	00da      	lsls	r2, r3, #3
 8006504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006508:	4413      	add	r3, r2
 800650a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800650e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006512:	463b      	mov	r3, r7
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800651e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8006520:	463b      	mov	r3, r7
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 81a4 	beq.w	8006874 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006540:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <USB_EPStartXfer+0xeda>
 800654c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10d      	bne.n	8006574 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006558:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800655c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8187 	bne.w	8006874 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006566:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 8180 	bne.w	8006874 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006574:	1d3b      	adds	r3, r7, #4
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]
 80065b8:	e15c      	b.n	8006874 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80065ba:	463b      	mov	r3, r7
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	f040 8155 	bne.w	8006870 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	463b      	mov	r3, r7
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d90e      	bls.n	80065f4 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80065e0:	463b      	mov	r3, r7
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	619a      	str	r2, [r3, #24]
 80065f2:	e008      	b.n	8006606 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80065fe:	463b      	mov	r3, r7
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006606:	463b      	mov	r3, r7
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d16f      	bne.n	80066f0 <USB_EPStartXfer+0x1072>
 8006610:	1d3b      	adds	r3, r7, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006618:	1d3b      	adds	r3, r7, #4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006628:	4413      	add	r3, r2
 800662a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	00da      	lsls	r2, r3, #3
 8006636:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800663a:	4413      	add	r3, r2
 800663c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006648:	2b00      	cmp	r3, #0
 800664a:	d116      	bne.n	800667a <USB_EPStartXfer+0xffc>
 800664c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29b      	uxth	r3, r3
 8006654:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006670:	b29a      	uxth	r2, r3
 8006672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	e05f      	b.n	800673a <USB_EPStartXfer+0x10bc>
 800667a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800667e:	2b3e      	cmp	r3, #62	; 0x3e
 8006680:	d818      	bhi.n	80066b4 <USB_EPStartXfer+0x1036>
 8006682:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800668c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <USB_EPStartXfer+0x1024>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669c:	3301      	adds	r3, #1
 800669e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e042      	b.n	800673a <USB_EPStartXfer+0x10bc>
 80066b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <USB_EPStartXfer+0x1056>
 80066ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ce:	3b01      	subs	r3, #1
 80066d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d8:	b29b      	uxth	r3, r3
 80066da:	029b      	lsls	r3, r3, #10
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e024      	b.n	800673a <USB_EPStartXfer+0x10bc>
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d11f      	bne.n	800673a <USB_EPStartXfer+0x10bc>
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006712:	4413      	add	r3, r2
 8006714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006718:	463b      	mov	r3, r7
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	00da      	lsls	r2, r3, #3
 8006720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006724:	4413      	add	r3, r2
 8006726:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800672a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800672e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006732:	b29a      	uxth	r2, r3
 8006734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	1d3b      	adds	r3, r7, #4
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006742:	463b      	mov	r3, r7
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	785b      	ldrb	r3, [r3, #1]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d16f      	bne.n	800682c <USB_EPStartXfer+0x11ae>
 800674c:	1d3b      	adds	r3, r7, #4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675c:	b29b      	uxth	r3, r3
 800675e:	461a      	mov	r2, r3
 8006760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006764:	4413      	add	r3, r2
 8006766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	00da      	lsls	r2, r3, #3
 8006772:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006776:	4413      	add	r3, r2
 8006778:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800677c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <USB_EPStartXfer+0x1138>
 8006788:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	e05e      	b.n	8006874 <USB_EPStartXfer+0x11f6>
 80067b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067ba:	2b3e      	cmp	r3, #62	; 0x3e
 80067bc:	d818      	bhi.n	80067f0 <USB_EPStartXfer+0x1172>
 80067be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d004      	beq.n	80067de <USB_EPStartXfer+0x1160>
 80067d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e041      	b.n	8006874 <USB_EPStartXfer+0x11f6>
 80067f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80067fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <USB_EPStartXfer+0x1192>
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680a:	3b01      	subs	r3, #1
 800680c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006814:	b29b      	uxth	r3, r3
 8006816:	029b      	lsls	r3, r3, #10
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e023      	b.n	8006874 <USB_EPStartXfer+0x11f6>
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d11e      	bne.n	8006874 <USB_EPStartXfer+0x11f6>
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006846:	4413      	add	r3, r2
 8006848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800684c:	463b      	mov	r3, r7
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00da      	lsls	r2, r3, #3
 8006854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006858:	4413      	add	r3, r2
 800685a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800685e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006866:	b29a      	uxth	r2, r3
 8006868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800686c:	801a      	strh	r2, [r3, #0]
 800686e:	e001      	b.n	8006874 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e02e      	b.n	80068d2 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	463b      	mov	r3, r7
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006892:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006896:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800689a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800689e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	463b      	mov	r3, r7
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006904:	81bb      	strh	r3, [r7, #12]
 8006906:	89bb      	ldrh	r3, [r7, #12]
 8006908:	f083 0310 	eor.w	r3, r3, #16
 800690c:	81bb      	strh	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	89bb      	ldrh	r3, [r7, #12]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
 800692e:	e01f      	b.n	8006970 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	81fb      	strh	r3, [r7, #14]
 8006948:	89fb      	ldrh	r3, [r7, #14]
 800694a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800694e:	81fb      	strh	r3, [r7, #14]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	7b1b      	ldrb	r3, [r3, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 809d 	bne.w	8006acc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d04c      	beq.n	8006a34 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	823b      	strh	r3, [r7, #16]
 80069a8:	8a3b      	ldrh	r3, [r7, #16]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d01b      	beq.n	80069ea <USB_EPClearStall+0x6c>
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	81fb      	strh	r3, [r7, #14]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	441a      	add	r2, r3
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	78db      	ldrb	r3, [r3, #3]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d06c      	beq.n	8006acc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a08:	81bb      	strh	r3, [r7, #12]
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	f083 0320 	eor.w	r3, r3, #32
 8006a10:	81bb      	strh	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	8013      	strh	r3, [r2, #0]
 8006a32:	e04b      	b.n	8006acc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	82fb      	strh	r3, [r7, #22]
 8006a42:	8afb      	ldrh	r3, [r7, #22]
 8006a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01b      	beq.n	8006a84 <USB_EPClearStall+0x106>
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	82bb      	strh	r3, [r7, #20]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	8abb      	ldrh	r3, [r7, #20]
 8006a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a9a:	827b      	strh	r3, [r7, #18]
 8006a9c:	8a7b      	ldrh	r3, [r7, #18]
 8006a9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aa2:	827b      	strh	r3, [r7, #18]
 8006aa4:	8a7b      	ldrh	r3, [r7, #18]
 8006aa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aaa:	827b      	strh	r3, [r7, #18]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	441a      	add	r2, r3
 8006ab6:	8a7b      	ldrh	r3, [r7, #18]
 8006ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ae6:	78fb      	ldrb	r3, [r7, #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2280      	movs	r2, #128	; 0x80
 8006af0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b08d      	sub	sp, #52	; 0x34
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	80fb      	strh	r3, [r7, #6]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006ba8:	88bb      	ldrh	r3, [r7, #4]
 8006baa:	3301      	adds	r3, #1
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bb8:	88fa      	ldrh	r2, [r7, #6]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc8:	e01b      	b.n	8006c02 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e0      	bne.n	8006bca <USB_WritePMA+0x38>
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3734      	adds	r7, #52	; 0x34
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b08b      	sub	sp, #44	; 0x2c
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	461a      	mov	r2, r3
 8006c22:	460b      	mov	r3, r1
 8006c24:	80fb      	strh	r3, [r7, #6]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c2a:	88bb      	ldrh	r3, [r7, #4]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c44:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	e018      	b.n	8006c7e <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	3302      	adds	r3, #2
 8006c58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	3301      	adds	r3, #1
 8006c66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3301      	adds	r3, #1
 8006c76:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c84:	88bb      	ldrh	r3, [r7, #4]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	701a      	strb	r2, [r3, #0]
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	372c      	adds	r7, #44	; 0x2c
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cbc:	f001 fc1a 	bl	80084f4 <malloc>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d105      	bne.n	8006cd6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e066      	b.n	8006da4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7c1b      	ldrb	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d119      	bne.n	8006d1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cea:	2202      	movs	r2, #2
 8006cec:	2181      	movs	r1, #129	; 0x81
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fa f9c6 	bl	8001080 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cfe:	2202      	movs	r2, #2
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7fa f9bc 	bl	8001080 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2210      	movs	r2, #16
 8006d14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d18:	e016      	b.n	8006d48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d1a:	2340      	movs	r3, #64	; 0x40
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	2181      	movs	r1, #129	; 0x81
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa f9ad 	bl	8001080 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	2202      	movs	r2, #2
 8006d30:	2101      	movs	r1, #1
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fa f9a4 	bl	8001080 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2210      	movs	r2, #16
 8006d44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d48:	2308      	movs	r3, #8
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	2182      	movs	r1, #130	; 0x82
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fa f996 	bl	8001080 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	7c1b      	ldrb	r3, [r3, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d88:	2101      	movs	r1, #1
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fa faf4 	bl	8001378 <USBD_LL_PrepareReceive>
 8006d90:	e007      	b.n	8006da2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d98:	2340      	movs	r3, #64	; 0x40
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fa faeb 	bl	8001378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006db8:	2181      	movs	r1, #129	; 0x81
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fa f99e 	bl	80010fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fa f997 	bl	80010fc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dd6:	2182      	movs	r1, #130	; 0x82
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fa f98f 	bl	80010fc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00e      	beq.n	8006e16 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 fb7b 	bl	8008504 <free>
    pdev->pClassData = NULL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e30:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d03a      	beq.n	8006ec0 <USBD_CDC_Setup+0xa0>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	f040 8097 	bne.w	8006f7e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	88db      	ldrh	r3, [r3, #6]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d029      	beq.n	8006eac <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	da11      	bge.n	8006e86 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006e6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	88d2      	ldrh	r2, [r2, #6]
 8006e74:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e76:	6939      	ldr	r1, [r7, #16]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	88db      	ldrh	r3, [r3, #6]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fa8d 	bl	800839e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006e84:	e082      	b.n	8006f8c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785a      	ldrb	r2, [r3, #1]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	88db      	ldrh	r3, [r3, #6]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e9c:	6939      	ldr	r1, [r7, #16]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	88db      	ldrh	r3, [r3, #6]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 faa6 	bl	80083f6 <USBD_CtlPrepareRx>
      break;
 8006eaa:	e06f      	b.n	8006f8c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	7850      	ldrb	r0, [r2, #1]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	4798      	blx	r3
      break;
 8006ebe:	e065      	b.n	8006f8c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b0b      	cmp	r3, #11
 8006ec6:	d84f      	bhi.n	8006f68 <USBD_CDC_Setup+0x148>
 8006ec8:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <USBD_CDC_Setup+0xb0>)
 8006eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ece:	bf00      	nop
 8006ed0:	08006f01 	.word	0x08006f01
 8006ed4:	08006f77 	.word	0x08006f77
 8006ed8:	08006f69 	.word	0x08006f69
 8006edc:	08006f69 	.word	0x08006f69
 8006ee0:	08006f69 	.word	0x08006f69
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	08006f69 	.word	0x08006f69
 8006eec:	08006f69 	.word	0x08006f69
 8006ef0:	08006f69 	.word	0x08006f69
 8006ef4:	08006f69 	.word	0x08006f69
 8006ef8:	08006f29 	.word	0x08006f29
 8006efc:	08006f51 	.word	0x08006f51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d107      	bne.n	8006f1a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f0a:	f107 030c 	add.w	r3, r7, #12
 8006f0e:	2202      	movs	r2, #2
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 fa43 	bl	800839e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f18:	e030      	b.n	8006f7c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f9cd 	bl	80082bc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	75fb      	strb	r3, [r7, #23]
          break;
 8006f26:	e029      	b.n	8006f7c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d107      	bne.n	8006f42 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f32:	f107 030f 	add.w	r3, r7, #15
 8006f36:	2201      	movs	r2, #1
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f001 fa2f 	bl	800839e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f40:	e01c      	b.n	8006f7c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f9b9 	bl	80082bc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f4e:	e015      	b.n	8006f7c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d00f      	beq.n	8006f7a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 f9ad 	bl	80082bc <USBD_CtlError>
            ret = USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f66:	e008      	b.n	8006f7a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 f9a6 	bl	80082bc <USBD_CtlError>
          ret = USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	75fb      	strb	r3, [r7, #23]
          break;
 8006f74:	e002      	b.n	8006f7c <USBD_CDC_Setup+0x15c>
          break;
 8006f76:	bf00      	nop
 8006f78:	e008      	b.n	8006f8c <USBD_CDC_Setup+0x16c>
          break;
 8006f7a:	bf00      	nop
      }
      break;
 8006f7c:	e006      	b.n	8006f8c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f99b 	bl	80082bc <USBD_CtlError>
      ret = USBD_FAIL;
 8006f86:	2303      	movs	r3, #3
 8006f88:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8a:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop

08006f98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006faa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e04f      	b.n	800705a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	3318      	adds	r3, #24
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d029      	beq.n	800702c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fd8:	78fa      	ldrb	r2, [r7, #3]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	3318      	adds	r3, #24
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	78f9      	ldrb	r1, [r7, #3]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4403      	add	r3, r0
 8006ff8:	3338      	adds	r3, #56	; 0x38
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007000:	fb03 f301 	mul.w	r3, r3, r1
 8007004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007006:	2b00      	cmp	r3, #0
 8007008:	d110      	bne.n	800702c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	3318      	adds	r3, #24
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800701e:	78f9      	ldrb	r1, [r7, #3]
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fa f96f 	bl	8001308 <USBD_LL_Transmit>
 800702a:	e015      	b.n	8007058 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007074:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e015      	b.n	80070b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7fa f9ad 	bl	80013e8 <USBD_LL_GetRxDataSize>
 800708e:	4602      	mov	r2, r0
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80070aa:	4611      	mov	r1, r2
 80070ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <USBD_CDC_EP0_RxReady+0x46>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070d8:	2bff      	cmp	r3, #255	; 0xff
 80070da:	d010      	beq.n	80070fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80070ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070f2:	b292      	uxth	r2, r2
 80070f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	22ff      	movs	r2, #255	; 0xff
 80070fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2243      	movs	r2, #67	; 0x43
 8007114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	20000108 	.word	0x20000108

08007128 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2243      	movs	r2, #67	; 0x43
 8007134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007136:	4b03      	ldr	r3, [pc, #12]	; (8007144 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	200000c4 	.word	0x200000c4

08007148 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2243      	movs	r2, #67	; 0x43
 8007154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	2000014c 	.word	0x2000014c

08007168 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	220a      	movs	r2, #10
 8007174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000080 	.word	0x20000080

08007188 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e004      	b.n	80071a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b087      	sub	sp, #28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800721a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	e01a      	b.n	8007264 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007234:	2b00      	cmp	r3, #0
 8007236:	d114      	bne.n	8007262 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2201      	movs	r2, #1
 800723c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007256:	2181      	movs	r1, #129	; 0x81
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fa f855 	bl	8001308 <USBD_LL_Transmit>

    ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800727a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	e016      	b.n	80072b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	7c1b      	ldrb	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800729c:	2101      	movs	r1, #1
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fa f86a 	bl	8001378 <USBD_LL_PrepareReceive>
 80072a4:	e007      	b.n	80072b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ac:	2340      	movs	r3, #64	; 0x40
 80072ae:	2101      	movs	r1, #1
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fa f861 	bl	8001378 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	4613      	mov	r3, r2
 80072cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e01f      	b.n	8007318 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7f9 fe23 	bl	8000f58 <USBD_LL_Init>
 8007312:	4603      	mov	r3, r0
 8007314:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e016      	b.n	8007366 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f107 020e 	add.w	r2, r7, #14
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	4602      	mov	r2, r0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7f9 fe50 	bl	800101c <USBD_LL_Start>
 800737c:	4603      	mov	r3, r0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	4611      	mov	r1, r2
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4611      	mov	r1, r2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
  }

  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 ff16 	bl	8008248 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b01      	cmp	r3, #1
 800743e:	d00e      	beq.n	800745e <USBD_LL_SetupStage+0x5a>
 8007440:	2b01      	cmp	r3, #1
 8007442:	d302      	bcc.n	800744a <USBD_LL_SetupStage+0x46>
 8007444:	2b02      	cmp	r3, #2
 8007446:	d014      	beq.n	8007472 <USBD_LL_SetupStage+0x6e>
 8007448:	e01d      	b.n	8007486 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9d6 	bl	8007804 <USBD_StdDevReq>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
      break;
 800745c:	e020      	b.n	80074a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa3a 	bl	80078e0 <USBD_StdItfReq>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
      break;
 8007470:	e016      	b.n	80074a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa76 	bl	800796c <USBD_StdEPReq>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
      break;
 8007484:	e00c      	b.n	80074a0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800748c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007490:	b2db      	uxtb	r3, r3
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7f9 fe67 	bl	8001168 <USBD_LL_StallEP>
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
      break;
 800749e:	bf00      	nop
  }

  return ret;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b086      	sub	sp, #24
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	460b      	mov	r3, r1
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074b8:	7afb      	ldrb	r3, [r7, #11]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d137      	bne.n	800752e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d14a      	bne.n	8007566 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d913      	bls.n	8007504 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	4293      	cmp	r3, r2
 80074f4:	bf28      	it	cs
 80074f6:	4613      	movcs	r3, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 ff97 	bl	8008430 <USBD_CtlContinueRx>
 8007502:	e030      	b.n	8007566 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007516:	2b03      	cmp	r3, #3
 8007518:	d105      	bne.n	8007526 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 ff93 	bl	8008452 <USBD_CtlSendStatus>
 800752c:	e01b      	b.n	8007566 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007540:	2b03      	cmp	r3, #3
 8007542:	d10e      	bne.n	8007562 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	7afa      	ldrb	r2, [r7, #11]
 800754e:	4611      	mov	r1, r2
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	4798      	blx	r3
 8007554:	4603      	mov	r3, r0
 8007556:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	e002      	b.n	8007568 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	e000      	b.n	8007568 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	460b      	mov	r3, r1
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d16a      	bne.n	800765a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3314      	adds	r3, #20
 8007588:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007590:	2b02      	cmp	r3, #2
 8007592:	d155      	bne.n	8007640 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	429a      	cmp	r2, r3
 800759e:	d914      	bls.n	80075ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	461a      	mov	r2, r3
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 ff0c 	bl	80083d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075bc:	2300      	movs	r3, #0
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7f9 fed8 	bl	8001378 <USBD_LL_PrepareReceive>
 80075c8:	e03a      	b.n	8007640 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d11c      	bne.n	8007610 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d316      	bcc.n	8007610 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d20f      	bcs.n	8007610 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075f0:	2200      	movs	r2, #0
 80075f2:	2100      	movs	r1, #0
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 feed 	bl	80083d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007602:	2300      	movs	r3, #0
 8007604:	2200      	movs	r2, #0
 8007606:	2100      	movs	r1, #0
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7f9 feb5 	bl	8001378 <USBD_LL_PrepareReceive>
 800760e:	e017      	b.n	8007640 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007622:	2b03      	cmp	r3, #3
 8007624:	d105      	bne.n	8007632 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007632:	2180      	movs	r1, #128	; 0x80
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7f9 fd97 	bl	8001168 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 ff1c 	bl	8008478 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d123      	bne.n	8007692 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff fe9b 	bl	8007386 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007658:	e01b      	b.n	8007692 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800766c:	2b03      	cmp	r3, #3
 800766e:	d10e      	bne.n	800768e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	7afa      	ldrb	r2, [r7, #11]
 800767a:	4611      	mov	r1, r2
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	4798      	blx	r3
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	e002      	b.n	8007694 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	e000      	b.n	8007694 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6852      	ldr	r2, [r2, #4]
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	4611      	mov	r1, r2
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076e0:	2340      	movs	r3, #64	; 0x40
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7f9 fcca 	bl	8001080 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2240      	movs	r2, #64	; 0x40
 80076f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076fc:	2340      	movs	r3, #64	; 0x40
 80076fe:	2200      	movs	r2, #0
 8007700:	2180      	movs	r1, #128	; 0x80
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7f9 fcbc 	bl	8001080 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2240      	movs	r2, #64	; 0x40
 8007712:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007776:	2b04      	cmp	r3, #4
 8007778:	d105      	bne.n	8007786 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d10b      	bne.n	80077be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	3301      	adds	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077e6:	8a3b      	ldrh	r3, [r7, #16]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b21a      	sxth	r2, r3
 80077ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b21b      	sxth	r3, r3
 80077f4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077f6:	89fb      	ldrh	r3, [r7, #14]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800781a:	2b20      	cmp	r3, #32
 800781c:	d004      	beq.n	8007828 <USBD_StdDevReq+0x24>
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d002      	beq.n	8007828 <USBD_StdDevReq+0x24>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00a      	beq.n	800783c <USBD_StdDevReq+0x38>
 8007826:	e050      	b.n	80078ca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
    break;
 800783a:	e04b      	b.n	80078d4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b09      	cmp	r3, #9
 8007842:	d83c      	bhi.n	80078be <USBD_StdDevReq+0xba>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <USBD_StdDevReq+0x48>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	080078a1 	.word	0x080078a1
 8007850:	080078b5 	.word	0x080078b5
 8007854:	080078bf 	.word	0x080078bf
 8007858:	080078ab 	.word	0x080078ab
 800785c:	080078bf 	.word	0x080078bf
 8007860:	0800787f 	.word	0x0800787f
 8007864:	08007875 	.word	0x08007875
 8007868:	080078bf 	.word	0x080078bf
 800786c:	08007897 	.word	0x08007897
 8007870:	08007889 	.word	0x08007889
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9d0 	bl	8007c1c <USBD_GetDescriptor>
      break;
 800787c:	e024      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fb5f 	bl	8007f44 <USBD_SetAddress>
      break;
 8007886:	e01f      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb9c 	bl	8007fc8 <USBD_SetConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e018      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc39 	bl	8008110 <USBD_GetConfig>
      break;
 800789e:	e013      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc68 	bl	8008178 <USBD_GetStatus>
      break;
 80078a8:	e00e      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fc96 	bl	80081de <USBD_SetFeature>
      break;
 80078b2:	e009      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fca5 	bl	8008206 <USBD_ClrFeature>
      break;
 80078bc:	e004      	b.n	80078c8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fcfb 	bl	80082bc <USBD_CtlError>
      break;
 80078c6:	bf00      	nop
    }
    break;
 80078c8:	e004      	b.n	80078d4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fcf5 	bl	80082bc <USBD_CtlError>
    break;
 80078d2:	bf00      	nop
  }

  return ret;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop

080078e0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d003      	beq.n	8007902 <USBD_StdItfReq+0x22>
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d001      	beq.n	8007902 <USBD_StdItfReq+0x22>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d12a      	bne.n	8007958 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007908:	3b01      	subs	r3, #1
 800790a:	2b02      	cmp	r3, #2
 800790c:	d81d      	bhi.n	800794a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	889b      	ldrh	r3, [r3, #4]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	d813      	bhi.n	8007940 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	4798      	blx	r3
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d110      	bne.n	8007954 <USBD_StdItfReq+0x74>
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10d      	bne.n	8007954 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd8a 	bl	8008452 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800793e:	e009      	b.n	8007954 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fcba 	bl	80082bc <USBD_CtlError>
      break;
 8007948:	e004      	b.n	8007954 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fcb5 	bl	80082bc <USBD_CtlError>
      break;
 8007952:	e000      	b.n	8007956 <USBD_StdItfReq+0x76>
      break;
 8007954:	bf00      	nop
    }
    break;
 8007956:	e004      	b.n	8007962 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fcae 	bl	80082bc <USBD_CtlError>
    break;
 8007960:	bf00      	nop
  }

  return ret;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	889b      	ldrh	r3, [r3, #4]
 800797e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007988:	2b20      	cmp	r3, #32
 800798a:	d004      	beq.n	8007996 <USBD_StdEPReq+0x2a>
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d002      	beq.n	8007996 <USBD_StdEPReq+0x2a>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <USBD_StdEPReq+0x3e>
 8007994:	e137      	b.n	8007c06 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
    break;
 80079a8:	e132      	b.n	8007c10 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d03e      	beq.n	8007a30 <USBD_StdEPReq+0xc4>
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d002      	beq.n	80079bc <USBD_StdEPReq+0x50>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d079      	beq.n	8007aae <USBD_StdEPReq+0x142>
 80079ba:	e11e      	b.n	8007bfa <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d002      	beq.n	80079cc <USBD_StdEPReq+0x60>
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d015      	beq.n	80079f6 <USBD_StdEPReq+0x8a>
 80079ca:	e02b      	b.n	8007a24 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <USBD_StdEPReq+0x80>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d009      	beq.n	80079ec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7f9 fbc3 	bl	8001168 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7f9 fbbf 	bl	8001168 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079ea:	e020      	b.n	8007a2e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fc64 	bl	80082bc <USBD_CtlError>
        break;
 80079f4:	e01b      	b.n	8007a2e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10e      	bne.n	8007a1c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <USBD_StdEPReq+0xb0>
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b80      	cmp	r3, #128	; 0x80
 8007a08:	d008      	beq.n	8007a1c <USBD_StdEPReq+0xb0>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	88db      	ldrh	r3, [r3, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7f9 fba6 	bl	8001168 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fd18 	bl	8008452 <USBD_CtlSendStatus>

        break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fc48 	bl	80082bc <USBD_CtlError>
        break;
 8007a2c:	bf00      	nop
      }
      break;
 8007a2e:	e0e9      	b.n	8007c04 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d002      	beq.n	8007a40 <USBD_StdEPReq+0xd4>
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d015      	beq.n	8007a6a <USBD_StdEPReq+0xfe>
 8007a3e:	e02f      	b.n	8007aa0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00c      	beq.n	8007a60 <USBD_StdEPReq+0xf4>
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d009      	beq.n	8007a60 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7f9 fb89 	bl	8001168 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a56:	2180      	movs	r1, #128	; 0x80
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7f9 fb85 	bl	8001168 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a5e:	e025      	b.n	8007aac <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fc2a 	bl	80082bc <USBD_CtlError>
        break;
 8007a68:	e020      	b.n	8007aac <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	885b      	ldrh	r3, [r3, #2]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d11b      	bne.n	8007aaa <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7f9 fba7 	bl	80011d4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fce3 	bl	8008452 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a9e:	e004      	b.n	8007aaa <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc0a 	bl	80082bc <USBD_CtlError>
        break;
 8007aa8:	e000      	b.n	8007aac <USBD_StdEPReq+0x140>
        break;
 8007aaa:	bf00      	nop
      }
      break;
 8007aac:	e0aa      	b.n	8007c04 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d002      	beq.n	8007abe <USBD_StdEPReq+0x152>
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d032      	beq.n	8007b22 <USBD_StdEPReq+0x1b6>
 8007abc:	e097      	b.n	8007bee <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <USBD_StdEPReq+0x168>
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d004      	beq.n	8007ad4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fbf5 	bl	80082bc <USBD_CtlError>
          break;
 8007ad2:	e091      	b.n	8007bf8 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0b      	bge.n	8007af4 <USBD_StdEPReq+0x188>
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3310      	adds	r3, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	e00b      	b.n	8007b0c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2202      	movs	r2, #2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc3f 	bl	800839e <USBD_CtlSendData>
        break;
 8007b20:	e06a      	b.n	8007bf8 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da11      	bge.n	8007b4e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d117      	bne.n	8007b74 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fbb8 	bl	80082bc <USBD_CtlError>
            break;
 8007b4c:	e054      	b.n	8007bf8 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 020f 	and.w	r2, r3, #15
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fba5 	bl	80082bc <USBD_CtlError>
            break;
 8007b72:	e041      	b.n	8007bf8 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da0b      	bge.n	8007b94 <USBD_StdEPReq+0x228>
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	e00b      	b.n	8007bac <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	3304      	adds	r3, #4
 8007bac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <USBD_StdEPReq+0x24e>
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d103      	bne.n	8007bc2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e00e      	b.n	8007be0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7f9 fb3a 	bl	8001240 <USBD_LL_IsStallEP>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e002      	b.n	8007be0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2202      	movs	r2, #2
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fbd9 	bl	800839e <USBD_CtlSendData>
          break;
 8007bec:	e004      	b.n	8007bf8 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb63 	bl	80082bc <USBD_CtlError>
        break;
 8007bf6:	bf00      	nop
      }
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fb5d 	bl	80082bc <USBD_CtlError>
      break;
 8007c02:	bf00      	nop
    }
    break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb57 	bl	80082bc <USBD_CtlError>
    break;
 8007c0e:	bf00      	nop
  }

  return ret;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b0e      	cmp	r3, #14
 8007c3e:	f200 8152 	bhi.w	8007ee6 <USBD_GetDescriptor+0x2ca>
 8007c42:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <USBD_GetDescriptor+0x2c>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007cb9 	.word	0x08007cb9
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007d11 	.word	0x08007d11
 8007c54:	08007ee7 	.word	0x08007ee7
 8007c58:	08007ee7 	.word	0x08007ee7
 8007c5c:	08007e87 	.word	0x08007e87
 8007c60:	08007eb3 	.word	0x08007eb3
 8007c64:	08007ee7 	.word	0x08007ee7
 8007c68:	08007ee7 	.word	0x08007ee7
 8007c6c:	08007ee7 	.word	0x08007ee7
 8007c70:	08007ee7 	.word	0x08007ee7
 8007c74:	08007ee7 	.word	0x08007ee7
 8007c78:	08007ee7 	.word	0x08007ee7
 8007c7c:	08007ee7 	.word	0x08007ee7
 8007c80:	08007c85 	.word	0x08007c85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ca6:	e126      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fb06 	bl	80082bc <USBD_CtlError>
      err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
    break;
 8007cb6:	e11e      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
    break;
 8007cce:	e112      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	7c1b      	ldrb	r3, [r3, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	f107 0208 	add.w	r2, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	2202      	movs	r2, #2
 8007cf0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007cf2:	e100      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	701a      	strb	r2, [r3, #0]
    break;
 8007d0e:	e0f2      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	885b      	ldrh	r3, [r3, #2]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	f200 80ac 	bhi.w	8007e74 <USBD_GetDescriptor+0x258>
 8007d1c:	a201      	add	r2, pc, #4	; (adr r2, 8007d24 <USBD_GetDescriptor+0x108>)
 8007d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d22:	bf00      	nop
 8007d24:	08007d3d 	.word	0x08007d3d
 8007d28:	08007d71 	.word	0x08007d71
 8007d2c:	08007da5 	.word	0x08007da5
 8007d30:	08007dd9 	.word	0x08007dd9
 8007d34:	08007e0d 	.word	0x08007e0d
 8007d38:	08007e41 	.word	0x08007e41
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	7c12      	ldrb	r2, [r2, #16]
 8007d54:	f107 0108 	add.w	r1, r7, #8
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d5e:	e091      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d60:	6839      	ldr	r1, [r7, #0]
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 faaa 	bl	80082bc <USBD_CtlError>
        err++;
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d6e:	e089      	b.n	8007e84 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	7c12      	ldrb	r2, [r2, #16]
 8007d88:	f107 0108 	add.w	r1, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d92:	e077      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa90 	bl	80082bc <USBD_CtlError>
        err++;
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	72fb      	strb	r3, [r7, #11]
      break;
 8007da2:	e06f      	b.n	8007e84 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00b      	beq.n	8007dc8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7c12      	ldrb	r2, [r2, #16]
 8007dbc:	f107 0108 	add.w	r1, r7, #8
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4798      	blx	r3
 8007dc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dc6:	e05d      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007dc8:	6839      	ldr	r1, [r7, #0]
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 fa76 	bl	80082bc <USBD_CtlError>
        err++;
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	72fb      	strb	r3, [r7, #11]
      break;
 8007dd6:	e055      	b.n	8007e84 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dfa:	e043      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa5c 	bl	80082bc <USBD_CtlError>
        err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
      break;
 8007e0a:	e03b      	b.n	8007e84 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00b      	beq.n	8007e30 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7c12      	ldrb	r2, [r2, #16]
 8007e24:	f107 0108 	add.w	r1, r7, #8
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e2e:	e029      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e30:	6839      	ldr	r1, [r7, #0]
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa42 	bl	80082bc <USBD_CtlError>
        err++;
 8007e38:	7afb      	ldrb	r3, [r7, #11]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e3e:	e021      	b.n	8007e84 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7c12      	ldrb	r2, [r2, #16]
 8007e58:	f107 0108 	add.w	r1, r7, #8
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4798      	blx	r3
 8007e60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e62:	e00f      	b.n	8007e84 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa28 	bl	80082bc <USBD_CtlError>
        err++;
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	72fb      	strb	r3, [r7, #11]
      break;
 8007e72:	e007      	b.n	8007e84 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa20 	bl	80082bc <USBD_CtlError>
      err++;
 8007e7c:	7afb      	ldrb	r3, [r7, #11]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e82:	bf00      	nop
    }
    break;
 8007e84:	e037      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7c1b      	ldrb	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d109      	bne.n	8007ea2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e96:	f107 0208 	add.w	r2, r7, #8
 8007e9a:	4610      	mov	r0, r2
 8007e9c:	4798      	blx	r3
 8007e9e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ea0:	e029      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ea2:	6839      	ldr	r1, [r7, #0]
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa09 	bl	80082bc <USBD_CtlError>
      err++;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	3301      	adds	r3, #1
 8007eae:	72fb      	strb	r3, [r7, #11]
    break;
 8007eb0:	e021      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7c1b      	ldrb	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10d      	bne.n	8007ed6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f107 0208 	add.w	r2, r7, #8
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4798      	blx	r3
 8007eca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	2207      	movs	r2, #7
 8007ed2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007ed4:	e00f      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9ef 	bl	80082bc <USBD_CtlError>
      err++;
 8007ede:	7afb      	ldrb	r3, [r7, #11]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	72fb      	strb	r3, [r7, #11]
    break;
 8007ee4:	e007      	b.n	8007ef6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9e7 	bl	80082bc <USBD_CtlError>
    err++;
 8007eee:	7afb      	ldrb	r3, [r7, #11]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	72fb      	strb	r3, [r7, #11]
    break;
 8007ef4:	bf00      	nop
  }

  if (err != 0U)
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d11e      	bne.n	8007f3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	88db      	ldrh	r3, [r3, #6]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d016      	beq.n	8007f32 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007f04:	893b      	ldrh	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00e      	beq.n	8007f28 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	88da      	ldrh	r2, [r3, #6]
 8007f0e:	893b      	ldrh	r3, [r7, #8]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	bf28      	it	cs
 8007f14:	4613      	movcs	r3, r2
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa3c 	bl	800839e <USBD_CtlSendData>
 8007f26:	e009      	b.n	8007f3c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9c6 	bl	80082bc <USBD_CtlError>
 8007f30:	e004      	b.n	8007f3c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa8d 	bl	8008452 <USBD_CtlSendStatus>
 8007f38:	e000      	b.n	8007f3c <USBD_GetDescriptor+0x320>
    return;
 8007f3a:	bf00      	nop
    }
  }
}
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d130      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d12c      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b7f      	cmp	r3, #127	; 0x7f
 8007f64:	d828      	bhi.n	8007fb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d104      	bne.n	8007f86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f99c 	bl	80082bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f84:	e01c      	b.n	8007fc0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7f9 f982 	bl	800129c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa5a 	bl	8008452 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fac:	e008      	b.n	8007fc0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	e003      	b.n	8007fc0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f97e 	bl	80082bc <USBD_CtlError>
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	4b4b      	ldr	r3, [pc, #300]	; (800810c <USBD_SetConfig+0x144>)
 8007fde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fe0:	4b4a      	ldr	r3, [pc, #296]	; (800810c <USBD_SetConfig+0x144>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d905      	bls.n	8007ff4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f966 	bl	80082bc <USBD_CtlError>
    return USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e087      	b.n	8008104 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d002      	beq.n	8008004 <USBD_SetConfig+0x3c>
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d025      	beq.n	800804e <USBD_SetConfig+0x86>
 8008002:	e071      	b.n	80080e8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008004:	4b41      	ldr	r3, [pc, #260]	; (800810c <USBD_SetConfig+0x144>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01c      	beq.n	8008046 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800800c:	4b3f      	ldr	r3, [pc, #252]	; (800810c <USBD_SetConfig+0x144>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008016:	4b3d      	ldr	r3, [pc, #244]	; (800810c <USBD_SetConfig+0x144>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff f9bd 	bl	800739c <USBD_SetClassConfig>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d004      	beq.n	8008036 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f944 	bl	80082bc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008034:	e065      	b.n	8008102 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa0b 	bl	8008452 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2203      	movs	r2, #3
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008044:	e05d      	b.n	8008102 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa03 	bl	8008452 <USBD_CtlSendStatus>
    break;
 800804c:	e059      	b.n	8008102 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800804e:	4b2f      	ldr	r3, [pc, #188]	; (800810c <USBD_SetConfig+0x144>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d112      	bne.n	800807c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800805e:	4b2b      	ldr	r3, [pc, #172]	; (800810c <USBD_SetConfig+0x144>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008068:	4b28      	ldr	r3, [pc, #160]	; (800810c <USBD_SetConfig+0x144>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff f9b0 	bl	80073d4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9ec 	bl	8008452 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800807a:	e042      	b.n	8008102 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800807c:	4b23      	ldr	r3, [pc, #140]	; (800810c <USBD_SetConfig+0x144>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	429a      	cmp	r2, r3
 8008088:	d02a      	beq.n	80080e0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff f99e 	bl	80073d4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <USBD_SetConfig+0x144>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a2:	4b1a      	ldr	r3, [pc, #104]	; (800810c <USBD_SetConfig+0x144>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7ff f977 	bl	800739c <USBD_SetClassConfig>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00f      	beq.n	80080d8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f8fe 	bl	80082bc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff f983 	bl	80073d4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2202      	movs	r2, #2
 80080d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80080d6:	e014      	b.n	8008102 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9ba 	bl	8008452 <USBD_CtlSendStatus>
    break;
 80080de:	e010      	b.n	8008102 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9b6 	bl	8008452 <USBD_CtlSendStatus>
    break;
 80080e6:	e00c      	b.n	8008102 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f8e6 	bl	80082bc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <USBD_SetConfig+0x144>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7ff f96c 	bl	80073d4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	bf00      	nop
  }

  return ret;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000214 	.word	0x20000214

08008110 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	88db      	ldrh	r3, [r3, #6]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d004      	beq.n	800812c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8c9 	bl	80082bc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800812a:	e021      	b.n	8008170 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008132:	2b01      	cmp	r3, #1
 8008134:	db17      	blt.n	8008166 <USBD_GetConfig+0x56>
 8008136:	2b02      	cmp	r3, #2
 8008138:	dd02      	ble.n	8008140 <USBD_GetConfig+0x30>
 800813a:	2b03      	cmp	r3, #3
 800813c:	d00b      	beq.n	8008156 <USBD_GetConfig+0x46>
 800813e:	e012      	b.n	8008166 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3308      	adds	r3, #8
 800814a:	2201      	movs	r2, #1
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f925 	bl	800839e <USBD_CtlSendData>
      break;
 8008154:	e00c      	b.n	8008170 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	2201      	movs	r2, #1
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f91d 	bl	800839e <USBD_CtlSendData>
      break;
 8008164:	e004      	b.n	8008170 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8a7 	bl	80082bc <USBD_CtlError>
      break;
 800816e:	bf00      	nop
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	3b01      	subs	r3, #1
 800818a:	2b02      	cmp	r3, #2
 800818c:	d81e      	bhi.n	80081cc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d004      	beq.n	80081a0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f88f 	bl	80082bc <USBD_CtlError>
      break;
 800819e:	e01a      	b.n	80081d6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f043 0202 	orr.w	r2, r3, #2
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	330c      	adds	r3, #12
 80081c0:	2202      	movs	r2, #2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8ea 	bl	800839e <USBD_CtlSendData>
    break;
 80081ca:	e004      	b.n	80081d6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f874 	bl	80082bc <USBD_CtlError>
    break;
 80081d4:	bf00      	nop
  }
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	885b      	ldrh	r3, [r3, #2]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d106      	bne.n	80081fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f92a 	bl	8008452 <USBD_CtlSendStatus>
  }
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008216:	3b01      	subs	r3, #1
 8008218:	2b02      	cmp	r3, #2
 800821a:	d80b      	bhi.n	8008234 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10c      	bne.n	800823e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f910 	bl	8008452 <USBD_CtlSendStatus>
      }
      break;
 8008232:	e004      	b.n	800823e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f840 	bl	80082bc <USBD_CtlError>
      break;
 800823c:	e000      	b.n	8008240 <USBD_ClrFeature+0x3a>
      break;
 800823e:	bf00      	nop
  }
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3301      	adds	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	781a      	ldrb	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3301      	adds	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff faa8 	bl	80077c8 <SWAPBYTE>
 8008278:	4603      	mov	r3, r0
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3301      	adds	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7ff fa9b 	bl	80077c8 <SWAPBYTE>
 8008292:	4603      	mov	r3, r0
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff fa8e 	bl	80077c8 <SWAPBYTE>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	80da      	strh	r2, [r3, #6]
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082c6:	2180      	movs	r1, #128	; 0x80
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7f8 ff4d 	bl	8001168 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082ce:	2100      	movs	r1, #0
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7f8 ff49 	bl	8001168 <USBD_LL_StallEP>
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d036      	beq.n	8008362 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082f8:	6938      	ldr	r0, [r7, #16]
 80082fa:	f000 f836 	bl	800836a <USBD_GetLen>
 80082fe:	4603      	mov	r3, r0
 8008300:	3301      	adds	r3, #1
 8008302:	b29b      	uxth	r3, r3
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	4413      	add	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	701a      	strb	r2, [r3, #0]
  idx++;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	3301      	adds	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	4413      	add	r3, r2
 8008324:	2203      	movs	r2, #3
 8008326:	701a      	strb	r2, [r3, #0]
  idx++;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	3301      	adds	r3, #1
 800832c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800832e:	e013      	b.n	8008358 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	4413      	add	r3, r2
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	7812      	ldrb	r2, [r2, #0]
 800833a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	3301      	adds	r3, #1
 8008340:	613b      	str	r3, [r7, #16]
    idx++;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	3301      	adds	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	2200      	movs	r2, #0
 8008350:	701a      	strb	r2, [r3, #0]
    idx++;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	3301      	adds	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e7      	bne.n	8008330 <USBD_GetString+0x52>
 8008360:	e000      	b.n	8008364 <USBD_GetString+0x86>
    return;
 8008362:	bf00      	nop
  }
}
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800837a:	e005      	b.n	8008388 <USBD_GetLen+0x1e>
  {
    len++;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	3301      	adds	r3, #1
 8008380:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3301      	adds	r3, #1
 8008386:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1f5      	bne.n	800837c <USBD_GetLen+0x12>
  }

  return len;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7f8 ff9f 	bl	8001308 <USBD_LL_Transmit>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	2100      	movs	r1, #0
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7f8 ff8e 	bl	8001308 <USBD_LL_Transmit>

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2203      	movs	r2, #3
 8008406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	2100      	movs	r1, #0
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f7f8 ffa9 	bl	8001378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	2100      	movs	r1, #0
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7f8 ff98 	bl	8001378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f8 ff4d 	bl	8001308 <USBD_LL_Transmit>

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2205      	movs	r2, #5
 8008484:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008488:	2300      	movs	r3, #0
 800848a:	2200      	movs	r2, #0
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f8 ff72 	bl	8001378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <__errno>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	; (80084a8 <__errno+0x8>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	20000190 	.word	0x20000190

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4e0d      	ldr	r6, [pc, #52]	; (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1ba4      	subs	r4, r4, r6
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2500      	movs	r5, #0
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4e0b      	ldr	r6, [pc, #44]	; (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	; (80084f0 <__libc_init_array+0x44>)
 80084c0:	f000 f8ea 	bl	8008698 <_init>
 80084c4:	1ba4      	subs	r4, r4, r6
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2500      	movs	r5, #0
 80084ca:	42a5      	cmp	r5, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084d4:	4798      	blx	r3
 80084d6:	3501      	adds	r5, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084de:	4798      	blx	r3
 80084e0:	3501      	adds	r5, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	08008748 	.word	0x08008748
 80084e8:	08008748 	.word	0x08008748
 80084ec:	08008748 	.word	0x08008748
 80084f0:	0800874c 	.word	0x0800874c

080084f4 <malloc>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <malloc+0xc>)
 80084f6:	4601      	mov	r1, r0
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f000 b861 	b.w	80085c0 <_malloc_r>
 80084fe:	bf00      	nop
 8008500:	20000190 	.word	0x20000190

08008504 <free>:
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <free+0xc>)
 8008506:	4601      	mov	r1, r0
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	f000 b80b 	b.w	8008524 <_free_r>
 800850e:	bf00      	nop
 8008510:	20000190 	.word	0x20000190

08008514 <memset>:
 8008514:	4402      	add	r2, r0
 8008516:	4603      	mov	r3, r0
 8008518:	4293      	cmp	r3, r2
 800851a:	d100      	bne.n	800851e <memset+0xa>
 800851c:	4770      	bx	lr
 800851e:	f803 1b01 	strb.w	r1, [r3], #1
 8008522:	e7f9      	b.n	8008518 <memset+0x4>

08008524 <_free_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4605      	mov	r5, r0
 8008528:	2900      	cmp	r1, #0
 800852a:	d045      	beq.n	80085b8 <_free_r+0x94>
 800852c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008530:	1f0c      	subs	r4, r1, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	bfb8      	it	lt
 8008536:	18e4      	addlt	r4, r4, r3
 8008538:	f000 f8ac 	bl	8008694 <__malloc_lock>
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <_free_r+0x98>)
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	4610      	mov	r0, r2
 8008542:	b933      	cbnz	r3, 8008552 <_free_r+0x2e>
 8008544:	6063      	str	r3, [r4, #4]
 8008546:	6014      	str	r4, [r2, #0]
 8008548:	4628      	mov	r0, r5
 800854a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800854e:	f000 b8a2 	b.w	8008696 <__malloc_unlock>
 8008552:	42a3      	cmp	r3, r4
 8008554:	d90c      	bls.n	8008570 <_free_r+0x4c>
 8008556:	6821      	ldr	r1, [r4, #0]
 8008558:	1862      	adds	r2, r4, r1
 800855a:	4293      	cmp	r3, r2
 800855c:	bf04      	itt	eq
 800855e:	681a      	ldreq	r2, [r3, #0]
 8008560:	685b      	ldreq	r3, [r3, #4]
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	bf04      	itt	eq
 8008566:	1852      	addeq	r2, r2, r1
 8008568:	6022      	streq	r2, [r4, #0]
 800856a:	6004      	str	r4, [r0, #0]
 800856c:	e7ec      	b.n	8008548 <_free_r+0x24>
 800856e:	4613      	mov	r3, r2
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	b10a      	cbz	r2, 8008578 <_free_r+0x54>
 8008574:	42a2      	cmp	r2, r4
 8008576:	d9fa      	bls.n	800856e <_free_r+0x4a>
 8008578:	6819      	ldr	r1, [r3, #0]
 800857a:	1858      	adds	r0, r3, r1
 800857c:	42a0      	cmp	r0, r4
 800857e:	d10b      	bne.n	8008598 <_free_r+0x74>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	4401      	add	r1, r0
 8008584:	1858      	adds	r0, r3, r1
 8008586:	4282      	cmp	r2, r0
 8008588:	6019      	str	r1, [r3, #0]
 800858a:	d1dd      	bne.n	8008548 <_free_r+0x24>
 800858c:	6810      	ldr	r0, [r2, #0]
 800858e:	6852      	ldr	r2, [r2, #4]
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	4401      	add	r1, r0
 8008594:	6019      	str	r1, [r3, #0]
 8008596:	e7d7      	b.n	8008548 <_free_r+0x24>
 8008598:	d902      	bls.n	80085a0 <_free_r+0x7c>
 800859a:	230c      	movs	r3, #12
 800859c:	602b      	str	r3, [r5, #0]
 800859e:	e7d3      	b.n	8008548 <_free_r+0x24>
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	1821      	adds	r1, r4, r0
 80085a4:	428a      	cmp	r2, r1
 80085a6:	bf04      	itt	eq
 80085a8:	6811      	ldreq	r1, [r2, #0]
 80085aa:	6852      	ldreq	r2, [r2, #4]
 80085ac:	6062      	str	r2, [r4, #4]
 80085ae:	bf04      	itt	eq
 80085b0:	1809      	addeq	r1, r1, r0
 80085b2:	6021      	streq	r1, [r4, #0]
 80085b4:	605c      	str	r4, [r3, #4]
 80085b6:	e7c7      	b.n	8008548 <_free_r+0x24>
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20000218 	.word	0x20000218

080085c0 <_malloc_r>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	1ccd      	adds	r5, r1, #3
 80085c4:	f025 0503 	bic.w	r5, r5, #3
 80085c8:	3508      	adds	r5, #8
 80085ca:	2d0c      	cmp	r5, #12
 80085cc:	bf38      	it	cc
 80085ce:	250c      	movcc	r5, #12
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	4606      	mov	r6, r0
 80085d4:	db01      	blt.n	80085da <_malloc_r+0x1a>
 80085d6:	42a9      	cmp	r1, r5
 80085d8:	d903      	bls.n	80085e2 <_malloc_r+0x22>
 80085da:	230c      	movs	r3, #12
 80085dc:	6033      	str	r3, [r6, #0]
 80085de:	2000      	movs	r0, #0
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	f000 f857 	bl	8008694 <__malloc_lock>
 80085e6:	4a21      	ldr	r2, [pc, #132]	; (800866c <_malloc_r+0xac>)
 80085e8:	6814      	ldr	r4, [r2, #0]
 80085ea:	4621      	mov	r1, r4
 80085ec:	b991      	cbnz	r1, 8008614 <_malloc_r+0x54>
 80085ee:	4c20      	ldr	r4, [pc, #128]	; (8008670 <_malloc_r+0xb0>)
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b91b      	cbnz	r3, 80085fc <_malloc_r+0x3c>
 80085f4:	4630      	mov	r0, r6
 80085f6:	f000 f83d 	bl	8008674 <_sbrk_r>
 80085fa:	6020      	str	r0, [r4, #0]
 80085fc:	4629      	mov	r1, r5
 80085fe:	4630      	mov	r0, r6
 8008600:	f000 f838 	bl	8008674 <_sbrk_r>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d124      	bne.n	8008652 <_malloc_r+0x92>
 8008608:	230c      	movs	r3, #12
 800860a:	6033      	str	r3, [r6, #0]
 800860c:	4630      	mov	r0, r6
 800860e:	f000 f842 	bl	8008696 <__malloc_unlock>
 8008612:	e7e4      	b.n	80085de <_malloc_r+0x1e>
 8008614:	680b      	ldr	r3, [r1, #0]
 8008616:	1b5b      	subs	r3, r3, r5
 8008618:	d418      	bmi.n	800864c <_malloc_r+0x8c>
 800861a:	2b0b      	cmp	r3, #11
 800861c:	d90f      	bls.n	800863e <_malloc_r+0x7e>
 800861e:	600b      	str	r3, [r1, #0]
 8008620:	50cd      	str	r5, [r1, r3]
 8008622:	18cc      	adds	r4, r1, r3
 8008624:	4630      	mov	r0, r6
 8008626:	f000 f836 	bl	8008696 <__malloc_unlock>
 800862a:	f104 000b 	add.w	r0, r4, #11
 800862e:	1d23      	adds	r3, r4, #4
 8008630:	f020 0007 	bic.w	r0, r0, #7
 8008634:	1ac3      	subs	r3, r0, r3
 8008636:	d0d3      	beq.n	80085e0 <_malloc_r+0x20>
 8008638:	425a      	negs	r2, r3
 800863a:	50e2      	str	r2, [r4, r3]
 800863c:	e7d0      	b.n	80085e0 <_malloc_r+0x20>
 800863e:	428c      	cmp	r4, r1
 8008640:	684b      	ldr	r3, [r1, #4]
 8008642:	bf16      	itet	ne
 8008644:	6063      	strne	r3, [r4, #4]
 8008646:	6013      	streq	r3, [r2, #0]
 8008648:	460c      	movne	r4, r1
 800864a:	e7eb      	b.n	8008624 <_malloc_r+0x64>
 800864c:	460c      	mov	r4, r1
 800864e:	6849      	ldr	r1, [r1, #4]
 8008650:	e7cc      	b.n	80085ec <_malloc_r+0x2c>
 8008652:	1cc4      	adds	r4, r0, #3
 8008654:	f024 0403 	bic.w	r4, r4, #3
 8008658:	42a0      	cmp	r0, r4
 800865a:	d005      	beq.n	8008668 <_malloc_r+0xa8>
 800865c:	1a21      	subs	r1, r4, r0
 800865e:	4630      	mov	r0, r6
 8008660:	f000 f808 	bl	8008674 <_sbrk_r>
 8008664:	3001      	adds	r0, #1
 8008666:	d0cf      	beq.n	8008608 <_malloc_r+0x48>
 8008668:	6025      	str	r5, [r4, #0]
 800866a:	e7db      	b.n	8008624 <_malloc_r+0x64>
 800866c:	20000218 	.word	0x20000218
 8008670:	2000021c 	.word	0x2000021c

08008674 <_sbrk_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4c06      	ldr	r4, [pc, #24]	; (8008690 <_sbrk_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4605      	mov	r5, r0
 800867c:	4608      	mov	r0, r1
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	f7f8 f886 	bl	8000790 <_sbrk>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_sbrk_r+0x1a>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	b103      	cbz	r3, 800868e <_sbrk_r+0x1a>
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	20001238 	.word	0x20001238

08008694 <__malloc_lock>:
 8008694:	4770      	bx	lr

08008696 <__malloc_unlock>:
 8008696:	4770      	bx	lr

08008698 <_init>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr

080086a4 <_fini>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	bf00      	nop
 80086a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086aa:	bc08      	pop	{r3}
 80086ac:	469e      	mov	lr, r3
 80086ae:	4770      	bx	lr
