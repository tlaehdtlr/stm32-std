
5_TIM_mode_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c9c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e68  08002e68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002e7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002e7c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4bc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017b4  00000000  00000000  0002b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191d6  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009727  00000000  00000000  000473fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1403  00000000  00000000  00050b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1f28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d64  00000000  00000000  000f1fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002e10 	.word	0x08002e10

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002e10 	.word	0x08002e10

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	4b29      	ldr	r3, [pc, #164]	; (8000288 <MX_GPIO_Init+0xbc>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a28      	ldr	r2, [pc, #160]	; (8000288 <MX_GPIO_Init+0xbc>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b26      	ldr	r3, [pc, #152]	; (8000288 <MX_GPIO_Init+0xbc>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <MX_GPIO_Init+0xbc>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a22      	ldr	r2, [pc, #136]	; (8000288 <MX_GPIO_Init+0xbc>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b20      	ldr	r3, [pc, #128]	; (8000288 <MX_GPIO_Init+0xbc>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000212:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <MX_GPIO_Init+0xbc>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <MX_GPIO_Init+0xbc>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <MX_GPIO_Init+0xbc>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000230:	4816      	ldr	r0, [pc, #88]	; (800028c <MX_GPIO_Init+0xc0>)
 8000232:	f000 fdbd 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800023a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <MX_GPIO_Init+0xc4>)
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4619      	mov	r1, r3
 800024a:	4812      	ldr	r0, [pc, #72]	; (8000294 <MX_GPIO_Init+0xc8>)
 800024c:	f000 fc3e 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2301      	movs	r3, #1
 8000258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	4619      	mov	r1, r3
 8000268:	4808      	ldr	r0, [pc, #32]	; (800028c <MX_GPIO_Init+0xc0>)
 800026a:	f000 fc2f 	bl	8000acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800026e:	2200      	movs	r2, #0
 8000270:	2100      	movs	r1, #0
 8000272:	2028      	movs	r0, #40	; 0x28
 8000274:	f000 fbf3 	bl	8000a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000278:	2028      	movs	r0, #40	; 0x28
 800027a:	f000 fc0c 	bl	8000a96 <HAL_NVIC_EnableIRQ>

}
 800027e:	bf00      	nop
 8000280:	3720      	adds	r7, #32
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40021000 	.word	0x40021000
 800028c:	48000400 	.word	0x48000400
 8000290:	10110000 	.word	0x10110000
 8000294:	48000800 	.word	0x48000800

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fa90 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f80e 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f7ff ff92 	bl	80001cc <MX_GPIO_Init>
  MX_TIM15_Init();
 80002a8:	f000 f92c 	bl	8000504 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim15);
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <main+0x24>)
 80002ae:	f001 fc9d 	bl	8001bec <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1);
 80002b2:	2100      	movs	r1, #0
 80002b4:	4801      	ldr	r0, [pc, #4]	; (80002bc <main+0x24>)
 80002b6:	f001 fd4f 	bl	8001d58 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <main+0x22>
 80002bc:	20000034 	.word	0x20000034

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b096      	sub	sp, #88	; 0x58
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	2244      	movs	r2, #68	; 0x44
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 fd96 	bl	8002e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002e6:	f000 fda1 	bl	8000e2c <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f8a4 	bl	800043c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002f4:	2310      	movs	r3, #16
 80002f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000300:	2360      	movs	r3, #96	; 0x60
 8000302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000304:	2300      	movs	r3, #0
 8000306:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fde3 	bl	8000ed8 <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000318:	f000 f890 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000330:	463b      	mov	r3, r7
 8000332:	2100      	movs	r1, #0
 8000334:	4618      	mov	r0, r3
 8000336:	f001 fa35 	bl	80017a4 <HAL_RCC_ClockConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000340:	f000 f87c 	bl	800043c <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3758      	adds	r7, #88	; 0x58
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
static uint8_t step = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM15)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a06      	ldr	r2, [pc, #24]	; (8000374 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d105      	bne.n	800036a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000364:	4804      	ldr	r0, [pc, #16]	; (8000378 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000366:	f000 fd23 	bl	8000db0 <HAL_GPIO_WritePin>
  }
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40014000 	.word	0x40014000
 8000378:	48000400 	.word	0x48000400

0800037c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance->CCR1 != 0)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d10e      	bne.n	80003ac <HAL_TIM_OC_DelayElapsedCallback+0x30>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	7f1b      	ldrb	r3, [r3, #28]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d10a      	bne.n	80003ac <HAL_TIM_OC_DelayElapsedCallback+0x30>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800039c:	2b00      	cmp	r3, #0
 800039e:	d005      	beq.n	80003ac <HAL_TIM_OC_DelayElapsedCallback+0x30>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a6:	4804      	ldr	r0, [pc, #16]	; (80003b8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>)
 80003a8:	f000 fd02 	bl	8000db0 <HAL_GPIO_WritePin>
  }
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40014000 	.word	0x40014000
 80003b8:	48000400 	.word	0x48000400

080003bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	80fb      	strh	r3, [r7, #6]
  static uint32_t debounce = 0;
  static uint32_t now = 0;

  if(GPIO_Pin == GPIO_PIN_13)
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003cc:	d12a      	bne.n	8000424 <HAL_GPIO_EXTI_Callback+0x68>
  {
    /* anti-chattering 처리 */
    now = HAL_GetTick();
 80003ce:	f000 fa5f 	bl	8000890 <HAL_GetTick>
 80003d2:	4602      	mov	r2, r0
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_GPIO_EXTI_Callback+0x70>)
 80003d6:	601a      	str	r2, [r3, #0]
    if(now - debounce < 200)
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <HAL_GPIO_EXTI_Callback+0x70>)
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <HAL_GPIO_EXTI_Callback+0x74>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	2bc7      	cmp	r3, #199	; 0xc7
 80003e4:	d91d      	bls.n	8000422 <HAL_GPIO_EXTI_Callback+0x66>
      return;
    debounce = HAL_GetTick();
 80003e6:	f000 fa53 	bl	8000890 <HAL_GetTick>
 80003ea:	4602      	mov	r2, r0
 80003ec:	4b10      	ldr	r3, [pc, #64]	; (8000430 <HAL_GPIO_EXTI_Callback+0x74>)
 80003ee:	601a      	str	r2, [r3, #0]

    /* Pulse 값 변경으로 Duty 증가 */
    htim15.Instance->CCR1 = (step * 10);
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <HAL_GPIO_EXTI_Callback+0x78>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	461a      	mov	r2, r3
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
    step++;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_GPIO_EXTI_Callback+0x78>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_GPIO_EXTI_Callback+0x78>)
 8000410:	701a      	strb	r2, [r3, #0]
    if(step > 9) step = 0;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <HAL_GPIO_EXTI_Callback+0x78>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b09      	cmp	r3, #9
 8000418:	d904      	bls.n	8000424 <HAL_GPIO_EXTI_Callback+0x68>
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_GPIO_EXTI_Callback+0x78>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
 8000420:	e000      	b.n	8000424 <HAL_GPIO_EXTI_Callback+0x68>
      return;
 8000422:	bf00      	nop
  }
}
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	2000002c 	.word	0x2000002c
 8000430:	20000030 	.word	0x20000030
 8000434:	20000028 	.word	0x20000028
 8000438:	20000034 	.word	0x20000034

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000442:	e7fe      	b.n	8000442 <Error_Handler+0x6>

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6613      	str	r3, [r2, #96]	; 0x60
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	6593      	str	r3, [r2, #88]	; 0x58
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_MspInit+0x44>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d8:	f000 f9c6 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80004e6:	f001 fd5b 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000034 	.word	0x20000034

080004f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004fc:	f000 fc70 	bl	8000de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b09a      	sub	sp, #104	; 0x68
 8000508:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000518:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	222c      	movs	r2, #44	; 0x2c
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fc5e 	bl	8002e00 <memset>

  htim15.Instance = TIM15;
 8000544:	4b3e      	ldr	r3, [pc, #248]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000546:	4a3f      	ldr	r2, [pc, #252]	; (8000644 <MX_TIM15_Init+0x140>)
 8000548:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000;
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <MX_TIM15_Init+0x13c>)
 800054c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000550:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000552:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100-1;
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <MX_TIM15_Init+0x13c>)
 800055a:	2263      	movs	r2, #99	; 0x63
 800055c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000564:	4b36      	ldr	r3, [pc, #216]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056a:	4b35      	ldr	r3, [pc, #212]	; (8000640 <MX_TIM15_Init+0x13c>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000570:	4833      	ldr	r0, [pc, #204]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000572:	f001 fae3 	bl	8001b3c <HAL_TIM_Base_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800057c:	f7ff ff5e 	bl	800043c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000584:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058a:	4619      	mov	r1, r3
 800058c:	482c      	ldr	r0, [pc, #176]	; (8000640 <MX_TIM15_Init+0x13c>)
 800058e:	f001 fe9d 	bl	80022cc <HAL_TIM_ConfigClockSource>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000598:	f7ff ff50 	bl	800043c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 800059c:	4828      	ldr	r0, [pc, #160]	; (8000640 <MX_TIM15_Init+0x13c>)
 800059e:	f001 fb79 	bl	8001c94 <HAL_TIM_OC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80005a8:	f7ff ff48 	bl	800043c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005b8:	4619      	mov	r1, r3
 80005ba:	4821      	ldr	r0, [pc, #132]	; (8000640 <MX_TIM15_Init+0x13c>)
 80005bc:	f002 fb00 	bl	8002bc0 <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f7ff ff39 	bl	800043c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80005ca:	2300      	movs	r3, #0
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d2:	2300      	movs	r3, #0
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005d6:	2300      	movs	r3, #0
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_TIM15_Init+0x13c>)
 80005f0:	f001 fdf6 	bl	80021e0 <HAL_TIM_OC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80005fa:	f7ff ff1f 	bl	800043c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000622:	f002 fb33 	bl	8002c8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 800062c:	f7ff ff06 	bl	800043c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <MX_TIM15_Init+0x13c>)
 8000632:	f000 f82f 	bl	8000694 <HAL_TIM_MspPostInit>

}
 8000636:	bf00      	nop
 8000638:	3768      	adds	r7, #104	; 0x68
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000034 	.word	0x20000034
 8000644:	40014000 	.word	0x40014000

08000648 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a0d      	ldr	r2, [pc, #52]	; (800068c <HAL_TIM_Base_MspInit+0x44>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d113      	bne.n	8000682 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_TIM_Base_MspInit+0x48>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_TIM_Base_MspInit+0x48>)
 8000660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000664:	6613      	str	r3, [r2, #96]	; 0x60
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_TIM_Base_MspInit+0x48>)
 8000668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2018      	movs	r0, #24
 8000678:	f000 f9f1 	bl	8000a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800067c:	2018      	movs	r0, #24
 800067e:	f000 fa0a 	bl	8000a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40014000 	.word	0x40014000
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM15)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <HAL_TIM_MspPostInit+0x64>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d11c      	bne.n	80006f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_TIM_MspPostInit+0x68>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <HAL_TIM_MspPostInit+0x68>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_TIM_MspPostInit+0x68>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80006de:	230e      	movs	r3, #14
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 f9ee 	bl	8000acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3720      	adds	r7, #32
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40014000 	.word	0x40014000
 80006fc:	40021000 	.word	0x40021000

08000700 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000738 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f000 f826 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000708:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800070a:	e003      	b.n	8000714 <LoopCopyDataInit>

0800070c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800070e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000710:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000712:	3104      	adds	r1, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000718:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800071a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800071c:	d3f6      	bcc.n	800070c <CopyDataInit>
	ldr	r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000720:	e002      	b.n	8000728 <LoopFillZerobss>

08000722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000722:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000724:	f842 3b04 	str.w	r3, [r2], #4

08000728 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LoopForever+0x16>)
	cmp	r2, r3
 800072a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800072c:	d3f9      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f002 fb43 	bl	8002db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000732:	f7ff fdb1 	bl	8000298 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000738:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800073c:	08002e70 	.word	0x08002e70
	ldr	r0, =_sdata
 8000740:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000744:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000748:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800074c:	20000084 	.word	0x20000084

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <SystemInit+0x64>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <SystemInit+0x64>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <SystemInit+0x68>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a13      	ldr	r2, [pc, #76]	; (80007bc <SystemInit+0x68>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SystemInit+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <SystemInit+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <SystemInit+0x68>)
 8000780:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000784:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000788:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <SystemInit+0x68>)
 800078c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000790:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <SystemInit+0x68>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <SystemInit+0x68>)
 8000798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <SystemInit+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <SystemInit+0x64>)
 80007a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007aa:	609a      	str	r2, [r3, #8]
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f93c 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f80d 	bl	80007f0 <HAL_InitTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	71fb      	strb	r3, [r7, #7]
 80007e0:	e001      	b.n	80007e6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e2:	f7ff fe2f 	bl	8000444 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <HAL_InitTick+0x6c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d023      	beq.n	800084c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_InitTick+0x70>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <HAL_InitTick+0x6c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	fbb3 f3f1 	udiv	r3, r3, r1
 8000816:	fbb2 f3f3 	udiv	r3, r2, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f949 	bl	8000ab2 <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10f      	bne.n	8000846 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d809      	bhi.n	8000840 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295
 8000834:	f000 f913 	bl	8000a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_InitTick+0x74>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e007      	b.n	8000850 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e004      	b.n	8000850 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e001      	b.n	8000850 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008
 8000860:	20000000 	.word	0x20000000
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	20000080 	.word	0x20000080

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000080 	.word	0x20000080

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff29 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff3e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff8e 	bl	800099c <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffa2 	bl	8000a04 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e14e      	b.n	8000d7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8140 	beq.w	8000d74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d00b      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b08:	2b11      	cmp	r3, #17
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b12      	cmp	r3, #18
 8000b12:	d130      	bne.n	8000b76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 0201 	and.w	r2, r3, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0xea>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d123      	bne.n	8000bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0203 	and.w	r2, r3, #3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 809a 	beq.w	8000d74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c44:	4a54      	ldr	r2, [pc, #336]	; (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4c:	4b52      	ldr	r3, [pc, #328]	; (8000d98 <HAL_GPIO_Init+0x2cc>)
 8000c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c58:	4a50      	ldr	r2, [pc, #320]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c82:	d013      	beq.n	8000cac <HAL_GPIO_Init+0x1e0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a46      	ldr	r2, [pc, #280]	; (8000da0 <HAL_GPIO_Init+0x2d4>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d00d      	beq.n	8000ca8 <HAL_GPIO_Init+0x1dc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a45      	ldr	r2, [pc, #276]	; (8000da4 <HAL_GPIO_Init+0x2d8>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d007      	beq.n	8000ca4 <HAL_GPIO_Init+0x1d8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a44      	ldr	r2, [pc, #272]	; (8000da8 <HAL_GPIO_Init+0x2dc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d101      	bne.n	8000ca0 <HAL_GPIO_Init+0x1d4>
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x1e2>
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	e004      	b.n	8000cae <HAL_GPIO_Init+0x1e2>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e002      	b.n	8000cae <HAL_GPIO_Init+0x1e2>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e000      	b.n	8000cae <HAL_GPIO_Init+0x1e2>
 8000cac:	2300      	movs	r3, #0
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f002 0203 	and.w	r2, r2, #3
 8000cb4:	0092      	lsls	r2, r2, #2
 8000cb6:	4093      	lsls	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cbe:	4937      	ldr	r1, [pc, #220]	; (8000d9c <HAL_GPIO_Init+0x2d0>)
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cf0:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d1a:	4a24      	ldr	r2, [pc, #144]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_GPIO_Init+0x2e0>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f47f aea9 	bne.w	8000adc <HAL_GPIO_Init+0x10>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800
 8000da8:	48000c00 	.word	0x48000c00
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dec:	695a      	ldr	r2, [r3, #20]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fadc 	bl	80003bc <HAL_GPIO_EXTI_Callback>
  }
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40007000 	.word	0x40007000

08000e2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e3a:	d130      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e48:	d038      	beq.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e52:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2232      	movs	r2, #50	; 0x32
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e70:	e002      	b.n	8000e78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e84:	d102      	bne.n	8000e8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f2      	bne.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e98:	d110      	bne.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e00f      	b.n	8000ebe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eaa:	d007      	beq.n	8000ebc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eb4:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40007000 	.word	0x40007000
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	431bde83 	.word	0x431bde83

08000ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f000 bc56 	b.w	8001798 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eec:	4ba1      	ldr	r3, [pc, #644]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef6:	4b9f      	ldr	r3, [pc, #636]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80e6 	beq.w	80010da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <HAL_RCC_OscConfig+0x4c>
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	f040 808d 	bne.w	8001036 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	f040 8089 	bne.w	8001036 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f24:	4b93      	ldr	r3, [pc, #588]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_RCC_OscConfig+0x66>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	f000 bc2d 	b.w	8001798 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f42:	4b8c      	ldr	r3, [pc, #560]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <HAL_RCC_OscConfig+0x80>
 8000f4e:	4b89      	ldr	r3, [pc, #548]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f56:	e005      	b.n	8000f64 <HAL_RCC_OscConfig+0x8c>
 8000f58:	4b86      	ldr	r3, [pc, #536]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d224      	bcs.n	8000fb2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fd85 	bl	8001a7c <RCC_SetFlashLatencyFromMSIRange>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f000 bc0d 	b.w	8001798 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f7e:	4b7d      	ldr	r3, [pc, #500]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7c      	ldr	r2, [pc, #496]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	4b7a      	ldr	r3, [pc, #488]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	4977      	ldr	r1, [pc, #476]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f9c:	4b75      	ldr	r3, [pc, #468]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4972      	ldr	r1, [pc, #456]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e025      	b.n	8000ffe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb2:	4b70      	ldr	r3, [pc, #448]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6f      	ldr	r2, [pc, #444]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b6d      	ldr	r3, [pc, #436]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	496a      	ldr	r1, [pc, #424]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd0:	4b68      	ldr	r3, [pc, #416]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4965      	ldr	r1, [pc, #404]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fe4:	6a3b      	ldr	r3, [r7, #32]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fd44 	bl	8001a7c <RCC_SetFlashLatencyFromMSIRange>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e3cc      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ffe:	f000 fcb3 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001002:	4601      	mov	r1, r0
 8001004:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	4a5a      	ldr	r2, [pc, #360]	; (8001178 <HAL_RCC_OscConfig+0x2a0>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	fa21 f303 	lsr.w	r3, r1, r3
 800101a:	4a58      	ldr	r2, [pc, #352]	; (800117c <HAL_RCC_OscConfig+0x2a4>)
 800101c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800101e:	4b58      	ldr	r3, [pc, #352]	; (8001180 <HAL_RCC_OscConfig+0x2a8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fbe4 	bl	80007f0 <HAL_InitTick>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800102c:	7dfb      	ldrb	r3, [r7, #23]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d052      	beq.n	80010d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	e3b0      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d032      	beq.n	80010a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800103e:	4b4d      	ldr	r3, [pc, #308]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800104a:	f7ff fc21 	bl	8000890 <HAL_GetTick>
 800104e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001052:	f7ff fc1d 	bl	8000890 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e399      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f0      	beq.n	8001052 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001070:	4b40      	ldr	r3, [pc, #256]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a3f      	ldr	r2, [pc, #252]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	493a      	ldr	r1, [pc, #232]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
 80010a2:	e01a      	b.n	80010da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a32      	ldr	r2, [pc, #200]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010b0:	f7ff fbee 	bl	8000890 <HAL_GetTick>
 80010b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010b8:	f7ff fbea 	bl	8000890 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e366      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x1e0>
 80010d6:	e000      	b.n	80010da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d073      	beq.n	80011ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x220>
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	d10e      	bne.n	8001110 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d10b      	bne.n	8001110 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d063      	beq.n	80011cc <HAL_RCC_OscConfig+0x2f4>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d15f      	bne.n	80011cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e343      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d106      	bne.n	8001128 <HAL_RCC_OscConfig+0x250>
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	e01d      	b.n	8001164 <HAL_RCC_OscConfig+0x28c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001130:	d10c      	bne.n	800114c <HAL_RCC_OscConfig+0x274>
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e00b      	b.n	8001164 <HAL_RCC_OscConfig+0x28c>
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 8001152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_RCC_OscConfig+0x29c>)
 800115e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d01b      	beq.n	80011a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fb90 	bl	8000890 <HAL_GetTick>
 8001170:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001172:	e010      	b.n	8001196 <HAL_RCC_OscConfig+0x2be>
 8001174:	40021000 	.word	0x40021000
 8001178:	08002e28 	.word	0x08002e28
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fb84 	bl	8000890 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	; 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e300      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001196:	4ba0      	ldr	r3, [pc, #640]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0x2ac>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fb74 	bl	8000890 <HAL_GetTick>
 80011a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fb70 	bl	8000890 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e2ec      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011be:	4b96      	ldr	r3, [pc, #600]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x2d4>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d060      	beq.n	800129c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d005      	beq.n	80011ec <HAL_RCC_OscConfig+0x314>
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d119      	bne.n	800121a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d116      	bne.n	800121a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ec:	4b8a      	ldr	r3, [pc, #552]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_OscConfig+0x32c>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e2c9      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b84      	ldr	r3, [pc, #528]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	061b      	lsls	r3, r3, #24
 8001212:	4981      	ldr	r1, [pc, #516]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001214:	4313      	orrs	r3, r2
 8001216:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001218:	e040      	b.n	800129c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d023      	beq.n	800126a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001222:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fb2f 	bl	8000890 <HAL_GetTick>
 8001232:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fb2b 	bl	8000890 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e2a7      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	496d      	ldr	r1, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b6b      	ldr	r3, [pc, #428]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a6a      	ldr	r2, [pc, #424]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fb0b 	bl	8000890 <HAL_GetTick>
 800127a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fb07 	bl	8000890 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e283      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001290:	4b61      	ldr	r3, [pc, #388]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d07f      	beq.n	80013a8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05f      	beq.n	8001370 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80012b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d037      	beq.n	8001336 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e25c      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01b      	beq.n	8001320 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80012e8:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80012ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ee:	4a4a      	ldr	r2, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012f8:	f7ff faca 	bl	8000890 <HAL_GetTick>
 80012fc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fac6 	bl	8000890 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b11      	cmp	r3, #17
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e242      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ef      	bne.n	8001300 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001320:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001326:	f023 0210 	bic.w	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	493a      	ldr	r1, [pc, #232]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001330:	4313      	orrs	r3, r2
 8001332:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001336:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800133c:	4a36      	ldr	r2, [pc, #216]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001346:	f7ff faa3 	bl	8000890 <HAL_GetTick>
 800134a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134e:	f7ff fa9f 	bl	8000890 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b11      	cmp	r3, #17
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e21b      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001360:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0ef      	beq.n	800134e <HAL_RCC_OscConfig+0x476>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fa86 	bl	8000890 <HAL_GetTick>
 8001384:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fa82 	bl	8000890 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b11      	cmp	r3, #17
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1fe      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 800139c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ef      	bne.n	8001388 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80c1 	beq.w	8001538 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10e      	bne.n	80013e6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6593      	str	r3, [r2, #88]	; 0x58
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_RCC_OscConfig+0x540>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013e0:	2301      	movs	r3, #1
 80013e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_RCC_OscConfig+0x544>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_RCC_OscConfig+0x544>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a09      	ldr	r2, [pc, #36]	; (800141c <HAL_RCC_OscConfig+0x544>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fa47 	bl	8000890 <HAL_GetTick>
 8001402:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	e00c      	b.n	8001420 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fa43 	bl	8000890 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d905      	bls.n	8001420 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1bf      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001420:	4bb1      	ldr	r3, [pc, #708]	; (80016e8 <HAL_RCC_OscConfig+0x810>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0ec      	beq.n	8001406 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02c      	beq.n	8001492 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001438:	4bac      	ldr	r3, [pc, #688]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	49a8      	ldr	r1, [pc, #672]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800144c:	4313      	orrs	r3, r2
 800144e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d010      	beq.n	8001480 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800145e:	4ba3      	ldr	r3, [pc, #652]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001464:	4aa1      	ldr	r2, [pc, #644]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001474:	4a9d      	ldr	r2, [pc, #628]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800147e:	e018      	b.n	80014b2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001480:	4b9a      	ldr	r3, [pc, #616]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	4a99      	ldr	r2, [pc, #612]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001490:	e00f      	b.n	80014b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001492:	4b96      	ldr	r3, [pc, #600]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001498:	4a94      	ldr	r2, [pc, #592]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80014a2:	4b92      	ldr	r3, [pc, #584]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80014a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a8:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d016      	beq.n	80014e8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9e9 	bl	8000890 <HAL_GetTick>
 80014be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c2:	f7ff f9e5 	bl	8000890 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e15f      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d8:	4b84      	ldr	r3, [pc, #528]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ed      	beq.n	80014c2 <HAL_RCC_OscConfig+0x5ea>
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff f9d2 	bl	8000890 <HAL_GetTick>
 80014ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff f9ce 	bl	8000890 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e148      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001506:	4b79      	ldr	r3, [pc, #484]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ed      	bne.n	80014f0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001514:	4b75      	ldr	r3, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a74      	ldr	r2, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800151c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4b6f      	ldr	r3, [pc, #444]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0320 	and.w	r3, r3, #32
 8001540:	2b00      	cmp	r3, #0
 8001542:	d03c      	beq.n	80015be <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	2b00      	cmp	r3, #0
 800154a:	d01c      	beq.n	8001586 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800154c:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800154e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001552:	4a66      	ldr	r2, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff f998 	bl	8000890 <HAL_GetTick>
 8001560:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001564:	f7ff f994 	bl	8000890 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e110      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001576:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ef      	beq.n	8001564 <HAL_RCC_OscConfig+0x68c>
 8001584:	e01b      	b.n	80015be <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001586:	4b59      	ldr	r3, [pc, #356]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800158c:	4a57      	ldr	r2, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001596:	f7ff f97b 	bl	8000890 <HAL_GetTick>
 800159a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800159e:	f7ff f977 	bl	8000890 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0f3      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015b0:	4b4e      	ldr	r3, [pc, #312]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80015b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ef      	bne.n	800159e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80e7 	beq.w	8001796 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	f040 80b7 	bne.w	8001740 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d124      	bne.n	8001630 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	3b01      	subs	r3, #1
 80015f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d113      	bne.n	8001630 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d109      	bne.n	8001630 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d061      	beq.n	80016f4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d056      	beq.n	80016e4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800163c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001640:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001642:	f7ff f925 	bl	8000890 <HAL_GetTick>
 8001646:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff f921 	bl	8000890 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e09d      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_OscConfig+0x818>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001678:	3a01      	subs	r2, #1
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	4311      	orrs	r1, r2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001682:	0212      	lsls	r2, r2, #8
 8001684:	4311      	orrs	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800168a:	0852      	lsrs	r2, r2, #1
 800168c:	3a01      	subs	r2, #1
 800168e:	0552      	lsls	r2, r2, #21
 8001690:	4311      	orrs	r1, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001696:	0852      	lsrs	r2, r2, #1
 8001698:	3a01      	subs	r2, #1
 800169a:	0652      	lsls	r2, r2, #25
 800169c:	430a      	orrs	r2, r1
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016bc:	f7ff f8e8 	bl	8000890 <HAL_GetTick>
 80016c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f8e4 	bl	8000890 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e060      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d6:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_RCC_OscConfig+0x814>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e2:	e058      	b.n	8001796 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e057      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
 80016e8:	40007000 	.word	0x40007000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d14a      	bne.n	8001796 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001718:	f7ff f8ba 	bl	8000890 <HAL_GetTick>
 800171c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff f8b6 	bl	8000890 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e032      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x848>
 800173e:	e02a      	b.n	8001796 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d025      	beq.n	8001792 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 800174c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001750:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001758:	f023 0303 	bic.w	r3, r3, #3
 800175c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001764:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001768:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f891 	bl	8000890 <HAL_GetTick>
 800176e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff f88d 	bl	8000890 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_RCC_OscConfig+0x8c8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x89a>
 8001790:	e001      	b.n	8001796 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3728      	adds	r7, #40	; 0x28
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0c8      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4961      	ldr	r1, [pc, #388]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b0      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d04c      	beq.n	800188e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d107      	bne.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fc:	4b56      	ldr	r3, [pc, #344]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d121      	bne.n	800184c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e09e      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d107      	bne.n	8001824 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d115      	bne.n	800184c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e092      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182c:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e086      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e07e      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800184c:	4b42      	ldr	r3, [pc, #264]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 0203 	bic.w	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	493f      	ldr	r1, [pc, #252]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185e:	f7ff f817 	bl	8000890 <HAL_GetTick>
 8001862:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001864:	e00a      	b.n	800187c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001866:	f7ff f813 	bl	8000890 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e066      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 020c 	and.w	r2, r3, #12
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	429a      	cmp	r2, r3
 800188c:	d1eb      	bne.n	8001866 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	492c      	ldr	r1, [pc, #176]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d210      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 0207 	bic.w	r2, r3, #7
 80018c2:	4924      	ldr	r1, [pc, #144]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_ClockConfig+0x1b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e036      	b.n	800194a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4918      	ldr	r1, [pc, #96]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4910      	ldr	r1, [pc, #64]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191a:	f000 f825 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 800191e:	4601      	mov	r1, r0
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_ClockConfig+0x1b4>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa21 f303 	lsr.w	r3, r1, r3
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe ff56 	bl	80007f0 <HAL_InitTick>
 8001944:	4603      	mov	r3, r0
 8001946:	72fb      	strb	r3, [r7, #11]

  return status;
 8001948:	7afb      	ldrb	r3, [r7, #11]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40022000 	.word	0x40022000
 8001958:	40021000 	.word	0x40021000
 800195c:	08002e28 	.word	0x08002e28
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d121      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d11e      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019a8:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e005      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019c4:	4a2a      	ldr	r2, [pc, #168]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019e0:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	e004      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x110>)
 80019ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d133      	bne.n	8001a5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d002      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xa4>
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_GetSysClockFreq+0xaa>
 8001a0a:	e005      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a0e:	617b      	str	r3, [r7, #20]
      break;
 8001a10:	e005      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a14:	617b      	str	r3, [r7, #20]
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	617b      	str	r3, [r7, #20]
      break;
 8001a1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	3301      	adds	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	fb02 f203 	mul.w	r2, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0e5b      	lsrs	r3, r3, #25
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3724      	adds	r7, #36	; 0x24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08002e38 	.word	0x08002e38
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	007a1200 	.word	0x007a1200

08001a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a94:	f7ff f9bc 	bl	8000e10 <HAL_PWREx_GetVoltageRange>
 8001a98:	6178      	str	r0, [r7, #20]
 8001a9a:	e014      	b.n	8001ac6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ab4:	f7ff f9ac 	bl	8000e10 <HAL_PWREx_GetVoltageRange>
 8001ab8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001acc:	d10b      	bne.n	8001ae6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b80      	cmp	r3, #128	; 0x80
 8001ad2:	d919      	bls.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ad8:	d902      	bls.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ada:	2302      	movs	r3, #2
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e013      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	e010      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b80      	cmp	r3, #128	; 0x80
 8001aea:	d902      	bls.n	8001af2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aec:	2303      	movs	r3, #3
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	e00a      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d102      	bne.n	8001afe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001af8:	2302      	movs	r3, #2
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e004      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b70      	cmp	r3, #112	; 0x70
 8001b02:	d101      	bne.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 0207 	bic.w	r2, r3, #7
 8001b10:	4909      	ldr	r1, [pc, #36]	; (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40022000 	.word	0x40022000

08001b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e049      	b.n	8001be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fd70 	bl	8000648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 fc7e 	bl	800247c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e03b      	b.n	8001c7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d009      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x4e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d004      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x4e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <HAL_TIM_Base_Start_IT+0xa0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d115      	bne.n	8001c66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_TIM_Base_Start_IT+0xa4>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d015      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x8c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d011      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c64:	e008      	b.n	8001c78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e000      	b.n	8001c7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012c00 	.word	0x40012c00
 8001c8c:	40014000 	.word	0x40014000
 8001c90:	00010007 	.word	0x00010007

08001c94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e049      	b.n	8001d3a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f841 	bl	8001d42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 fbd2 	bl	800247c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_TIM_OC_Start_IT+0x24>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e03c      	b.n	8001df6 <HAL_TIM_OC_Start_IT+0x9e>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d109      	bne.n	8001d96 <HAL_TIM_OC_Start_IT+0x3e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	e02f      	b.n	8001df6 <HAL_TIM_OC_Start_IT+0x9e>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d109      	bne.n	8001db0 <HAL_TIM_OC_Start_IT+0x58>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e022      	b.n	8001df6 <HAL_TIM_OC_Start_IT+0x9e>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d109      	bne.n	8001dca <HAL_TIM_OC_Start_IT+0x72>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e015      	b.n	8001df6 <HAL_TIM_OC_Start_IT+0x9e>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d109      	bne.n	8001de4 <HAL_TIM_OC_Start_IT+0x8c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e008      	b.n	8001df6 <HAL_TIM_OC_Start_IT+0x9e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0c4      	b.n	8001f88 <HAL_TIM_OC_Start_IT+0x230>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_OC_Start_IT+0xb6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e0c:	e023      	b.n	8001e56 <HAL_TIM_OC_Start_IT+0xfe>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_OC_Start_IT+0xc6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1c:	e01b      	b.n	8001e56 <HAL_TIM_OC_Start_IT+0xfe>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_OC_Start_IT+0xd6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	e013      	b.n	8001e56 <HAL_TIM_OC_Start_IT+0xfe>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_OC_Start_IT+0xe6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e3c:	e00b      	b.n	8001e56 <HAL_TIM_OC_Start_IT+0xfe>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_OC_Start_IT+0xf6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e4c:	e003      	b.n	8001e56 <HAL_TIM_OC_Start_IT+0xfe>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	d841      	bhi.n	8001ee0 <HAL_TIM_OC_Start_IT+0x188>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_TIM_OC_Start_IT+0x10c>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e99 	.word	0x08001e99
 8001e68:	08001ee1 	.word	0x08001ee1
 8001e6c:	08001ee1 	.word	0x08001ee1
 8001e70:	08001ee1 	.word	0x08001ee1
 8001e74:	08001eab 	.word	0x08001eab
 8001e78:	08001ee1 	.word	0x08001ee1
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	08001ee1 	.word	0x08001ee1
 8001e84:	08001ebd 	.word	0x08001ebd
 8001e88:	08001ee1 	.word	0x08001ee1
 8001e8c:	08001ee1 	.word	0x08001ee1
 8001e90:	08001ee1 	.word	0x08001ee1
 8001e94:	08001ecf 	.word	0x08001ecf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0202 	orr.w	r2, r2, #2
 8001ea6:	60da      	str	r2, [r3, #12]
      break;
 8001ea8:	e01b      	b.n	8001ee2 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0204 	orr.w	r2, r2, #4
 8001eb8:	60da      	str	r2, [r3, #12]
      break;
 8001eba:	e012      	b.n	8001ee2 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0208 	orr.w	r2, r2, #8
 8001eca:	60da      	str	r2, [r3, #12]
      break;
 8001ecc:	e009      	b.n	8001ee2 <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0210 	orr.w	r2, r2, #16
 8001edc:	60da      	str	r2, [r3, #12]
      break;
 8001ede:	e000      	b.n	8001ee2 <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8001ee0:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	6839      	ldr	r1, [r7, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fe42 	bl	8002b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_TIM_OC_Start_IT+0x238>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_TIM_OC_Start_IT+0x1b6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <HAL_TIM_OC_Start_IT+0x23c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_TIM_OC_Start_IT+0x1b6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_TIM_OC_Start_IT+0x240>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_TIM_OC_Start_IT+0x1ba>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_TIM_OC_Start_IT+0x1bc>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <HAL_TIM_OC_Start_IT+0x1d0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_TIM_OC_Start_IT+0x238>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_TIM_OC_Start_IT+0x1ee>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d004      	beq.n	8001f46 <HAL_TIM_OC_Start_IT+0x1ee>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_OC_Start_IT+0x23c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d115      	bne.n	8001f72 <HAL_TIM_OC_Start_IT+0x21a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_TIM_OC_Start_IT+0x244>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b06      	cmp	r3, #6
 8001f56:	d015      	beq.n	8001f84 <HAL_TIM_OC_Start_IT+0x22c>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d011      	beq.n	8001f84 <HAL_TIM_OC_Start_IT+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f70:	e008      	b.n	8001f84 <HAL_TIM_OC_Start_IT+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e000      	b.n	8001f86 <HAL_TIM_OC_Start_IT+0x22e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	00010007 	.word	0x00010007

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa2b 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe f9c6 	bl	800037c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa2e 	bl	8002452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fa01 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe f99c 	bl	800037c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fa04 	bl	8002452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f9d7 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe f972 	bl	800037c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9da 	bl	8002452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f9ad 	bl	800243e <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe f948 	bl	800037c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f9b0 	bl	8002452 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe f914 	bl	800034c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fe20 	bl	8002d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d10e      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fe13 	bl	8002da4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f95e 	bl	8002466 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0220 	mvn.w	r2, #32
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fdd3 	bl	8002d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_TIM_OC_ConfigChannel+0x1a>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e064      	b.n	80022c4 <HAL_TIM_OC_ConfigChannel+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b14      	cmp	r3, #20
 8002206:	d857      	bhi.n	80022b8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8002208:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <HAL_TIM_OC_ConfigChannel+0x30>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002265 	.word	0x08002265
 8002214:	080022b9 	.word	0x080022b9
 8002218:	080022b9 	.word	0x080022b9
 800221c:	080022b9 	.word	0x080022b9
 8002220:	08002273 	.word	0x08002273
 8002224:	080022b9 	.word	0x080022b9
 8002228:	080022b9 	.word	0x080022b9
 800222c:	080022b9 	.word	0x080022b9
 8002230:	08002281 	.word	0x08002281
 8002234:	080022b9 	.word	0x080022b9
 8002238:	080022b9 	.word	0x080022b9
 800223c:	080022b9 	.word	0x080022b9
 8002240:	0800228f 	.word	0x0800228f
 8002244:	080022b9 	.word	0x080022b9
 8002248:	080022b9 	.word	0x080022b9
 800224c:	080022b9 	.word	0x080022b9
 8002250:	0800229d 	.word	0x0800229d
 8002254:	080022b9 	.word	0x080022b9
 8002258:	080022b9 	.word	0x080022b9
 800225c:	080022b9 	.word	0x080022b9
 8002260:	080022ab 	.word	0x080022ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f96a 	bl	8002544 <TIM_OC1_SetConfig>
      break;
 8002270:	e023      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f9df 	bl	800263c <TIM_OC2_SetConfig>
      break;
 800227e:	e01c      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa52 	bl	8002730 <TIM_OC3_SetConfig>
      break;
 800228c:	e015      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fac3 	bl	8002820 <TIM_OC4_SetConfig>
      break;
 800229a:	e00e      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fb1a 	bl	80028dc <TIM_OC5_SetConfig>
      break;
 80022a8:	e007      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb6b 	bl	800298c <TIM_OC6_SetConfig>
      break;
 80022b6:	e000      	b.n	80022ba <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80022b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_TIM_ConfigClockSource+0x18>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e0a8      	b.n	8002436 <HAL_TIM_ConfigClockSource+0x16a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800230e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d067      	beq.n	80023f0 <HAL_TIM_ConfigClockSource+0x124>
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d80b      	bhi.n	800233c <HAL_TIM_ConfigClockSource+0x70>
 8002324:	2b10      	cmp	r3, #16
 8002326:	d073      	beq.n	8002410 <HAL_TIM_ConfigClockSource+0x144>
 8002328:	2b10      	cmp	r3, #16
 800232a:	d802      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x66>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d06f      	beq.n	8002410 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002330:	e078      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002332:	2b20      	cmp	r3, #32
 8002334:	d06c      	beq.n	8002410 <HAL_TIM_ConfigClockSource+0x144>
 8002336:	2b30      	cmp	r3, #48	; 0x30
 8002338:	d06a      	beq.n	8002410 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800233a:	e073      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800233c:	2b70      	cmp	r3, #112	; 0x70
 800233e:	d00d      	beq.n	800235c <HAL_TIM_ConfigClockSource+0x90>
 8002340:	2b70      	cmp	r3, #112	; 0x70
 8002342:	d804      	bhi.n	800234e <HAL_TIM_ConfigClockSource+0x82>
 8002344:	2b50      	cmp	r3, #80	; 0x50
 8002346:	d033      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0xe4>
 8002348:	2b60      	cmp	r3, #96	; 0x60
 800234a:	d041      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800234c:	e06a      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002352:	d066      	beq.n	8002422 <HAL_TIM_ConfigClockSource+0x156>
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d017      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800235a:	e063      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f000 fbe2 	bl	8002b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800237e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	609a      	str	r2, [r3, #8]
      break;
 8002388:	e04c      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f000 fbcb 	bl	8002b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ac:	609a      	str	r2, [r3, #8]
      break;
 80023ae:	e039      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	461a      	mov	r2, r3
 80023be:	f000 fb3f 	bl	8002a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2150      	movs	r1, #80	; 0x50
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fb98 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 80023ce:	e029      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	461a      	mov	r2, r3
 80023de:	f000 fb5e 	bl	8002a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2160      	movs	r1, #96	; 0x60
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fb88 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 80023ee:	e019      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	461a      	mov	r2, r3
 80023fe:	f000 fb1f 	bl	8002a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fb78 	bl	8002afe <TIM_ITRx_SetConfig>
      break;
 800240e:	e009      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 fb6f 	bl	8002afe <TIM_ITRx_SetConfig>
        break;
 8002420:	e000      	b.n	8002424 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <TIM_Base_SetConfig+0xbc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d003      	beq.n	800249c <TIM_Base_SetConfig+0x20>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d108      	bne.n	80024ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <TIM_Base_SetConfig+0xbc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0x52>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0x52>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <TIM_Base_SetConfig+0xc0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0x52>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <TIM_Base_SetConfig+0xc4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d108      	bne.n	80024e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <TIM_Base_SetConfig+0xbc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <TIM_Base_SetConfig+0xa0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a0b      	ldr	r2, [pc, #44]	; (800253c <TIM_Base_SetConfig+0xc0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d003      	beq.n	800251c <TIM_Base_SetConfig+0xa0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <TIM_Base_SetConfig+0xc4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d103      	bne.n	8002524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	615a      	str	r2, [r3, #20]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00
 800253c:	40014000 	.word	0x40014000
 8002540:	40014400 	.word	0x40014400

08002544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	f023 0201 	bic.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f023 0302 	bic.w	r3, r3, #2
 8002590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <TIM_OC1_SetConfig+0xec>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <TIM_OC1_SetConfig+0x70>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a23      	ldr	r2, [pc, #140]	; (8002634 <TIM_OC1_SetConfig+0xf0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <TIM_OC1_SetConfig+0x70>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <TIM_OC1_SetConfig+0xf4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10c      	bne.n	80025ce <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0308 	bic.w	r3, r3, #8
 80025ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <TIM_OC1_SetConfig+0xec>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <TIM_OC1_SetConfig+0xa2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a16      	ldr	r2, [pc, #88]	; (8002634 <TIM_OC1_SetConfig+0xf0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <TIM_OC1_SetConfig+0xa2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a15      	ldr	r2, [pc, #84]	; (8002638 <TIM_OC1_SetConfig+0xf4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40014000 	.word	0x40014000
 8002638:	40014400 	.word	0x40014400

0800263c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f023 0210 	bic.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800266e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0320 	bic.w	r3, r3, #32
 800268a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <TIM_OC2_SetConfig+0xe8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10d      	bne.n	80026bc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <TIM_OC2_SetConfig+0xe8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_OC2_SetConfig+0x98>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a18      	ldr	r2, [pc, #96]	; (8002728 <TIM_OC2_SetConfig+0xec>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_OC2_SetConfig+0x98>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a17      	ldr	r2, [pc, #92]	; (800272c <TIM_OC2_SetConfig+0xf0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d113      	bne.n	80026fc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	621a      	str	r2, [r3, #32]
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400

08002730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0303 	bic.w	r3, r3, #3
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800277c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <TIM_OC3_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10d      	bne.n	80027ae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002798:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <TIM_OC3_SetConfig+0xe4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <TIM_OC3_SetConfig+0x96>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <TIM_OC3_SetConfig+0xe8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC3_SetConfig+0x96>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a16      	ldr	r2, [pc, #88]	; (800281c <TIM_OC3_SetConfig+0xec>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d113      	bne.n	80027ee <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	621a      	str	r2, [r3, #32]
}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40012c00 	.word	0x40012c00
 8002818:	40014000 	.word	0x40014000
 800281c:	40014400 	.word	0x40014400

08002820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	031b      	lsls	r3, r3, #12
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <TIM_OC4_SetConfig+0xb0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_OC4_SetConfig+0x74>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <TIM_OC4_SetConfig+0xb4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_OC4_SetConfig+0x74>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <TIM_OC4_SetConfig+0xb8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d109      	bne.n	80028a8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400

080028dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002920:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a13      	ldr	r2, [pc, #76]	; (8002980 <TIM_OC5_SetConfig+0xa4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_OC5_SetConfig+0x6a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <TIM_OC5_SetConfig+0xa8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_OC5_SetConfig+0x6a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a11      	ldr	r2, [pc, #68]	; (8002988 <TIM_OC5_SetConfig+0xac>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d109      	bne.n	800295a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400

0800298c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	051b      	lsls	r3, r3, #20
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <TIM_OC6_SetConfig+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <TIM_OC6_SetConfig+0x6c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a13      	ldr	r2, [pc, #76]	; (8002a38 <TIM_OC6_SetConfig+0xac>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <TIM_OC6_SetConfig+0x6c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <TIM_OC6_SetConfig+0xb0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	029b      	lsls	r3, r3, #10
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40014400 	.word	0x40014400

08002a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f023 0201 	bic.w	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 030a 	bic.w	r3, r3, #10
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b087      	sub	sp, #28
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0210 	bic.w	r2, r3, #16
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	031b      	lsls	r3, r3, #12
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	621a      	str	r2, [r3, #32]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f043 0307 	orr.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	609a      	str	r2, [r3, #8]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	021a      	lsls	r2, r3, #8
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	609a      	str	r2, [r3, #8]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2201      	movs	r2, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a1a      	ldr	r2, [r3, #32]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	621a      	str	r2, [r3, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e04f      	b.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d004      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40014000 	.word	0x40014000

08002c8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e060      	b.n	8002d6a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d115      	bne.n	8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40012c00 	.word	0x40012c00

08002d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <__libc_init_array>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	4e0d      	ldr	r6, [pc, #52]	; (8002df0 <__libc_init_array+0x38>)
 8002dbc:	4c0d      	ldr	r4, [pc, #52]	; (8002df4 <__libc_init_array+0x3c>)
 8002dbe:	1ba4      	subs	r4, r4, r6
 8002dc0:	10a4      	asrs	r4, r4, #2
 8002dc2:	2500      	movs	r5, #0
 8002dc4:	42a5      	cmp	r5, r4
 8002dc6:	d109      	bne.n	8002ddc <__libc_init_array+0x24>
 8002dc8:	4e0b      	ldr	r6, [pc, #44]	; (8002df8 <__libc_init_array+0x40>)
 8002dca:	4c0c      	ldr	r4, [pc, #48]	; (8002dfc <__libc_init_array+0x44>)
 8002dcc:	f000 f820 	bl	8002e10 <_init>
 8002dd0:	1ba4      	subs	r4, r4, r6
 8002dd2:	10a4      	asrs	r4, r4, #2
 8002dd4:	2500      	movs	r5, #0
 8002dd6:	42a5      	cmp	r5, r4
 8002dd8:	d105      	bne.n	8002de6 <__libc_init_array+0x2e>
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002de0:	4798      	blx	r3
 8002de2:	3501      	adds	r5, #1
 8002de4:	e7ee      	b.n	8002dc4 <__libc_init_array+0xc>
 8002de6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dea:	4798      	blx	r3
 8002dec:	3501      	adds	r5, #1
 8002dee:	e7f2      	b.n	8002dd6 <__libc_init_array+0x1e>
 8002df0:	08002e68 	.word	0x08002e68
 8002df4:	08002e68 	.word	0x08002e68
 8002df8:	08002e68 	.word	0x08002e68
 8002dfc:	08002e6c 	.word	0x08002e6c

08002e00 <memset>:
 8002e00:	4402      	add	r2, r0
 8002e02:	4603      	mov	r3, r0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d100      	bne.n	8002e0a <memset+0xa>
 8002e08:	4770      	bx	lr
 8002e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e0e:	e7f9      	b.n	8002e04 <memset+0x4>

08002e10 <_init>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr

08002e1c <_fini>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr
