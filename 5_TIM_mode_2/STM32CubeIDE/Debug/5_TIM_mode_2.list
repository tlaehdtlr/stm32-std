
5_TIM_mode_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b08  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c94  08002c94  00012c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd4  08002cd4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd4  08002cd4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd4  08002cd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002ce8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002ce8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b115  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001782  00000000  00000000  0002b151  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  0002d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000191d6  00000000  00000000  0002de20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000096c9  00000000  00000000  00046ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a13c2  00000000  00000000  000506bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000f1afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002c7c 	.word	0x08002c7c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002c7c 	.word	0x08002c7c

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001e0:	4b11      	ldr	r3, [pc, #68]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e4:	4a10      	ldr	r2, [pc, #64]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <MX_GPIO_Init+0x5c>)
 80001ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f0:	f003 0302 	and.w	r3, r3, #2
 80001f4:	603b      	str	r3, [r7, #0]
 80001f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fe:	480b      	ldr	r0, [pc, #44]	; (800022c <MX_GPIO_Init+0x60>)
 8000200:	f000 fd24 	bl	8000c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020a:	2301      	movs	r3, #1
 800020c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000212:	2300      	movs	r3, #0
 8000214:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4619      	mov	r1, r3
 800021a:	4804      	ldr	r0, [pc, #16]	; (800022c <MX_GPIO_Init+0x60>)
 800021c:	f000 fba4 	bl	8000968 <HAL_GPIO_Init>

}
 8000220:	bf00      	nop
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000
 800022c:	48000400 	.word	0x48000400

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fa12 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f80e 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f7ff ffc6 	bl	80001cc <MX_GPIO_Init>
  MX_TIM15_Init();
 8000240:	f000 f8e6 	bl	8000410 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15);
 8000244:	4803      	ldr	r0, [pc, #12]	; (8000254 <main+0x24>)
 8000246:	f001 fc07 	bl	8001a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_1);
 800024a:	2100      	movs	r1, #0
 800024c:	4801      	ldr	r0, [pc, #4]	; (8000254 <main+0x24>)
 800024e:	f001 fcb9 	bl	8001bc4 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000252:	e7fe      	b.n	8000252 <main+0x22>
 8000254:	20000028 	.word	0x20000028

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b096      	sub	sp, #88	; 0x58
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	2244      	movs	r2, #68	; 0x44
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fd00 	bl	8002c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	463b      	mov	r3, r7
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800027a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027e:	f000 fd0b 	bl	8000c98 <HAL_PWREx_ControlVoltageScaling>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000288:	f000 f866 	bl	8000358 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800028c:	2310      	movs	r3, #16
 800028e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000298:	2360      	movs	r3, #96	; 0x60
 800029a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002a0:	2301      	movs	r3, #1
 80002a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a8:	2328      	movs	r3, #40	; 0x28
 80002aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b0:	2302      	movs	r3, #2
 80002b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fd43 	bl	8000d44 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002c4:	f000 f848 	bl	8000358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2303      	movs	r3, #3
 80002ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002dc:	463b      	mov	r3, r7
 80002de:	2104      	movs	r1, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 f995 	bl	8001610 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002ec:	f000 f834 	bl	8000358 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3758      	adds	r7, #88	; 0x58
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <HAL_TIM_PeriodElapsedCallback>:
  }
}
#else

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim15.Instance)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	429a      	cmp	r2, r3
 800030a:	d105      	bne.n	8000318 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000312:	4804      	ldr	r0, [pc, #16]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000314:	f000 fc9a 	bl	8000c4c <HAL_GPIO_WritePin>
  }
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000028 	.word	0x20000028
 8000324:	48000400 	.word	0x48000400

08000328 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim15.Instance)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	429a      	cmp	r2, r3
 800033a:	d105      	bne.n	8000348 <HAL_TIM_OC_DelayElapsedCallback+0x20>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
 8000344:	f000 fc82 	bl	8000c4c <HAL_GPIO_WritePin>
  }
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000028 	.word	0x20000028
 8000354:	48000400 	.word	0x48000400

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035e:	e7fe      	b.n	800035e <Error_Handler+0x6>

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x44>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6613      	str	r3, [r2, #96]	; 0x60
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x44>)
 8000374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <HAL_MspInit+0x44>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000388:	6593      	str	r3, [r2, #88]	; 0x58
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <HAL_MspInit+0x44>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <NMI_Handler+0x4>

080003ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <HardFault_Handler+0x4>

080003b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <MemManage_Handler+0x4>

080003ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <BusFault_Handler+0x4>

080003c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <UsageFault_Handler+0x4>

080003c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003f4:	f000 f986 	bl	8000704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}

080003fc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000400:	4802      	ldr	r0, [pc, #8]	; (800040c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000402:	f001 fd03 	bl	8001e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000028 	.word	0x20000028

08000410 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b09a      	sub	sp, #104	; 0x68
 8000414:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	222c      	movs	r2, #44	; 0x2c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fc0e 	bl	8002c6c <memset>

  htim15.Instance = TIM15;
 8000450:	4b3d      	ldr	r3, [pc, #244]	; (8000548 <MX_TIM15_Init+0x138>)
 8000452:	4a3e      	ldr	r2, [pc, #248]	; (800054c <MX_TIM15_Init+0x13c>)
 8000454:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000-1;
 8000456:	4b3c      	ldr	r3, [pc, #240]	; (8000548 <MX_TIM15_Init+0x138>)
 8000458:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800045c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045e:	4b3a      	ldr	r3, [pc, #232]	; (8000548 <MX_TIM15_Init+0x138>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 50000-1;
 8000464:	4b38      	ldr	r3, [pc, #224]	; (8000548 <MX_TIM15_Init+0x138>)
 8000466:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800046a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b36      	ldr	r3, [pc, #216]	; (8000548 <MX_TIM15_Init+0x138>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000472:	4b35      	ldr	r3, [pc, #212]	; (8000548 <MX_TIM15_Init+0x138>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000478:	4b33      	ldr	r3, [pc, #204]	; (8000548 <MX_TIM15_Init+0x138>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800047e:	4832      	ldr	r0, [pc, #200]	; (8000548 <MX_TIM15_Init+0x138>)
 8000480:	f001 fa92 	bl	80019a8 <HAL_TIM_Base_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800048a:	f7ff ff65 	bl	8000358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000492:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000494:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000498:	4619      	mov	r1, r3
 800049a:	482b      	ldr	r0, [pc, #172]	; (8000548 <MX_TIM15_Init+0x138>)
 800049c:	f001 fe4c 	bl	8002138 <HAL_TIM_ConfigClockSource>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80004a6:	f7ff ff57 	bl	8000358 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80004aa:	4827      	ldr	r0, [pc, #156]	; (8000548 <MX_TIM15_Init+0x138>)
 80004ac:	f001 fb28 	bl	8001b00 <HAL_TIM_OC_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80004b6:	f7ff ff4f 	bl	8000358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ba:	2300      	movs	r3, #0
 80004bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80004c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c6:	4619      	mov	r1, r3
 80004c8:	481f      	ldr	r0, [pc, #124]	; (8000548 <MX_TIM15_Init+0x138>)
 80004ca:	f002 faaf 	bl	8002a2c <HAL_TIMEx_MasterConfigSynchronization>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80004d4:	f7ff ff40 	bl	8000358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004d8:	2300      	movs	r3, #0
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 25000;
 80004dc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80004e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e2:	2300      	movs	r3, #0
 80004e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004e6:	2300      	movs	r3, #0
 80004e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004fa:	2200      	movs	r2, #0
 80004fc:	4619      	mov	r1, r3
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_TIM15_Init+0x138>)
 8000500:	f001 fda4 	bl	800204c <HAL_TIM_OC_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM15_Init+0xfe>
  {
    Error_Handler();
 800050a:	f7ff ff25 	bl	8000358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000526:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <MX_TIM15_Init+0x138>)
 8000532:	f002 fae1 	bl	8002af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 800053c:	f7ff ff0c 	bl	8000358 <Error_Handler>
  }

}
 8000540:	bf00      	nop
 8000542:	3768      	adds	r7, #104	; 0x68
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000028 	.word	0x20000028
 800054c:	40014000 	.word	0x40014000

08000550 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <HAL_TIM_Base_MspInit+0x44>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d113      	bne.n	800058a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <HAL_TIM_Base_MspInit+0x48>)
 8000564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000566:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <HAL_TIM_Base_MspInit+0x48>)
 8000568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800056c:	6613      	str	r3, [r2, #96]	; 0x60
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_TIM_Base_MspInit+0x48>)
 8000570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2018      	movs	r0, #24
 8000580:	f000 f9bb 	bl	80008fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000584:	2018      	movs	r0, #24
 8000586:	f000 f9d4 	bl	8000932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40014000 	.word	0x40014000
 8000598:	40021000 	.word	0x40021000

0800059c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a0:	f000 f826 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005a6:	e003      	b.n	80005b0 <LoopCopyDataInit>

080005a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005ae:	3104      	adds	r1, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005b8:	d3f6      	bcc.n	80005a8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005bc:	e002      	b.n	80005c4 <LoopFillZerobss>

080005be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005c0:	f842 3b04 	str.w	r3, [r2], #4

080005c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <LoopForever+0x16>)
	cmp	r2, r3
 80005c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005c8:	d3f9      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ca:	f002 fb2b 	bl	8002c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ce:	f7ff fe2f 	bl	8000230 <main>

080005d2 <LoopForever>:

LoopForever:
    b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80005d8:	08002cdc 	.word	0x08002cdc
	ldr	r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005e0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005e4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005e8:	20000078 	.word	0x20000078

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <SystemInit+0x64>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <SystemInit+0x64>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <SystemInit+0x68>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <SystemInit+0x68>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <SystemInit+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <SystemInit+0x68>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <SystemInit+0x68>)
 800061c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000620:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000624:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <SystemInit+0x68>)
 8000628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800062c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <SystemInit+0x68>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <SystemInit+0x68>)
 8000634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000638:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <SystemInit+0x68>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <SystemInit+0x64>)
 8000642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000646:	609a      	str	r2, [r3, #8]
#endif
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 f93c 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f80d 	bl	800068c <HAL_InitTick>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	e001      	b.n	8000682 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800067e:	f7ff fe6f 	bl	8000360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000682:	79fb      	ldrb	r3, [r7, #7]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_InitTick+0x6c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d023      	beq.n	80006e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_InitTick+0x70>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <HAL_InitTick+0x6c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f949 	bl	800094e <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10f      	bne.n	80006e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d809      	bhi.n	80006dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295
 80006d0:	f000 f913 	bl	80008fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d4:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_InitTick+0x74>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e007      	b.n	80006ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e004      	b.n	80006ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e001      	b.n	80006ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x20>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_IncTick+0x24>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_IncTick+0x24>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008
 8000728:	20000074 	.word	0x20000074

0800072c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return uwTick;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <HAL_GetTick+0x14>)
 8000732:	681b      	ldr	r3, [r3, #0]
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000074 	.word	0x20000074

08000744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800076c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <__NVIC_SetPriorityGrouping+0x44>)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	60d3      	str	r3, [r2, #12]
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	0a1b      	lsrs	r3, r3, #8
 8000796:	f003 0307 	and.w	r3, r3, #7
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	db0b      	blt.n	80007d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 021f 	and.w	r2, r3, #31
 80007c0:	4907      	ldr	r1, [pc, #28]	; (80007e0 <__NVIC_EnableIRQ+0x38>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	095b      	lsrs	r3, r3, #5
 80007c8:	2001      	movs	r0, #1
 80007ca:	fa00 f202 	lsl.w	r2, r0, r2
 80007ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db0a      	blt.n	800080e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <__NVIC_SetPriority+0x4c>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080c:	e00a      	b.n	8000824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <__NVIC_SetPriority+0x50>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	3b04      	subs	r3, #4
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	440b      	add	r3, r1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f1c3 0307 	rsb	r3, r3, #7
 8000852:	2b04      	cmp	r3, #4
 8000854:	bf28      	it	cs
 8000856:	2304      	movcs	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	2b06      	cmp	r3, #6
 8000860:	d902      	bls.n	8000868 <NVIC_EncodePriority+0x30>
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3b03      	subs	r3, #3
 8000866:	e000      	b.n	800086a <NVIC_EncodePriority+0x32>
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43da      	mvns	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	4313      	orrs	r3, r2
         );
}
 8000892:	4618      	mov	r0, r3
 8000894:	3724      	adds	r7, #36	; 0x24
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff8e 	bl	80007e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff29 	bl	8000744 <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff3e 	bl	800078c <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff8e 	bl	8000838 <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5d 	bl	80007e4 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff31 	bl	80007a8 <__NVIC_EnableIRQ>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffa2 	bl	80008a0 <SysTick_Config>
 800095c:	4603      	mov	r3, r0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e14e      	b.n	8000c16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b00      	cmp	r3, #0
 800098c:	f000 8140 	beq.w	8000c10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d00b      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a4:	2b11      	cmp	r3, #17
 80009a6:	d003      	beq.n	80009b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b12      	cmp	r3, #18
 80009ae:	d130      	bne.n	8000a12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	2203      	movs	r2, #3
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68da      	ldr	r2, [r3, #12]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009e6:	2201      	movs	r2, #1
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	091b      	lsrs	r3, r3, #4
 80009fc:	f003 0201 	and.w	r2, r3, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0xea>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d123      	bne.n	8000a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	08da      	lsrs	r2, r3, #3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3208      	adds	r2, #8
 8000a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	220f      	movs	r2, #15
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	691a      	ldr	r2, [r3, #16]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	08da      	lsrs	r2, r3, #3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3208      	adds	r2, #8
 8000a94:	6939      	ldr	r1, [r7, #16]
 8000a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0203 	and.w	r2, r3, #3
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 809a 	beq.w	8000c10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae0:	4a54      	ldr	r2, [pc, #336]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae8:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <HAL_GPIO_Init+0x2cc>)
 8000aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af4:	4a50      	ldr	r2, [pc, #320]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b1e:	d013      	beq.n	8000b48 <HAL_GPIO_Init+0x1e0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <HAL_GPIO_Init+0x2d4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1dc>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <HAL_GPIO_Init+0x2d8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1d8>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a44      	ldr	r2, [pc, #272]	; (8000c44 <HAL_GPIO_Init+0x2dc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1d4>
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e006      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	e004      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <HAL_GPIO_Init+0x1e2>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	697a      	ldr	r2, [r7, #20]
 8000b4c:	f002 0203 	and.w	r2, r2, #3
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	4093      	lsls	r3, r2
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b5a:	4937      	ldr	r1, [pc, #220]	; (8000c38 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b8c:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_GPIO_Init+0x2e0>)
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	3301      	adds	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f47f aea9 	bne.w	8000978 <HAL_GPIO_Init+0x10>
  }
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000800 	.word	0x48000800
 8000c44:	48000c00 	.word	0x48000c00
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c5c:	787b      	ldrb	r3, [r7, #1]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c68:	e002      	b.n	8000c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c6a:	887a      	ldrh	r2, [r7, #2]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40007000 	.word	0x40007000

08000c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca6:	d130      	bne.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cb4:	d038      	beq.n	8000d28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2232      	movs	r2, #50	; 0x32
 8000ccc:	fb02 f303 	mul.w	r3, r2, r3
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cdc:	e002      	b.n	8000ce4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf0:	d102      	bne.n	8000cf8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f2      	bne.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d04:	d110      	bne.n	8000d28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d06:	2303      	movs	r3, #3
 8000d08:	e00f      	b.n	8000d2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d16:	d007      	beq.n	8000d28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40007000 	.word	0x40007000
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	431bde83 	.word	0x431bde83

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f000 bc56 	b.w	8001604 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d58:	4ba1      	ldr	r3, [pc, #644]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d62:	4b9f      	ldr	r3, [pc, #636]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80e6 	beq.w	8000f46 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d007      	beq.n	8000d90 <HAL_RCC_OscConfig+0x4c>
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	2b0c      	cmp	r3, #12
 8000d84:	f040 808d 	bne.w	8000ea2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	f040 8089 	bne.w	8000ea2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d90:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_RCC_OscConfig+0x66>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f000 bc2d 	b.w	8001604 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dae:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x80>
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dc2:	e005      	b.n	8000dd0 <HAL_RCC_OscConfig+0x8c>
 8000dc4:	4b86      	ldr	r3, [pc, #536]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d224      	bcs.n	8000e1e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fd85 	bl	80018e8 <RCC_SetFlashLatencyFromMSIRange>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f000 bc0d 	b.w	8001604 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dea:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7c      	ldr	r2, [pc, #496]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b7a      	ldr	r3, [pc, #488]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4977      	ldr	r1, [pc, #476]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e08:	4b75      	ldr	r3, [pc, #468]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4972      	ldr	r1, [pc, #456]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	604b      	str	r3, [r1, #4]
 8000e1c:	e025      	b.n	8000e6a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e1e:	4b70      	ldr	r3, [pc, #448]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6f      	ldr	r2, [pc, #444]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b6d      	ldr	r3, [pc, #436]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e36:	496a      	ldr	r1, [pc, #424]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e3c:	4b68      	ldr	r3, [pc, #416]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4965      	ldr	r1, [pc, #404]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e50:	6a3b      	ldr	r3, [r7, #32]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d109      	bne.n	8000e6a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fd44 	bl	80018e8 <RCC_SetFlashLatencyFromMSIRange>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e3cc      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e6a:	f000 fcb3 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	4b5b      	ldr	r3, [pc, #364]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	4a5a      	ldr	r2, [pc, #360]	; (8000fe4 <HAL_RCC_OscConfig+0x2a0>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	fa21 f303 	lsr.w	r3, r1, r3
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <HAL_RCC_OscConfig+0x2a4>)
 8000e88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_RCC_OscConfig+0x2a8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fbfc 	bl	800068c <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d052      	beq.n	8000f44 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	e3b0      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d032      	beq.n	8000f10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000eaa:	4b4d      	ldr	r3, [pc, #308]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a4c      	ldr	r2, [pc, #304]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eb6:	f7ff fc39 	bl	800072c <HAL_GetTick>
 8000eba:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ebe:	f7ff fc35 	bl	800072c <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e399      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ed0:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000edc:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a3f      	ldr	r2, [pc, #252]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	493a      	ldr	r1, [pc, #232]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	4935      	ldr	r1, [pc, #212]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
 8000f0e:	e01a      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f16:	f023 0301 	bic.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc06 	bl	800072c <HAL_GetTick>
 8000f20:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc02 	bl	800072c <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e366      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0x1e0>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d073      	beq.n	800103a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_OscConfig+0x220>
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d10e      	bne.n	8000f7c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d10b      	bne.n	8000f7c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d063      	beq.n	8001038 <HAL_RCC_OscConfig+0x2f4>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d15f      	bne.n	8001038 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e343      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d106      	bne.n	8000f94 <HAL_RCC_OscConfig+0x250>
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e01d      	b.n	8000fd0 <HAL_RCC_OscConfig+0x28c>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x274>
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e00b      	b.n	8000fd0 <HAL_RCC_OscConfig+0x28c>
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <HAL_RCC_OscConfig+0x29c>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d01b      	beq.n	8001010 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fba8 	bl	800072c <HAL_GetTick>
 8000fdc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fde:	e010      	b.n	8001002 <HAL_RCC_OscConfig+0x2be>
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	08002c94 	.word	0x08002c94
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fb9c 	bl	800072c <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e300      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001002:	4ba0      	ldr	r3, [pc, #640]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0f0      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x2ac>
 800100e:	e014      	b.n	800103a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fb8c 	bl	800072c <HAL_GetTick>
 8001014:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fb88 	bl	800072c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e2ec      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800102a:	4b96      	ldr	r3, [pc, #600]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x2d4>
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	2b00      	cmp	r3, #0
 8001044:	d060      	beq.n	8001108 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d005      	beq.n	8001058 <HAL_RCC_OscConfig+0x314>
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	2b0c      	cmp	r3, #12
 8001050:	d119      	bne.n	8001086 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d116      	bne.n	8001086 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001058:	4b8a      	ldr	r3, [pc, #552]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_OscConfig+0x32c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e2c9      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b84      	ldr	r3, [pc, #528]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	061b      	lsls	r3, r3, #24
 800107e:	4981      	ldr	r1, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001084:	e040      	b.n	8001108 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d023      	beq.n	80010d6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108e:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7c      	ldr	r2, [pc, #496]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109a:	f7ff fb47 	bl	800072c <HAL_GetTick>
 800109e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a2:	f7ff fb43 	bl	800072c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e2a7      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010b4:	4b73      	ldr	r3, [pc, #460]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c0:	4b70      	ldr	r3, [pc, #448]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	061b      	lsls	r3, r3, #24
 80010ce:	496d      	ldr	r1, [pc, #436]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e018      	b.n	8001108 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010d6:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a6a      	ldr	r2, [pc, #424]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb23 	bl	800072c <HAL_GetTick>
 80010e6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fb1f 	bl	800072c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e283      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d07f      	beq.n	8001214 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05f      	beq.n	80011dc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800111c:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800111e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001122:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	429a      	cmp	r2, r3
 8001130:	d037      	beq.n	80011a2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e25c      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d01b      	beq.n	800118c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115a:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001164:	f7ff fae2 	bl	800072c <HAL_GetTick>
 8001168:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fade 	bl	800072c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b11      	cmp	r3, #17
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e242      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1ef      	bne.n	800116c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001192:	f023 0210 	bic.w	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	493a      	ldr	r1, [pc, #232]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800119c:	4313      	orrs	r3, r2
 800119e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80011a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011a8:	4a36      	ldr	r2, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b2:	f7ff fabb 	bl	800072c <HAL_GetTick>
 80011b6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ba:	f7ff fab7 	bl	800072c <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b11      	cmp	r3, #17
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e21b      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0ef      	beq.n	80011ba <HAL_RCC_OscConfig+0x476>
 80011da:	e01b      	b.n	8001214 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ec:	f7ff fa9e 	bl	800072c <HAL_GetTick>
 80011f0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fa9a 	bl	800072c <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b11      	cmp	r3, #17
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1fe      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ef      	bne.n	80011f4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80c1 	beq.w	80013a4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10e      	bne.n	8001252 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 800123a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123e:	6593      	str	r3, [r2, #88]	; 0x58
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_RCC_OscConfig+0x540>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800124c:	2301      	movs	r3, #1
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <HAL_RCC_OscConfig+0x544>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x544>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_OscConfig+0x544>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126a:	f7ff fa5f 	bl	800072c <HAL_GetTick>
 800126e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001270:	e00c      	b.n	800128c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001272:	f7ff fa5b 	bl	800072c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d905      	bls.n	800128c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1bf      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
 8001284:	40021000 	.word	0x40021000
 8001288:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800128c:	4bb1      	ldr	r3, [pc, #708]	; (8001554 <HAL_RCC_OscConfig+0x810>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ec      	beq.n	8001272 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d02c      	beq.n	80012fe <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80012a4:	4bac      	ldr	r3, [pc, #688]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	49a8      	ldr	r1, [pc, #672]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d010      	beq.n	80012ec <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80012ca:	4ba3      	ldr	r3, [pc, #652]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012d0:	4aa1      	ldr	r2, [pc, #644]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012da:	4b9f      	ldr	r3, [pc, #636]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	4a9d      	ldr	r2, [pc, #628]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	e018      	b.n	800131e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012ec:	4b9a      	ldr	r3, [pc, #616]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f2:	4a99      	ldr	r2, [pc, #612]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012fc:	e00f      	b.n	800131e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80012fe:	4b96      	ldr	r3, [pc, #600]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001304:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001306:	f023 0301 	bic.w	r3, r3, #1
 800130a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800130e:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001314:	4a90      	ldr	r2, [pc, #576]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001316:	f023 0304 	bic.w	r3, r3, #4
 800131a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001326:	f7ff fa01 	bl	800072c <HAL_GetTick>
 800132a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff f9fd 	bl	800072c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e15f      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0ed      	beq.n	800132e <HAL_RCC_OscConfig+0x5ea>
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001354:	f7ff f9ea 	bl	800072c <HAL_GetTick>
 8001358:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135c:	f7ff f9e6 	bl	800072c <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f241 3288 	movw	r2, #5000	; 0x1388
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e148      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001372:	4b79      	ldr	r3, [pc, #484]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ed      	bne.n	800135c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001380:	4b75      	ldr	r3, [pc, #468]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	4a74      	ldr	r2, [pc, #464]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a6e      	ldr	r2, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 800139e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03c      	beq.n	800142a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d01c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80013b8:	4b67      	ldr	r3, [pc, #412]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80013ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013be:	4a66      	ldr	r2, [pc, #408]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c8:	f7ff f9b0 	bl	800072c <HAL_GetTick>
 80013cc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013d0:	f7ff f9ac 	bl	800072c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e110      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80013e2:	4b5d      	ldr	r3, [pc, #372]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80013e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ef      	beq.n	80013d0 <HAL_RCC_OscConfig+0x68c>
 80013f0:	e01b      	b.n	800142a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80013f2:	4b59      	ldr	r3, [pc, #356]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80013f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80013fa:	f023 0301 	bic.w	r3, r3, #1
 80013fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff f993 	bl	800072c <HAL_GetTick>
 8001406:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800140a:	f7ff f98f 	bl	800072c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e0f3      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800141c:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 800141e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1ef      	bne.n	800140a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80e7 	beq.w	8001602 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	2b02      	cmp	r3, #2
 800143a:	f040 80b7 	bne.w	80015ac <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0203 	and.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	429a      	cmp	r2, r3
 8001450:	d124      	bne.n	800149c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	3b01      	subs	r3, #1
 800145e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d11b      	bne.n	800149c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001470:	429a      	cmp	r2, r3
 8001472:	d113      	bne.n	800149c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d109      	bne.n	800149c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	3b01      	subs	r3, #1
 8001496:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001498:	429a      	cmp	r2, r3
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d056      	beq.n	8001550 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80014a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ae:	f7ff f93d 	bl	800072c <HAL_GetTick>
 80014b2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f939 	bl	800072c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e09d      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_OscConfig+0x818>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e4:	3a01      	subs	r2, #1
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	4311      	orrs	r1, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ee:	0212      	lsls	r2, r2, #8
 80014f0:	4311      	orrs	r1, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f6:	0852      	lsrs	r2, r2, #1
 80014f8:	3a01      	subs	r2, #1
 80014fa:	0552      	lsls	r2, r2, #21
 80014fc:	4311      	orrs	r1, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001502:	0852      	lsrs	r2, r2, #1
 8001504:	3a01      	subs	r2, #1
 8001506:	0652      	lsls	r2, r2, #25
 8001508:	430a      	orrs	r2, r1
 800150a:	4913      	ldr	r1, [pc, #76]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 800150c:	4313      	orrs	r3, r2
 800150e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001528:	f7ff f900 	bl	800072c <HAL_GetTick>
 800152c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff f8fc 	bl	800072c <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e060      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_RCC_OscConfig+0x814>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800154e:	e058      	b.n	8001602 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e057      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
 8001554:	40007000 	.word	0x40007000
 8001558:	40021000 	.word	0x40021000
 800155c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d14a      	bne.n	8001602 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001584:	f7ff f8d2 	bl	800072c <HAL_GetTick>
 8001588:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158c:	f7ff f8ce 	bl	800072c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e032      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x848>
 80015aa:	e02a      	b.n	8001602 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d025      	beq.n	80015fe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015bc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015c4:	f023 0303 	bic.w	r3, r3, #3
 80015c8:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff f8a9 	bl	800072c <HAL_GetTick>
 80015da:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015de:	f7ff f8a5 	bl	800072c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e009      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_RCC_OscConfig+0x8c8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x89a>
 80015fc:	e001      	b.n	8001602 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0c8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d910      	bls.n	8001654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 0207 	bic.w	r2, r3, #7
 800163a:	4961      	ldr	r1, [pc, #388]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b0      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d04c      	beq.n	80016fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b03      	cmp	r3, #3
 8001666:	d107      	bne.n	8001678 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001668:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d121      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e09e      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d107      	bne.n	8001690 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e092      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001698:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e086      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a8:	4b46      	ldr	r3, [pc, #280]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e07e      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 0203 	bic.w	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	493f      	ldr	r1, [pc, #252]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ca:	f7ff f82f 	bl	800072c <HAL_GetTick>
 80016ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f82b 	bl	800072c <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e066      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 020c 	and.w	r2, r3, #12
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d1eb      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d008      	beq.n	8001718 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	492c      	ldr	r1, [pc, #176]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d210      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 0207 	bic.w	r2, r3, #7
 800172e:	4924      	ldr	r1, [pc, #144]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1b0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e036      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4918      	ldr	r1, [pc, #96]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4910      	ldr	r1, [pc, #64]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001786:	f000 f825 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 800178a:	4601      	mov	r1, r0
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_RCC_ClockConfig+0x1b4>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	5cd3      	ldrb	r3, [r2, r3]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	fa21 f303 	lsr.w	r3, r1, r3
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe ff6e 	bl	800068c <HAL_InitTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80017b4:	7afb      	ldrb	r3, [r7, #11]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08002c94 	.word	0x08002c94
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_GetSysClockFreq+0x34>
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d121      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d11e      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001808:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e005      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001824:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001830:	4a2a      	ldr	r2, [pc, #168]	; (80018dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10d      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001844:	e00a      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b04      	cmp	r3, #4
 800184a:	d102      	bne.n	8001852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	e004      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b08      	cmp	r3, #8
 8001856:	d101      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800185a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d133      	bne.n	80018ca <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0xa4>
 8001872:	2b03      	cmp	r3, #3
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0xaa>
 8001876:	e005      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800187a:	617b      	str	r3, [r7, #20]
      break;
 800187c:	e005      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001880:	617b      	str	r3, [r7, #20]
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	617b      	str	r3, [r7, #20]
      break;
 8001888:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	fb02 f203 	mul.w	r2, r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x104>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0e5b      	lsrs	r3, r3, #25
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	3301      	adds	r3, #1
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80018ca:	69bb      	ldr	r3, [r7, #24]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3724      	adds	r7, #36	; 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08002ca4 	.word	0x08002ca4
 80018e0:	00f42400 	.word	0x00f42400
 80018e4:	007a1200 	.word	0x007a1200

080018e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001900:	f7ff f9bc 	bl	8000c7c <HAL_PWREx_GetVoltageRange>
 8001904:	6178      	str	r0, [r7, #20]
 8001906:	e014      	b.n	8001932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800190e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001920:	f7ff f9ac 	bl	8000c7c <HAL_PWREx_GetVoltageRange>
 8001924:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001938:	d10b      	bne.n	8001952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b80      	cmp	r3, #128	; 0x80
 800193e:	d919      	bls.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2ba0      	cmp	r3, #160	; 0xa0
 8001944:	d902      	bls.n	800194c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001946:	2302      	movs	r3, #2
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	e013      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800194c:	2301      	movs	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e010      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d902      	bls.n	800195e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001958:	2303      	movs	r3, #3
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e00a      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d102      	bne.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001964:	2302      	movs	r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	e004      	b.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b70      	cmp	r3, #112	; 0x70
 800196e:	d101      	bne.n	8001974 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001970:	2301      	movs	r3, #1
 8001972:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 0207 	bic.w	r2, r3, #7
 800197c:	4909      	ldr	r1, [pc, #36]	; (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e049      	b.n	8001a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fdbe 	bl	8000550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 fc7e 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d001      	beq.n	8001a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e03b      	b.n	8001ae8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d009      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x4e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9a:	d004      	beq.n	8001aa6 <HAL_TIM_Base_Start_IT+0x4e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d115      	bne.n	8001ad2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_TIM_Base_Start_IT+0xa4>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d015      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x8c>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d011      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad0:	e008      	b.n	8001ae4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40014000 	.word	0x40014000
 8001afc:	00010007 	.word	0x00010007

08001b00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e049      	b.n	8001ba6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f841 	bl	8001bae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f000 fbd2 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_TIM_OC_Start_IT+0x24>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e03c      	b.n	8001c62 <HAL_TIM_OC_Start_IT+0x9e>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d109      	bne.n	8001c02 <HAL_TIM_OC_Start_IT+0x3e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e02f      	b.n	8001c62 <HAL_TIM_OC_Start_IT+0x9e>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d109      	bne.n	8001c1c <HAL_TIM_OC_Start_IT+0x58>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e022      	b.n	8001c62 <HAL_TIM_OC_Start_IT+0x9e>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d109      	bne.n	8001c36 <HAL_TIM_OC_Start_IT+0x72>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	e015      	b.n	8001c62 <HAL_TIM_OC_Start_IT+0x9e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d109      	bne.n	8001c50 <HAL_TIM_OC_Start_IT+0x8c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	e008      	b.n	8001c62 <HAL_TIM_OC_Start_IT+0x9e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_TIM_OC_Start_IT+0xa6>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0c4      	b.n	8001df4 <HAL_TIM_OC_Start_IT+0x230>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d104      	bne.n	8001c7a <HAL_TIM_OC_Start_IT+0xb6>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c78:	e023      	b.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfe>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d104      	bne.n	8001c8a <HAL_TIM_OC_Start_IT+0xc6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c88:	e01b      	b.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfe>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d104      	bne.n	8001c9a <HAL_TIM_OC_Start_IT+0xd6>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c98:	e013      	b.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfe>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b0c      	cmp	r3, #12
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_OC_Start_IT+0xe6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ca8:	e00b      	b.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfe>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d104      	bne.n	8001cba <HAL_TIM_OC_Start_IT+0xf6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb8:	e003      	b.n	8001cc2 <HAL_TIM_OC_Start_IT+0xfe>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d841      	bhi.n	8001d4c <HAL_TIM_OC_Start_IT+0x188>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_TIM_OC_Start_IT+0x10c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001d05 	.word	0x08001d05
 8001cd4:	08001d4d 	.word	0x08001d4d
 8001cd8:	08001d4d 	.word	0x08001d4d
 8001cdc:	08001d4d 	.word	0x08001d4d
 8001ce0:	08001d17 	.word	0x08001d17
 8001ce4:	08001d4d 	.word	0x08001d4d
 8001ce8:	08001d4d 	.word	0x08001d4d
 8001cec:	08001d4d 	.word	0x08001d4d
 8001cf0:	08001d29 	.word	0x08001d29
 8001cf4:	08001d4d 	.word	0x08001d4d
 8001cf8:	08001d4d 	.word	0x08001d4d
 8001cfc:	08001d4d 	.word	0x08001d4d
 8001d00:	08001d3b 	.word	0x08001d3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0202 	orr.w	r2, r2, #2
 8001d12:	60da      	str	r2, [r3, #12]
      break;
 8001d14:	e01b      	b.n	8001d4e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0204 	orr.w	r2, r2, #4
 8001d24:	60da      	str	r2, [r3, #12]
      break;
 8001d26:	e012      	b.n	8001d4e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0208 	orr.w	r2, r2, #8
 8001d36:	60da      	str	r2, [r3, #12]
      break;
 8001d38:	e009      	b.n	8001d4e <HAL_TIM_OC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0210 	orr.w	r2, r2, #16
 8001d48:	60da      	str	r2, [r3, #12]
      break;
 8001d4a:	e000      	b.n	8001d4e <HAL_TIM_OC_Start_IT+0x18a>
    }

    default:
      break;
 8001d4c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fe42 	bl	80029e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_TIM_OC_Start_IT+0x238>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_TIM_OC_Start_IT+0x1b6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <HAL_TIM_OC_Start_IT+0x23c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_TIM_OC_Start_IT+0x1b6>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <HAL_TIM_OC_Start_IT+0x240>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_TIM_OC_Start_IT+0x1ba>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_TIM_OC_Start_IT+0x1bc>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_OC_Start_IT+0x1d0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <HAL_TIM_OC_Start_IT+0x238>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_TIM_OC_Start_IT+0x1ee>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da6:	d004      	beq.n	8001db2 <HAL_TIM_OC_Start_IT+0x1ee>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_TIM_OC_Start_IT+0x23c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d115      	bne.n	8001dde <HAL_TIM_OC_Start_IT+0x21a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_TIM_OC_Start_IT+0x244>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d015      	beq.n	8001df0 <HAL_TIM_OC_Start_IT+0x22c>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dca:	d011      	beq.n	8001df0 <HAL_TIM_OC_Start_IT+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ddc:	e008      	b.n	8001df0 <HAL_TIM_OC_Start_IT+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	e000      	b.n	8001df2 <HAL_TIM_OC_Start_IT+0x22e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	40014000 	.word	0x40014000
 8001e04:	40014400 	.word	0x40014400
 8001e08:	00010007 	.word	0x00010007

08001e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0202 	mvn.w	r2, #2
 8001e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa2b 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fa66 	bl	8000328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fa2e 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d122      	bne.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11b      	bne.n	8001ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0204 	mvn.w	r2, #4
 8001e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa01 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001ea8:	e005      	b.n	8001eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe fa3c 	bl	8000328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fa04 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d122      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d11b      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0208 	mvn.w	r2, #8
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f9d7 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fa12 	bl	8000328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f9da 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b10      	cmp	r3, #16
 8001f1c:	d122      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0310 	and.w	r3, r3, #16
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d11b      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0210 	mvn.w	r2, #16
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9ad 	bl	80022aa <HAL_TIM_IC_CaptureCallback>
 8001f50:	e005      	b.n	8001f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe f9e8 	bl	8000328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f9b0 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0201 	mvn.w	r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe f9b4 	bl	80002f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b80      	cmp	r3, #128	; 0x80
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fe20 	bl	8002bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fe13 	bl	8002c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002002:	2b40      	cmp	r3, #64	; 0x40
 8002004:	d107      	bne.n	8002016 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800200e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f95e 	bl	80022d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b20      	cmp	r3, #32
 8002022:	d10e      	bne.n	8002042 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b20      	cmp	r3, #32
 8002030:	d107      	bne.n	8002042 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0220 	mvn.w	r2, #32
 800203a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fdd3 	bl	8002be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_TIM_OC_ConfigChannel+0x1a>
 8002062:	2302      	movs	r3, #2
 8002064:	e064      	b.n	8002130 <HAL_TIM_OC_ConfigChannel+0xe4>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b14      	cmp	r3, #20
 8002072:	d857      	bhi.n	8002124 <HAL_TIM_OC_ConfigChannel+0xd8>
 8002074:	a201      	add	r2, pc, #4	; (adr r2, 800207c <HAL_TIM_OC_ConfigChannel+0x30>)
 8002076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207a:	bf00      	nop
 800207c:	080020d1 	.word	0x080020d1
 8002080:	08002125 	.word	0x08002125
 8002084:	08002125 	.word	0x08002125
 8002088:	08002125 	.word	0x08002125
 800208c:	080020df 	.word	0x080020df
 8002090:	08002125 	.word	0x08002125
 8002094:	08002125 	.word	0x08002125
 8002098:	08002125 	.word	0x08002125
 800209c:	080020ed 	.word	0x080020ed
 80020a0:	08002125 	.word	0x08002125
 80020a4:	08002125 	.word	0x08002125
 80020a8:	08002125 	.word	0x08002125
 80020ac:	080020fb 	.word	0x080020fb
 80020b0:	08002125 	.word	0x08002125
 80020b4:	08002125 	.word	0x08002125
 80020b8:	08002125 	.word	0x08002125
 80020bc:	08002109 	.word	0x08002109
 80020c0:	08002125 	.word	0x08002125
 80020c4:	08002125 	.word	0x08002125
 80020c8:	08002125 	.word	0x08002125
 80020cc:	08002117 	.word	0x08002117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f96a 	bl	80023b0 <TIM_OC1_SetConfig>
      break;
 80020dc:	e023      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f9df 	bl	80024a8 <TIM_OC2_SetConfig>
      break;
 80020ea:	e01c      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa52 	bl	800259c <TIM_OC3_SetConfig>
      break;
 80020f8:	e015      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fac3 	bl	800268c <TIM_OC4_SetConfig>
      break;
 8002106:	e00e      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	4618      	mov	r0, r3
 8002110:	f000 fb1a 	bl	8002748 <TIM_OC5_SetConfig>
      break;
 8002114:	e007      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fb6b 	bl	80027f8 <TIM_OC6_SetConfig>
      break;
 8002122:	e000      	b.n	8002126 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8002124:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_TIM_ConfigClockSource+0x18>
 800214c:	2302      	movs	r3, #2
 800214e:	e0a8      	b.n	80022a2 <HAL_TIM_ConfigClockSource+0x16a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800217a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d067      	beq.n	800225c <HAL_TIM_ConfigClockSource+0x124>
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d80b      	bhi.n	80021a8 <HAL_TIM_ConfigClockSource+0x70>
 8002190:	2b10      	cmp	r3, #16
 8002192:	d073      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x144>
 8002194:	2b10      	cmp	r3, #16
 8002196:	d802      	bhi.n	800219e <HAL_TIM_ConfigClockSource+0x66>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d06f      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800219c:	e078      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d06c      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x144>
 80021a2:	2b30      	cmp	r3, #48	; 0x30
 80021a4:	d06a      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x144>
      break;
 80021a6:	e073      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021a8:	2b70      	cmp	r3, #112	; 0x70
 80021aa:	d00d      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0x90>
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d804      	bhi.n	80021ba <HAL_TIM_ConfigClockSource+0x82>
 80021b0:	2b50      	cmp	r3, #80	; 0x50
 80021b2:	d033      	beq.n	800221c <HAL_TIM_ConfigClockSource+0xe4>
 80021b4:	2b60      	cmp	r3, #96	; 0x60
 80021b6:	d041      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80021b8:	e06a      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80021ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021be:	d066      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x156>
 80021c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c4:	d017      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80021c6:	e063      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f000 fbe2 	bl	80029a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	609a      	str	r2, [r3, #8]
      break;
 80021f4:	e04c      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f000 fbcb 	bl	80029a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002218:	609a      	str	r2, [r3, #8]
      break;
 800221a:	e039      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	461a      	mov	r2, r3
 800222a:	f000 fb3f 	bl	80028ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2150      	movs	r1, #80	; 0x50
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fb98 	bl	800296a <TIM_ITRx_SetConfig>
      break;
 800223a:	e029      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	461a      	mov	r2, r3
 800224a:	f000 fb5e 	bl	800290a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2160      	movs	r1, #96	; 0x60
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fb88 	bl	800296a <TIM_ITRx_SetConfig>
      break;
 800225a:	e019      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	461a      	mov	r2, r3
 800226a:	f000 fb1f 	bl	80028ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fb78 	bl	800296a <TIM_ITRx_SetConfig>
      break;
 800227a:	e009      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 fb6f 	bl	800296a <TIM_ITRx_SetConfig>
        break;
 800228c:	e000      	b.n	8002290 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800228e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a2a      	ldr	r2, [pc, #168]	; (80023a4 <TIM_Base_SetConfig+0xbc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d003      	beq.n	8002308 <TIM_Base_SetConfig+0x20>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d108      	bne.n	800231a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <TIM_Base_SetConfig+0xbc>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00b      	beq.n	800233a <TIM_Base_SetConfig+0x52>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d007      	beq.n	800233a <TIM_Base_SetConfig+0x52>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <TIM_Base_SetConfig+0xc0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d003      	beq.n	800233a <TIM_Base_SetConfig+0x52>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <TIM_Base_SetConfig+0xc4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d108      	bne.n	800234c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <TIM_Base_SetConfig+0xbc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d007      	beq.n	8002388 <TIM_Base_SetConfig+0xa0>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <TIM_Base_SetConfig+0xc0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0xa0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <TIM_Base_SetConfig+0xc4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40014000 	.word	0x40014000
 80023ac:	40014400 	.word	0x40014400

080023b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0303 	bic.w	r3, r3, #3
 80023ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f023 0302 	bic.w	r3, r3, #2
 80023fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <TIM_OC1_SetConfig+0xec>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_OC1_SetConfig+0x70>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <TIM_OC1_SetConfig+0xf0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_OC1_SetConfig+0x70>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <TIM_OC1_SetConfig+0xf4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d10c      	bne.n	800243a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0308 	bic.w	r3, r3, #8
 8002426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a17      	ldr	r2, [pc, #92]	; (800249c <TIM_OC1_SetConfig+0xec>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <TIM_OC1_SetConfig+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <TIM_OC1_SetConfig+0xf0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d003      	beq.n	8002452 <TIM_OC1_SetConfig+0xa2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <TIM_OC1_SetConfig+0xf4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	621a      	str	r2, [r3, #32]
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40014400 	.word	0x40014400

080024a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	f023 0210 	bic.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f023 0320 	bic.w	r3, r3, #32
 80024f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	4313      	orrs	r3, r2
 8002502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <TIM_OC2_SetConfig+0xe8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d10d      	bne.n	8002528 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <TIM_OC2_SetConfig+0xe8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <TIM_OC2_SetConfig+0x98>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <TIM_OC2_SetConfig+0xec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_OC2_SetConfig+0x98>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <TIM_OC2_SetConfig+0xf0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d113      	bne.n	8002568 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800254e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40014000 	.word	0x40014000
 8002598:	40014400 	.word	0x40014400

0800259c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a21      	ldr	r2, [pc, #132]	; (8002680 <TIM_OC3_SetConfig+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10d      	bne.n	800261a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a18      	ldr	r2, [pc, #96]	; (8002680 <TIM_OC3_SetConfig+0xe4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_OC3_SetConfig+0x96>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <TIM_OC3_SetConfig+0xe8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_OC3_SetConfig+0x96>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a16      	ldr	r2, [pc, #88]	; (8002688 <TIM_OC3_SetConfig+0xec>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d113      	bne.n	800265a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	621a      	str	r2, [r3, #32]
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40014000 	.word	0x40014000
 8002688:	40014400 	.word	0x40014400

0800268c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	031b      	lsls	r3, r3, #12
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a14      	ldr	r2, [pc, #80]	; (800273c <TIM_OC4_SetConfig+0xb0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d007      	beq.n	8002700 <TIM_OC4_SetConfig+0x74>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <TIM_OC4_SetConfig+0xb4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d003      	beq.n	8002700 <TIM_OC4_SetConfig+0x74>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <TIM_OC4_SetConfig+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	019b      	lsls	r3, r3, #6
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400

08002748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800278c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <TIM_OC5_SetConfig+0xa4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_OC5_SetConfig+0x6a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <TIM_OC5_SetConfig+0xa8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_OC5_SetConfig+0x6a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <TIM_OC5_SetConfig+0xac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d109      	bne.n	80027c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400

080027f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800283e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	051b      	lsls	r3, r3, #20
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <TIM_OC6_SetConfig+0xa8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <TIM_OC6_SetConfig+0x6c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <TIM_OC6_SetConfig+0xac>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_OC6_SetConfig+0x6c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <TIM_OC6_SetConfig+0xb0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d109      	bne.n	8002878 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
}
 8002892:	bf00      	nop
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40014000 	.word	0x40014000
 80028a8:	40014400 	.word	0x40014400

080028ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 030a 	bic.w	r3, r3, #10
 80028e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	621a      	str	r2, [r3, #32]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800290a:	b480      	push	{r7}
 800290c:	b087      	sub	sp, #28
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f023 0210 	bic.w	r2, r3, #16
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	031b      	lsls	r3, r3, #12
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	621a      	str	r2, [r3, #32]
}
 800295e:	bf00      	nop
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	f043 0307 	orr.w	r3, r3, #7
 800298c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	021a      	lsls	r2, r3, #8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	371c      	adds	r7, #28
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2201      	movs	r2, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	401a      	ands	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e04f      	b.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40014000 	.word	0x40014000

08002af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e060      	b.n	8002bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d115      	bne.n	8002bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	051b      	lsls	r3, r3, #20
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40012c00 	.word	0x40012c00

08002be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <__libc_init_array>:
 8002c24:	b570      	push	{r4, r5, r6, lr}
 8002c26:	4e0d      	ldr	r6, [pc, #52]	; (8002c5c <__libc_init_array+0x38>)
 8002c28:	4c0d      	ldr	r4, [pc, #52]	; (8002c60 <__libc_init_array+0x3c>)
 8002c2a:	1ba4      	subs	r4, r4, r6
 8002c2c:	10a4      	asrs	r4, r4, #2
 8002c2e:	2500      	movs	r5, #0
 8002c30:	42a5      	cmp	r5, r4
 8002c32:	d109      	bne.n	8002c48 <__libc_init_array+0x24>
 8002c34:	4e0b      	ldr	r6, [pc, #44]	; (8002c64 <__libc_init_array+0x40>)
 8002c36:	4c0c      	ldr	r4, [pc, #48]	; (8002c68 <__libc_init_array+0x44>)
 8002c38:	f000 f820 	bl	8002c7c <_init>
 8002c3c:	1ba4      	subs	r4, r4, r6
 8002c3e:	10a4      	asrs	r4, r4, #2
 8002c40:	2500      	movs	r5, #0
 8002c42:	42a5      	cmp	r5, r4
 8002c44:	d105      	bne.n	8002c52 <__libc_init_array+0x2e>
 8002c46:	bd70      	pop	{r4, r5, r6, pc}
 8002c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c4c:	4798      	blx	r3
 8002c4e:	3501      	adds	r5, #1
 8002c50:	e7ee      	b.n	8002c30 <__libc_init_array+0xc>
 8002c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c56:	4798      	blx	r3
 8002c58:	3501      	adds	r5, #1
 8002c5a:	e7f2      	b.n	8002c42 <__libc_init_array+0x1e>
 8002c5c:	08002cd4 	.word	0x08002cd4
 8002c60:	08002cd4 	.word	0x08002cd4
 8002c64:	08002cd4 	.word	0x08002cd4
 8002c68:	08002cd8 	.word	0x08002cd8

08002c6c <memset>:
 8002c6c:	4402      	add	r2, r0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d100      	bne.n	8002c76 <memset+0xa>
 8002c74:	4770      	bx	lr
 8002c76:	f803 1b01 	strb.w	r1, [r3], #1
 8002c7a:	e7f9      	b.n	8002c70 <memset+0x4>

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
