
stm_custom_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009220  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009570  08009570  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009578  08009578  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009578  08009578  00019578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08009580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000150  080096d0  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00010404  20000bc4  080096d0  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f57  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b52  00000000  00000000  000380d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003cce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234fd  00000000  00000000  0003dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001171e  00000000  00000000  000610c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bfdee  00000000  00000000  000727e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001325d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004864  00000000  00000000  0013264c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000150 	.word	0x20000150
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080093cc 	.word	0x080093cc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000154 	.word	0x20000154
 8000200:	080093cc 	.word	0x080093cc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000592:	f002 f91d 	bl	80027d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	; (80005e0 <MX_GPIO_Init+0xdc>)
 80005ac:	f001 fe74 	bl	8002298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80005b0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_GPIO_Init+0xd8>)
 80005ca:	f001 fe65 	bl	8002298 <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020400 	.word	0x40020400
 80005e0:	40020800 	.word	0x40020800

080005e4 <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOC, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <MX_GPIO_DeInit+0x80>)
 800060c:	f001 ffd6 	bl	80025bc <HAL_GPIO_DeInit>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000610:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000614:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  HAL_GPIO_DeInit(GPIOB, &GPIO_InitStruct);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4619      	mov	r1, r3
 8000626:	4810      	ldr	r0, [pc, #64]	; (8000668 <MX_GPIO_DeInit+0x84>)
 8000628:	f001 ffc8 	bl	80025bc <HAL_GPIO_DeInit>

  __HAL_RCC_GPIOC_CLK_DISABLE();
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_GPIO_DeInit+0x88>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <MX_GPIO_DeInit+0x88>)
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_GPIO_DeInit+0x88>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <MX_GPIO_DeInit+0x88>)
 800063e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_GPIO_DeInit+0x88>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <MX_GPIO_DeInit+0x88>)
 800064a:	f023 0301 	bic.w	r3, r3, #1
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_GPIO_DeInit+0x88>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <MX_GPIO_DeInit+0x88>)
 8000656:	f023 0302 	bic.w	r3, r3, #2
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400
 800066c:	40023800 	.word	0x40023800

08000670 <__io_putchar>:
HAL_UART_Transmit_IT(&huart2, (uint8_t*)&p, len);
return len;
}
#else
int __io_putchar(int ch)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	// if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK)
	// 	return -1;
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	2301      	movs	r3, #1
 800067c:	2201      	movs	r2, #1
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <__io_putchar+0x20>)
 8000680:	f004 f981 	bl	8004986 <HAL_UART_Transmit>
	return ch;
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000284 	.word	0x20000284

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f001 f8eb 	bl	8001874 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f869 	bl	8000774 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  #if 1
  MX_GPIO_Init();
 80006a2:	f7ff ff2f 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a6:	f000 f9f7 	bl	8000a98 <MX_USART2_UART_Init>
  // MX_USB_DEVICE_Init();
  #endif
  /* USER CODE BEGIN 2 */
  printf("stm custom bootloader start \r\n");
 80006aa:	4825      	ldr	r0, [pc, #148]	; (8000740 <main+0xac>)
 80006ac:	f008 fb2a 	bl	8008d04 <puts>
  HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f001 f984 	bl	80019c0 <HAL_Delay>
  // printf("check : %08lx \r\n", ((*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD) & 0x2FFC0000));
  if (1)
  {


    printf("valid app \r\n");
 80006b8:	4822      	ldr	r0, [pc, #136]	; (8000744 <main+0xb0>)
 80006ba:	f008 fb23 	bl	8008d04 <puts>
    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4821      	ldr	r0, [pc, #132]	; (8000748 <main+0xb4>)
 80006c4:	f002 f86c 	bl	80027a0 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d131      	bne.n	8000732 <main+0x9e>
    {
      printf("pin reset APP start \r\n");
 80006ce:	481f      	ldr	r0, [pc, #124]	; (800074c <main+0xb8>)
 80006d0:	f008 fb18 	bl	8008d04 <puts>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <main+0xbc>)
 80006da:	f002 f879 	bl	80027d0 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f001 f96e 	bl	80019c0 <HAL_Delay>
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t *) (USBD_DFU_APP_DEFAULT_ADD + 4);
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <main+0xc0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <main+0xc4>)
 80006ea:	6013      	str	r3, [r2, #0]
      // JumpAddress = *(__IO uint32_t *) (USBD_DFU_APP_DEFAULT_ADD);
      JumpToApplication = (pFunction) JumpAddress;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0xc4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b1a      	ldr	r3, [pc, #104]	; (800075c <main+0xc8>)
 80006f4:	601a      	str	r2, [r3, #0]
      
      HAL_UART_MspDeInit(&huart2);
 80006f6:	481a      	ldr	r0, [pc, #104]	; (8000760 <main+0xcc>)
 80006f8:	f000 fa48 	bl	8000b8c <HAL_UART_MspDeInit>
      MX_GPIO_DeInit();
 80006fc:	f7ff ff72 	bl	80005e4 <MX_GPIO_DeInit>
      HAL_RCC_DeInit();
 8000700:	f003 fde6 	bl	80042d0 <HAL_RCC_DeInit>
      HAL_DeInit();
 8000704:	f001 f8d8 	bl	80018b8 <HAL_DeInit>

	    SysTick->CTRL = 0;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <main+0xd0>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
	    SysTick->LOAD = 0;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <main+0xd0>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
	    SysTick->VAL  = 0;
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <main+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]

      SCB->VTOR = USBD_DFU_APP_DEFAULT_ADD;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <main+0xd4>)
 800071c:	4a13      	ldr	r2, [pc, #76]	; (800076c <main+0xd8>)
 800071e:	609a      	str	r2, [r3, #8]

      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD);
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <main+0xd8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f383 8808 	msr	MSP, r3

      JumpToApplication();
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <main+0xc8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4798      	blx	r3
  else
  {
    // printf("invalid app \r\n");
  }
  // MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 8000732:	f000 fa75 	bl	8000c20 <MX_USB_DEVICE_Init>
  printf("DFU mode \r\n");
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <main+0xdc>)
 8000738:	f008 fae4 	bl	8008d04 <puts>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800073c:	e7fe      	b.n	800073c <main+0xa8>
 800073e:	bf00      	nop
 8000740:	080093e4 	.word	0x080093e4
 8000744:	08009404 	.word	0x08009404
 8000748:	40020800 	.word	0x40020800
 800074c:	08009410 	.word	0x08009410
 8000750:	40020400 	.word	0x40020400
 8000754:	08010004 	.word	0x08010004
 8000758:	2000027c 	.word	0x2000027c
 800075c:	20000280 	.word	0x20000280
 8000760:	20000284 	.word	0x20000284
 8000764:	e000e010 	.word	0xe000e010
 8000768:	e000ed00 	.word	0xe000ed00
 800076c:	08010000 	.word	0x08010000
 8000770:	08009428 	.word	0x08009428

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b0a4      	sub	sp, #144	; 0x90
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800077e:	2234      	movs	r2, #52	; 0x34
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f008 f9b2 	bl	8008aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	223c      	movs	r2, #60	; 0x3c
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 f9a3 	bl	8008aec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <SystemClock_Config+0x100>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a31      	ldr	r2, [pc, #196]	; (8000874 <SystemClock_Config+0x100>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <SystemClock_Config+0x100>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <SystemClock_Config+0x104>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a2b      	ldr	r2, [pc, #172]	; (8000878 <SystemClock_Config+0x104>)
 80007cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <SystemClock_Config+0x104>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007de:	2301      	movs	r3, #1
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007f6:	23c0      	movs	r3, #192	; 0xc0
 80007f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fe28 	bl	8004468 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800081e:	f000 f82d 	bl	800087c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000838:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800083c:	2103      	movs	r1, #3
 800083e:	4618      	mov	r0, r3
 8000840:	f003 f986 	bl	8003b50 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800084a:	f000 f817 	bl	800087c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800084e:	2320      	movs	r3, #32
 8000850:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000852:	2300      	movs	r3, #0
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fb6a 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000866:	f000 f809 	bl	800087c <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	3790      	adds	r7, #144	; 0x90
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40007000 	.word	0x40007000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000882:	e7fe      	b.n	8000882 <Error_Handler+0x6>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f001 f82e 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART2_IRQHandler+0x10>)
 800092e:	f004 f8c3 	bl	8004ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000284 	.word	0x20000284

0800093c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <OTG_FS_IRQHandler+0x10>)
 8000942:	f002 f8ee 	bl	8002b22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000794 	.word	0x20000794

08000950 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e00a      	b.n	8000978 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000962:	f3af 8000 	nop.w
 8000966:	4601      	mov	r1, r0
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	429a      	cmp	r2, r3
 800097e:	dbf0      	blt.n	8000962 <_read+0x12>
	}

return len;
 8000980:	687b      	ldr	r3, [r7, #4]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	60f8      	str	r0, [r7, #12]
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	e009      	b.n	80009b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	60ba      	str	r2, [r7, #8]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe63 	bl	8000670 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf1      	blt.n	800099c <_write+0x12>
	}
	return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_close>:

int _close(int file)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ea:	605a      	str	r2, [r3, #4]
	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_isatty>:

int _isatty(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f008 f80c 	bl	8008a78 <__errno>
 8000a60:	4602      	mov	r2, r0
 8000a62:	230c      	movs	r3, #12
 8000a64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20040000 	.word	0x20040000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	2000016c 	.word	0x2000016c
 8000a94:	20000bc8 	.word	0x20000bc8

08000a98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f003 ff0c 	bl	80048ec <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f7ff fecf 	bl	800087c <Error_Handler>
  }

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000284 	.word	0x20000284
 8000ae8:	40004400 	.word	0x40004400

08000aec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d133      	bne.n	8000b76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_UART_MspInit+0x9c>)
 8000b62:	f001 fb99 	bl	8002298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2026      	movs	r0, #38	; 0x26
 8000b6c:	f001 f847 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	2026      	movs	r0, #38	; 0x26
 8000b72:	f001 f860 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <HAL_UART_MspDeInit+0x34>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_UART_MspDeInit+0x38>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_UART_MspDeInit+0x38>)
 8000ba4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000baa:	210c      	movs	r1, #12
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_UART_MspDeInit+0x3c>)
 8000bae:	f001 fd05 	bl	80025bc <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000bb2:	2026      	movs	r0, #38	; 0x26
 8000bb4:	f001 f84d 	bl	8001c52 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bf6:	f000 fe27 	bl	8001848 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f007 ff43 	bl	8008a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fd49 	bl	8000694 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c04:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8000c08:	08009580 	.word	0x08009580
  ldr  r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c10:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8000c14:	20000150 	.word	0x20000150
  ldr  r3, = _ebss
 8000c18:	20000bc4 	.word	0x20000bc4

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000c24:	2200      	movs	r2, #0
 8000c26:	4912      	ldr	r1, [pc, #72]	; (8000c70 <MX_USB_DEVICE_Init+0x50>)
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <MX_USB_DEVICE_Init+0x54>)
 8000c2a:	f005 ff8f 	bl	8006b4c <USBD_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000c34:	f7ff fe22 	bl	800087c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8000c38:	490f      	ldr	r1, [pc, #60]	; (8000c78 <MX_USB_DEVICE_Init+0x58>)
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <MX_USB_DEVICE_Init+0x54>)
 8000c3c:	f005 ffbc 	bl	8006bb8 <USBD_RegisterClass>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000c46:	f7ff fe19 	bl	800087c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8000c4a:	490c      	ldr	r1, [pc, #48]	; (8000c7c <MX_USB_DEVICE_Init+0x5c>)
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <MX_USB_DEVICE_Init+0x54>)
 8000c4e:	f007 fb2d 	bl	80082ac <USBD_DFU_RegisterMedia>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000c58:	f7ff fe10 	bl	800087c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USB_DEVICE_Init+0x54>)
 8000c5e:	f005 ffcc 	bl	8006bfa <USBD_Start>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000c68:	f7ff fe08 	bl	800087c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000000 	.word	0x20000000
 8000c74:	200002c4 	.word	0x200002c4
 8000c78:	20000088 	.word	0x20000088
 8000c7c:	20000060 	.word	0x20000060

08000c80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2212      	movs	r2, #18
 8000c90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000c92:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000020 	.word	0x20000020

08000ca4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	20000040 	.word	0x20000040

08000cc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d105      	bne.n	8000ce6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <USBD_FS_ProductStrDescriptor+0x34>)
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <USBD_FS_ProductStrDescriptor+0x38>)
 8000ce0:	f006 ffbb 	bl	8007c5a <USBD_GetString>
 8000ce4:	e004      	b.n	8000cf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4904      	ldr	r1, [pc, #16]	; (8000cfc <USBD_FS_ProductStrDescriptor+0x34>)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <USBD_FS_ProductStrDescriptor+0x38>)
 8000cec:	f006 ffb5 	bl	8007c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000594 	.word	0x20000594
 8000d00:	08009434 	.word	0x08009434

08000d04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4904      	ldr	r1, [pc, #16]	; (8000d24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000d16:	f006 ffa0 	bl	8007c5a <USBD_GetString>
  return USBD_StrDesc;
 8000d1a:	4b02      	ldr	r3, [pc, #8]	; (8000d24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000594 	.word	0x20000594
 8000d28:	08009454 	.word	0x08009454

08000d2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	221a      	movs	r2, #26
 8000d3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000d3e:	f000 f855 	bl	8000dec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000d42:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000044 	.word	0x20000044

08000d50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000d68:	f006 ff77 	bl	8007c5a <USBD_GetString>
 8000d6c:	e004      	b.n	8000d78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	4904      	ldr	r1, [pc, #16]	; (8000d84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8000d74:	f006 ff71 	bl	8007c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000594 	.word	0x20000594
 8000d88:	08009468 	.word	0x08009468

08000d8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000da2:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000da4:	f006 ff59 	bl	8007c5a <USBD_GetString>
 8000da8:	e004      	b.n	8000db4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4904      	ldr	r1, [pc, #16]	; (8000dc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000db0:	f006 ff53 	bl	8007c5a <USBD_GetString>
  }
  return USBD_StrDesc;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000594 	.word	0x20000594
 8000dc4:	08009474 	.word	0x08009474

08000dc8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	20000034 	.word	0x20000034

08000dec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <Get_SerialNum+0x44>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <Get_SerialNum+0x48>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <Get_SerialNum+0x4c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d009      	beq.n	8000e26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000e12:	2208      	movs	r2, #8
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <Get_SerialNum+0x50>)
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 f814 	bl	8000e44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <Get_SerialNum+0x54>)
 8000e20:	68b8      	ldr	r0, [r7, #8]
 8000e22:	f000 f80f 	bl	8000e44 <IntToUnicode>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	1fff7a10 	.word	0x1fff7a10
 8000e34:	1fff7a14 	.word	0x1fff7a14
 8000e38:	1fff7a18 	.word	0x1fff7a18
 8000e3c:	20000046 	.word	0x20000046
 8000e40:	20000056 	.word	0x20000056

08000e44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
 8000e5a:	e027      	b.n	8000eac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	0f1b      	lsrs	r3, r3, #28
 8000e60:	2b09      	cmp	r3, #9
 8000e62:	d80b      	bhi.n	8000e7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	0f1b      	lsrs	r3, r3, #28
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	440b      	add	r3, r1
 8000e74:	3230      	adds	r2, #48	; 0x30
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e00a      	b.n	8000e92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	0f1b      	lsrs	r3, r3, #28
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4619      	mov	r1, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3237      	adds	r2, #55	; 0x37
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	75fb      	strb	r3, [r7, #23]
 8000eac:	7dfa      	ldrb	r2, [r7, #23]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3d3      	bcc.n	8000e5c <IntToUnicode+0x18>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  printf("dfu init \r\n");
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MEM_If_Init_FS+0x14>)
 8000ec6:	f007 ff1d 	bl	8008d04 <puts>
#if ONE
  HAL_FLASH_Unlock();
 8000eca:	f000 ff53 	bl	8001d74 <HAL_FLASH_Unlock>
#else
    HAL_FLASH_Unlock();
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

#endif
  return (USBD_OK);
 8000ece:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	080094c0 	.word	0x080094c0

08000ed8 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  printf("dfu deinit \r\n");
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MEM_If_DeInit_FS+0x14>)
 8000ede:	f007 ff11 	bl	8008d04 <puts>
#if ONE
  HAL_FLASH_Lock();
 8000ee2:	f000 ff69 	bl	8001db8 <HAL_FLASH_Lock>
#else
  HAL_FLASH_Lock();  
#endif
  return (USBD_OK);
 8000ee6:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	080094cc 	.word	0x080094cc

08000ef0 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  printf("erase \r\n");
 8000ef8:	4816      	ldr	r0, [pc, #88]	; (8000f54 <MEM_If_Erase_FS+0x64>)
 8000efa:	f007 ff03 	bl	8008d04 <puts>
#if ONE
  uint32_t startsector = 4, sectorerror = 0;
 8000efe:	2304      	movs	r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  /* Variable contains Flash operation status */
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef eraseinitstruct;

  /* Get the number of sector */
  startsector = GetSector(Add);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 f8b4 	bl	8001074 <GetSector>
 8000f0c:	6278      	str	r0, [r7, #36]	; 0x24
  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  eraseinitstruct.Banks = GetBank(Add);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f95a 	bl	80011cc <GetBank>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]
  eraseinitstruct.Sector = startsector;
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	613b      	str	r3, [r7, #16]
  eraseinitstruct.NbSectors = 8;
 8000f20:	2308      	movs	r3, #8
 8000f22:	617b      	str	r3, [r7, #20]
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8000f28:	f107 021c 	add.w	r2, r7, #28
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 f88e 	bl	8002054 <HAL_FLASHEx_Erase>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (status != HAL_OK)
 8000f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MEM_If_Erase_FS+0x5a>
  {
    return 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <MEM_If_Erase_FS+0x5c>
    {  
            return (USBD_FAIL);  
    }  

#endif
  return (USBD_OK);
 8000f4a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	080094dc 	.word	0x080094dc

08000f58 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  printf("write \r\n");
 8000f64:	4819      	ldr	r0, [pc, #100]	; (8000fcc <MEM_If_Write_FS+0x74>)
 8000f66:	f007 fecd 	bl	8008d04 <puts>
#if ONE
  uint32_t i = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  for (i = 0; i < Len; i += 4)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e022      	b.n	8000fba <MEM_If_Write_FS+0x62>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     * be done by byte */
    if (HAL_FLASH_Program
        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	4413      	add	r3, r2
    if (HAL_FLASH_Program
 8000f7a:	4619      	mov	r1, r3
         *(uint32_t *) (src + i)) == HAL_OK)
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
    if (HAL_FLASH_Program
 8000f84:	f04f 0400 	mov.w	r4, #0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f000 fe9d 	bl	8001ccc <HAL_FLASH_Program>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10b      	bne.n	8000fb0 <MEM_If_Write_FS+0x58>
    {
      /* Check the written value */
      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	440b      	add	r3, r1
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d003      	beq.n	8000fb4 <MEM_If_Write_FS+0x5c>
      {
        /* Flash content doesn't match SRAM content */
        return 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	e009      	b.n	8000fc4 <MEM_If_Write_FS+0x6c>
      }
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e007      	b.n	8000fc4 <MEM_If_Write_FS+0x6c>
  for (i = 0; i < Len; i += 4)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3d8      	bcc.n	8000f74 <MEM_If_Write_FS+0x1c>
                    return 1;  
            }  
    }    

#endif
  return (USBD_OK);
 8000fc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	080094e4 	.word	0x080094e4

08000fd0 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  printf("read \r\n");
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <MEM_If_Read_FS+0x48>)
 8000fde:	f007 fe91 	bl	8008d04 <puts>
#if ONE
  uint32_t i = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint8_t *psrc = src;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	613b      	str	r3, [r7, #16]

  for (i = 0; i < Len; i++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e00a      	b.n	8001006 <MEM_If_Read_FS+0x36>
  {
    dest[i] = *psrc++;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	613a      	str	r2, [r7, #16]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	440a      	add	r2, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < Len; i++)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3f0      	bcc.n	8000ff0 <MEM_If_Read_FS+0x20>
    {  
            dest[i] = *psrc++;  
    }  

#endif
  return (uint8_t*)(USBD_OK);
 800100e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	080094ec 	.word	0x080094ec

0800101c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	460b      	mov	r3, r1
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
#if ONE
  switch (Cmd)
 800102a:	7afb      	ldrb	r3, [r7, #11]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d10c      	bne.n	800104a <MEM_If_GetStatus_FS+0x2e>
  {
  case DFU_MEDIA_PROGRAM:
    buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	2232      	movs	r2, #50	; 0x32
 8001036:	701a      	strb	r2, [r3, #0]
    buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3302      	adds	r3, #2
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3303      	adds	r3, #3
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    break;
 8001048:	e00c      	b.n	8001064 <MEM_If_GetStatus_FS+0x48>

  case DFU_MEDIA_ERASE:
  default:
    buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3301      	adds	r3, #1
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	701a      	strb	r2, [r3, #0]
    buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3302      	adds	r3, #2
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3303      	adds	r3, #3
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    break;
 8001062:	bf00      	nop
        buffer[3] = 0;  
    break;
  }       

#endif
  return (USBD_OK);
 8001064:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <GetSector>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
#if 1
static uint32_t GetSector(uint32_t Address)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a46      	ldr	r2, [pc, #280]	; (800119c <GetSector+0x128>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d806      	bhi.n	8001096 <GetSector+0x22>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800108e:	d302      	bcc.n	8001096 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e07a      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a41      	ldr	r2, [pc, #260]	; (80011a0 <GetSector+0x12c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d806      	bhi.n	80010ac <GetSector+0x38>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a3e      	ldr	r2, [pc, #248]	; (800119c <GetSector+0x128>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d902      	bls.n	80010ac <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80010a6:	2301      	movs	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e06f      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <GetSector+0x130>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d806      	bhi.n	80010c2 <GetSector+0x4e>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <GetSector+0x12c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d902      	bls.n	80010c2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80010bc:	2302      	movs	r3, #2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e064      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <GetSector+0x134>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d806      	bhi.n	80010d8 <GetSector+0x64>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a35      	ldr	r2, [pc, #212]	; (80011a4 <GetSector+0x130>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d902      	bls.n	80010d8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 80010d2:	2303      	movs	r3, #3
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e059      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <GetSector+0x138>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d806      	bhi.n	80010ee <GetSector+0x7a>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <GetSector+0x134>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d902      	bls.n	80010ee <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 80010e8:	2304      	movs	r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e04e      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <GetSector+0x13c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d806      	bhi.n	8001104 <GetSector+0x90>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <GetSector+0x138>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d902      	bls.n	8001104 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 80010fe:	2305      	movs	r3, #5
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	e043      	b.n	800118c <GetSector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a2b      	ldr	r2, [pc, #172]	; (80011b4 <GetSector+0x140>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d806      	bhi.n	800111a <GetSector+0xa6>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <GetSector+0x13c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d902      	bls.n	800111a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8001114:	2306      	movs	r3, #6
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e038      	b.n	800118c <GetSector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a26      	ldr	r2, [pc, #152]	; (80011b8 <GetSector+0x144>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d806      	bhi.n	8001130 <GetSector+0xbc>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a23      	ldr	r2, [pc, #140]	; (80011b4 <GetSector+0x140>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d902      	bls.n	8001130 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e02d      	b.n	800118c <GetSector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a22      	ldr	r2, [pc, #136]	; (80011bc <GetSector+0x148>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d806      	bhi.n	8001146 <GetSector+0xd2>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <GetSector+0x144>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d902      	bls.n	8001146 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 8001140:	2308      	movs	r3, #8
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e022      	b.n	800118c <GetSector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <GetSector+0x14c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d806      	bhi.n	800115c <GetSector+0xe8>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <GetSector+0x148>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d902      	bls.n	800115c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 8001156:	2309      	movs	r3, #9
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e017      	b.n	800118c <GetSector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <GetSector+0x150>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d806      	bhi.n	8001172 <GetSector+0xfe>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <GetSector+0x14c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d902      	bls.n	8001172 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 800116c:	230a      	movs	r3, #10
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e00c      	b.n	800118c <GetSector+0x118>
  }
  else if ((Address < ADDR_FLASH_END) && (Address >= ADDR_FLASH_SECTOR_11))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <GetSector+0x154>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d806      	bhi.n	8001188 <GetSector+0x114>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <GetSector+0x150>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d902      	bls.n	8001188 <GetSector+0x114>
  {
    sector = FLASH_SECTOR_11;  
 8001182:	230b      	movs	r3, #11
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	e001      	b.n	800118c <GetSector+0x118>
  }
  else
  {
    sector = FLASH_SECTOR_11;    
 8001188:	230b      	movs	r3, #11
 800118a:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	08003fff 	.word	0x08003fff
 80011a0:	08007fff 	.word	0x08007fff
 80011a4:	0800bfff 	.word	0x0800bfff
 80011a8:	0800ffff 	.word	0x0800ffff
 80011ac:	0801ffff 	.word	0x0801ffff
 80011b0:	0803ffff 	.word	0x0803ffff
 80011b4:	0805ffff 	.word	0x0805ffff
 80011b8:	0807ffff 	.word	0x0807ffff
 80011bc:	0809ffff 	.word	0x0809ffff
 80011c0:	080bffff 	.word	0x080bffff
 80011c4:	080dffff 	.word	0x080dffff
 80011c8:	080ffffe 	.word	0x080ffffe

080011cc <GetBank>:
  }  
  return sectorsize;
}
#endif
static uint32_t GetBank(uint32_t Addr)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]

  /* Sector in bank 1 */
  bank = FLASH_BANK_1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
  return bank;
 80011dc:	68fb      	ldr	r3, [r7, #12]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800120c:	d13a      	bne.n	8001284 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_PCD_MspInit+0xa0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_PCD_MspInit+0xa0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_PCD_MspInit+0xa0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800122a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800122e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800123c:	230a      	movs	r3, #10
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <HAL_PCD_MspInit+0xa4>)
 8001248:	f001 f826 	bl	8002298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <HAL_PCD_MspInit+0xa0>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <HAL_PCD_MspInit+0xa0>)
 8001252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001256:	6353      	str	r3, [r2, #52]	; 0x34
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_PCD_MspInit+0xa0>)
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_PCD_MspInit+0xa0>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001266:	6453      	str	r3, [r2, #68]	; 0x44
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_PCD_MspInit+0xa0>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2043      	movs	r0, #67	; 0x43
 800127a:	f000 fcc0 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800127e:	2043      	movs	r0, #67	; 0x43
 8001280:	f000 fcd9 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f005 fd16 	bl	8006cdc <USBD_LL_SetupStage>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80012ca:	78fa      	ldrb	r2, [r7, #3]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f005 fd4e 	bl	8006d82 <USBD_LL_DataOutStage>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	440b      	add	r3, r1
 800130e:	3348      	adds	r3, #72	; 0x48
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	4619      	mov	r1, r3
 8001316:	f005 fd97 	bl	8006e48 <USBD_LL_DataInStage>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fe9b 	bl	800706c <USBD_LL_SOF>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001346:	2301      	movs	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d001      	beq.n	8001356 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001352:	f7ff fa93 	bl	800087c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fe48 	bl	8006ff6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800136c:	4618      	mov	r0, r3
 800136e:	f005 fe01 	bl	8006f74 <USBD_LL_Reset>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fe43 	bl	8007016 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d005      	beq.n	80013bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_PCD_SuspendCallback+0x48>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_PCD_SuspendCallback+0x48>)
 80013b6:	f043 0306 	orr.w	r3, r3, #6
 80013ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fe32 	bl	8007040 <USBD_LL_Resume>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f005 fe5d 	bl	80070ba <USBD_LL_IsoOUTIncomplete>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fe3e 	bl	80070a0 <USBD_LL_IsoINIncomplete>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fe4a 	bl	80070d4 <USBD_LL_DevConnected>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fe47 	bl	80070ea <USBD_LL_DevDisconnected>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d13f      	bne.n	80014f4 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001474:	4a22      	ldr	r2, [pc, #136]	; (8001500 <USBD_LL_Init+0x9c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a20      	ldr	r2, [pc, #128]	; (8001500 <USBD_LL_Init+0x9c>)
 8001480:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <USBD_LL_Init+0x9c>)
 8001486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800148a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <USBD_LL_Init+0x9c>)
 800148e:	2206      	movs	r2, #6
 8001490:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <USBD_LL_Init+0x9c>)
 8001494:	2202      	movs	r2, #2
 8001496:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <USBD_LL_Init+0x9c>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <USBD_LL_Init+0x9c>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <USBD_LL_Init+0x9c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <USBD_LL_Init+0x9c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <USBD_LL_Init+0x9c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <USBD_LL_Init+0x9c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <USBD_LL_Init+0x9c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <USBD_LL_Init+0x9c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <USBD_LL_Init+0x9c>)
 80014ca:	f001 f99a 	bl	8002802 <HAL_PCD_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80014d4:	f7ff f9d2 	bl	800087c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	4809      	ldr	r0, [pc, #36]	; (8001500 <USBD_LL_Init+0x9c>)
 80014dc:	f002 fb03 	bl	8003ae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80014e0:	2240      	movs	r2, #64	; 0x40
 80014e2:	2100      	movs	r1, #0
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <USBD_LL_Init+0x9c>)
 80014e6:	f002 fab7 	bl	8003a58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	2101      	movs	r1, #1
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <USBD_LL_Init+0x9c>)
 80014f0:	f002 fab2 	bl	8003a58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000794 	.word	0x20000794

08001504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fa95 	bl	8002a4a <HAL_PCD_Start>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f962 	bl	80017f0 <USBD_Get_USB_Status>
 800152c:	4603      	mov	r3, r0
 800152e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001530:	7bbb      	ldrb	r3, [r7, #14]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001550:	4618      	mov	r0, r3
 8001552:	f001 faad 	bl	8002ab0 <HAL_PCD_Stop>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f947 	bl	80017f0 <USBD_Get_USB_Status>
 8001562:	4603      	mov	r3, r0
 8001564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001566:	7bbb      	ldrb	r3, [r7, #14]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	70fb      	strb	r3, [r7, #3]
 8001582:	460b      	mov	r3, r1
 8001584:	70bb      	strb	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001598:	78bb      	ldrb	r3, [r7, #2]
 800159a:	883a      	ldrh	r2, [r7, #0]
 800159c:	78f9      	ldrb	r1, [r7, #3]
 800159e:	f001 fec4 	bl	800332a <HAL_PCD_EP_Open>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f921 	bl	80017f0 <USBD_Get_USB_Status>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80015d6:	78fa      	ldrb	r2, [r7, #3]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 ffa2 	bl	8003524 <HAL_PCD_EP_SetStall>
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f902 	bl	80017f0 <USBD_Get_USB_Status>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f001 ffe7 	bl	80035ec <HAL_PCD_EP_ClrStall>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f8e3 	bl	80017f0 <USBD_Get_USB_Status>
 800162a:	4603      	mov	r3, r0
 800162c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800162e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800164a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800164c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da0b      	bge.n	800166c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800165a:	68f9      	ldr	r1, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	333e      	adds	r3, #62	; 0x3e
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	e00b      	b.n	8001684 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	1a9b      	subs	r3, r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001682:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fe16 	bl	80032e0 <HAL_PCD_SetAddress>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f898 	bl	80017f0 <USBD_Get_USB_Status>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80016c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	460b      	mov	r3, r1
 80016dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80016ec:	7af9      	ldrb	r1, [r7, #11]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	f001 fecd 	bl	8003490 <HAL_PCD_EP_Transmit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f877 	bl	80017f0 <USBD_Get_USB_Status>
 8001702:	4603      	mov	r3, r0
 8001704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001706:	7dbb      	ldrb	r3, [r7, #22]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800172e:	7af9      	ldrb	r1, [r7, #11]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	f001 fe61 	bl	80033fa <HAL_PCD_EP_Receive>
 8001738:	4603      	mov	r3, r0
 800173a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f856 	bl	80017f0 <USBD_Get_USB_Status>
 8001744:	4603      	mov	r3, r0
 8001746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001748:	7dbb      	ldrb	r3, [r7, #22]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_PCDEx_LPM_Callback+0x18>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d01f      	beq.n	80017aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800176a:	e03b      	b.n	80017e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8001774:	f7fe fffe 	bl	8000774 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_PCDEx_LPM_Callback+0x98>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a1b      	ldr	r2, [pc, #108]	; (80017ec <HAL_PCDEx_LPM_Callback+0x98>)
 800177e:	f023 0306 	bic.w	r3, r3, #6
 8001782:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 fc4c 	bl	8007040 <USBD_LL_Resume>
    break;
 80017a8:	e01c      	b.n	80017e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fc24 	bl	8007016 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_PCDEx_LPM_Callback+0x98>)
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_PCDEx_LPM_Callback+0x98>)
 80017dc:	f043 0306 	orr.w	r3, r3, #6
 80017e0:	6113      	str	r3, [r2, #16]
    break;
 80017e2:	bf00      	nop
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d817      	bhi.n	8001834 <USBD_Get_USB_Status+0x44>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <USBD_Get_USB_Status+0x1c>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	0800181d 	.word	0x0800181d
 8001810:	08001823 	.word	0x08001823
 8001814:	08001829 	.word	0x08001829
 8001818:	0800182f 	.word	0x0800182f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
    break;
 8001820:	e00b      	b.n	800183a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001822:	2303      	movs	r3, #3
 8001824:	73fb      	strb	r3, [r7, #15]
    break;
 8001826:	e008      	b.n	800183a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
    break;
 800182c:	e005      	b.n	800183a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800182e:	2303      	movs	r3, #3
 8001830:	73fb      	strb	r3, [r7, #15]
    break;
 8001832:	e002      	b.n	800183a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001834:	2303      	movs	r3, #3
 8001836:	73fb      	strb	r3, [r7, #15]
    break;
 8001838:	bf00      	nop
  }
  return usb_status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <SystemInit+0x28>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <SystemInit+0x28>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SystemInit+0x28>)
 800185e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001862:	609a      	str	r2, [r3, #8]
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f9a3 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f83c 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7fe ffec 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_DeInit+0x54>)
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_DeInit+0x54>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_DeInit+0x54>)
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_DeInit+0x54>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_DeInit+0x54>)
 80018da:	f04f 32ff 	mov.w	r2, #4294967295
 80018de:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_DeInit+0x54>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_DeInit+0x54>)
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_DeInit+0x54>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_DeInit+0x54>)
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_DeInit+0x54>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001902:	f000 f805 	bl	8001910 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f995 	bl	8001c6e <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 f94f 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000007c 	.word	0x2000007c
 8001978:	20000084 	.word	0x20000084
 800197c:	20000080 	.word	0x20000080

08001980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_IncTick+0x20>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x24>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <HAL_IncTick+0x24>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000084 	.word	0x20000084
 80019a4:	20000b9c 	.word	0x20000b9c

080019a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <HAL_GetTick+0x14>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000b9c 	.word	0x20000b9c

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff ffee 	bl	80019a8 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_Delay+0x40>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e6:	bf00      	nop
 80019e8:	f7ff ffde 	bl	80019a8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000084 	.word	0x20000084

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	; (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db10      	blt.n	8001ad8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <__NVIC_DisableIRQ+0x40>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	3320      	adds	r3, #32
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ad4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff07 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff1c 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff0f 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff1f 	bl	8001aa4 <__NVIC_DisableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff94 	bl	8001ba4 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e00c      	b.n	8001cbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cde:	4b23      	ldr	r3, [pc, #140]	; (8001d6c <HAL_FLASH_Program+0xa0>)
 8001ce0:	7e1b      	ldrb	r3, [r3, #24]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_FLASH_Program+0x1e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e03b      	b.n	8001d62 <HAL_FLASH_Program+0x96>
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_FLASH_Program+0xa0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cf4:	f000 f870 	bl	8001dd8 <FLASH_WaitForLastOperation>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d12b      	bne.n	8001d5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d08:	783b      	ldrb	r3, [r7, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f000 f919 	bl	8001f44 <FLASH_Program_Byte>
 8001d12:	e016      	b.n	8001d42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d1a:	883b      	ldrh	r3, [r7, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f000 f8ec 	bl	8001efc <FLASH_Program_HalfWord>
 8001d24:	e00d      	b.n	8001d42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d105      	bne.n	8001d38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f000 f8c1 	bl	8001eb8 <FLASH_Program_Word>
 8001d36:	e004      	b.n	8001d42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3c:	68b8      	ldr	r0, [r7, #8]
 8001d3e:	f000 f88b 	bl	8001e58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d46:	f000 f847 	bl	8001dd8 <FLASH_WaitForLastOperation>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_FLASH_Program+0xa4>)
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	4a07      	ldr	r2, [pc, #28]	; (8001d70 <HAL_FLASH_Program+0xa4>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_FLASH_Program+0xa0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000ba0 	.word	0x20000ba0
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_FLASH_Unlock+0x38>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	da0b      	bge.n	8001d9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_FLASH_Unlock+0x38>)
 8001d88:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_FLASH_Unlock+0x3c>)
 8001d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <HAL_FLASH_Unlock+0x38>)
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_FLASH_Unlock+0x40>)
 8001d90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_FLASH_Unlock+0x38>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	da01      	bge.n	8001d9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40023c00 	.word	0x40023c00
 8001db0:	45670123 	.word	0x45670123
 8001db4:	cdef89ab 	.word	0xcdef89ab

08001db8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_FLASH_Lock+0x1c>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_FLASH_Lock+0x1c>)
 8001dc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dc6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <FLASH_WaitForLastOperation+0x78>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dea:	f7ff fddd 	bl	80019a8 <HAL_GetTick>
 8001dee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001df0:	e010      	b.n	8001e14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d00c      	beq.n	8001e14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <FLASH_WaitForLastOperation+0x38>
 8001e00:	f7ff fdd2 	bl	80019a8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d201      	bcs.n	8001e14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e019      	b.n	8001e48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <FLASH_WaitForLastOperation+0x7c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e8      	bne.n	8001df2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <FLASH_WaitForLastOperation+0x7c>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <FLASH_WaitForLastOperation+0x7c>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <FLASH_WaitForLastOperation+0x7c>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e3e:	f000 f8a3 	bl	8001f88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
  
}  
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000ba0 	.word	0x20000ba0
 8001e54:	40023c00 	.word	0x40023c00

08001e58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e58:	b490      	push	{r4, r7}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e70:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <FLASH_Program_DoubleWord+0x5c>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001e92:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	2400      	movs	r4, #0
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	3204      	adds	r2, #4
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc90      	pop	{r4, r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <FLASH_Program_Word+0x40>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	601a      	str	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <FLASH_Program_HalfWord+0x44>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	801a      	strh	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <FLASH_Program_Byte+0x40>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	701a      	strb	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00

08001f88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001fa2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fa6:	2210      	movs	r2, #16
 8001fa8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001fc0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001fde:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8001ffc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8002000:	2280      	movs	r2, #128	; 0x80
 8002002:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	4a0d      	ldr	r2, [pc, #52]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 800201a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <FLASH_SetErrorCode+0xc4>)
 800201e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002022:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <FLASH_SetErrorCode+0xc4>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d008      	beq.n	8002042 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f043 0320 	orr.w	r3, r3, #32
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <FLASH_SetErrorCode+0xc8>)
 800203a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <FLASH_SetErrorCode+0xc4>)
 800203e:	2202      	movs	r2, #2
 8002040:	60da      	str	r2, [r3, #12]
  }
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40023c00 	.word	0x40023c00
 8002050:	20000ba0 	.word	0x20000ba0

08002054 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_FLASHEx_Erase+0xd8>)
 8002068:	7e1b      	ldrb	r3, [r3, #24]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_FLASHEx_Erase+0x1e>
 800206e:	2302      	movs	r3, #2
 8002070:	e058      	b.n	8002124 <HAL_FLASHEx_Erase+0xd0>
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_FLASHEx_Erase+0xd8>)
 8002074:	2201      	movs	r2, #1
 8002076:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002078:	f24c 3050 	movw	r0, #50000	; 0xc350
 800207c:	f7ff feac 	bl	8001dd8 <FLASH_WaitForLastOperation>
 8002080:	4603      	mov	r3, r0
 8002082:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d148      	bne.n	800211c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f04f 32ff 	mov.w	r2, #4294967295
 8002090:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d115      	bne.n	80020c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 f844 	bl	8002134 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020b0:	f7ff fe92 	bl	8001dd8 <FLASH_WaitForLastOperation>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_FLASHEx_Erase+0xdc>)
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_FLASHEx_Erase+0xdc>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6113      	str	r3, [r2, #16]
 80020c4:	e028      	b.n	8002118 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	e01c      	b.n	8002108 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	68b8      	ldr	r0, [r7, #8]
 80020d8:	f000 f850 	bl	800217c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020e0:	f7ff fe7a 	bl	8001dd8 <FLASH_WaitForLastOperation>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_FLASHEx_Erase+0xdc>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_FLASHEx_Erase+0xdc>)
 80020ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80020f2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	601a      	str	r2, [r3, #0]
          break;
 8002100:	e00a      	b.n	8002118 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4413      	add	r3, r2
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	429a      	cmp	r2, r3
 8002116:	d3da      	bcc.n	80020ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002118:	f000 f878 	bl	800220c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_FLASHEx_Erase+0xd8>)
 800211e:	2200      	movs	r2, #0
 8002120:	761a      	strb	r2, [r3, #24]

  return status;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000ba0 	.word	0x20000ba0
 8002130:	40023c00 	.word	0x40023c00

08002134 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <FLASH_MassErase+0x44>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <FLASH_MassErase+0x44>)
 8002146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800214a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <FLASH_MassErase+0x44>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <FLASH_MassErase+0x44>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <FLASH_MassErase+0x44>)
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	4313      	orrs	r3, r2
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <FLASH_MassErase+0x44>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6113      	str	r3, [r2, #16]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e010      	b.n	80021ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d103      	bne.n	80021a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800219e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e009      	b.n	80021ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d103      	bne.n	80021b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80021ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e002      	b.n	80021ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80021b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	490f      	ldr	r1, [pc, #60]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <FLASH_Erase_Sector+0x8c>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6113      	str	r3, [r2, #16]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40023c00 	.word	0x40023c00

0800220c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800221c:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <FLASH_FlushCaches+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002226:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <FLASH_FlushCaches+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <FLASH_FlushCaches+0x88>)
 800222e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <FLASH_FlushCaches+0x88>)
 800223a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800223e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <FLASH_FlushCaches+0x88>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <FLASH_FlushCaches+0x88>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <FLASH_FlushCaches+0x88>)
 800225e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002262:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <FLASH_FlushCaches+0x88>)
 800226a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800227a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <FLASH_FlushCaches+0x88>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <FLASH_FlushCaches+0x88>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002286:	6013      	str	r3, [r2, #0]
  }
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023c00 	.word	0x40023c00

08002298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e165      	b.n	8002580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	f040 8154 	bne.w	800257a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d00b      	beq.n	80022f2 <HAL_GPIO_Init+0x5a>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e6:	2b11      	cmp	r3, #17
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b12      	cmp	r3, #18
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0xfc>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b12      	cmp	r3, #18
 8002392:	d123      	bne.n	80023dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	08da      	lsrs	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3208      	adds	r2, #8
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	08da      	lsrs	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3208      	adds	r2, #8
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0203 	and.w	r2, r3, #3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80ae 	beq.w	800257a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	4b5c      	ldr	r3, [pc, #368]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	4a5b      	ldr	r2, [pc, #364]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242c:	6453      	str	r3, [r2, #68]	; 0x44
 800242e:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_GPIO_Init+0x2fc>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_GPIO_Init+0x300>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4e      	ldr	r2, [pc, #312]	; (800259c <HAL_GPIO_Init+0x304>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4d      	ldr	r2, [pc, #308]	; (80025a0 <HAL_GPIO_Init+0x308>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4c      	ldr	r2, [pc, #304]	; (80025a4 <HAL_GPIO_Init+0x30c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_GPIO_Init+0x310>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_GPIO_Init+0x314>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x20a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_GPIO_Init+0x318>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x206>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a48      	ldr	r2, [pc, #288]	; (80025b4 <HAL_GPIO_Init+0x31c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x202>
 8002496:	2306      	movs	r3, #6
 8002498:	e00c      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249a:	2307      	movs	r3, #7
 800249c:	e00a      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 800249e:	2305      	movs	r3, #5
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a2:	2304      	movs	r3, #4
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x21c>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_GPIO_Init+0x300>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f6:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_GPIO_Init+0x320>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002520:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_GPIO_Init+0x320>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_GPIO_Init+0x320>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f ae96 	bls.w	80022b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40023800 	.word	0x40023800
 8002598:	40013800 	.word	0x40013800
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40021400 	.word	0x40021400
 80025b4:	40021800 	.word	0x40021800
 80025b8:	40013c00 	.word	0x40013c00

080025bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e0c7      	b.n	8002768 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d8:	2201      	movs	r2, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	f040 80b7 	bne.w	8002762 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80025f4:	4a61      	ldr	r2, [pc, #388]	; (800277c <HAL_GPIO_DeInit+0x1c0>)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4013      	ands	r3, r2
 8002614:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a59      	ldr	r2, [pc, #356]	; (8002780 <HAL_GPIO_DeInit+0x1c4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d025      	beq.n	800266a <HAL_GPIO_DeInit+0xae>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_GPIO_DeInit+0x1c8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d01f      	beq.n	8002666 <HAL_GPIO_DeInit+0xaa>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_GPIO_DeInit+0x1cc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d019      	beq.n	8002662 <HAL_GPIO_DeInit+0xa6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_GPIO_DeInit+0x1d0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_GPIO_DeInit+0xa2>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a55      	ldr	r2, [pc, #340]	; (8002790 <HAL_GPIO_DeInit+0x1d4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00d      	beq.n	800265a <HAL_GPIO_DeInit+0x9e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a54      	ldr	r2, [pc, #336]	; (8002794 <HAL_GPIO_DeInit+0x1d8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d007      	beq.n	8002656 <HAL_GPIO_DeInit+0x9a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a53      	ldr	r2, [pc, #332]	; (8002798 <HAL_GPIO_DeInit+0x1dc>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d101      	bne.n	8002652 <HAL_GPIO_DeInit+0x96>
 800264e:	2306      	movs	r3, #6
 8002650:	e00c      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 8002652:	2307      	movs	r3, #7
 8002654:	e00a      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_DeInit+0xb0>
 800266a:	2300      	movs	r3, #0
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d132      	bne.n	80026e2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800267c:	4b47      	ldr	r3, [pc, #284]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	4945      	ldr	r1, [pc, #276]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800268a:	4b44      	ldr	r3, [pc, #272]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	43db      	mvns	r3, r3
 8002692:	4942      	ldr	r1, [pc, #264]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 8002694:	4013      	ands	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	43db      	mvns	r3, r3
 80026a0:	493e      	ldr	r1, [pc, #248]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80026a6:	4b3d      	ldr	r3, [pc, #244]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	493b      	ldr	r1, [pc, #236]	; (800279c <HAL_GPIO_DeInit+0x1e0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80026c4:	4a2d      	ldr	r2, [pc, #180]	; (800277c <HAL_GPIO_DeInit+0x1c0>)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	4829      	ldr	r0, [pc, #164]	; (800277c <HAL_GPIO_DeInit+0x1c0>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	400a      	ands	r2, r1
 80026dc:	3302      	adds	r3, #2
 80026de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2103      	movs	r1, #3
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	08d2      	lsrs	r2, r2, #3
 8002718:	4019      	ands	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3208      	adds	r2, #8
 800271e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2103      	movs	r1, #3
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	2101      	movs	r1, #1
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2103      	movs	r1, #3
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	401a      	ands	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3301      	adds	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b0f      	cmp	r3, #15
 800276c:	f67f af34 	bls.w	80025d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40021400 	.word	0x40021400
 8002798:	40021800 	.word	0x40021800
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
 80027bc:	e001      	b.n	80027c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002802:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002804:	b08f      	sub	sp, #60	; 0x3c
 8002806:	af0a      	add	r7, sp, #40	; 0x28
 8002808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e116      	b.n	8002a42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fcdc 	bl	80011ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2203      	movs	r2, #3
 8002838:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f84b 	bl	80058ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	687e      	ldr	r6, [r7, #4]
 8002860:	466d      	mov	r5, sp
 8002862:	f106 0410 	add.w	r4, r6, #16
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002872:	e885 0003 	stmia.w	r5, {r0, r1}
 8002876:	1d33      	adds	r3, r6, #4
 8002878:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287a:	6838      	ldr	r0, [r7, #0]
 800287c:	f002 ff22 	bl	80056c4 <USB_CoreInit>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0d7      	b.n	8002a42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f003 f839 	bl	8005910 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e04a      	b.n	800293a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	333d      	adds	r3, #61	; 0x3d
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	333c      	adds	r3, #60	; 0x3c
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	b298      	uxth	r0, r3
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3342      	adds	r3, #66	; 0x42
 80028e0:	4602      	mov	r2, r0
 80028e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	333f      	adds	r3, #63	; 0x3f
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3344      	adds	r3, #68	; 0x44
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	3348      	adds	r3, #72	; 0x48
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	3350      	adds	r3, #80	; 0x50
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	3301      	adds	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3af      	bcc.n	80028a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e044      	b.n	80029d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	3301      	adds	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d3b5      	bcc.n	800294a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	687e      	ldr	r6, [r7, #4]
 80029e6:	466d      	mov	r5, sp
 80029e8:	f106 0410 	add.w	r4, r6, #16
 80029ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fc:	1d33      	adds	r3, r6, #4
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	6838      	ldr	r0, [r7, #0]
 8002a02:	f002 ffaf 	bl	8005964 <USB_DevInit>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e014      	b.n	8002a42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f001 f869 	bl	8003b08 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f003 ff0e 	bl	800685c <USB_DevDisconnect>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_Start+0x1c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e020      	b.n	8002aa8 <HAL_PCD_Start+0x5e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d109      	bne.n	8002a8a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d005      	beq.n	8002a8a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 ff1c 	bl	80058cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 febe 	bl	800681a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_PCD_Stop+0x1c>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e026      	b.n	8002b1a <HAL_PCD_Stop+0x6a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 ff08 	bl	80058ee <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 feba 	bl	800685c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2110      	movs	r1, #16
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 f896 	bl	8005c20 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d109      	bne.n	8002b10 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d005      	beq.n	8002b10 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b08d      	sub	sp, #52	; 0x34
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 ff43 	bl	80069c4 <USB_GetMode>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f040 83ca 	bne.w	80032da <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fea7 	bl	800689e <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 83c0 	beq.w	80032d8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fe9e 	bl	800689e <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d107      	bne.n	8002b7c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f002 0202 	and.w	r2, r2, #2
 8002b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fe8c 	bl	800689e <USB_ReadInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d161      	bne.n	8002c54 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0210 	bic.w	r2, r2, #16
 8002b9e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f003 020f 	and.w	r2, r3, #15
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	0c5b      	lsrs	r3, r3, #17
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d124      	bne.n	8002c16 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d035      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	6a38      	ldr	r0, [r7, #32]
 8002bec:	f003 fcf2 	bl	80065d4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfc:	441a      	add	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0e:	441a      	add	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	619a      	str	r2, [r3, #24]
 8002c14:	e016      	b.n	8002c44 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	0c5b      	lsrs	r3, r3, #17
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d110      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c28:	2208      	movs	r2, #8
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6a38      	ldr	r0, [r7, #32]
 8002c2e:	f003 fcd1 	bl	80065d4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3e:	441a      	add	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0210 	orr.w	r2, r2, #16
 8002c52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fe20 	bl	800689e <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c68:	d16e      	bne.n	8002d48 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f003 fe26 	bl	80068c4 <USB_ReadDevAllOutEpInterrupt>
 8002c78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c7a:	e062      	b.n	8002d42 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d057      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fe4b 	bl	800692c <USB_ReadDevOutEPInterrupt>
 8002c96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fd7c 	bl	80037b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fe76 	bl	80039cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d12:	461a      	mov	r2, r3
 8002d14:	2320      	movs	r3, #32
 8002d16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d199      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fda6 	bl	800689e <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d5c:	f040 80c0 	bne.w	8002ee0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fdc7 	bl	80068f8 <USB_ReadDevAllInEpInterrupt>
 8002d6a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d70:	e0b2      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a7 	beq.w	8002ecc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 fded 	bl	8006968 <USB_ReadDevInEPInterrupt>
 8002d8e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d057      	beq.n	8002e4a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	2201      	movs	r2, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dba:	4013      	ands	r3, r2
 8002dbc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2301      	movs	r3, #1
 8002dce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d132      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3348      	adds	r3, #72	; 0x48
 8002de8:	6819      	ldr	r1, [r3, #0]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4403      	add	r3, r0
 8002df8:	3344      	adds	r3, #68	; 0x44
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4419      	add	r1, r3
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4403      	add	r3, r0
 8002e0c:	3348      	adds	r3, #72	; 0x48
 8002e0e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d113      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x31c>
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3350      	adds	r3, #80	; 0x50
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e36:	461a      	mov	r2, r3
 8002e38:	2101      	movs	r1, #1
 8002e3a:	f003 fdf5 	bl	8006a28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe fa52 	bl	80012ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e60:	461a      	mov	r2, r3
 8002e62:	2308      	movs	r3, #8
 8002e64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2310      	movs	r3, #16
 8002e80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fbe6 	bl	8003698 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f47f af49 	bne.w	8002d72 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fcda 	bl	800689e <USB_ReadInterrupts>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ef4:	d122      	bne.n	8002f3c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fc18 	bl	8001754 <HAL_PCDEx_LPM_Callback>
 8002f24:	e002      	b.n	8002f2c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fa4e 	bl	80013c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f003 fcac 	bl	800689e <USB_ReadInterrupts>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f50:	d112      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe fa0a 	bl	800137c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f76:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fc8e 	bl	800689e <USB_ReadInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8c:	d121      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002f9c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fe fbc5 	bl	8001754 <HAL_PCDEx_LPM_Callback>
 8002fca:	e002      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7fe f9d5 	bl	800137c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 fc61 	bl	800689e <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe6:	f040 80c7 	bne.w	8003178 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2110      	movs	r1, #16
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fe0b 	bl	8005c20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300a:	2300      	movs	r3, #0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	e056      	b.n	80030be <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301c:	461a      	mov	r2, r3
 800301e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003022:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003034:	0151      	lsls	r1, r2, #5
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	440a      	add	r2, r1
 800303a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800303e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003042:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4413      	add	r3, r2
 800304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003054:	0151      	lsls	r1, r2, #5
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	440a      	add	r2, r1
 800305a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800305e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003062:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003076:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	0151      	lsls	r1, r2, #5
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	440a      	add	r2, r1
 800308e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003096:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a8:	0151      	lsls	r1, r2, #5
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	440a      	add	r2, r1
 80030ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	3301      	adds	r3, #1
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d3a3      	bcc.n	8003010 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f4:	f043 030b 	orr.w	r3, r3, #11
 80030f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800310a:	f043 030b 	orr.w	r3, r3, #11
 800310e:	6453      	str	r3, [r2, #68]	; 0x44
 8003110:	e015      	b.n	800313e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003120:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003124:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003128:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003138:	f043 030b 	orr.w	r3, r3, #11
 800313c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800314c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003150:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003162:	461a      	mov	r2, r3
 8003164:	f003 fc60 	bl	8006a28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fb8e 	bl	800689e <USB_ReadInterrupts>
 8003182:	4603      	mov	r3, r0
 8003184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318c:	d124      	bne.n	80031d8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fc24 	bl	80069e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f002 fda0 	bl	8005ce2 <USB_GetDevSpeed>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	f000 fe8d 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 80031b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	4620      	mov	r0, r4
 80031be:	f002 fae3 	bl	8005788 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f8bb 	bl	800133e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695a      	ldr	r2, [r3, #20]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fb5e 	bl	800689e <USB_ReadInterrupts>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d10a      	bne.n	8003202 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe f898 	bl	8001322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 0208 	and.w	r2, r2, #8
 8003200:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fb49 	bl	800689e <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003216:	d10f      	bne.n	8003238 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	b2db      	uxtb	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe f8f0 	bl	8001408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f003 fb2e 	bl	800689e <USB_ReadInterrupts>
 8003242:	4603      	mov	r3, r0
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800324c:	d10f      	bne.n	800326e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7fe f8c3 	bl	80013e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800326c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fb13 	bl	800689e <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d10a      	bne.n	800329a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fe f8d1 	bl	800142c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fafd 	bl	800689e <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d115      	bne.n	80032da <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7fe f8c1 	bl	8001448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e000      	b.n	80032da <HAL_PCD_IRQHandler+0x7b8>
      return;
 80032d8:	bf00      	nop
    }
  }
}
 80032da:	3734      	adds	r7, #52	; 0x34
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}

080032e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_PCD_SetAddress+0x1a>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e013      	b.n	8003322 <HAL_PCD_SetAddress+0x42>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fa5b 	bl	80067ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	4608      	mov	r0, r1
 8003334:	4611      	mov	r1, r2
 8003336:	461a      	mov	r2, r3
 8003338:	4603      	mov	r3, r0
 800333a:	70fb      	strb	r3, [r7, #3]
 800333c:	460b      	mov	r3, r1
 800333e:	803b      	strh	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800334c:	2b00      	cmp	r3, #0
 800334e:	da0f      	bge.n	8003370 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	3338      	adds	r3, #56	; 0x38
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	3304      	adds	r3, #4
 8003366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	705a      	strb	r2, [r3, #1]
 800336e:	e00f      	b.n	8003390 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 020f 	and.w	r2, r3, #15
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800339c:	883a      	ldrh	r2, [r7, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	78ba      	ldrb	r2, [r7, #2]
 80033a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033ba:	78bb      	ldrb	r3, [r7, #2]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d102      	bne.n	80033c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_PCD_EP_Open+0xaa>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e00e      	b.n	80033f2 <HAL_PCD_EP_Open+0xc8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 fca2 	bl	8005d2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033f0:	7afb      	ldrb	r3, [r7, #11]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	460b      	mov	r3, r1
 8003408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343c:	7afb      	ldrb	r3, [r7, #11]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	b2da      	uxtb	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	f002 ff29 	bl	80062c4 <USB_EP0StartXfer>
 8003472:	e008      	b.n	8003486 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6979      	ldr	r1, [r7, #20]
 8003482:	f002 fcdb 	bl	8005e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	460b      	mov	r3, r1
 800349e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	3338      	adds	r3, #56	; 0x38
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2201      	movs	r2, #1
 80034ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d0:	7afb      	ldrb	r3, [r7, #11]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d102      	bne.n	80034ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	f002 fedf 	bl	80062c4 <USB_EP0StartXfer>
 8003506:	e008      	b.n	800351a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	f002 fc91 	bl	8005e3c <USB_EPStartXfer>
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d901      	bls.n	8003542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e050      	b.n	80035e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0f      	bge.n	800356a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3338      	adds	r3, #56	; 0x38
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	705a      	strb	r2, [r3, #1]
 8003568:	e00d      	b.n	8003586 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_PCD_EP_SetStall+0x82>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e01e      	b.n	80035e4 <HAL_PCD_EP_SetStall+0xc0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 f836 	bl	8006626 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2d9      	uxtb	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035d4:	461a      	mov	r2, r3
 80035d6:	f003 fa27 	bl	8006a28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d901      	bls.n	800360a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e042      	b.n	8003690 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800360a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0f      	bge.n	8003632 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3338      	adds	r3, #56	; 0x38
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	705a      	strb	r2, [r3, #1]
 8003630:	e00f      	b.n	8003652 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_PCD_EP_ClrStall+0x86>
 800366e:	2302      	movs	r3, #2
 8003670:	e00e      	b.n	8003690 <HAL_PCD_EP_ClrStall+0xa4>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68f9      	ldr	r1, [r7, #12]
 8003680:	4618      	mov	r0, r3
 8003682:	f003 f83e 	bl	8006702 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	3338      	adds	r3, #56	; 0x38
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	3304      	adds	r3, #4
 80036be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d901      	bls.n	80036d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e06c      	b.n	80037aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	695a      	ldr	r2, [r3, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d902      	bls.n	80036ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	3303      	adds	r3, #3
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036f4:	e02b      	b.n	800374e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	429a      	cmp	r2, r3
 800370a:	d902      	bls.n	8003712 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3303      	adds	r3, #3
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800372a:	b2db      	uxtb	r3, r3
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4603      	mov	r3, r0
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f002 ff1a 	bl	800656a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	441a      	add	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	b29b      	uxth	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	d809      	bhi.n	8003778 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800376c:	429a      	cmp	r2, r3
 800376e:	d203      	bcs.n	8003778 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1be      	bne.n	80036f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	d811      	bhi.n	80037a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	2201      	movs	r2, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	43db      	mvns	r3, r3
 800379e:	6939      	ldr	r1, [r7, #16]
 80037a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a4:	4013      	ands	r3, r2
 80037a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	333c      	adds	r3, #60	; 0x3c
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 80a0 	bne.w	800392c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a72      	ldr	r2, [pc, #456]	; (80039c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	f240 80dd 	bls.w	80039ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80d7 	beq.w	80039ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003818:	461a      	mov	r2, r3
 800381a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381e:	6093      	str	r3, [r2, #8]
 8003820:	e0cb      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003838:	461a      	mov	r2, r3
 800383a:	2320      	movs	r3, #32
 800383c:	6093      	str	r3, [r2, #8]
 800383e:	e0bc      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 80b7 	bne.w	80039ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a5d      	ldr	r2, [pc, #372]	; (80039c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d90f      	bls.n	8003874 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	461a      	mov	r2, r3
 800386c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003870:	6093      	str	r3, [r2, #8]
 8003872:	e0a2      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003886:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	440b      	add	r3, r1
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800389a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4403      	add	r3, r0
 80038aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4403      	add	r3, r0
 80038d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4419      	add	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4403      	add	r3, r0
 80038e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d114      	bne.n	800391e <PCD_EP_OutXfrComplete_int+0x16a>
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003916:	461a      	mov	r2, r3
 8003918:	2101      	movs	r1, #1
 800391a:	f003 f885 	bl	8006a28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fcc7 	bl	80012b8 <HAL_PCD_DataOutStageCallback>
 800392a:	e046      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a26      	ldr	r2, [pc, #152]	; (80039c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d124      	bne.n	800397e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003950:	6093      	str	r3, [r2, #8]
 8003952:	e032      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	2320      	movs	r3, #32
 800396e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fc9e 	bl	80012b8 <HAL_PCD_DataOutStageCallback>
 800397c:	e01d      	b.n	80039ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d114      	bne.n	80039ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a6:	461a      	mov	r2, r3
 80039a8:	2100      	movs	r1, #0
 80039aa:	f003 f83d 	bl	8006a28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd fc7f 	bl	80012b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	4f54300a 	.word	0x4f54300a
 80039c8:	4f54310a 	.word	0x4f54310a

080039cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	333c      	adds	r3, #60	; 0x3c
 80039e4:	3304      	adds	r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <PCD_EP_OutSetupPacket_int+0x88>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d90e      	bls.n	8003a20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	461a      	mov	r2, r3
 8003a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd fc37 	bl	8001294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d90c      	bls.n	8003a48 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a40:	461a      	mov	r2, r3
 8003a42:	2101      	movs	r1, #1
 8003a44:	f002 fff0 	bl	8006a28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	4f54300a 	.word	0x4f54300a

08003a58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
 8003a64:	4613      	mov	r3, r2
 8003a66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a76:	883b      	ldrh	r3, [r7, #0]
 8003a78:	0419      	lsls	r1, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e028      	b.n	8003ad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	0c1b      	lsrs	r3, r3, #16
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e00d      	b.n	8003ab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3340      	adds	r3, #64	; 0x40
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3ec      	bcc.n	8003a9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ac0:	883b      	ldrh	r3, [r7, #0]
 8003ac2:	0418      	lsls	r0, r3, #16
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	4302      	orrs	r2, r0
 8003ad0:	3340      	adds	r3, #64	; 0x40
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	887a      	ldrh	r2, [r7, #2]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	f043 0303 	orr.w	r3, r3, #3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0cc      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b64:	4b68      	ldr	r3, [pc, #416]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d90c      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d044      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d119      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d107      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0e:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e06f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e067      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2e:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4934      	ldr	r1, [pc, #208]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c40:	f7fd feb2 	bl	80019a8 <HAL_GetTick>
 8003c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fd feae 	bl	80019a8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e04f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 020c 	and.w	r2, r3, #12
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1eb      	bne.n	8003c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d20c      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4601      	mov	r1, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	fa21 f303 	lsr.w	r3, r1, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fe12 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	080094f4 	.word	0x080094f4
 8003d14:	2000007c 	.word	0x2000007c
 8003d18:	20000080 	.word	0x20000080

08003d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d32:	4b63      	ldr	r3, [pc, #396]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCC_GetSysClockFreq+0x32>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d008      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x38>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 80b4 	bne.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b5e      	ldr	r3, [pc, #376]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d4a:	60bb      	str	r3, [r7, #8]
       break;
 8003d4c:	e0b3      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4e:	4b5e      	ldr	r3, [pc, #376]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d50:	60bb      	str	r3, [r7, #8]
      break;
 8003d52:	e0b0      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d54:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d5e:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d04a      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	ea03 0501 	and.w	r5, r3, r1
 8003d80:	ea04 0602 	and.w	r6, r4, r2
 8003d84:	4629      	mov	r1, r5
 8003d86:	4632      	mov	r2, r6
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	f04f 0400 	mov.w	r4, #0
 8003d90:	0154      	lsls	r4, r2, #5
 8003d92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d96:	014b      	lsls	r3, r1, #5
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	1b49      	subs	r1, r1, r5
 8003d9e:	eb62 0206 	sbc.w	r2, r2, r6
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	f04f 0400 	mov.w	r4, #0
 8003daa:	0194      	lsls	r4, r2, #6
 8003dac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003db0:	018b      	lsls	r3, r1, #6
 8003db2:	1a5b      	subs	r3, r3, r1
 8003db4:	eb64 0402 	sbc.w	r4, r4, r2
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	00e2      	lsls	r2, r4, #3
 8003dc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dc6:	00d9      	lsls	r1, r3, #3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4614      	mov	r4, r2
 8003dcc:	195b      	adds	r3, r3, r5
 8003dce:	eb44 0406 	adc.w	r4, r4, r6
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	0262      	lsls	r2, r4, #9
 8003ddc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003de0:	0259      	lsls	r1, r3, #9
 8003de2:	460b      	mov	r3, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	4621      	mov	r1, r4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f04f 0400 	mov.w	r4, #0
 8003df0:	461a      	mov	r2, r3
 8003df2:	4623      	mov	r3, r4
 8003df4:	f7fc fa06 	bl	8000204 <__aeabi_uldivmod>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e049      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	ea03 0501 	and.w	r5, r3, r1
 8003e16:	ea04 0602 	and.w	r6, r4, r2
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f04f 0400 	mov.w	r4, #0
 8003e26:	0154      	lsls	r4, r2, #5
 8003e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e2c:	014b      	lsls	r3, r1, #5
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4622      	mov	r2, r4
 8003e32:	1b49      	subs	r1, r1, r5
 8003e34:	eb62 0206 	sbc.w	r2, r2, r6
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	0194      	lsls	r4, r2, #6
 8003e42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	1a5b      	subs	r3, r3, r1
 8003e4a:	eb64 0402 	sbc.w	r4, r4, r2
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	00e2      	lsls	r2, r4, #3
 8003e58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e5c:	00d9      	lsls	r1, r3, #3
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4614      	mov	r4, r2
 8003e62:	195b      	adds	r3, r3, r5
 8003e64:	eb44 0406 	adc.w	r4, r4, r6
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	02a2      	lsls	r2, r4, #10
 8003e72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e76:	0299      	lsls	r1, r3, #10
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4614      	mov	r4, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	4621      	mov	r1, r4
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f04f 0400 	mov.w	r4, #0
 8003e86:	461a      	mov	r2, r3
 8003e88:	4623      	mov	r3, r4
 8003e8a:	f7fc f9bb 	bl	8000204 <__aeabi_uldivmod>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460c      	mov	r4, r1
 8003e92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	60bb      	str	r3, [r7, #8]
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eb2:	60bb      	str	r3, [r7, #8]
      break;
 8003eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	2000007c 	.word	0x2000007c

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4601      	mov	r1, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08009504 	.word	0x08009504

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	4601      	mov	r1, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0b5b      	lsrs	r3, r3, #13
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08009504 	.word	0x08009504

08003f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f54:	4b87      	ldr	r3, [pc, #540]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4984      	ldr	r1, [pc, #528]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8003f72:	2301      	movs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d010      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f82:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4978      	ldr	r1, [pc, #480]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 8083 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a69      	ldr	r2, [pc, #420]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fda:	f7fd fce5 	bl	80019a8 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003fe2:	f7fd fce1 	bl	80019a8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e162      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ff4:	4b60      	ldr	r3, [pc, #384]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004000:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02f      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	429a      	cmp	r2, r3
 800401c:	d028      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800401e:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004026:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004028:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800402e:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004034:	4a4f      	ldr	r2, [pc, #316]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800403a:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b01      	cmp	r3, #1
 8004044:	d114      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004046:	f7fd fcaf 	bl	80019a8 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fcab 	bl	80019a8 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e12a      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ee      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407c:	d10d      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	4938      	ldr	r1, [pc, #224]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004094:	4313      	orrs	r3, r2
 8004096:	608b      	str	r3, [r1, #8]
 8004098:	e005      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800409a:	4b36      	ldr	r3, [pc, #216]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a35      	ldr	r2, [pc, #212]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	4930      	ldr	r1, [pc, #192]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80040ca:	4b2d      	ldr	r3, [pc, #180]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80040cc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	4922      	ldr	r1, [pc, #136]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d011      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004102:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	491a      	ldr	r1, [pc, #104]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800411a:	d101      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800411c:	2301      	movs	r3, #1
 800411e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d004      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	f040 8091 	bne.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004158:	f7fd fc26 	bl	80019a8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800415e:	e013      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004160:	f7fd fc22 	bl	80019a8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d90c      	bls.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e0a3      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40007000 	.word	0x40007000
 800417c:	42470e40 	.word	0x42470e40
 8004180:	424711e0 	.word	0x424711e0
 8004184:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004188:	4b4e      	ldr	r3, [pc, #312]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004194:	4a4c      	ldr	r2, [pc, #304]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d023      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d019      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d8:	d00e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d019      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d115      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f6:	d110      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	492c      	ldr	r1, [pc, #176]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	071b      	lsls	r3, r3, #28
 8004240:	4920      	ldr	r1, [pc, #128]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800424e:	f7fd fbab 	bl	80019a8 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004256:	f7fd fba7 	bl	80019a8 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e028      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004286:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	490d      	ldr	r1, [pc, #52]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4904      	ldr	r1, [pc, #16]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800
 80042c8:	424710d8 	.word	0x424710d8
 80042cc:	42470068 	.word	0x42470068

080042d0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80042d6:	f7fd fb67 	bl	80019a8 <HAL_GetTick>
 80042da:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042dc:	4b5d      	ldr	r3, [pc, #372]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5c      	ldr	r2, [pc, #368]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ea:	f7fd fb5d 	bl	80019a8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0a7      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80042fc:	4b55      	ldr	r3, [pc, #340]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004308:	4b52      	ldr	r3, [pc, #328]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a51      	ldr	r2, [pc, #324]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800430e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004312:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004314:	f7fd fb48 	bl	80019a8 <HAL_GetTick>
 8004318:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800431a:	4b4e      	ldr	r3, [pc, #312]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004322:	f7fd fb41 	bl	80019a8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e089      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ee      	bne.n	8004322 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004344:	f7fd fb30 	bl	80019a8 <HAL_GetTick>
 8004348:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800434a:	4b42      	ldr	r3, [pc, #264]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a41      	ldr	r2, [pc, #260]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004350:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004354:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fb26 	bl	80019a8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e070      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800436a:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004376:	f7fd fb17 	bl	80019a8 <HAL_GetTick>
 800437a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800437c:	4b35      	ldr	r3, [pc, #212]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a34      	ldr	r2, [pc, #208]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004386:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd fb0d 	bl	80019a8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e057      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80043a8:	f7fd fafe 	bl	80019a8 <HAL_GetTick>
 80043ac:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a28      	ldr	r2, [pc, #160]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043bc:	f7fd faf4 	bl	80019a8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e03e      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043dc:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_RCC_DeInit+0x188>)
 80043de:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_RCC_DeInit+0x188>)
 80043e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80043e8:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80043f2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4a16      	ldr	r2, [pc, #88]	; (8004454 <HAL_RCC_DeInit+0x184>)
 80043fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fe:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004406:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800440a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004416:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800441e:	f023 0301 	bic.w	r3, r3, #1
 8004422:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_DeInit+0x184>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004428:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <HAL_RCC_DeInit+0x184>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_RCC_DeInit+0x18c>)
 8004432:	4a0b      	ldr	r2, [pc, #44]	; (8004460 <HAL_RCC_DeInit+0x190>)
 8004434:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_RCC_DeInit+0x194>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd fa70 	bl	8001920 <HAL_InitTick>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800444a:	2300      	movs	r3, #0
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	24003010 	.word	0x24003010
 800445c:	2000007c 	.word	0x2000007c
 8004460:	00f42400 	.word	0x00f42400
 8004464:	20000080 	.word	0x20000080

08004468 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d075      	beq.n	800456c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004480:	4ba2      	ldr	r3, [pc, #648]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b04      	cmp	r3, #4
 800448a:	d00c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800448c:	4b9f      	ldr	r3, [pc, #636]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004494:	2b08      	cmp	r3, #8
 8004496:	d112      	bne.n	80044be <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004498:	4b9c      	ldr	r3, [pc, #624]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a4:	d10b      	bne.n	80044be <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a6:	4b99      	ldr	r3, [pc, #612]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d05b      	beq.n	800456a <HAL_RCC_OscConfig+0x102>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d157      	bne.n	800456a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e20b      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x6e>
 80044c8:	4b90      	ldr	r3, [pc, #576]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a8f      	ldr	r2, [pc, #572]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e01d      	b.n	8004512 <HAL_RCC_OscConfig+0xaa>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044de:	d10c      	bne.n	80044fa <HAL_RCC_OscConfig+0x92>
 80044e0:	4b8a      	ldr	r3, [pc, #552]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a89      	ldr	r2, [pc, #548]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b87      	ldr	r3, [pc, #540]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a86      	ldr	r2, [pc, #536]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e00b      	b.n	8004512 <HAL_RCC_OscConfig+0xaa>
 80044fa:	4b84      	ldr	r3, [pc, #528]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a83      	ldr	r2, [pc, #524]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a80      	ldr	r2, [pc, #512]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800450c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d013      	beq.n	8004542 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451a:	f7fd fa45 	bl	80019a8 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004522:	f7fd fa41 	bl	80019a8 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b64      	cmp	r3, #100	; 0x64
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e1d0      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004534:	4b75      	ldr	r3, [pc, #468]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0xba>
 8004540:	e014      	b.n	800456c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd fa31 	bl	80019a8 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454a:	f7fd fa2d 	bl	80019a8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	; 0x64
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e1bc      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455c:	4b6b      	ldr	r3, [pc, #428]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0xe2>
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d063      	beq.n	8004640 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004578:	4b64      	ldr	r3, [pc, #400]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800458c:	2b08      	cmp	r3, #8
 800458e:	d11c      	bne.n	80045ca <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004590:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d116      	bne.n	80045ca <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459c:	4b5b      	ldr	r3, [pc, #364]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_OscConfig+0x14c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e190      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b55      	ldr	r3, [pc, #340]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4952      	ldr	r1, [pc, #328]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c8:	e03a      	b.n	8004640 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d2:	4b4f      	ldr	r3, [pc, #316]	; (8004710 <HAL_RCC_OscConfig+0x2a8>)
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd f9e6 	bl	80019a8 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fd f9e2 	bl	80019a8 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e171      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	493f      	ldr	r1, [pc, #252]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
 8004612:	e015      	b.n	8004640 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004614:	4b3e      	ldr	r3, [pc, #248]	; (8004710 <HAL_RCC_OscConfig+0x2a8>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fd f9c5 	bl	80019a8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004622:	f7fd f9c1 	bl	80019a8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e150      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004634:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d030      	beq.n	80046ae <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d016      	beq.n	8004682 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd f9a5 	bl	80019a8 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004662:	f7fd f9a1 	bl	80019a8 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e130      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004674:	4b25      	ldr	r3, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 8004676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x1fa>
 8004680:	e015      	b.n	80046ae <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fd f98e 	bl	80019a8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004690:	f7fd f98a 	bl	80019a8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e119      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80046a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 809f 	beq.w	80047fa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046da:	6413      	str	r3, [r2, #64]	; 0x40
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x2a4>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d120      	bne.n	800473a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 80046fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004704:	f7fd f950 	bl	80019a8 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	e010      	b.n	800472e <HAL_RCC_OscConfig+0x2c6>
 800470c:	40023800 	.word	0x40023800
 8004710:	42470000 	.word	0x42470000
 8004714:	42470e80 	.word	0x42470e80
 8004718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fd f944 	bl	80019a8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e0d3      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <HAL_RCC_OscConfig+0x478>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x2e8>
 8004742:	4b68      	ldr	r3, [pc, #416]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a67      	ldr	r2, [pc, #412]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	e01c      	b.n	800478a <HAL_RCC_OscConfig+0x322>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b05      	cmp	r3, #5
 8004756:	d10c      	bne.n	8004772 <HAL_RCC_OscConfig+0x30a>
 8004758:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a61      	ldr	r2, [pc, #388]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 800475e:	f043 0304 	orr.w	r3, r3, #4
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a5e      	ldr	r2, [pc, #376]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
 8004770:	e00b      	b.n	800478a <HAL_RCC_OscConfig+0x322>
 8004772:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a5b      	ldr	r2, [pc, #364]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
 800477e:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a58      	ldr	r2, [pc, #352]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004784:	f023 0304 	bic.w	r3, r3, #4
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d015      	beq.n	80047be <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd f909 	bl	80019a8 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd f905 	bl	80019a8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e092      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b0:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ee      	beq.n	800479a <HAL_RCC_OscConfig+0x332>
 80047bc:	e014      	b.n	80047e8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047be:	f7fd f8f3 	bl	80019a8 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd f8ef 	bl	80019a8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e07c      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ee      	bne.n	80047c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a3c      	ldr	r2, [pc, #240]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 80047f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d068      	beq.n	80048d4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b08      	cmp	r3, #8
 800480c:	d060      	beq.n	80048d0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d145      	bne.n	80048a2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004816:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_RCC_OscConfig+0x480>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fd f8c4 	bl	80019a8 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004824:	f7fd f8c0 	bl	80019a8 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e04f      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004836:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	019b      	lsls	r3, r3, #6
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	071b      	lsls	r3, r3, #28
 800486e:	491d      	ldr	r1, [pc, #116]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <HAL_RCC_OscConfig+0x480>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7fd f895 	bl	80019a8 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fd f891 	bl	80019a8 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e020      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x41a>
 80048a0:	e018      	b.n	80048d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <HAL_RCC_OscConfig+0x480>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a8:	f7fd f87e 	bl	80019a8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd f87a 	bl	80019a8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e009      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_RCC_OscConfig+0x47c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x448>
 80048ce:	e001      	b.n	80048d4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40007000 	.word	0x40007000
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470060 	.word	0x42470060

080048ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e03f      	b.n	800497e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fc f8ea 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	; 0x24
 800491c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb4b 	bl	8004fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b088      	sub	sp, #32
 800498a:	af02      	add	r7, sp, #8
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 8083 	bne.w	8004aae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Transmit+0x2e>
 80049ae:	88fb      	ldrh	r3, [r7, #6]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e07b      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Transmit+0x40>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e074      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	; 0x21
 80049d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049dc:	f7fc ffe4 	bl	80019a8 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80049f6:	e042      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0e:	d122      	bne.n	8004a56 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2180      	movs	r1, #128	; 0x80
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f96a 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e042      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	e017      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	e013      	b.n	8004a7e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f947 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e01f      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60ba      	str	r2, [r7, #8]
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1b7      	bne.n	80049f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2140      	movs	r1, #64	; 0x40
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f92e 	bl	8004cf4 <UART_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e006      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_UART_IRQHandler+0x52>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f9e0 	bl	8004ec8 <UART_Receive_IT>
      return;
 8004b08:	e0d1      	b.n	8004cae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80b0 	beq.w	8004c72 <HAL_UART_IRQHandler+0x1ba>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_UART_IRQHandler+0x70>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80a5 	beq.w	8004c72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_UART_IRQHandler+0x90>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_UART_IRQHandler+0xb0>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	f043 0202 	orr.w	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd0>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f043 0204 	orr.w	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00f      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xfa>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_UART_IRQHandler+0xee>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d078      	beq.n	8004cac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x11c>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f97a 	bl	8004ec8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <HAL_UART_IRQHandler+0x144>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d031      	beq.n	8004c60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8c3 	bl	8004d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d123      	bne.n	8004c58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <HAL_UART_IRQHandler+0x1fc>)
 8004c2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd f826 	bl	8001c86 <HAL_DMA_Abort_IT>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d016      	beq.n	8004c6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4e:	e00e      	b.n	8004c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f845 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c56:	e00a      	b.n	8004c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f841 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f83d 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004c6c:	e01e      	b.n	8004cac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6e:	bf00      	nop
    return;
 8004c70:	e01c      	b.n	8004cac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <HAL_UART_IRQHandler+0x1d6>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f8b0 	bl	8004dec <UART_Transmit_IT>
    return;
 8004c8c:	e00f      	b.n	8004cae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_UART_IRQHandler+0x1f6>
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8f8 	bl	8004e98 <UART_EndTransmit_IT>
    return;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_UART_IRQHandler+0x1f6>
    return;
 8004cac:	bf00      	nop
  }
}
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	08004dc5 	.word	0x08004dc5

08004cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d04:	e02c      	b.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d028      	beq.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d14:	f7fc fe48 	bl	80019a8 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d21d      	bcs.n	8004d60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e00f      	b.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	461a      	mov	r2, r3
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d0c3      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff ff7e 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b21      	cmp	r3, #33	; 0x21
 8004dfe:	d144      	bne.n	8004e8a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e08:	d11a      	bne.n	8004e40 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	1c9a      	adds	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]
 8004e32:	e00e      	b.n	8004e52 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	621a      	str	r2, [r3, #32]
 8004e3e:	e008      	b.n	8004e52 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	1c59      	adds	r1, r3, #1
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6211      	str	r1, [r2, #32]
 8004e4a:	781a      	ldrb	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e000      	b.n	8004e8c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fefd 	bl	8004cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b22      	cmp	r3, #34	; 0x22
 8004eda:	d171      	bne.n	8004fc0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d123      	bne.n	8004f2e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10e      	bne.n	8004f12 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f10:	e029      	b.n	8004f66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f2c:	e01b      	b.n	8004f66 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6858      	ldr	r0, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	1c59      	adds	r1, r3, #1
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6291      	str	r1, [r2, #40]	; 0x28
 8004f46:	b2c2      	uxtb	r2, r0
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e00c      	b.n	8004f66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	1c58      	adds	r0, r3, #1
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	6288      	str	r0, [r1, #40]	; 0x28
 8004f5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4619      	mov	r1, r3
 8004f74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d120      	bne.n	8004fbc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0220 	bic.w	r2, r2, #32
 8004f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fe8a 	bl	8004ccc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e002      	b.n	8004fc2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
  }
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800500e:	f023 030c 	bic.w	r3, r3, #12
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	430b      	orrs	r3, r1
 800501a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800503a:	f040 818b 	bne.w	8005354 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4ac1      	ldr	r2, [pc, #772]	; (8005348 <UART_SetConfig+0x37c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d005      	beq.n	8005054 <UART_SetConfig+0x88>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4abf      	ldr	r2, [pc, #764]	; (800534c <UART_SetConfig+0x380>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 80bd 	bne.w	80051ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7fe ff5a 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8005058:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	461d      	mov	r5, r3
 800505e:	f04f 0600 	mov.w	r6, #0
 8005062:	46a8      	mov	r8, r5
 8005064:	46b1      	mov	r9, r6
 8005066:	eb18 0308 	adds.w	r3, r8, r8
 800506a:	eb49 0409 	adc.w	r4, r9, r9
 800506e:	4698      	mov	r8, r3
 8005070:	46a1      	mov	r9, r4
 8005072:	eb18 0805 	adds.w	r8, r8, r5
 8005076:	eb49 0906 	adc.w	r9, r9, r6
 800507a:	f04f 0100 	mov.w	r1, #0
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005086:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800508a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800508e:	4688      	mov	r8, r1
 8005090:	4691      	mov	r9, r2
 8005092:	eb18 0005 	adds.w	r0, r8, r5
 8005096:	eb49 0106 	adc.w	r1, r9, r6
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	461d      	mov	r5, r3
 80050a0:	f04f 0600 	mov.w	r6, #0
 80050a4:	196b      	adds	r3, r5, r5
 80050a6:	eb46 0406 	adc.w	r4, r6, r6
 80050aa:	461a      	mov	r2, r3
 80050ac:	4623      	mov	r3, r4
 80050ae:	f7fb f8a9 	bl	8000204 <__aeabi_uldivmod>
 80050b2:	4603      	mov	r3, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	461a      	mov	r2, r3
 80050b8:	4ba5      	ldr	r3, [pc, #660]	; (8005350 <UART_SetConfig+0x384>)
 80050ba:	fba3 2302 	umull	r2, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	461d      	mov	r5, r3
 80050c8:	f04f 0600 	mov.w	r6, #0
 80050cc:	46a9      	mov	r9, r5
 80050ce:	46b2      	mov	sl, r6
 80050d0:	eb19 0309 	adds.w	r3, r9, r9
 80050d4:	eb4a 040a 	adc.w	r4, sl, sl
 80050d8:	4699      	mov	r9, r3
 80050da:	46a2      	mov	sl, r4
 80050dc:	eb19 0905 	adds.w	r9, r9, r5
 80050e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80050e4:	f04f 0100 	mov.w	r1, #0
 80050e8:	f04f 0200 	mov.w	r2, #0
 80050ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050f8:	4689      	mov	r9, r1
 80050fa:	4692      	mov	sl, r2
 80050fc:	eb19 0005 	adds.w	r0, r9, r5
 8005100:	eb4a 0106 	adc.w	r1, sl, r6
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	461d      	mov	r5, r3
 800510a:	f04f 0600 	mov.w	r6, #0
 800510e:	196b      	adds	r3, r5, r5
 8005110:	eb46 0406 	adc.w	r4, r6, r6
 8005114:	461a      	mov	r2, r3
 8005116:	4623      	mov	r3, r4
 8005118:	f7fb f874 	bl	8000204 <__aeabi_uldivmod>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	461a      	mov	r2, r3
 8005122:	4b8b      	ldr	r3, [pc, #556]	; (8005350 <UART_SetConfig+0x384>)
 8005124:	fba3 1302 	umull	r1, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	2164      	movs	r1, #100	; 0x64
 800512c:	fb01 f303 	mul.w	r3, r1, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	3332      	adds	r3, #50	; 0x32
 8005136:	4a86      	ldr	r2, [pc, #536]	; (8005350 <UART_SetConfig+0x384>)
 8005138:	fba2 2303 	umull	r2, r3, r2, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005144:	4498      	add	r8, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	461d      	mov	r5, r3
 800514a:	f04f 0600 	mov.w	r6, #0
 800514e:	46a9      	mov	r9, r5
 8005150:	46b2      	mov	sl, r6
 8005152:	eb19 0309 	adds.w	r3, r9, r9
 8005156:	eb4a 040a 	adc.w	r4, sl, sl
 800515a:	4699      	mov	r9, r3
 800515c:	46a2      	mov	sl, r4
 800515e:	eb19 0905 	adds.w	r9, r9, r5
 8005162:	eb4a 0a06 	adc.w	sl, sl, r6
 8005166:	f04f 0100 	mov.w	r1, #0
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005172:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005176:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800517a:	4689      	mov	r9, r1
 800517c:	4692      	mov	sl, r2
 800517e:	eb19 0005 	adds.w	r0, r9, r5
 8005182:	eb4a 0106 	adc.w	r1, sl, r6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	461d      	mov	r5, r3
 800518c:	f04f 0600 	mov.w	r6, #0
 8005190:	196b      	adds	r3, r5, r5
 8005192:	eb46 0406 	adc.w	r4, r6, r6
 8005196:	461a      	mov	r2, r3
 8005198:	4623      	mov	r3, r4
 800519a:	f7fb f833 	bl	8000204 <__aeabi_uldivmod>
 800519e:	4603      	mov	r3, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b6a      	ldr	r3, [pc, #424]	; (8005350 <UART_SetConfig+0x384>)
 80051a6:	fba3 1302 	umull	r1, r3, r3, r2
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2164      	movs	r1, #100	; 0x64
 80051ae:	fb01 f303 	mul.w	r3, r1, r3
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	3332      	adds	r3, #50	; 0x32
 80051b8:	4a65      	ldr	r2, [pc, #404]	; (8005350 <UART_SetConfig+0x384>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 0207 	and.w	r2, r3, #7
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4442      	add	r2, r8
 80051ca:	609a      	str	r2, [r3, #8]
 80051cc:	e26f      	b.n	80056ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ce:	f7fe fe89 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 80051d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	461d      	mov	r5, r3
 80051d8:	f04f 0600 	mov.w	r6, #0
 80051dc:	46a8      	mov	r8, r5
 80051de:	46b1      	mov	r9, r6
 80051e0:	eb18 0308 	adds.w	r3, r8, r8
 80051e4:	eb49 0409 	adc.w	r4, r9, r9
 80051e8:	4698      	mov	r8, r3
 80051ea:	46a1      	mov	r9, r4
 80051ec:	eb18 0805 	adds.w	r8, r8, r5
 80051f0:	eb49 0906 	adc.w	r9, r9, r6
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005200:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005204:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005208:	4688      	mov	r8, r1
 800520a:	4691      	mov	r9, r2
 800520c:	eb18 0005 	adds.w	r0, r8, r5
 8005210:	eb49 0106 	adc.w	r1, r9, r6
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	461d      	mov	r5, r3
 800521a:	f04f 0600 	mov.w	r6, #0
 800521e:	196b      	adds	r3, r5, r5
 8005220:	eb46 0406 	adc.w	r4, r6, r6
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	f7fa ffec 	bl	8000204 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	461a      	mov	r2, r3
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <UART_SetConfig+0x384>)
 8005234:	fba3 2302 	umull	r2, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	461d      	mov	r5, r3
 8005242:	f04f 0600 	mov.w	r6, #0
 8005246:	46a9      	mov	r9, r5
 8005248:	46b2      	mov	sl, r6
 800524a:	eb19 0309 	adds.w	r3, r9, r9
 800524e:	eb4a 040a 	adc.w	r4, sl, sl
 8005252:	4699      	mov	r9, r3
 8005254:	46a2      	mov	sl, r4
 8005256:	eb19 0905 	adds.w	r9, r9, r5
 800525a:	eb4a 0a06 	adc.w	sl, sl, r6
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800526a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800526e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005272:	4689      	mov	r9, r1
 8005274:	4692      	mov	sl, r2
 8005276:	eb19 0005 	adds.w	r0, r9, r5
 800527a:	eb4a 0106 	adc.w	r1, sl, r6
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	461d      	mov	r5, r3
 8005284:	f04f 0600 	mov.w	r6, #0
 8005288:	196b      	adds	r3, r5, r5
 800528a:	eb46 0406 	adc.w	r4, r6, r6
 800528e:	461a      	mov	r2, r3
 8005290:	4623      	mov	r3, r4
 8005292:	f7fa ffb7 	bl	8000204 <__aeabi_uldivmod>
 8005296:	4603      	mov	r3, r0
 8005298:	460c      	mov	r4, r1
 800529a:	461a      	mov	r2, r3
 800529c:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <UART_SetConfig+0x384>)
 800529e:	fba3 1302 	umull	r1, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	2164      	movs	r1, #100	; 0x64
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	3332      	adds	r3, #50	; 0x32
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <UART_SetConfig+0x384>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052be:	4498      	add	r8, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	461d      	mov	r5, r3
 80052c4:	f04f 0600 	mov.w	r6, #0
 80052c8:	46a9      	mov	r9, r5
 80052ca:	46b2      	mov	sl, r6
 80052cc:	eb19 0309 	adds.w	r3, r9, r9
 80052d0:	eb4a 040a 	adc.w	r4, sl, sl
 80052d4:	4699      	mov	r9, r3
 80052d6:	46a2      	mov	sl, r4
 80052d8:	eb19 0905 	adds.w	r9, r9, r5
 80052dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052f4:	4689      	mov	r9, r1
 80052f6:	4692      	mov	sl, r2
 80052f8:	eb19 0005 	adds.w	r0, r9, r5
 80052fc:	eb4a 0106 	adc.w	r1, sl, r6
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	461d      	mov	r5, r3
 8005306:	f04f 0600 	mov.w	r6, #0
 800530a:	196b      	adds	r3, r5, r5
 800530c:	eb46 0406 	adc.w	r4, r6, r6
 8005310:	461a      	mov	r2, r3
 8005312:	4623      	mov	r3, r4
 8005314:	f7fa ff76 	bl	8000204 <__aeabi_uldivmod>
 8005318:	4603      	mov	r3, r0
 800531a:	460c      	mov	r4, r1
 800531c:	461a      	mov	r2, r3
 800531e:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <UART_SetConfig+0x384>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	; 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	3332      	adds	r3, #50	; 0x32
 8005332:	4a07      	ldr	r2, [pc, #28]	; (8005350 <UART_SetConfig+0x384>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 0207 	and.w	r2, r3, #7
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4442      	add	r2, r8
 8005344:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005346:	e1b2      	b.n	80056ae <UART_SetConfig+0x6e2>
 8005348:	40011000 	.word	0x40011000
 800534c:	40011400 	.word	0x40011400
 8005350:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4ad7      	ldr	r2, [pc, #860]	; (80056b8 <UART_SetConfig+0x6ec>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d005      	beq.n	800536a <UART_SetConfig+0x39e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4ad6      	ldr	r2, [pc, #856]	; (80056bc <UART_SetConfig+0x6f0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 80d1 	bne.w	800550c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800536a:	f7fe fdcf 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 800536e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	469a      	mov	sl, r3
 8005374:	f04f 0b00 	mov.w	fp, #0
 8005378:	46d0      	mov	r8, sl
 800537a:	46d9      	mov	r9, fp
 800537c:	eb18 0308 	adds.w	r3, r8, r8
 8005380:	eb49 0409 	adc.w	r4, r9, r9
 8005384:	4698      	mov	r8, r3
 8005386:	46a1      	mov	r9, r4
 8005388:	eb18 080a 	adds.w	r8, r8, sl
 800538c:	eb49 090b 	adc.w	r9, r9, fp
 8005390:	f04f 0100 	mov.w	r1, #0
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800539c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053a4:	4688      	mov	r8, r1
 80053a6:	4691      	mov	r9, r2
 80053a8:	eb1a 0508 	adds.w	r5, sl, r8
 80053ac:	eb4b 0609 	adc.w	r6, fp, r9
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4619      	mov	r1, r3
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	0094      	lsls	r4, r2, #2
 80053c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053c8:	008b      	lsls	r3, r1, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	4623      	mov	r3, r4
 80053ce:	4628      	mov	r0, r5
 80053d0:	4631      	mov	r1, r6
 80053d2:	f7fa ff17 	bl	8000204 <__aeabi_uldivmod>
 80053d6:	4603      	mov	r3, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	461a      	mov	r2, r3
 80053dc:	4bb8      	ldr	r3, [pc, #736]	; (80056c0 <UART_SetConfig+0x6f4>)
 80053de:	fba3 2302 	umull	r2, r3, r3, r2
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	469b      	mov	fp, r3
 80053ec:	f04f 0c00 	mov.w	ip, #0
 80053f0:	46d9      	mov	r9, fp
 80053f2:	46e2      	mov	sl, ip
 80053f4:	eb19 0309 	adds.w	r3, r9, r9
 80053f8:	eb4a 040a 	adc.w	r4, sl, sl
 80053fc:	4699      	mov	r9, r3
 80053fe:	46a2      	mov	sl, r4
 8005400:	eb19 090b 	adds.w	r9, r9, fp
 8005404:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005414:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005418:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800541c:	4689      	mov	r9, r1
 800541e:	4692      	mov	sl, r2
 8005420:	eb1b 0509 	adds.w	r5, fp, r9
 8005424:	eb4c 060a 	adc.w	r6, ip, sl
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4619      	mov	r1, r3
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	0094      	lsls	r4, r2, #2
 800543c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005440:	008b      	lsls	r3, r1, #2
 8005442:	461a      	mov	r2, r3
 8005444:	4623      	mov	r3, r4
 8005446:	4628      	mov	r0, r5
 8005448:	4631      	mov	r1, r6
 800544a:	f7fa fedb 	bl	8000204 <__aeabi_uldivmod>
 800544e:	4603      	mov	r3, r0
 8005450:	460c      	mov	r4, r1
 8005452:	461a      	mov	r2, r3
 8005454:	4b9a      	ldr	r3, [pc, #616]	; (80056c0 <UART_SetConfig+0x6f4>)
 8005456:	fba3 1302 	umull	r1, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2164      	movs	r1, #100	; 0x64
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	3332      	adds	r3, #50	; 0x32
 8005468:	4a95      	ldr	r2, [pc, #596]	; (80056c0 <UART_SetConfig+0x6f4>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005474:	4498      	add	r8, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	469b      	mov	fp, r3
 800547a:	f04f 0c00 	mov.w	ip, #0
 800547e:	46d9      	mov	r9, fp
 8005480:	46e2      	mov	sl, ip
 8005482:	eb19 0309 	adds.w	r3, r9, r9
 8005486:	eb4a 040a 	adc.w	r4, sl, sl
 800548a:	4699      	mov	r9, r3
 800548c:	46a2      	mov	sl, r4
 800548e:	eb19 090b 	adds.w	r9, r9, fp
 8005492:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005496:	f04f 0100 	mov.w	r1, #0
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054aa:	4689      	mov	r9, r1
 80054ac:	4692      	mov	sl, r2
 80054ae:	eb1b 0509 	adds.w	r5, fp, r9
 80054b2:	eb4c 060a 	adc.w	r6, ip, sl
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4619      	mov	r1, r3
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	f04f 0400 	mov.w	r4, #0
 80054c8:	0094      	lsls	r4, r2, #2
 80054ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4623      	mov	r3, r4
 80054d4:	4628      	mov	r0, r5
 80054d6:	4631      	mov	r1, r6
 80054d8:	f7fa fe94 	bl	8000204 <__aeabi_uldivmod>
 80054dc:	4603      	mov	r3, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b77      	ldr	r3, [pc, #476]	; (80056c0 <UART_SetConfig+0x6f4>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a72      	ldr	r2, [pc, #456]	; (80056c0 <UART_SetConfig+0x6f4>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 020f 	and.w	r2, r3, #15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4442      	add	r2, r8
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	e0d0      	b.n	80056ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800550c:	f7fe fcea 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005510:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	469a      	mov	sl, r3
 8005516:	f04f 0b00 	mov.w	fp, #0
 800551a:	46d0      	mov	r8, sl
 800551c:	46d9      	mov	r9, fp
 800551e:	eb18 0308 	adds.w	r3, r8, r8
 8005522:	eb49 0409 	adc.w	r4, r9, r9
 8005526:	4698      	mov	r8, r3
 8005528:	46a1      	mov	r9, r4
 800552a:	eb18 080a 	adds.w	r8, r8, sl
 800552e:	eb49 090b 	adc.w	r9, r9, fp
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800553e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005542:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005546:	4688      	mov	r8, r1
 8005548:	4691      	mov	r9, r2
 800554a:	eb1a 0508 	adds.w	r5, sl, r8
 800554e:	eb4b 0609 	adc.w	r6, fp, r9
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4619      	mov	r1, r3
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	f04f 0400 	mov.w	r4, #0
 8005564:	0094      	lsls	r4, r2, #2
 8005566:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800556a:	008b      	lsls	r3, r1, #2
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	4628      	mov	r0, r5
 8005572:	4631      	mov	r1, r6
 8005574:	f7fa fe46 	bl	8000204 <__aeabi_uldivmod>
 8005578:	4603      	mov	r3, r0
 800557a:	460c      	mov	r4, r1
 800557c:	461a      	mov	r2, r3
 800557e:	4b50      	ldr	r3, [pc, #320]	; (80056c0 <UART_SetConfig+0x6f4>)
 8005580:	fba3 2302 	umull	r2, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	469b      	mov	fp, r3
 800558e:	f04f 0c00 	mov.w	ip, #0
 8005592:	46d9      	mov	r9, fp
 8005594:	46e2      	mov	sl, ip
 8005596:	eb19 0309 	adds.w	r3, r9, r9
 800559a:	eb4a 040a 	adc.w	r4, sl, sl
 800559e:	4699      	mov	r9, r3
 80055a0:	46a2      	mov	sl, r4
 80055a2:	eb19 090b 	adds.w	r9, r9, fp
 80055a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055aa:	f04f 0100 	mov.w	r1, #0
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055be:	4689      	mov	r9, r1
 80055c0:	4692      	mov	sl, r2
 80055c2:	eb1b 0509 	adds.w	r5, fp, r9
 80055c6:	eb4c 060a 	adc.w	r6, ip, sl
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4619      	mov	r1, r3
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	0094      	lsls	r4, r2, #2
 80055de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055e2:	008b      	lsls	r3, r1, #2
 80055e4:	461a      	mov	r2, r3
 80055e6:	4623      	mov	r3, r4
 80055e8:	4628      	mov	r0, r5
 80055ea:	4631      	mov	r1, r6
 80055ec:	f7fa fe0a 	bl	8000204 <__aeabi_uldivmod>
 80055f0:	4603      	mov	r3, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b32      	ldr	r3, [pc, #200]	; (80056c0 <UART_SetConfig+0x6f4>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	2164      	movs	r1, #100	; 0x64
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	3332      	adds	r3, #50	; 0x32
 800560a:	4a2d      	ldr	r2, [pc, #180]	; (80056c0 <UART_SetConfig+0x6f4>)
 800560c:	fba2 2303 	umull	r2, r3, r2, r3
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005616:	4498      	add	r8, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	469b      	mov	fp, r3
 800561c:	f04f 0c00 	mov.w	ip, #0
 8005620:	46d9      	mov	r9, fp
 8005622:	46e2      	mov	sl, ip
 8005624:	eb19 0309 	adds.w	r3, r9, r9
 8005628:	eb4a 040a 	adc.w	r4, sl, sl
 800562c:	4699      	mov	r9, r3
 800562e:	46a2      	mov	sl, r4
 8005630:	eb19 090b 	adds.w	r9, r9, fp
 8005634:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005638:	f04f 0100 	mov.w	r1, #0
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005644:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005648:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800564c:	4689      	mov	r9, r1
 800564e:	4692      	mov	sl, r2
 8005650:	eb1b 0509 	adds.w	r5, fp, r9
 8005654:	eb4c 060a 	adc.w	r6, ip, sl
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	f04f 0400 	mov.w	r4, #0
 800566a:	0094      	lsls	r4, r2, #2
 800566c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	461a      	mov	r2, r3
 8005674:	4623      	mov	r3, r4
 8005676:	4628      	mov	r0, r5
 8005678:	4631      	mov	r1, r6
 800567a:	f7fa fdc3 	bl	8000204 <__aeabi_uldivmod>
 800567e:	4603      	mov	r3, r0
 8005680:	460c      	mov	r4, r1
 8005682:	461a      	mov	r2, r3
 8005684:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <UART_SetConfig+0x6f4>)
 8005686:	fba3 1302 	umull	r1, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2164      	movs	r1, #100	; 0x64
 800568e:	fb01 f303 	mul.w	r3, r1, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	; 0x32
 8005698:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <UART_SetConfig+0x6f4>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4442      	add	r2, r8
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	e7ff      	b.n	80056ae <UART_SetConfig+0x6e2>
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b8:	40011000 	.word	0x40011000
 80056bc:	40011400 	.word	0x40011400
 80056c0:	51eb851f 	.word	0x51eb851f

080056c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c4:	b084      	sub	sp, #16
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	f107 001c 	add.w	r0, r7, #28
 80056d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d122      	bne.n	8005722 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 f9e4 	bl	8006ae4 <USB_CoreReset>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
 8005720:	e01a      	b.n	8005758 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 f9d8 	bl	8006ae4 <USB_CoreReset>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
 800574a:	e005      	b.n	8005758 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10b      	bne.n	8005776 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f043 0206 	orr.w	r2, r3, #6
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f043 0220 	orr.w	r2, r3, #32
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005782:	b004      	add	sp, #16
 8005784:	4770      	bx	lr
	...

08005788 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d165      	bne.n	8005868 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4a41      	ldr	r2, [pc, #260]	; (80058a4 <USB_SetTurnaroundTime+0x11c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d906      	bls.n	80057b2 <USB_SetTurnaroundTime+0x2a>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a40      	ldr	r2, [pc, #256]	; (80058a8 <USB_SetTurnaroundTime+0x120>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d802      	bhi.n	80057b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057ac:	230f      	movs	r3, #15
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e062      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4a3c      	ldr	r2, [pc, #240]	; (80058a8 <USB_SetTurnaroundTime+0x120>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d906      	bls.n	80057c8 <USB_SetTurnaroundTime+0x40>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a3b      	ldr	r2, [pc, #236]	; (80058ac <USB_SetTurnaroundTime+0x124>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d802      	bhi.n	80057c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057c2:	230e      	movs	r3, #14
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e057      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a38      	ldr	r2, [pc, #224]	; (80058ac <USB_SetTurnaroundTime+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d906      	bls.n	80057de <USB_SetTurnaroundTime+0x56>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a37      	ldr	r2, [pc, #220]	; (80058b0 <USB_SetTurnaroundTime+0x128>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d802      	bhi.n	80057de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057d8:	230d      	movs	r3, #13
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e04c      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a33      	ldr	r2, [pc, #204]	; (80058b0 <USB_SetTurnaroundTime+0x128>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d906      	bls.n	80057f4 <USB_SetTurnaroundTime+0x6c>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a32      	ldr	r2, [pc, #200]	; (80058b4 <USB_SetTurnaroundTime+0x12c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d802      	bhi.n	80057f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ee:	230c      	movs	r3, #12
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e041      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <USB_SetTurnaroundTime+0x12c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d906      	bls.n	800580a <USB_SetTurnaroundTime+0x82>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a2e      	ldr	r2, [pc, #184]	; (80058b8 <USB_SetTurnaroundTime+0x130>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d802      	bhi.n	800580a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005804:	230b      	movs	r3, #11
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e036      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <USB_SetTurnaroundTime+0x130>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d906      	bls.n	8005820 <USB_SetTurnaroundTime+0x98>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <USB_SetTurnaroundTime+0x134>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d802      	bhi.n	8005820 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800581a:	230a      	movs	r3, #10
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e02b      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a26      	ldr	r2, [pc, #152]	; (80058bc <USB_SetTurnaroundTime+0x134>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d906      	bls.n	8005836 <USB_SetTurnaroundTime+0xae>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a25      	ldr	r2, [pc, #148]	; (80058c0 <USB_SetTurnaroundTime+0x138>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d802      	bhi.n	8005836 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005830:	2309      	movs	r3, #9
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	e020      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <USB_SetTurnaroundTime+0x138>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d906      	bls.n	800584c <USB_SetTurnaroundTime+0xc4>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a20      	ldr	r2, [pc, #128]	; (80058c4 <USB_SetTurnaroundTime+0x13c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d802      	bhi.n	800584c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005846:	2308      	movs	r3, #8
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e015      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <USB_SetTurnaroundTime+0x13c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d906      	bls.n	8005862 <USB_SetTurnaroundTime+0xda>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <USB_SetTurnaroundTime+0x140>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d802      	bhi.n	8005862 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800585c:	2307      	movs	r3, #7
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e00a      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005862:	2306      	movs	r3, #6
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e007      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800586e:	2309      	movs	r3, #9
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	e001      	b.n	8005878 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005874:	2309      	movs	r3, #9
 8005876:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	00d8acbf 	.word	0x00d8acbf
 80058a8:	00e4e1bf 	.word	0x00e4e1bf
 80058ac:	00f423ff 	.word	0x00f423ff
 80058b0:	0106737f 	.word	0x0106737f
 80058b4:	011a499f 	.word	0x011a499f
 80058b8:	01312cff 	.word	0x01312cff
 80058bc:	014ca43f 	.word	0x014ca43f
 80058c0:	016e35ff 	.word	0x016e35ff
 80058c4:	01a6ab1f 	.word	0x01a6ab1f
 80058c8:	01e847ff 	.word	0x01e847ff

080058cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f043 0201 	orr.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d106      	bne.n	800593c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	e00b      	b.n	8005954 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60da      	str	r2, [r3, #12]
 800594e:	e001      	b.n	8005954 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e003      	b.n	800595c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005954:	2032      	movs	r0, #50	; 0x32
 8005956:	f7fc f833 	bl	80019c0 <HAL_Delay>

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005964:	b084      	sub	sp, #16
 8005966:	b580      	push	{r7, lr}
 8005968:	b086      	sub	sp, #24
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800597e:	2300      	movs	r3, #0
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	e009      	b.n	8005998 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3340      	adds	r3, #64	; 0x40
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3301      	adds	r3, #1
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b0e      	cmp	r3, #14
 800599c:	d9f2      	bls.n	8005984 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11c      	bne.n	80059de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e005      	b.n	80059ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059f0:	461a      	mov	r2, r3
 80059f2:	2300      	movs	r3, #0
 80059f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	4619      	mov	r1, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	461a      	mov	r2, r3
 8005a06:	680b      	ldr	r3, [r1, #0]
 8005a08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10c      	bne.n	8005a2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a16:	2100      	movs	r1, #0
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f949 	bl	8005cb0 <USB_SetDevSpeed>
 8005a1e:	e008      	b.n	8005a32 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a20:	2101      	movs	r1, #1
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f944 	bl	8005cb0 <USB_SetDevSpeed>
 8005a28:	e003      	b.n	8005a32 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a2a:	2103      	movs	r1, #3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f93f 	bl	8005cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a32:	2110      	movs	r1, #16
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8f3 	bl	8005c20 <USB_FlushTxFifo>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f911 	bl	8005c6c <USB_FlushRxFifo>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	461a      	mov	r2, r3
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	e043      	b.n	8005b06 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a94:	d118      	bne.n	8005ac8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	e013      	b.n	8005ada <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e008      	b.n	8005ada <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af8:	461a      	mov	r2, r3
 8005afa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005afe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	3301      	adds	r3, #1
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3b7      	bcc.n	8005a7e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e043      	b.n	8005b9c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b2a:	d118      	bne.n	8005b5e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e013      	b.n	8005b70 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b54:	461a      	mov	r2, r3
 8005b56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	e008      	b.n	8005b70 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d3b7      	bcc.n	8005b14 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f043 0210 	orr.w	r2, r3, #16
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <USB_DevInit+0x2b8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f043 0208 	orr.w	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d107      	bne.n	8005c0c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c04:	f043 0304 	orr.w	r3, r3, #4
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c18:	b004      	add	sp, #16
 8005c1a:	4770      	bx	lr
 8005c1c:	803c3800 	.word	0x803c3800

08005c20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	019b      	lsls	r3, r3, #6
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <USB_FlushTxFifo+0x48>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d901      	bls.n	8005c4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e006      	b.n	8005c5a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d0f0      	beq.n	8005c3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	00030d40 	.word	0x00030d40

08005c6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <USB_FlushRxFifo+0x40>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e006      	b.n	8005c9e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d0f0      	beq.n	8005c7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	00030d40 	.word	0x00030d40

08005cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0306 	and.w	r3, r3, #6
 8005cfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
 8005d06:	e00a      	b.n	8005d1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d002      	beq.n	8005d14 <USB_GetDevSpeed+0x32>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d102      	bne.n	8005d1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d14:	2302      	movs	r3, #2
 8005d16:	75fb      	strb	r3, [r7, #23]
 8005d18:	e001      	b.n	8005d1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d1a:	230f      	movs	r3, #15
 8005d1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	785b      	ldrb	r3, [r3, #1]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d13a      	bne.n	8005dbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	69da      	ldr	r2, [r3, #28]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	2101      	movs	r1, #1
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d155      	bne.n	8005e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	78db      	ldrb	r3, [r3, #3]
 8005d9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	059b      	lsls	r3, r3, #22
 8005da2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da4:	4313      	orrs	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e036      	b.n	8005e2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	69da      	ldr	r2, [r3, #28]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	2101      	movs	r1, #1
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d11a      	bne.n	8005e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	78db      	ldrb	r3, [r3, #3]
 8005e10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e12:	430b      	orrs	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
	...

08005e3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 815c 	bne.w	8006116 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d132      	bne.n	8005ecc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ea8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec4:	0cdb      	lsrs	r3, r3, #19
 8005ec6:	04db      	lsls	r3, r3, #19
 8005ec8:	6113      	str	r3, [r2, #16]
 8005eca:	e074      	b.n	8005fb6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee6:	0cdb      	lsrs	r3, r3, #19
 8005ee8:	04db      	lsls	r3, r3, #19
 8005eea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6959      	ldr	r1, [r3, #20]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	440b      	add	r3, r1
 8005f28:	1e59      	subs	r1, r3, #1
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f32:	04d9      	lsls	r1, r3, #19
 8005f34:	4b9d      	ldr	r3, [pc, #628]	; (80061ac <USB_EPStartXfer+0x370>)
 8005f36:	400b      	ands	r3, r1
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	0148      	lsls	r0, r1, #5
 8005f3c:	69f9      	ldr	r1, [r7, #28]
 8005f3e:	4401      	add	r1, r0
 8005f40:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f44:	4313      	orrs	r3, r2
 8005f46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f5e:	69b9      	ldr	r1, [r7, #24]
 8005f60:	0148      	lsls	r0, r1, #5
 8005f62:	69f9      	ldr	r1, [r7, #28]
 8005f64:	4401      	add	r1, r0
 8005f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d11f      	bne.n	8005fb6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f90:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d14b      	bne.n	8006054 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	78db      	ldrb	r3, [r3, #3]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d128      	bne.n	8006032 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d110      	bne.n	8006012 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e00f      	b.n	8006032 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006030:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e12f      	b.n	80062b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006072:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d015      	beq.n	80060a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8117 	beq.w	80062b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	2101      	movs	r1, #1
 8006098:	fa01 f303 	lsl.w	r3, r1, r3
 800609c:	69f9      	ldr	r1, [r7, #28]
 800609e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a2:	4313      	orrs	r3, r2
 80060a4:	634b      	str	r3, [r1, #52]	; 0x34
 80060a6:	e105      	b.n	80062b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e00f      	b.n	80060fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68d9      	ldr	r1, [r3, #12]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	b298      	uxth	r0, r3
 8006108:	79fb      	ldrb	r3, [r7, #7]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4603      	mov	r3, r0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fa2b 	bl	800656a <USB_WritePacket>
 8006114:	e0ce      	b.n	80062b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006130:	0cdb      	lsrs	r3, r3, #19
 8006132:	04db      	lsls	r3, r3, #19
 8006134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d126      	bne.n	80061b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	0148      	lsls	r0, r1, #5
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	4401      	add	r1, r0
 8006180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006184:	4313      	orrs	r3, r2
 8006186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061a6:	6113      	str	r3, [r2, #16]
 80061a8:	e036      	b.n	8006218 <USB_EPStartXfer+0x3dc>
 80061aa:	bf00      	nop
 80061ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	4413      	add	r3, r2
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	8afb      	ldrh	r3, [r7, #22]
 80061d6:	04d9      	lsls	r1, r3, #19
 80061d8:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <USB_EPStartXfer+0x484>)
 80061da:	400b      	ands	r3, r1
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	0148      	lsls	r0, r1, #5
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	4401      	add	r1, r0
 80061e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061e8:	4313      	orrs	r3, r2
 80061ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	8af9      	ldrh	r1, [r7, #22]
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006208:	69b9      	ldr	r1, [r7, #24]
 800620a:	0148      	lsls	r0, r1, #5
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	4401      	add	r1, r0
 8006210:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006214:	4313      	orrs	r3, r2
 8006216:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10d      	bne.n	800623a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	68d9      	ldr	r1, [r3, #12]
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	460a      	mov	r2, r1
 8006238:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	78db      	ldrb	r3, [r3, #3]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d128      	bne.n	8006294 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d110      	bne.n	8006274 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800626c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e00f      	b.n	8006294 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006292:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	1ff80000 	.word	0x1ff80000

080062c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	4613      	mov	r3, r2
 80062d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	f040 80cd 	bne.w	8006480 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d132      	bne.n	8006354 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800630c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634c:	0cdb      	lsrs	r3, r3, #19
 800634e:	04db      	lsls	r3, r3, #19
 8006350:	6113      	str	r3, [r2, #16]
 8006352:	e04e      	b.n	80063f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	0cdb      	lsrs	r3, r3, #19
 8006370:	04db      	lsls	r3, r3, #19
 8006372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006392:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006396:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	695a      	ldr	r2, [r3, #20]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d903      	bls.n	80063ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e2:	6939      	ldr	r1, [r7, #16]
 80063e4:	0148      	lsls	r0, r1, #5
 80063e6:	6979      	ldr	r1, [r7, #20]
 80063e8:	4401      	add	r1, r0
 80063ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063ee:	4313      	orrs	r3, r2
 80063f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d11e      	bne.n	8006436 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d009      	beq.n	8006414 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	e092      	b.n	800655c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006454:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d07e      	beq.n	800655c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	2101      	movs	r1, #1
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	6979      	ldr	r1, [r7, #20]
 8006476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800647a:	4313      	orrs	r3, r2
 800647c:	634b      	str	r3, [r1, #52]	; 0x34
 800647e:	e06d      	b.n	800655c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649a:	0cdb      	lsrs	r3, r3, #19
 800649c:	04db      	lsls	r3, r3, #19
 800649e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006500:	691a      	ldr	r2, [r3, #16]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650a:	6939      	ldr	r1, [r7, #16]
 800650c:	0148      	lsls	r0, r1, #5
 800650e:	6979      	ldr	r1, [r7, #20]
 8006510:	4401      	add	r1, r0
 8006512:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006516:	4313      	orrs	r3, r2
 8006518:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d10d      	bne.n	800653c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68d9      	ldr	r1, [r3, #12]
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	460a      	mov	r2, r1
 800653a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006556:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800655a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800656a:	b480      	push	{r7}
 800656c:	b089      	sub	sp, #36	; 0x24
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	4611      	mov	r1, r2
 8006576:	461a      	mov	r2, r3
 8006578:	460b      	mov	r3, r1
 800657a:	71fb      	strb	r3, [r7, #7]
 800657c:	4613      	mov	r3, r2
 800657e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d11a      	bne.n	80065c6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006590:	88bb      	ldrh	r3, [r7, #4]
 8006592:	3303      	adds	r3, #3
 8006594:	089b      	lsrs	r3, r3, #2
 8006596:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	e00f      	b.n	80065be <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	031a      	lsls	r2, r3, #12
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065aa:	461a      	mov	r2, r3
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	3304      	adds	r3, #4
 80065b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	3301      	adds	r3, #1
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d3eb      	bcc.n	800659e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3724      	adds	r7, #36	; 0x24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	3303      	adds	r3, #3
 80065ee:	089b      	lsrs	r3, r3, #2
 80065f0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e00b      	b.n	8006610 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	601a      	str	r2, [r3, #0]
    pDest++;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	3304      	adds	r3, #4
 8006608:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	3301      	adds	r3, #1
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	429a      	cmp	r2, r3
 8006616:	d3ef      	bcc.n	80065f8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006618:	69fb      	ldr	r3, [r7, #28]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3724      	adds	r7, #36	; 0x24
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d12c      	bne.n	800669c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	db12      	blt.n	800667a <USB_EPSetStall+0x54>
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00f      	beq.n	800667a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006678:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	e02b      	b.n	80066f4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	db12      	blt.n	80066d4 <USB_EPSetStall+0xae>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00f      	beq.n	80066d4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066d2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d128      	bne.n	8006770 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800673c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	78db      	ldrb	r3, [r3, #3]
 8006742:	2b03      	cmp	r3, #3
 8006744:	d003      	beq.n	800674e <USB_EPClearStall+0x4c>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	78db      	ldrb	r3, [r3, #3]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d138      	bne.n	80067c0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e027      	b.n	80067c0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800678e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	78db      	ldrb	r3, [r3, #3]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d003      	beq.n	80067a0 <USB_EPClearStall+0x9e>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	78db      	ldrb	r3, [r3, #3]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d10f      	bne.n	80067c0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067be:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80067f0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006808:	4313      	orrs	r3, r2
 800680a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800681a:	b480      	push	{r7}
 800681c:	b085      	sub	sp, #20
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006834:	f023 0303 	bic.w	r3, r3, #3
 8006838:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006848:	f023 0302 	bic.w	r3, r3, #2
 800684c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688a:	f043 0302 	orr.w	r3, r3, #2
 800688e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4013      	ands	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4013      	ands	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	0c1b      	lsrs	r3, r3, #16
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	4013      	ands	r3, r2
 800691a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	b29b      	uxth	r3, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4013      	ands	r3, r2
 8006958:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800695a:	68bb      	ldr	r3, [r7, #8]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	01db      	lsls	r3, r3, #7
 800699a:	b2db      	uxtb	r3, r3
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4013      	ands	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069b6:	68bb      	ldr	r3, [r7, #8]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	f003 0301 	and.w	r3, r3, #1
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069fe:	f023 0307 	bic.w	r3, r3, #7
 8006a02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	460b      	mov	r3, r1
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	333c      	adds	r3, #60	; 0x3c
 8006a3e:	3304      	adds	r3, #4
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4a26      	ldr	r2, [pc, #152]	; (8006ae0 <USB_EP0_OutStart+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d90a      	bls.n	8006a62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d101      	bne.n	8006a62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e037      	b.n	8006ad2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a90:	f043 0318 	orr.w	r3, r3, #24
 8006a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006aa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10f      	bne.n	8006ad0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ace:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	4f54300a 	.word	0x4f54300a

08006ae4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <USB_CoreReset+0x64>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e01b      	b.n	8006b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	daf2      	bge.n	8006af0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f043 0201 	orr.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <USB_CoreReset+0x64>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e006      	b.n	8006b3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d0f0      	beq.n	8006b1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	00030d40 	.word	0x00030d40

08006b4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e025      	b.n	8006bb0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	79fa      	ldrb	r2, [r7, #7]
 8006ba2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f7fa fc5d 	bl	8001464 <USBD_LL_Init>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e010      	b.n	8006bf2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f107 020e 	add.w	r2, r7, #14
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7fa fc7e 	bl	8001504 <USBD_LL_Start>
 8006c08:	4603      	mov	r3, r0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b084      	sub	sp, #16
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d009      	beq.n	8006c38 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6852      	ldr	r2, [r2, #4]
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	4611      	mov	r1, r2
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fa fc75 	bl	800153a <USBD_LL_Stop>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73fb      	strb	r3, [r7, #15]

  return ret;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	78fa      	ldrb	r2, [r7, #3]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
  }

  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 ff68 	bl	8007bc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d10:	f003 031f 	and.w	r3, r3, #31
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d00e      	beq.n	8006d36 <USBD_LL_SetupStage+0x5a>
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d302      	bcc.n	8006d22 <USBD_LL_SetupStage+0x46>
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d014      	beq.n	8006d4a <USBD_LL_SetupStage+0x6e>
 8006d20:	e01d      	b.n	8006d5e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fa18 	bl	8007160 <USBD_StdDevReq>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	e020      	b.n	8006d78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa7c 	bl	800723c <USBD_StdItfReq>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
      break;
 8006d48:	e016      	b.n	8006d78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fab8 	bl	80072c8 <USBD_StdEPReq>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d5c:	e00c      	b.n	8006d78 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fa fc25 	bl	80015bc <USBD_LL_StallEP>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
      break;
 8006d76:	bf00      	nop
  }

  return ret;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	607a      	str	r2, [r7, #4]
 8006d8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d137      	bne.n	8006e06 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d14a      	bne.n	8006e3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d913      	bls.n	8006ddc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	1ad2      	subs	r2, r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	bf28      	it	cs
 8006dce:	4613      	movcs	r3, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f001 fe18 	bl	8008a0a <USBD_CtlContinueRx>
 8006dda:	e030      	b.n	8006e3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d105      	bne.n	8006dfe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f001 fe14 	bl	8008a2c <USBD_CtlSendStatus>
 8006e04:	e01b      	b.n	8006e3e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d013      	beq.n	8006e3a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d10e      	bne.n	8006e3a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	7afa      	ldrb	r2, [r7, #11]
 8006e26:	4611      	mov	r1, r2
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	e002      	b.n	8006e40 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e000      	b.n	8006e40 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	460b      	mov	r3, r1
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d16a      	bne.n	8006f32 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3314      	adds	r3, #20
 8006e60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d155      	bne.n	8006f18 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d914      	bls.n	8006ea2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	1ad2      	subs	r2, r2, r3
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f001 fd8d 	bl	80089ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e94:	2300      	movs	r3, #0
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7fa fc38 	bl	8001710 <USBD_LL_PrepareReceive>
 8006ea0:	e03a      	b.n	8006f18 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d11c      	bne.n	8006ee8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d316      	bcc.n	8006ee8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d20f      	bcs.n	8006ee8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2100      	movs	r1, #0
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f001 fd6e 	bl	80089ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eda:	2300      	movs	r3, #0
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7fa fc15 	bl	8001710 <USBD_LL_PrepareReceive>
 8006ee6:	e017      	b.n	8006f18 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00a      	beq.n	8006f0a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d105      	bne.n	8006f0a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7fa fb55 	bl	80015bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f001 fd9d 	bl	8008a52 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d123      	bne.n	8006f6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff fe9b 	bl	8006c5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f30:	e01b      	b.n	8006f6a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d013      	beq.n	8006f66 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d10e      	bne.n	8006f66 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	7afa      	ldrb	r2, [r7, #11]
 8006f52:	4611      	mov	r1, r2
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	e002      	b.n	8006f6c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e000      	b.n	8006f6c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6852      	ldr	r2, [r2, #4]
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fa fad6 	bl	8001570 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2240      	movs	r2, #64	; 0x40
 8006fd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2180      	movs	r1, #128	; 0x80
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fac8 	bl	8001570 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2204      	movs	r2, #4
 800702e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704e:	2b04      	cmp	r3, #4
 8007050:	d105      	bne.n	800705e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707a:	2b03      	cmp	r3, #3
 800707c:	d10b      	bne.n	8007096 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	69db      	ldr	r3, [r3, #28]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6852      	ldr	r2, [r2, #4]
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	4611      	mov	r1, r2
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4798      	blx	r3
  }

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	3301      	adds	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007140:	8a3b      	ldrh	r3, [r7, #16]
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	b21a      	sxth	r2, r3
 8007146:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800714a:	4313      	orrs	r3, r2
 800714c:	b21b      	sxth	r3, r3
 800714e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007150:	89fb      	ldrh	r3, [r7, #14]
}
 8007152:	4618      	mov	r0, r3
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007176:	2b20      	cmp	r3, #32
 8007178:	d004      	beq.n	8007184 <USBD_StdDevReq+0x24>
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d002      	beq.n	8007184 <USBD_StdDevReq+0x24>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00a      	beq.n	8007198 <USBD_StdDevReq+0x38>
 8007182:	e050      	b.n	8007226 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	4603      	mov	r3, r0
 8007194:	73fb      	strb	r3, [r7, #15]
    break;
 8007196:	e04b      	b.n	8007230 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	785b      	ldrb	r3, [r3, #1]
 800719c:	2b09      	cmp	r3, #9
 800719e:	d83c      	bhi.n	800721a <USBD_StdDevReq+0xba>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USBD_StdDevReq+0x48>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007211 	.word	0x08007211
 80071b0:	0800721b 	.word	0x0800721b
 80071b4:	08007207 	.word	0x08007207
 80071b8:	0800721b 	.word	0x0800721b
 80071bc:	080071db 	.word	0x080071db
 80071c0:	080071d1 	.word	0x080071d1
 80071c4:	0800721b 	.word	0x0800721b
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	080071e5 	.word	0x080071e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f9ce 	bl	8007574 <USBD_GetDescriptor>
      break;
 80071d8:	e024      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb6f 	bl	80078c0 <USBD_SetAddress>
      break;
 80071e2:	e01f      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fbac 	bl	8007944 <USBD_SetConfig>
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
      break;
 80071f0:	e018      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc49 	bl	8007a8c <USBD_GetConfig>
      break;
 80071fa:	e013      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc78 	bl	8007af4 <USBD_GetStatus>
      break;
 8007204:	e00e      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fca6 	bl	8007b5a <USBD_SetFeature>
      break;
 800720e:	e009      	b.n	8007224 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fcb5 	bl	8007b82 <USBD_ClrFeature>
      break;
 8007218:	e004      	b.n	8007224 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fd0b 	bl	8007c38 <USBD_CtlError>
      break;
 8007222:	bf00      	nop
    }
    break;
 8007224:	e004      	b.n	8007230 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fd05 	bl	8007c38 <USBD_CtlError>
    break;
 800722e:	bf00      	nop
  }

  return ret;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007252:	2b20      	cmp	r3, #32
 8007254:	d003      	beq.n	800725e <USBD_StdItfReq+0x22>
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d001      	beq.n	800725e <USBD_StdItfReq+0x22>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d12a      	bne.n	80072b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007264:	3b01      	subs	r3, #1
 8007266:	2b02      	cmp	r3, #2
 8007268:	d81d      	bhi.n	80072a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b01      	cmp	r3, #1
 8007272:	d813      	bhi.n	800729c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	4798      	blx	r3
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	88db      	ldrh	r3, [r3, #6]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d110      	bne.n	80072b0 <USBD_StdItfReq+0x74>
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fbc9 	bl	8008a2c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800729a:	e009      	b.n	80072b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fcca 	bl	8007c38 <USBD_CtlError>
      break;
 80072a4:	e004      	b.n	80072b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fcc5 	bl	8007c38 <USBD_CtlError>
      break;
 80072ae:	e000      	b.n	80072b2 <USBD_StdItfReq+0x76>
      break;
 80072b0:	bf00      	nop
    }
    break;
 80072b2:	e004      	b.n	80072be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fcbe 	bl	8007c38 <USBD_CtlError>
    break;
 80072bc:	bf00      	nop
  }

  return ret;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	889b      	ldrh	r3, [r3, #4]
 80072da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d004      	beq.n	80072f2 <USBD_StdEPReq+0x2a>
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x2a>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <USBD_StdEPReq+0x3e>
 80072f0:	e135      	b.n	800755e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	e130      	b.n	8007568 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d03e      	beq.n	800738c <USBD_StdEPReq+0xc4>
 800730e:	2b03      	cmp	r3, #3
 8007310:	d002      	beq.n	8007318 <USBD_StdEPReq+0x50>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d077      	beq.n	8007406 <USBD_StdEPReq+0x13e>
 8007316:	e11c      	b.n	8007552 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731e:	2b02      	cmp	r3, #2
 8007320:	d002      	beq.n	8007328 <USBD_StdEPReq+0x60>
 8007322:	2b03      	cmp	r3, #3
 8007324:	d015      	beq.n	8007352 <USBD_StdEPReq+0x8a>
 8007326:	e02b      	b.n	8007380 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <USBD_StdEPReq+0x80>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d009      	beq.n	8007348 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fa f93f 	bl	80015bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fa f93b 	bl	80015bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007346:	e020      	b.n	800738a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc74 	bl	8007c38 <USBD_CtlError>
        break;
 8007350:	e01b      	b.n	800738a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10e      	bne.n	8007378 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_StdEPReq+0xb0>
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d008      	beq.n	8007378 <USBD_StdEPReq+0xb0>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d104      	bne.n	8007378 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fa f922 	bl	80015bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fb57 	bl	8008a2c <USBD_CtlSendStatus>

        break;
 800737e:	e004      	b.n	800738a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc58 	bl	8007c38 <USBD_CtlError>
        break;
 8007388:	bf00      	nop
      }
      break;
 800738a:	e0e7      	b.n	800755c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007392:	2b02      	cmp	r3, #2
 8007394:	d002      	beq.n	800739c <USBD_StdEPReq+0xd4>
 8007396:	2b03      	cmp	r3, #3
 8007398:	d015      	beq.n	80073c6 <USBD_StdEPReq+0xfe>
 800739a:	e02d      	b.n	80073f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <USBD_StdEPReq+0xf4>
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b80      	cmp	r3, #128	; 0x80
 80073a6:	d009      	beq.n	80073bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fa f905 	bl	80015bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7fa f901 	bl	80015bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80073ba:	e023      	b.n	8007404 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc3a 	bl	8007c38 <USBD_CtlError>
        break;
 80073c4:	e01e      	b.n	8007404 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	885b      	ldrh	r3, [r3, #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d119      	bne.n	8007402 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fa f90c 	bl	80015fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fb22 	bl	8008a2c <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
        }
        break;
 80073f6:	e004      	b.n	8007402 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fc1c 	bl	8007c38 <USBD_CtlError>
        break;
 8007400:	e000      	b.n	8007404 <USBD_StdEPReq+0x13c>
        break;
 8007402:	bf00      	nop
      }
      break;
 8007404:	e0aa      	b.n	800755c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	2b02      	cmp	r3, #2
 800740e:	d002      	beq.n	8007416 <USBD_StdEPReq+0x14e>
 8007410:	2b03      	cmp	r3, #3
 8007412:	d032      	beq.n	800747a <USBD_StdEPReq+0x1b2>
 8007414:	e097      	b.n	8007546 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d007      	beq.n	800742c <USBD_StdEPReq+0x164>
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b80      	cmp	r3, #128	; 0x80
 8007420:	d004      	beq.n	800742c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fc07 	bl	8007c38 <USBD_CtlError>
          break;
 800742a:	e091      	b.n	8007550 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800742c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	da0b      	bge.n	800744c <USBD_StdEPReq+0x184>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	3310      	adds	r3, #16
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	e00b      	b.n	8007464 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	3304      	adds	r3, #4
 8007464:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2202      	movs	r2, #2
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fa80 	bl	8008978 <USBD_CtlSendData>
        break;
 8007478:	e06a      	b.n	8007550 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800747a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747e:	2b00      	cmp	r3, #0
 8007480:	da11      	bge.n	80074a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007482:	7bbb      	ldrb	r3, [r7, #14]
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	3324      	adds	r3, #36	; 0x24
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d117      	bne.n	80074cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fbca 	bl	8007c38 <USBD_CtlError>
            break;
 80074a4:	e054      	b.n	8007550 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074a6:	7bbb      	ldrb	r3, [r7, #14]
 80074a8:	f003 020f 	and.w	r2, r3, #15
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fbb7 	bl	8007c38 <USBD_CtlError>
            break;
 80074ca:	e041      	b.n	8007550 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da0b      	bge.n	80074ec <USBD_StdEPReq+0x224>
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	3310      	adds	r3, #16
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4413      	add	r3, r2
 80074e8:	3304      	adds	r3, #4
 80074ea:	e00b      	b.n	8007504 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	3304      	adds	r3, #4
 8007504:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <USBD_StdEPReq+0x24a>
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b80      	cmp	r3, #128	; 0x80
 8007510:	d103      	bne.n	800751a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e00e      	b.n	8007538 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fa f88a 	bl	8001638 <USBD_LL_IsStallEP>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2201      	movs	r2, #1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	e002      	b.n	8007538 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2202      	movs	r2, #2
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 fa1a 	bl	8008978 <USBD_CtlSendData>
          break;
 8007544:	e004      	b.n	8007550 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb75 	bl	8007c38 <USBD_CtlError>
        break;
 800754e:	bf00      	nop
      }
      break;
 8007550:	e004      	b.n	800755c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fb6f 	bl	8007c38 <USBD_CtlError>
      break;
 800755a:	bf00      	nop
    }
    break;
 800755c:	e004      	b.n	8007568 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb69 	bl	8007c38 <USBD_CtlError>
    break;
 8007566:	bf00      	nop
  }

  return ret;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	885b      	ldrh	r3, [r3, #2]
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	2b0e      	cmp	r3, #14
 8007596:	f200 8165 	bhi.w	8007864 <USBD_GetDescriptor+0x2f0>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <USBD_GetDescriptor+0x2c>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	08007611 	.word	0x08007611
 80075a4:	08007629 	.word	0x08007629
 80075a8:	08007669 	.word	0x08007669
 80075ac:	08007865 	.word	0x08007865
 80075b0:	08007865 	.word	0x08007865
 80075b4:	08007805 	.word	0x08007805
 80075b8:	08007831 	.word	0x08007831
 80075bc:	08007865 	.word	0x08007865
 80075c0:	08007865 	.word	0x08007865
 80075c4:	08007865 	.word	0x08007865
 80075c8:	08007865 	.word	0x08007865
 80075cc:	08007865 	.word	0x08007865
 80075d0:	08007865 	.word	0x08007865
 80075d4:	08007865 	.word	0x08007865
 80075d8:	080075dd 	.word	0x080075dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	7c12      	ldrb	r2, [r2, #16]
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075fe:	e139      	b.n	8007874 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb18 	bl	8007c38 <USBD_CtlError>
      err++;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	3301      	adds	r3, #1
 800760c:	72fb      	strb	r3, [r7, #11]
    break;
 800760e:	e131      	b.n	8007874 <USBD_GetDescriptor+0x300>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
    break;
 8007626:	e125      	b.n	8007874 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800764a:	e113      	b.n	8007874 <USBD_GetDescriptor+0x300>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
    break;
 8007666:	e105      	b.n	8007874 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b05      	cmp	r3, #5
 8007670:	f200 80ac 	bhi.w	80077cc <USBD_GetDescriptor+0x258>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USBD_GetDescriptor+0x108>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007695 	.word	0x08007695
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076fd 	.word	0x080076fd
 8007688:	08007731 	.word	0x08007731
 800768c:	08007765 	.word	0x08007765
 8007690:	08007799 	.word	0x08007799
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076b6:	e0a4      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fabc 	bl	8007c38 <USBD_CtlError>
        err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
      break;
 80076c6:	e09c      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076ea:	e08a      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 faa2 	bl	8007c38 <USBD_CtlError>
        err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
      break;
 80076fa:	e082      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800771e:	e070      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa88 	bl	8007c38 <USBD_CtlError>
        err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
      break;
 800772e:	e068      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007752:	e056      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa6e 	bl	8007c38 <USBD_CtlError>
        err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
      break;
 8007762:	e04e      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007786:	e03c      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa54 	bl	8007c38 <USBD_CtlError>
        err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
      break;
 8007796:	e034      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077ba:	e022      	b.n	8007802 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa3a 	bl	8007c38 <USBD_CtlError>
        err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
      break;
 80077ca:	e01a      	b.n	8007802 <USBD_GetDescriptor+0x28e>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <USBD_GetDescriptor+0x27e>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	8852      	ldrh	r2, [r2, #2]
 80077e4:	b2d1      	uxtb	r1, r2
 80077e6:	f107 0208 	add.w	r2, r7, #8
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	4798      	blx	r3
 80077ee:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 80077f0:	e006      	b.n	8007800 <USBD_GetDescriptor+0x28c>
        USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa1f 	bl	8007c38 <USBD_CtlError>
        err++;
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	3301      	adds	r3, #1
 80077fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007800:	bf00      	nop
    }
    break;
 8007802:	e037      	b.n	8007874 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7c1b      	ldrb	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d109      	bne.n	8007820 <USBD_GetDescriptor+0x2ac>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	f107 0208 	add.w	r2, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800781e:	e029      	b.n	8007874 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fa08 	bl	8007c38 <USBD_CtlError>
      err++;
 8007828:	7afb      	ldrb	r3, [r7, #11]
 800782a:	3301      	adds	r3, #1
 800782c:	72fb      	strb	r3, [r7, #11]
    break;
 800782e:	e021      	b.n	8007874 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	7c1b      	ldrb	r3, [r3, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10d      	bne.n	8007854 <USBD_GetDescriptor+0x2e0>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007840:	f107 0208 	add.w	r2, r7, #8
 8007844:	4610      	mov	r0, r2
 8007846:	4798      	blx	r3
 8007848:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	2207      	movs	r2, #7
 8007850:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007852:	e00f      	b.n	8007874 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007854:	6839      	ldr	r1, [r7, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9ee 	bl	8007c38 <USBD_CtlError>
      err++;
 800785c:	7afb      	ldrb	r3, [r7, #11]
 800785e:	3301      	adds	r3, #1
 8007860:	72fb      	strb	r3, [r7, #11]
    break;
 8007862:	e007      	b.n	8007874 <USBD_GetDescriptor+0x300>

  default:
    USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9e6 	bl	8007c38 <USBD_CtlError>
    err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
    break;
 8007872:	bf00      	nop
  }

  if (err != 0U)
 8007874:	7afb      	ldrb	r3, [r7, #11]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d11e      	bne.n	80078b8 <USBD_GetDescriptor+0x344>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	88db      	ldrh	r3, [r3, #6]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <USBD_GetDescriptor+0x33c>
    {
      if (len != 0U)
 8007882:	893b      	ldrh	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00e      	beq.n	80078a6 <USBD_GetDescriptor+0x332>
      {
        len = MIN(len, req->wLength);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	88da      	ldrh	r2, [r3, #6]
 800788c:	893b      	ldrh	r3, [r7, #8]
 800788e:	4293      	cmp	r3, r2
 8007890:	bf28      	it	cs
 8007892:	4613      	movcs	r3, r2
 8007894:	b29b      	uxth	r3, r3
 8007896:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007898:	893b      	ldrh	r3, [r7, #8]
 800789a:	461a      	mov	r2, r3
 800789c:	68f9      	ldr	r1, [r7, #12]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f86a 	bl	8008978 <USBD_CtlSendData>
 80078a4:	e009      	b.n	80078ba <USBD_GetDescriptor+0x346>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9c5 	bl	8007c38 <USBD_CtlError>
 80078ae:	e004      	b.n	80078ba <USBD_GetDescriptor+0x346>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f8bb 	bl	8008a2c <USBD_CtlSendStatus>
 80078b6:	e000      	b.n	80078ba <USBD_GetDescriptor+0x346>
    return;
 80078b8:	bf00      	nop
    }
  }
}
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	889b      	ldrh	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d130      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d12c      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	2b7f      	cmp	r3, #127	; 0x7f
 80078e0:	d828      	bhi.n	8007934 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d104      	bne.n	8007902 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f99c 	bl	8007c38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e01c      	b.n	800793c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7f9 febe 	bl	8001690 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f001 f889 	bl	8008a2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	e008      	b.n	800793c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e003      	b.n	800793c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f97e 	bl	8007c38 <USBD_CtlError>
  }
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b4b      	ldr	r3, [pc, #300]	; (8007a88 <USBD_SetConfig+0x144>)
 800795a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800795c:	4b4a      	ldr	r3, [pc, #296]	; (8007a88 <USBD_SetConfig+0x144>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d905      	bls.n	8007970 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f966 	bl	8007c38 <USBD_CtlError>
    return USBD_FAIL;
 800796c:	2303      	movs	r3, #3
 800796e:	e087      	b.n	8007a80 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007976:	2b02      	cmp	r3, #2
 8007978:	d002      	beq.n	8007980 <USBD_SetConfig+0x3c>
 800797a:	2b03      	cmp	r3, #3
 800797c:	d025      	beq.n	80079ca <USBD_SetConfig+0x86>
 800797e:	e071      	b.n	8007a64 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007980:	4b41      	ldr	r3, [pc, #260]	; (8007a88 <USBD_SetConfig+0x144>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d01c      	beq.n	80079c2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007988:	4b3f      	ldr	r3, [pc, #252]	; (8007a88 <USBD_SetConfig+0x144>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007992:	4b3d      	ldr	r3, [pc, #244]	; (8007a88 <USBD_SetConfig+0x144>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff f96b 	bl	8006c74 <USBD_SetClassConfig>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f944 	bl	8007c38 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80079b0:	e065      	b.n	8007a7e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f83a 	bl	8008a2c <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2203      	movs	r2, #3
 80079bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80079c0:	e05d      	b.n	8007a7e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f832 	bl	8008a2c <USBD_CtlSendStatus>
    break;
 80079c8:	e059      	b.n	8007a7e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80079ca:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <USBD_SetConfig+0x144>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d112      	bne.n	80079f8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80079da:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <USBD_SetConfig+0x144>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079e4:	4b28      	ldr	r3, [pc, #160]	; (8007a88 <USBD_SetConfig+0x144>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff f95e 	bl	8006cac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f81b 	bl	8008a2c <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80079f6:	e042      	b.n	8007a7e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80079f8:	4b23      	ldr	r3, [pc, #140]	; (8007a88 <USBD_SetConfig+0x144>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d02a      	beq.n	8007a5c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff f94c 	bl	8006cac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007a14:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <USBD_SetConfig+0x144>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <USBD_SetConfig+0x144>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f7ff f925 	bl	8006c74 <USBD_SetClassConfig>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00f      	beq.n	8007a54 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8fe 	bl	8007c38 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7ff f931 	bl	8006cac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007a52:	e014      	b.n	8007a7e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 ffe9 	bl	8008a2c <USBD_CtlSendStatus>
    break;
 8007a5a:	e010      	b.n	8007a7e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 ffe5 	bl	8008a2c <USBD_CtlSendStatus>
    break;
 8007a62:	e00c      	b.n	8007a7e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8e6 	bl	8007c38 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a6c:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <USBD_SetConfig+0x144>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff f91a 	bl	8006cac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	bf00      	nop
  }

  return ret;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000170 	.word	0x20000170

08007a8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d004      	beq.n	8007aa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f8c9 	bl	8007c38 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007aa6:	e021      	b.n	8007aec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	db17      	blt.n	8007ae2 <USBD_GetConfig+0x56>
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	dd02      	ble.n	8007abc <USBD_GetConfig+0x30>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d00b      	beq.n	8007ad2 <USBD_GetConfig+0x46>
 8007aba:	e012      	b.n	8007ae2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 ff54 	bl	8008978 <USBD_CtlSendData>
      break;
 8007ad0:	e00c      	b.n	8007aec <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 ff4c 	bl	8008978 <USBD_CtlSendData>
      break;
 8007ae0:	e004      	b.n	8007aec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8a7 	bl	8007c38 <USBD_CtlError>
      break;
 8007aea:	bf00      	nop
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b04:	3b01      	subs	r3, #1
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d81e      	bhi.n	8007b48 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d004      	beq.n	8007b1c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007b12:	6839      	ldr	r1, [r7, #0]
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f88f 	bl	8007c38 <USBD_CtlError>
      break;
 8007b1a:	e01a      	b.n	8007b52 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f043 0202 	orr.w	r2, r3, #2
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 ff19 	bl	8008978 <USBD_CtlSendData>
    break;
 8007b46:	e004      	b.n	8007b52 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f874 	bl	8007c38 <USBD_CtlError>
    break;
 8007b50:	bf00      	nop
  }
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	885b      	ldrh	r3, [r3, #2]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d106      	bne.n	8007b7a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 ff59 	bl	8008a2c <USBD_CtlSendStatus>
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b92:	3b01      	subs	r3, #1
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d80b      	bhi.n	8007bb0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	885b      	ldrh	r3, [r3, #2]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10c      	bne.n	8007bba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ff3f 	bl	8008a2c <USBD_CtlSendStatus>
      }
      break;
 8007bae:	e004      	b.n	8007bba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f840 	bl	8007c38 <USBD_CtlError>
      break;
 8007bb8:	e000      	b.n	8007bbc <USBD_ClrFeature+0x3a>
      break;
 8007bba:	bf00      	nop
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	781a      	ldrb	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff fa97 	bl	8007122 <SWAPBYTE>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3301      	adds	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fa8a 	bl	8007122 <SWAPBYTE>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	461a      	mov	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fa7d 	bl	8007122 <SWAPBYTE>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	80da      	strh	r2, [r3, #6]
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7f9 fcb9 	bl	80015bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7f9 fcb5 	bl	80015bc <USBD_LL_StallEP>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d036      	beq.n	8007cde <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c74:	6938      	ldr	r0, [r7, #16]
 8007c76:	f000 f836 	bl	8007ce6 <USBD_GetLen>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	3301      	adds	r3, #1
 8007c98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007caa:	e013      	b.n	8007cd4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cac:	7dfb      	ldrb	r3, [r7, #23]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
    idx++;
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e7      	bne.n	8007cac <USBD_GetString+0x52>
 8007cdc:	e000      	b.n	8007ce0 <USBD_GetString+0x86>
    return;
 8007cde:	bf00      	nop
  }
}
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cf6:	e005      	b.n	8007d04 <USBD_GetLen+0x1e>
  {
    len++;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3301      	adds	r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f5      	bne.n	8007cf8 <USBD_GetLen+0x12>
  }

  return len;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <__NVIC_SystemReset>:
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007d20:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <__NVIC_SystemReset+0x20>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007d2c:	4903      	ldr	r1, [pc, #12]	; (8007d3c <__NVIC_SystemReset+0x20>)
 8007d2e:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <__NVIC_SystemReset+0x24>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	60cb      	str	r3, [r1, #12]
 8007d34:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007d38:	bf00      	nop
 8007d3a:	e7fd      	b.n	8007d38 <__NVIC_SystemReset+0x1c>
 8007d3c:	e000ed00 	.word	0xe000ed00
 8007d40:	05fa0004 	.word	0x05fa0004

08007d44 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8007d50:	f240 401c 	movw	r0, #1052	; 0x41c
 8007d54:	f000 feba 	bl	8008acc <malloc>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e03e      	b.n	8007dec <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4a1c      	ldr	r2, [pc, #112]	; (8007df4 <USBD_DFU_Init+0xb0>)
 8007d82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	4798      	blx	r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e000      	b.n	8007dec <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	08010000 	.word	0x08010000

08007df8 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e027      	b.n	8007e62 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e18:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fe42 	bl	8008adc <free>
  pdev->pClassData = NULL;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e7c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03f      	beq.n	8007f1a <USBD_DFU_Setup+0xae>
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 80c3 	bne.w	8008026 <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	785b      	ldrb	r3, [r3, #1]
 8007ea4:	2b06      	cmp	r3, #6
 8007ea6:	d830      	bhi.n	8007f0a <USBD_DFU_Setup+0x9e>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBD_DFU_Setup+0x44>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08007ecd 	.word	0x08007ecd
 8007eb8:	08007ed7 	.word	0x08007ed7
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007ef9 	.word	0x08007ef9
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 fa62 	bl	8008398 <DFU_Download>
      break;
 8007ed4:	e020      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fac7 	bl	800846c <DFU_Upload>
      break;
 8007ede:	e01b      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb9b 	bl	800861c <DFU_GetStatus>
      break;
 8007ee6:	e017      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc49 	bl	8008780 <DFU_ClearStatus>
      break;
 8007eee:	e013      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc95 	bl	8008820 <DFU_GetState>
      break;
 8007ef6:	e00f      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fca5 	bl	8008848 <DFU_Abort>
      break;
 8007efe:	e00b      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9e8 	bl	80082d8 <DFU_Detach>
      break;
 8007f08:	e006      	b.n	8007f18 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fe93 	bl	8007c38 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	77fb      	strb	r3, [r7, #31]
      break;
 8007f16:	bf00      	nop
    }
    break;
 8007f18:	e08c      	b.n	8008034 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b0b      	cmp	r3, #11
 8007f20:	d878      	bhi.n	8008014 <USBD_DFU_Setup+0x1a8>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <USBD_DFU_Setup+0xbc>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f59 	.word	0x08007f59
 8007f2c:	08008023 	.word	0x08008023
 8007f30:	08008015 	.word	0x08008015
 8007f34:	08008015 	.word	0x08008015
 8007f38:	08008015 	.word	0x08008015
 8007f3c:	08008015 	.word	0x08008015
 8007f40:	08007f81 	.word	0x08007f81
 8007f44:	08008015 	.word	0x08008015
 8007f48:	08008015 	.word	0x08008015
 8007f4c:	08008015 	.word	0x08008015
 8007f50:	08007fab 	.word	0x08007fab
 8007f54:	08007fd5 	.word	0x08007fd5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d107      	bne.n	8007f72 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f62:	f107 030e 	add.w	r3, r7, #14
 8007f66:	2202      	movs	r2, #2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fd04 	bl	8008978 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007f70:	e058      	b.n	8008024 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff fe5f 	bl	8007c38 <USBD_CtlError>
        ret = USBD_FAIL;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	77fb      	strb	r3, [r7, #31]
      break;
 8007f7e:	e051      	b.n	8008024 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	0a1b      	lsrs	r3, r3, #8
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b21      	cmp	r3, #33	; 0x21
 8007f8a:	d107      	bne.n	8007f9c <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8007f8c:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <USBD_DFU_Setup+0x1d4>)
 8007f8e:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	88db      	ldrh	r3, [r3, #6]
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	bf28      	it	cs
 8007f98:	2309      	movcs	r3, #9
 8007f9a:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9c:	8afb      	ldrh	r3, [r7, #22]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	69b9      	ldr	r1, [r7, #24]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fce8 	bl	8008978 <USBD_CtlSendData>
      break;
 8007fa8:	e03c      	b.n	8008024 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d108      	bne.n	8007fc6 <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fcda 	bl	8008978 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007fc4:	e02e      	b.n	8008024 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff fe35 	bl	8007c38 <USBD_CtlError>
        ret = USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	77fb      	strb	r3, [r7, #31]
      break;
 8007fd2:	e027      	b.n	8008024 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	885b      	ldrh	r3, [r3, #2]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d113      	bne.n	8008006 <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d107      	bne.n	8007ff8 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	461a      	mov	r2, r3
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007ff6:	e015      	b.n	8008024 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff fe1c 	bl	8007c38 <USBD_CtlError>
          ret = USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	77fb      	strb	r3, [r7, #31]
      break;
 8008004:	e00e      	b.n	8008024 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff fe15 	bl	8007c38 <USBD_CtlError>
        ret = USBD_FAIL;
 800800e:	2303      	movs	r3, #3
 8008010:	77fb      	strb	r3, [r7, #31]
      break;
 8008012:	e007      	b.n	8008024 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fe0e 	bl	8007c38 <USBD_CtlError>
      ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	77fb      	strb	r3, [r7, #31]
      break;
 8008020:	e000      	b.n	8008024 <USBD_DFU_Setup+0x1b8>
      break;
 8008022:	bf00      	nop
    }
    break;
 8008024:	e006      	b.n	8008034 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fe05 	bl	8007c38 <USBD_CtlError>
    ret = USBD_FAIL;
 800802e:	2303      	movs	r3, #3
 8008030:	77fb      	strb	r3, [r7, #31]
    break;
 8008032:	bf00      	nop
  }

  return (uint8_t)ret;
 8008034:	7ffb      	ldrb	r3, [r7, #31]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3720      	adds	r7, #32
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200000d6 	.word	0x200000d6

08008044 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	221b      	movs	r2, #27
 8008050:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008052:	4b03      	ldr	r3, [pc, #12]	; (8008060 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	200000c4 	.word	0x200000c4

08008064 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800808a:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008092:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800809a:	2b04      	cmp	r3, #4
 800809c:	f040 80bc 	bne.w	8008218 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d17a      	bne.n	80081a0 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	f000 8092 	beq.w	80081da <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d15c      	bne.n	800817a <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b21      	cmp	r3, #33	; 0x21
 80080c6:	d124      	bne.n	8008112 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	461a      	mov	r2, r3
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	789b      	ldrb	r3, [r3, #2]
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	441a      	add	r2, r3
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	78db      	ldrb	r3, [r3, #3]
 80080f2:	041b      	lsls	r3, r3, #16
 80080f4:	441a      	add	r2, r3
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	791b      	ldrb	r3, [r3, #4]
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	441a      	add	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008110:	e063      	b.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b41      	cmp	r3, #65	; 0x41
 8008118:	d15f      	bne.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	461a      	mov	r2, r3
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	789b      	ldrb	r3, [r3, #2]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	441a      	add	r2, r3
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	441a      	add	r2, r3
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	791b      	ldrb	r3, [r3, #4]
 8008158:	061b      	lsls	r3, r3, #24
 800815a:	441a      	add	r2, r3
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800816c:	4610      	mov	r0, r2
 800816e:	4798      	blx	r3
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d031      	beq.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	e057      	b.n	800822a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	2200      	movs	r2, #0
 800817e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800818e:	2301      	movs	r3, #1
 8008190:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008192:	f107 030c 	add.w	r3, r7, #12
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fd4d 	bl	8007c38 <USBD_CtlError>
 800819e:	e01c      	b.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d917      	bls.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80081b0:	4b20      	ldr	r3, [pc, #128]	; (8008234 <USBD_DFU_EP0_TxReady+0x1b8>)
 80081b2:	4413      	add	r3, r2
 80081b4:	029a      	lsls	r2, r3, #10
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80081bc:	4413      	add	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	69f8      	ldr	r0, [r7, #28]
 80081c6:	6979      	ldr	r1, [r7, #20]
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80081ce:	4798      	blx	r3
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e027      	b.n	800822a <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2200      	movs	r2, #0
 80081de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	2203      	movs	r2, #3
 80081ee:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008216:	e007      	b.n	8008228 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800821e:	2b07      	cmp	r3, #7
 8008220:	d102      	bne.n	8008228 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fb5e 	bl	80088e4 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	003ffffe 	.word	0x003ffffe

08008238 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
	...

08008250 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	220a      	movs	r2, #10
 800825c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	200000e0 	.word	0x200000e0

08008270 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	460b      	mov	r3, r1
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008284:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008286:	7afb      	ldrb	r3, [r7, #11]
 8008288:	2b06      	cmp	r3, #6
 800828a:	d808      	bhi.n	800829e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4905      	ldr	r1, [pc, #20]	; (80082a8 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff fce0 	bl	8007c5a <USBD_GetString>
    return USBD_StrDesc;
 800829a:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <USBD_DFU_GetUsrStringDesc+0x38>)
 800829c:	e000      	b.n	80082a0 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800829e:	2300      	movs	r3, #0
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	20000174 	.word	0x20000174

080082ac <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082bc:	2303      	movs	r3, #3
 80082be:	e004      	b.n	80082ca <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
	...

080082d8 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e8:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d013      	beq.n	800831c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d00e      	beq.n	800831c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008304:	2b05      	cmp	r3, #5
 8008306:	d009      	beq.n	800831c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800830e:	2b06      	cmp	r3, #6
 8008310:	d004      	beq.n	800831c <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008318:	2b09      	cmp	r3, #9
 800831a:	d125      	bne.n	8008368 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <DFU_Detach+0xbc>)
 800836a:	7d5b      	ldrb	r3, [r3, #21]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fe fc4c 	bl	8006c12 <USBD_Stop>
    (void)USBD_Start(pdev);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fe fc3d 	bl	8006bfa <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8008380:	e004      	b.n	800838c <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	885b      	ldrh	r3, [r3, #2]
 8008386:	4618      	mov	r0, r3
 8008388:	f7f9 fb1a 	bl	80019c0 <HAL_Delay>
}
 800838c:	bf00      	nop
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	200000c4 	.word	0x200000c4

08008398 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	88db      	ldrh	r3, [r3, #6]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d02d      	beq.n	800840e <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d004      	beq.n	80083c6 <DFU_Download+0x2e>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	d11e      	bne.n	8008404 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	885b      	ldrh	r3, [r3, #2]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	88db      	ldrh	r3, [r3, #6]
 80083d6:	461a      	mov	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80083f2:	68f9      	ldr	r1, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80083fa:	461a      	mov	r2, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fae7 	bl	80089d0 <USBD_CtlPrepareRx>
 8008402:	e02e      	b.n	8008462 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fc16 	bl	8007c38 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 800840c:	e029      	b.n	8008462 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008414:	2b05      	cmp	r3, #5
 8008416:	d004      	beq.n	8008422 <DFU_Download+0x8a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800841e:	2b02      	cmp	r3, #2
 8008420:	d11a      	bne.n	8008458 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2206      	movs	r2, #6
 800842e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008456:	e004      	b.n	8008462 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff fbec 	bl	8007c38 <USBD_CtlError>
}
 8008460:	e7ff      	b.n	8008462 <DFU_Download+0xca>
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847c:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008484:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	88db      	ldrh	r3, [r3, #6]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80a9 	beq.w	80085e2 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008496:	2b02      	cmp	r3, #2
 8008498:	d005      	beq.n	80084a6 <DFU_Upload+0x3a>
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80084a0:	2b09      	cmp	r3, #9
 80084a2:	f040 8091 	bne.w	80085c8 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	461a      	mov	r2, r3
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	88db      	ldrh	r3, [r3, #6]
 80084b6:	461a      	mov	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d12c      	bne.n	8008522 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d901      	bls.n	80084d6 <DFU_Upload+0x6a>
 80084d2:	2202      	movs	r2, #2
 80084d4:	e000      	b.n	80084d8 <DFU_Upload+0x6c>
 80084d6:	2209      	movs	r2, #9
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2221      	movs	r2, #33	; 0x21
 800850c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2241      	movs	r2, #65	; 0x41
 8008512:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2203      	movs	r2, #3
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa2c 	bl	8008978 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008520:	e076      	b.n	8008610 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008528:	2b01      	cmp	r3, #1
 800852a:	d932      	bls.n	8008592 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2209      	movs	r2, #9
 8008530:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <DFU_Upload+0x1ac>)
 8008560:	4413      	add	r3, r2
 8008562:	029a      	lsls	r2, r3, #10
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800856a:	4413      	add	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	6979      	ldr	r1, [r7, #20]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800857c:	4798      	blx	r3
 800857e:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008586:	461a      	mov	r2, r3
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f9f4 	bl	8008978 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008590:	e03e      	b.n	8008610 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	220f      	movs	r2, #15
 8008596:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 80085be:	6839      	ldr	r1, [r7, #0]
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff fb39 	bl	8007c38 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80085c6:	e023      	b.n	8008610 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 80085d8:	6839      	ldr	r1, [r7, #0]
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7ff fb2c 	bl	8007c38 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 80085e0:	e016      	b.n	8008610 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800860e:	e7ff      	b.n	8008610 <DFU_Upload+0x1a4>
 8008610:	bf00      	nop
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	003ffffe 	.word	0x003ffffe

0800861c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800862a:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008632:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800863a:	2b03      	cmp	r3, #3
 800863c:	d002      	beq.n	8008644 <DFU_GetStatus+0x28>
 800863e:	2b06      	cmp	r3, #6
 8008640:	d051      	beq.n	80086e6 <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8008642:	e08e      	b.n	8008762 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800864a:	2b00      	cmp	r3, #0
 800864c:	d034      	beq.n	80086b8 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2204      	movs	r2, #4
 8008652:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10e      	bne.n	80086a2 <DFU_GetStatus+0x86>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b41      	cmp	r3, #65	; 0x41
 800868a:	d10a      	bne.n	80086a2 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800869c:	2100      	movs	r1, #0
 800869e:	4798      	blx	r3
    break;
 80086a0:	e05f      	b.n	8008762 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80086b2:	2101      	movs	r1, #1
 80086b4:	4798      	blx	r3
    break;
 80086b6:	e054      	b.n	8008762 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2205      	movs	r2, #5
 80086bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 80086e4:	e03d      	b.n	8008762 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d116      	bne.n	800871e <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2207      	movs	r2, #7
 80086f4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800871c:	e020      	b.n	8008760 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008724:	2b00      	cmp	r3, #0
 8008726:	d11b      	bne.n	8008760 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008728:	4b14      	ldr	r3, [pc, #80]	; (800877c <DFU_GetStatus+0x160>)
 800872a:	7d1b      	ldrb	r3, [r3, #20]
 800872c:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008730:	2b00      	cmp	r3, #0
 8008732:	d015      	beq.n	8008760 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2202      	movs	r2, #2
 8008738:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8008760:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008768:	2206      	movs	r2, #6
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f903 	bl	8008978 <USBD_CtlSendData>
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200000c4 	.word	0x200000c4

08008780 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878e:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008796:	2b0a      	cmp	r3, #10
 8008798:	d11e      	bne.n	80087d8 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2202      	movs	r2, #2
 800879e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 80087d6:	e01d      	b.n	8008814 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	220a      	movs	r2, #10
 80087dc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	220e      	movs	r2, #14
 80087e4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8008814:	bf00      	nop
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882e:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008836:	2201      	movs	r2, #1
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f89c 	bl	8008978 <USBD_CtlSendData>
}
 8008840:	bf00      	nop
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008856:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800885e:	2b02      	cmp	r3, #2
 8008860:	d013      	beq.n	800888a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008868:	2b03      	cmp	r3, #3
 800886a:	d00e      	beq.n	800888a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008872:	2b05      	cmp	r3, #5
 8008874:	d009      	beq.n	800888a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800887c:	2b06      	cmp	r3, #6
 800887e:	d004      	beq.n	800888a <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008886:	2b09      	cmp	r3, #9
 8008888:	d125      	bne.n	80088d6 <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2202      	movs	r2, #2
 800888e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 80088d6:	bf00      	nop
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
	...

080088e4 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088f2:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80088fc:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <DFU_Leave+0x90>)
 80088fe:	7d1b      	ldrb	r3, [r3, #20]
 8008900:	f003 0304 	and.w	r3, r3, #4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d016      	beq.n	8008936 <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2206      	movs	r2, #6
 800890c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8008934:	e01a      	b.n	800896c <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2208      	movs	r2, #8
 800893a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe f955 	bl	8006c12 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008968:	f7ff f9d8 	bl	8007d1c <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	200000c4 	.word	0x200000c4

08008978 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2202      	movs	r2, #2
 8008988:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	2100      	movs	r1, #0
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7f8 fe95 	bl	80016ce <USBD_LL_Transmit>

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	2100      	movs	r1, #0
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7f8 fe84 	bl	80016ce <USBD_LL_Transmit>

  return USBD_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2203      	movs	r2, #3
 80089e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	2100      	movs	r1, #0
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7f8 fe88 	bl	8001710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7f8 fe77 	bl	8001710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7f8 fe43 	bl	80016ce <USBD_LL_Transmit>

  return USBD_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a62:	2300      	movs	r3, #0
 8008a64:	2200      	movs	r2, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7f8 fe51 	bl	8001710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <__errno>:
 8008a78:	4b01      	ldr	r3, [pc, #4]	; (8008a80 <__errno+0x8>)
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	200000ec 	.word	0x200000ec

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4e0d      	ldr	r6, [pc, #52]	; (8008abc <__libc_init_array+0x38>)
 8008a88:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8a:	1ba4      	subs	r4, r4, r6
 8008a8c:	10a4      	asrs	r4, r4, #2
 8008a8e:	2500      	movs	r5, #0
 8008a90:	42a5      	cmp	r5, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	4e0b      	ldr	r6, [pc, #44]	; (8008ac4 <__libc_init_array+0x40>)
 8008a96:	4c0c      	ldr	r4, [pc, #48]	; (8008ac8 <__libc_init_array+0x44>)
 8008a98:	f000 fc98 	bl	80093cc <_init>
 8008a9c:	1ba4      	subs	r4, r4, r6
 8008a9e:	10a4      	asrs	r4, r4, #2
 8008aa0:	2500      	movs	r5, #0
 8008aa2:	42a5      	cmp	r5, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aac:	4798      	blx	r3
 8008aae:	3501      	adds	r5, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ab6:	4798      	blx	r3
 8008ab8:	3501      	adds	r5, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	08009578 	.word	0x08009578
 8008ac0:	08009578 	.word	0x08009578
 8008ac4:	08009578 	.word	0x08009578
 8008ac8:	0800957c 	.word	0x0800957c

08008acc <malloc>:
 8008acc:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <malloc+0xc>)
 8008ace:	4601      	mov	r1, r0
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	f000 b861 	b.w	8008b98 <_malloc_r>
 8008ad6:	bf00      	nop
 8008ad8:	200000ec 	.word	0x200000ec

08008adc <free>:
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <free+0xc>)
 8008ade:	4601      	mov	r1, r0
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	f000 b80b 	b.w	8008afc <_free_r>
 8008ae6:	bf00      	nop
 8008ae8:	200000ec 	.word	0x200000ec

08008aec <memset>:
 8008aec:	4402      	add	r2, r0
 8008aee:	4603      	mov	r3, r0
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d100      	bne.n	8008af6 <memset+0xa>
 8008af4:	4770      	bx	lr
 8008af6:	f803 1b01 	strb.w	r1, [r3], #1
 8008afa:	e7f9      	b.n	8008af0 <memset+0x4>

08008afc <_free_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4605      	mov	r5, r0
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d045      	beq.n	8008b90 <_free_r+0x94>
 8008b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b08:	1f0c      	subs	r4, r1, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	bfb8      	it	lt
 8008b0e:	18e4      	addlt	r4, r4, r3
 8008b10:	f000 fbae 	bl	8009270 <__malloc_lock>
 8008b14:	4a1f      	ldr	r2, [pc, #124]	; (8008b94 <_free_r+0x98>)
 8008b16:	6813      	ldr	r3, [r2, #0]
 8008b18:	4610      	mov	r0, r2
 8008b1a:	b933      	cbnz	r3, 8008b2a <_free_r+0x2e>
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	6014      	str	r4, [r2, #0]
 8008b20:	4628      	mov	r0, r5
 8008b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b26:	f000 bba4 	b.w	8009272 <__malloc_unlock>
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	d90c      	bls.n	8008b48 <_free_r+0x4c>
 8008b2e:	6821      	ldr	r1, [r4, #0]
 8008b30:	1862      	adds	r2, r4, r1
 8008b32:	4293      	cmp	r3, r2
 8008b34:	bf04      	itt	eq
 8008b36:	681a      	ldreq	r2, [r3, #0]
 8008b38:	685b      	ldreq	r3, [r3, #4]
 8008b3a:	6063      	str	r3, [r4, #4]
 8008b3c:	bf04      	itt	eq
 8008b3e:	1852      	addeq	r2, r2, r1
 8008b40:	6022      	streq	r2, [r4, #0]
 8008b42:	6004      	str	r4, [r0, #0]
 8008b44:	e7ec      	b.n	8008b20 <_free_r+0x24>
 8008b46:	4613      	mov	r3, r2
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	b10a      	cbz	r2, 8008b50 <_free_r+0x54>
 8008b4c:	42a2      	cmp	r2, r4
 8008b4e:	d9fa      	bls.n	8008b46 <_free_r+0x4a>
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	1858      	adds	r0, r3, r1
 8008b54:	42a0      	cmp	r0, r4
 8008b56:	d10b      	bne.n	8008b70 <_free_r+0x74>
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	4401      	add	r1, r0
 8008b5c:	1858      	adds	r0, r3, r1
 8008b5e:	4282      	cmp	r2, r0
 8008b60:	6019      	str	r1, [r3, #0]
 8008b62:	d1dd      	bne.n	8008b20 <_free_r+0x24>
 8008b64:	6810      	ldr	r0, [r2, #0]
 8008b66:	6852      	ldr	r2, [r2, #4]
 8008b68:	605a      	str	r2, [r3, #4]
 8008b6a:	4401      	add	r1, r0
 8008b6c:	6019      	str	r1, [r3, #0]
 8008b6e:	e7d7      	b.n	8008b20 <_free_r+0x24>
 8008b70:	d902      	bls.n	8008b78 <_free_r+0x7c>
 8008b72:	230c      	movs	r3, #12
 8008b74:	602b      	str	r3, [r5, #0]
 8008b76:	e7d3      	b.n	8008b20 <_free_r+0x24>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	1821      	adds	r1, r4, r0
 8008b7c:	428a      	cmp	r2, r1
 8008b7e:	bf04      	itt	eq
 8008b80:	6811      	ldreq	r1, [r2, #0]
 8008b82:	6852      	ldreq	r2, [r2, #4]
 8008b84:	6062      	str	r2, [r4, #4]
 8008b86:	bf04      	itt	eq
 8008b88:	1809      	addeq	r1, r1, r0
 8008b8a:	6021      	streq	r1, [r4, #0]
 8008b8c:	605c      	str	r4, [r3, #4]
 8008b8e:	e7c7      	b.n	8008b20 <_free_r+0x24>
 8008b90:	bd38      	pop	{r3, r4, r5, pc}
 8008b92:	bf00      	nop
 8008b94:	20000274 	.word	0x20000274

08008b98 <_malloc_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	1ccd      	adds	r5, r1, #3
 8008b9c:	f025 0503 	bic.w	r5, r5, #3
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	2d0c      	cmp	r5, #12
 8008ba4:	bf38      	it	cc
 8008ba6:	250c      	movcc	r5, #12
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	db01      	blt.n	8008bb2 <_malloc_r+0x1a>
 8008bae:	42a9      	cmp	r1, r5
 8008bb0:	d903      	bls.n	8008bba <_malloc_r+0x22>
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	6033      	str	r3, [r6, #0]
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
 8008bba:	f000 fb59 	bl	8009270 <__malloc_lock>
 8008bbe:	4a21      	ldr	r2, [pc, #132]	; (8008c44 <_malloc_r+0xac>)
 8008bc0:	6814      	ldr	r4, [r2, #0]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	b991      	cbnz	r1, 8008bec <_malloc_r+0x54>
 8008bc6:	4c20      	ldr	r4, [pc, #128]	; (8008c48 <_malloc_r+0xb0>)
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	b91b      	cbnz	r3, 8008bd4 <_malloc_r+0x3c>
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f000 f8a1 	bl	8008d14 <_sbrk_r>
 8008bd2:	6020      	str	r0, [r4, #0]
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f89c 	bl	8008d14 <_sbrk_r>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d124      	bne.n	8008c2a <_malloc_r+0x92>
 8008be0:	230c      	movs	r3, #12
 8008be2:	6033      	str	r3, [r6, #0]
 8008be4:	4630      	mov	r0, r6
 8008be6:	f000 fb44 	bl	8009272 <__malloc_unlock>
 8008bea:	e7e4      	b.n	8008bb6 <_malloc_r+0x1e>
 8008bec:	680b      	ldr	r3, [r1, #0]
 8008bee:	1b5b      	subs	r3, r3, r5
 8008bf0:	d418      	bmi.n	8008c24 <_malloc_r+0x8c>
 8008bf2:	2b0b      	cmp	r3, #11
 8008bf4:	d90f      	bls.n	8008c16 <_malloc_r+0x7e>
 8008bf6:	600b      	str	r3, [r1, #0]
 8008bf8:	50cd      	str	r5, [r1, r3]
 8008bfa:	18cc      	adds	r4, r1, r3
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f000 fb38 	bl	8009272 <__malloc_unlock>
 8008c02:	f104 000b 	add.w	r0, r4, #11
 8008c06:	1d23      	adds	r3, r4, #4
 8008c08:	f020 0007 	bic.w	r0, r0, #7
 8008c0c:	1ac3      	subs	r3, r0, r3
 8008c0e:	d0d3      	beq.n	8008bb8 <_malloc_r+0x20>
 8008c10:	425a      	negs	r2, r3
 8008c12:	50e2      	str	r2, [r4, r3]
 8008c14:	e7d0      	b.n	8008bb8 <_malloc_r+0x20>
 8008c16:	428c      	cmp	r4, r1
 8008c18:	684b      	ldr	r3, [r1, #4]
 8008c1a:	bf16      	itet	ne
 8008c1c:	6063      	strne	r3, [r4, #4]
 8008c1e:	6013      	streq	r3, [r2, #0]
 8008c20:	460c      	movne	r4, r1
 8008c22:	e7eb      	b.n	8008bfc <_malloc_r+0x64>
 8008c24:	460c      	mov	r4, r1
 8008c26:	6849      	ldr	r1, [r1, #4]
 8008c28:	e7cc      	b.n	8008bc4 <_malloc_r+0x2c>
 8008c2a:	1cc4      	adds	r4, r0, #3
 8008c2c:	f024 0403 	bic.w	r4, r4, #3
 8008c30:	42a0      	cmp	r0, r4
 8008c32:	d005      	beq.n	8008c40 <_malloc_r+0xa8>
 8008c34:	1a21      	subs	r1, r4, r0
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f86c 	bl	8008d14 <_sbrk_r>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d0cf      	beq.n	8008be0 <_malloc_r+0x48>
 8008c40:	6025      	str	r5, [r4, #0]
 8008c42:	e7db      	b.n	8008bfc <_malloc_r+0x64>
 8008c44:	20000274 	.word	0x20000274
 8008c48:	20000278 	.word	0x20000278

08008c4c <_puts_r>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	460e      	mov	r6, r1
 8008c50:	4605      	mov	r5, r0
 8008c52:	b118      	cbz	r0, 8008c5c <_puts_r+0x10>
 8008c54:	6983      	ldr	r3, [r0, #24]
 8008c56:	b90b      	cbnz	r3, 8008c5c <_puts_r+0x10>
 8008c58:	f000 fa1c 	bl	8009094 <__sinit>
 8008c5c:	69ab      	ldr	r3, [r5, #24]
 8008c5e:	68ac      	ldr	r4, [r5, #8]
 8008c60:	b913      	cbnz	r3, 8008c68 <_puts_r+0x1c>
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 fa16 	bl	8009094 <__sinit>
 8008c68:	4b23      	ldr	r3, [pc, #140]	; (8008cf8 <_puts_r+0xac>)
 8008c6a:	429c      	cmp	r4, r3
 8008c6c:	d117      	bne.n	8008c9e <_puts_r+0x52>
 8008c6e:	686c      	ldr	r4, [r5, #4]
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	071b      	lsls	r3, r3, #28
 8008c74:	d51d      	bpl.n	8008cb2 <_puts_r+0x66>
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	b1db      	cbz	r3, 8008cb2 <_puts_r+0x66>
 8008c7a:	3e01      	subs	r6, #1
 8008c7c:	68a3      	ldr	r3, [r4, #8]
 8008c7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c82:	3b01      	subs	r3, #1
 8008c84:	60a3      	str	r3, [r4, #8]
 8008c86:	b9e9      	cbnz	r1, 8008cc4 <_puts_r+0x78>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	da2e      	bge.n	8008cea <_puts_r+0x9e>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	210a      	movs	r1, #10
 8008c90:	4628      	mov	r0, r5
 8008c92:	f000 f84f 	bl	8008d34 <__swbuf_r>
 8008c96:	3001      	adds	r0, #1
 8008c98:	d011      	beq.n	8008cbe <_puts_r+0x72>
 8008c9a:	200a      	movs	r0, #10
 8008c9c:	e011      	b.n	8008cc2 <_puts_r+0x76>
 8008c9e:	4b17      	ldr	r3, [pc, #92]	; (8008cfc <_puts_r+0xb0>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	d101      	bne.n	8008ca8 <_puts_r+0x5c>
 8008ca4:	68ac      	ldr	r4, [r5, #8]
 8008ca6:	e7e3      	b.n	8008c70 <_puts_r+0x24>
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <_puts_r+0xb4>)
 8008caa:	429c      	cmp	r4, r3
 8008cac:	bf08      	it	eq
 8008cae:	68ec      	ldreq	r4, [r5, #12]
 8008cb0:	e7de      	b.n	8008c70 <_puts_r+0x24>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f000 f88f 	bl	8008dd8 <__swsetup_r>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d0dd      	beq.n	8008c7a <_puts_r+0x2e>
 8008cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da04      	bge.n	8008cd2 <_puts_r+0x86>
 8008cc8:	69a2      	ldr	r2, [r4, #24]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	dc06      	bgt.n	8008cdc <_puts_r+0x90>
 8008cce:	290a      	cmp	r1, #10
 8008cd0:	d004      	beq.n	8008cdc <_puts_r+0x90>
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	7019      	strb	r1, [r3, #0]
 8008cda:	e7cf      	b.n	8008c7c <_puts_r+0x30>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f000 f828 	bl	8008d34 <__swbuf_r>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d1c9      	bne.n	8008c7c <_puts_r+0x30>
 8008ce8:	e7e9      	b.n	8008cbe <_puts_r+0x72>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	200a      	movs	r0, #10
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	6022      	str	r2, [r4, #0]
 8008cf2:	7018      	strb	r0, [r3, #0]
 8008cf4:	e7e5      	b.n	8008cc2 <_puts_r+0x76>
 8008cf6:	bf00      	nop
 8008cf8:	08009530 	.word	0x08009530
 8008cfc:	08009550 	.word	0x08009550
 8008d00:	08009510 	.word	0x08009510

08008d04 <puts>:
 8008d04:	4b02      	ldr	r3, [pc, #8]	; (8008d10 <puts+0xc>)
 8008d06:	4601      	mov	r1, r0
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	f7ff bf9f 	b.w	8008c4c <_puts_r>
 8008d0e:	bf00      	nop
 8008d10:	200000ec 	.word	0x200000ec

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4c06      	ldr	r4, [pc, #24]	; (8008d30 <_sbrk_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	f7f7 fe84 	bl	8000a2c <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	602b      	str	r3, [r5, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20000bc0 	.word	0x20000bc0

08008d34 <__swbuf_r>:
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d36:	460e      	mov	r6, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	b118      	cbz	r0, 8008d46 <__swbuf_r+0x12>
 8008d3e:	6983      	ldr	r3, [r0, #24]
 8008d40:	b90b      	cbnz	r3, 8008d46 <__swbuf_r+0x12>
 8008d42:	f000 f9a7 	bl	8009094 <__sinit>
 8008d46:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <__swbuf_r+0x98>)
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	d12a      	bne.n	8008da2 <__swbuf_r+0x6e>
 8008d4c:	686c      	ldr	r4, [r5, #4]
 8008d4e:	69a3      	ldr	r3, [r4, #24]
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	071a      	lsls	r2, r3, #28
 8008d56:	d52e      	bpl.n	8008db6 <__swbuf_r+0x82>
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	b363      	cbz	r3, 8008db6 <__swbuf_r+0x82>
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	6820      	ldr	r0, [r4, #0]
 8008d60:	1ac0      	subs	r0, r0, r3
 8008d62:	6963      	ldr	r3, [r4, #20]
 8008d64:	b2f6      	uxtb	r6, r6
 8008d66:	4283      	cmp	r3, r0
 8008d68:	4637      	mov	r7, r6
 8008d6a:	dc04      	bgt.n	8008d76 <__swbuf_r+0x42>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f000 f926 	bl	8008fc0 <_fflush_r>
 8008d74:	bb28      	cbnz	r0, 8008dc2 <__swbuf_r+0x8e>
 8008d76:	68a3      	ldr	r3, [r4, #8]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	60a3      	str	r3, [r4, #8]
 8008d7c:	6823      	ldr	r3, [r4, #0]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	6022      	str	r2, [r4, #0]
 8008d82:	701e      	strb	r6, [r3, #0]
 8008d84:	6963      	ldr	r3, [r4, #20]
 8008d86:	3001      	adds	r0, #1
 8008d88:	4283      	cmp	r3, r0
 8008d8a:	d004      	beq.n	8008d96 <__swbuf_r+0x62>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	07db      	lsls	r3, r3, #31
 8008d90:	d519      	bpl.n	8008dc6 <__swbuf_r+0x92>
 8008d92:	2e0a      	cmp	r6, #10
 8008d94:	d117      	bne.n	8008dc6 <__swbuf_r+0x92>
 8008d96:	4621      	mov	r1, r4
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 f911 	bl	8008fc0 <_fflush_r>
 8008d9e:	b190      	cbz	r0, 8008dc6 <__swbuf_r+0x92>
 8008da0:	e00f      	b.n	8008dc2 <__swbuf_r+0x8e>
 8008da2:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <__swbuf_r+0x9c>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	d101      	bne.n	8008dac <__swbuf_r+0x78>
 8008da8:	68ac      	ldr	r4, [r5, #8]
 8008daa:	e7d0      	b.n	8008d4e <__swbuf_r+0x1a>
 8008dac:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <__swbuf_r+0xa0>)
 8008dae:	429c      	cmp	r4, r3
 8008db0:	bf08      	it	eq
 8008db2:	68ec      	ldreq	r4, [r5, #12]
 8008db4:	e7cb      	b.n	8008d4e <__swbuf_r+0x1a>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4628      	mov	r0, r5
 8008dba:	f000 f80d 	bl	8008dd8 <__swsetup_r>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d0cc      	beq.n	8008d5c <__swbuf_r+0x28>
 8008dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	08009530 	.word	0x08009530
 8008dd0:	08009550 	.word	0x08009550
 8008dd4:	08009510 	.word	0x08009510

08008dd8 <__swsetup_r>:
 8008dd8:	4b32      	ldr	r3, [pc, #200]	; (8008ea4 <__swsetup_r+0xcc>)
 8008dda:	b570      	push	{r4, r5, r6, lr}
 8008ddc:	681d      	ldr	r5, [r3, #0]
 8008dde:	4606      	mov	r6, r0
 8008de0:	460c      	mov	r4, r1
 8008de2:	b125      	cbz	r5, 8008dee <__swsetup_r+0x16>
 8008de4:	69ab      	ldr	r3, [r5, #24]
 8008de6:	b913      	cbnz	r3, 8008dee <__swsetup_r+0x16>
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f953 	bl	8009094 <__sinit>
 8008dee:	4b2e      	ldr	r3, [pc, #184]	; (8008ea8 <__swsetup_r+0xd0>)
 8008df0:	429c      	cmp	r4, r3
 8008df2:	d10f      	bne.n	8008e14 <__swsetup_r+0x3c>
 8008df4:	686c      	ldr	r4, [r5, #4]
 8008df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	0715      	lsls	r5, r2, #28
 8008dfe:	d42c      	bmi.n	8008e5a <__swsetup_r+0x82>
 8008e00:	06d0      	lsls	r0, r2, #27
 8008e02:	d411      	bmi.n	8008e28 <__swsetup_r+0x50>
 8008e04:	2209      	movs	r2, #9
 8008e06:	6032      	str	r2, [r6, #0]
 8008e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e12:	e03e      	b.n	8008e92 <__swsetup_r+0xba>
 8008e14:	4b25      	ldr	r3, [pc, #148]	; (8008eac <__swsetup_r+0xd4>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d101      	bne.n	8008e1e <__swsetup_r+0x46>
 8008e1a:	68ac      	ldr	r4, [r5, #8]
 8008e1c:	e7eb      	b.n	8008df6 <__swsetup_r+0x1e>
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <__swsetup_r+0xd8>)
 8008e20:	429c      	cmp	r4, r3
 8008e22:	bf08      	it	eq
 8008e24:	68ec      	ldreq	r4, [r5, #12]
 8008e26:	e7e6      	b.n	8008df6 <__swsetup_r+0x1e>
 8008e28:	0751      	lsls	r1, r2, #29
 8008e2a:	d512      	bpl.n	8008e52 <__swsetup_r+0x7a>
 8008e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e2e:	b141      	cbz	r1, 8008e42 <__swsetup_r+0x6a>
 8008e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e34:	4299      	cmp	r1, r3
 8008e36:	d002      	beq.n	8008e3e <__swsetup_r+0x66>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7ff fe5f 	bl	8008afc <_free_r>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6363      	str	r3, [r4, #52]	; 0x34
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e48:	81a3      	strh	r3, [r4, #12]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0308 	orr.w	r3, r3, #8
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	b94b      	cbnz	r3, 8008e72 <__swsetup_r+0x9a>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e68:	d003      	beq.n	8008e72 <__swsetup_r+0x9a>
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 f9bf 	bl	80091f0 <__smakebuf_r>
 8008e72:	89a2      	ldrh	r2, [r4, #12]
 8008e74:	f012 0301 	ands.w	r3, r2, #1
 8008e78:	d00c      	beq.n	8008e94 <__swsetup_r+0xbc>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	6963      	ldr	r3, [r4, #20]
 8008e80:	425b      	negs	r3, r3
 8008e82:	61a3      	str	r3, [r4, #24]
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	b953      	cbnz	r3, 8008e9e <__swsetup_r+0xc6>
 8008e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008e90:	d1ba      	bne.n	8008e08 <__swsetup_r+0x30>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	0792      	lsls	r2, r2, #30
 8008e96:	bf58      	it	pl
 8008e98:	6963      	ldrpl	r3, [r4, #20]
 8008e9a:	60a3      	str	r3, [r4, #8]
 8008e9c:	e7f2      	b.n	8008e84 <__swsetup_r+0xac>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	e7f7      	b.n	8008e92 <__swsetup_r+0xba>
 8008ea2:	bf00      	nop
 8008ea4:	200000ec 	.word	0x200000ec
 8008ea8:	08009530 	.word	0x08009530
 8008eac:	08009550 	.word	0x08009550
 8008eb0:	08009510 	.word	0x08009510

08008eb4 <__sflush_r>:
 8008eb4:	898a      	ldrh	r2, [r1, #12]
 8008eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	4605      	mov	r5, r0
 8008ebc:	0710      	lsls	r0, r2, #28
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	d458      	bmi.n	8008f74 <__sflush_r+0xc0>
 8008ec2:	684b      	ldr	r3, [r1, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc05      	bgt.n	8008ed4 <__sflush_r+0x20>
 8008ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dc02      	bgt.n	8008ed4 <__sflush_r+0x20>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d0f9      	beq.n	8008ece <__sflush_r+0x1a>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ee0:	682f      	ldr	r7, [r5, #0]
 8008ee2:	6a21      	ldr	r1, [r4, #32]
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	d032      	beq.n	8008f4e <__sflush_r+0x9a>
 8008ee8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	075a      	lsls	r2, r3, #29
 8008eee:	d505      	bpl.n	8008efc <__sflush_r+0x48>
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	1ac0      	subs	r0, r0, r3
 8008ef4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ef6:	b10b      	cbz	r3, 8008efc <__sflush_r+0x48>
 8008ef8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008efa:	1ac0      	subs	r0, r0, r3
 8008efc:	2300      	movs	r3, #0
 8008efe:	4602      	mov	r2, r0
 8008f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f02:	6a21      	ldr	r1, [r4, #32]
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b0      	blx	r6
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	d106      	bne.n	8008f1c <__sflush_r+0x68>
 8008f0e:	6829      	ldr	r1, [r5, #0]
 8008f10:	291d      	cmp	r1, #29
 8008f12:	d848      	bhi.n	8008fa6 <__sflush_r+0xf2>
 8008f14:	4a29      	ldr	r2, [pc, #164]	; (8008fbc <__sflush_r+0x108>)
 8008f16:	40ca      	lsrs	r2, r1
 8008f18:	07d6      	lsls	r6, r2, #31
 8008f1a:	d544      	bpl.n	8008fa6 <__sflush_r+0xf2>
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	6062      	str	r2, [r4, #4]
 8008f20:	04d9      	lsls	r1, r3, #19
 8008f22:	6922      	ldr	r2, [r4, #16]
 8008f24:	6022      	str	r2, [r4, #0]
 8008f26:	d504      	bpl.n	8008f32 <__sflush_r+0x7e>
 8008f28:	1c42      	adds	r2, r0, #1
 8008f2a:	d101      	bne.n	8008f30 <__sflush_r+0x7c>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b903      	cbnz	r3, 8008f32 <__sflush_r+0x7e>
 8008f30:	6560      	str	r0, [r4, #84]	; 0x54
 8008f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f34:	602f      	str	r7, [r5, #0]
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d0c9      	beq.n	8008ece <__sflush_r+0x1a>
 8008f3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	d002      	beq.n	8008f48 <__sflush_r+0x94>
 8008f42:	4628      	mov	r0, r5
 8008f44:	f7ff fdda 	bl	8008afc <_free_r>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	6360      	str	r0, [r4, #52]	; 0x34
 8008f4c:	e7c0      	b.n	8008ed0 <__sflush_r+0x1c>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b0      	blx	r6
 8008f54:	1c41      	adds	r1, r0, #1
 8008f56:	d1c8      	bne.n	8008eea <__sflush_r+0x36>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0c5      	beq.n	8008eea <__sflush_r+0x36>
 8008f5e:	2b1d      	cmp	r3, #29
 8008f60:	d001      	beq.n	8008f66 <__sflush_r+0xb2>
 8008f62:	2b16      	cmp	r3, #22
 8008f64:	d101      	bne.n	8008f6a <__sflush_r+0xb6>
 8008f66:	602f      	str	r7, [r5, #0]
 8008f68:	e7b1      	b.n	8008ece <__sflush_r+0x1a>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	e7ad      	b.n	8008ed0 <__sflush_r+0x1c>
 8008f74:	690f      	ldr	r7, [r1, #16]
 8008f76:	2f00      	cmp	r7, #0
 8008f78:	d0a9      	beq.n	8008ece <__sflush_r+0x1a>
 8008f7a:	0793      	lsls	r3, r2, #30
 8008f7c:	680e      	ldr	r6, [r1, #0]
 8008f7e:	bf08      	it	eq
 8008f80:	694b      	ldreq	r3, [r1, #20]
 8008f82:	600f      	str	r7, [r1, #0]
 8008f84:	bf18      	it	ne
 8008f86:	2300      	movne	r3, #0
 8008f88:	eba6 0807 	sub.w	r8, r6, r7
 8008f8c:	608b      	str	r3, [r1, #8]
 8008f8e:	f1b8 0f00 	cmp.w	r8, #0
 8008f92:	dd9c      	ble.n	8008ece <__sflush_r+0x1a>
 8008f94:	4643      	mov	r3, r8
 8008f96:	463a      	mov	r2, r7
 8008f98:	6a21      	ldr	r1, [r4, #32]
 8008f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b0      	blx	r6
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	dc06      	bgt.n	8008fb2 <__sflush_r+0xfe>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	e78e      	b.n	8008ed0 <__sflush_r+0x1c>
 8008fb2:	4407      	add	r7, r0
 8008fb4:	eba8 0800 	sub.w	r8, r8, r0
 8008fb8:	e7e9      	b.n	8008f8e <__sflush_r+0xda>
 8008fba:	bf00      	nop
 8008fbc:	20400001 	.word	0x20400001

08008fc0 <_fflush_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	690b      	ldr	r3, [r1, #16]
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	b1db      	cbz	r3, 8009002 <_fflush_r+0x42>
 8008fca:	b118      	cbz	r0, 8008fd4 <_fflush_r+0x14>
 8008fcc:	6983      	ldr	r3, [r0, #24]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <_fflush_r+0x14>
 8008fd0:	f000 f860 	bl	8009094 <__sinit>
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <_fflush_r+0x48>)
 8008fd6:	429c      	cmp	r4, r3
 8008fd8:	d109      	bne.n	8008fee <_fflush_r+0x2e>
 8008fda:	686c      	ldr	r4, [r5, #4]
 8008fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fe0:	b17b      	cbz	r3, 8009002 <_fflush_r+0x42>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fea:	f7ff bf63 	b.w	8008eb4 <__sflush_r>
 8008fee:	4b07      	ldr	r3, [pc, #28]	; (800900c <_fflush_r+0x4c>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	d101      	bne.n	8008ff8 <_fflush_r+0x38>
 8008ff4:	68ac      	ldr	r4, [r5, #8]
 8008ff6:	e7f1      	b.n	8008fdc <_fflush_r+0x1c>
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <_fflush_r+0x50>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	bf08      	it	eq
 8008ffe:	68ec      	ldreq	r4, [r5, #12]
 8009000:	e7ec      	b.n	8008fdc <_fflush_r+0x1c>
 8009002:	2000      	movs	r0, #0
 8009004:	bd38      	pop	{r3, r4, r5, pc}
 8009006:	bf00      	nop
 8009008:	08009530 	.word	0x08009530
 800900c:	08009550 	.word	0x08009550
 8009010:	08009510 	.word	0x08009510

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	6083      	str	r3, [r0, #8]
 8009020:	8181      	strh	r1, [r0, #12]
 8009022:	6643      	str	r3, [r0, #100]	; 0x64
 8009024:	81c2      	strh	r2, [r0, #14]
 8009026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	; 0x5c
 8009032:	f7ff fd5b 	bl	8008aec <memset>
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x38>)
 8009038:	6263      	str	r3, [r4, #36]	; 0x24
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x3c>)
 800903c:	62a3      	str	r3, [r4, #40]	; 0x28
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x40>)
 8009040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x44>)
 8009044:	6224      	str	r4, [r4, #32]
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	08009275 	.word	0x08009275
 8009050:	08009297 	.word	0x08009297
 8009054:	080092cf 	.word	0x080092cf
 8009058:	080092f3 	.word	0x080092f3

0800905c <_cleanup_r>:
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <_cleanup_r+0x8>)
 800905e:	f000 b885 	b.w	800916c <_fwalk_reent>
 8009062:	bf00      	nop
 8009064:	08008fc1 	.word	0x08008fc1

08009068 <__sfmoreglue>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	1e4a      	subs	r2, r1, #1
 800906c:	2568      	movs	r5, #104	; 0x68
 800906e:	4355      	muls	r5, r2
 8009070:	460e      	mov	r6, r1
 8009072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009076:	f7ff fd8f 	bl	8008b98 <_malloc_r>
 800907a:	4604      	mov	r4, r0
 800907c:	b140      	cbz	r0, 8009090 <__sfmoreglue+0x28>
 800907e:	2100      	movs	r1, #0
 8009080:	e9c0 1600 	strd	r1, r6, [r0]
 8009084:	300c      	adds	r0, #12
 8009086:	60a0      	str	r0, [r4, #8]
 8009088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800908c:	f7ff fd2e 	bl	8008aec <memset>
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__sinit>:
 8009094:	6983      	ldr	r3, [r0, #24]
 8009096:	b510      	push	{r4, lr}
 8009098:	4604      	mov	r4, r0
 800909a:	bb33      	cbnz	r3, 80090ea <__sinit+0x56>
 800909c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80090a0:	6503      	str	r3, [r0, #80]	; 0x50
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <__sinit+0x58>)
 80090a4:	4a12      	ldr	r2, [pc, #72]	; (80090f0 <__sinit+0x5c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6282      	str	r2, [r0, #40]	; 0x28
 80090aa:	4298      	cmp	r0, r3
 80090ac:	bf04      	itt	eq
 80090ae:	2301      	moveq	r3, #1
 80090b0:	6183      	streq	r3, [r0, #24]
 80090b2:	f000 f81f 	bl	80090f4 <__sfp>
 80090b6:	6060      	str	r0, [r4, #4]
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f81b 	bl	80090f4 <__sfp>
 80090be:	60a0      	str	r0, [r4, #8]
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 f817 	bl	80090f4 <__sfp>
 80090c6:	2200      	movs	r2, #0
 80090c8:	60e0      	str	r0, [r4, #12]
 80090ca:	2104      	movs	r1, #4
 80090cc:	6860      	ldr	r0, [r4, #4]
 80090ce:	f7ff ffa1 	bl	8009014 <std>
 80090d2:	2201      	movs	r2, #1
 80090d4:	2109      	movs	r1, #9
 80090d6:	68a0      	ldr	r0, [r4, #8]
 80090d8:	f7ff ff9c 	bl	8009014 <std>
 80090dc:	2202      	movs	r2, #2
 80090de:	2112      	movs	r1, #18
 80090e0:	68e0      	ldr	r0, [r4, #12]
 80090e2:	f7ff ff97 	bl	8009014 <std>
 80090e6:	2301      	movs	r3, #1
 80090e8:	61a3      	str	r3, [r4, #24]
 80090ea:	bd10      	pop	{r4, pc}
 80090ec:	0800950c 	.word	0x0800950c
 80090f0:	0800905d 	.word	0x0800905d

080090f4 <__sfp>:
 80090f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f6:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <__sfp+0x70>)
 80090f8:	681e      	ldr	r6, [r3, #0]
 80090fa:	69b3      	ldr	r3, [r6, #24]
 80090fc:	4607      	mov	r7, r0
 80090fe:	b913      	cbnz	r3, 8009106 <__sfp+0x12>
 8009100:	4630      	mov	r0, r6
 8009102:	f7ff ffc7 	bl	8009094 <__sinit>
 8009106:	3648      	adds	r6, #72	; 0x48
 8009108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800910c:	3b01      	subs	r3, #1
 800910e:	d503      	bpl.n	8009118 <__sfp+0x24>
 8009110:	6833      	ldr	r3, [r6, #0]
 8009112:	b133      	cbz	r3, 8009122 <__sfp+0x2e>
 8009114:	6836      	ldr	r6, [r6, #0]
 8009116:	e7f7      	b.n	8009108 <__sfp+0x14>
 8009118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800911c:	b16d      	cbz	r5, 800913a <__sfp+0x46>
 800911e:	3468      	adds	r4, #104	; 0x68
 8009120:	e7f4      	b.n	800910c <__sfp+0x18>
 8009122:	2104      	movs	r1, #4
 8009124:	4638      	mov	r0, r7
 8009126:	f7ff ff9f 	bl	8009068 <__sfmoreglue>
 800912a:	6030      	str	r0, [r6, #0]
 800912c:	2800      	cmp	r0, #0
 800912e:	d1f1      	bne.n	8009114 <__sfp+0x20>
 8009130:	230c      	movs	r3, #12
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4604      	mov	r4, r0
 8009136:	4620      	mov	r0, r4
 8009138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913a:	4b0b      	ldr	r3, [pc, #44]	; (8009168 <__sfp+0x74>)
 800913c:	6665      	str	r5, [r4, #100]	; 0x64
 800913e:	e9c4 5500 	strd	r5, r5, [r4]
 8009142:	60a5      	str	r5, [r4, #8]
 8009144:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009148:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800914c:	2208      	movs	r2, #8
 800914e:	4629      	mov	r1, r5
 8009150:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009154:	f7ff fcca 	bl	8008aec <memset>
 8009158:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800915c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009160:	e7e9      	b.n	8009136 <__sfp+0x42>
 8009162:	bf00      	nop
 8009164:	0800950c 	.word	0x0800950c
 8009168:	ffff0001 	.word	0xffff0001

0800916c <_fwalk_reent>:
 800916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009178:	2600      	movs	r6, #0
 800917a:	b914      	cbnz	r4, 8009182 <_fwalk_reent+0x16>
 800917c:	4630      	mov	r0, r6
 800917e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009182:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009186:	3f01      	subs	r7, #1
 8009188:	d501      	bpl.n	800918e <_fwalk_reent+0x22>
 800918a:	6824      	ldr	r4, [r4, #0]
 800918c:	e7f5      	b.n	800917a <_fwalk_reent+0xe>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d907      	bls.n	80091a4 <_fwalk_reent+0x38>
 8009194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009198:	3301      	adds	r3, #1
 800919a:	d003      	beq.n	80091a4 <_fwalk_reent+0x38>
 800919c:	4629      	mov	r1, r5
 800919e:	4640      	mov	r0, r8
 80091a0:	47c8      	blx	r9
 80091a2:	4306      	orrs	r6, r0
 80091a4:	3568      	adds	r5, #104	; 0x68
 80091a6:	e7ee      	b.n	8009186 <_fwalk_reent+0x1a>

080091a8 <__swhatbuf_r>:
 80091a8:	b570      	push	{r4, r5, r6, lr}
 80091aa:	460e      	mov	r6, r1
 80091ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	b096      	sub	sp, #88	; 0x58
 80091b4:	4614      	mov	r4, r2
 80091b6:	461d      	mov	r5, r3
 80091b8:	da07      	bge.n	80091ca <__swhatbuf_r+0x22>
 80091ba:	2300      	movs	r3, #0
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	89b3      	ldrh	r3, [r6, #12]
 80091c0:	061a      	lsls	r2, r3, #24
 80091c2:	d410      	bmi.n	80091e6 <__swhatbuf_r+0x3e>
 80091c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c8:	e00e      	b.n	80091e8 <__swhatbuf_r+0x40>
 80091ca:	466a      	mov	r2, sp
 80091cc:	f000 f8b8 	bl	8009340 <_fstat_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	dbf2      	blt.n	80091ba <__swhatbuf_r+0x12>
 80091d4:	9a01      	ldr	r2, [sp, #4]
 80091d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091de:	425a      	negs	r2, r3
 80091e0:	415a      	adcs	r2, r3
 80091e2:	602a      	str	r2, [r5, #0]
 80091e4:	e7ee      	b.n	80091c4 <__swhatbuf_r+0x1c>
 80091e6:	2340      	movs	r3, #64	; 0x40
 80091e8:	2000      	movs	r0, #0
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	b016      	add	sp, #88	; 0x58
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <__smakebuf_r>:
 80091f0:	898b      	ldrh	r3, [r1, #12]
 80091f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091f4:	079d      	lsls	r5, r3, #30
 80091f6:	4606      	mov	r6, r0
 80091f8:	460c      	mov	r4, r1
 80091fa:	d507      	bpl.n	800920c <__smakebuf_r+0x1c>
 80091fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	2301      	movs	r3, #1
 8009206:	6163      	str	r3, [r4, #20]
 8009208:	b002      	add	sp, #8
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	ab01      	add	r3, sp, #4
 800920e:	466a      	mov	r2, sp
 8009210:	f7ff ffca 	bl	80091a8 <__swhatbuf_r>
 8009214:	9900      	ldr	r1, [sp, #0]
 8009216:	4605      	mov	r5, r0
 8009218:	4630      	mov	r0, r6
 800921a:	f7ff fcbd 	bl	8008b98 <_malloc_r>
 800921e:	b948      	cbnz	r0, 8009234 <__smakebuf_r+0x44>
 8009220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009224:	059a      	lsls	r2, r3, #22
 8009226:	d4ef      	bmi.n	8009208 <__smakebuf_r+0x18>
 8009228:	f023 0303 	bic.w	r3, r3, #3
 800922c:	f043 0302 	orr.w	r3, r3, #2
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	e7e3      	b.n	80091fc <__smakebuf_r+0xc>
 8009234:	4b0d      	ldr	r3, [pc, #52]	; (800926c <__smakebuf_r+0x7c>)
 8009236:	62b3      	str	r3, [r6, #40]	; 0x28
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	6020      	str	r0, [r4, #0]
 800923c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	9b00      	ldr	r3, [sp, #0]
 8009244:	6163      	str	r3, [r4, #20]
 8009246:	9b01      	ldr	r3, [sp, #4]
 8009248:	6120      	str	r0, [r4, #16]
 800924a:	b15b      	cbz	r3, 8009264 <__smakebuf_r+0x74>
 800924c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009250:	4630      	mov	r0, r6
 8009252:	f000 f887 	bl	8009364 <_isatty_r>
 8009256:	b128      	cbz	r0, 8009264 <__smakebuf_r+0x74>
 8009258:	89a3      	ldrh	r3, [r4, #12]
 800925a:	f023 0303 	bic.w	r3, r3, #3
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	81a3      	strh	r3, [r4, #12]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	431d      	orrs	r5, r3
 8009268:	81a5      	strh	r5, [r4, #12]
 800926a:	e7cd      	b.n	8009208 <__smakebuf_r+0x18>
 800926c:	0800905d 	.word	0x0800905d

08009270 <__malloc_lock>:
 8009270:	4770      	bx	lr

08009272 <__malloc_unlock>:
 8009272:	4770      	bx	lr

08009274 <__sread>:
 8009274:	b510      	push	{r4, lr}
 8009276:	460c      	mov	r4, r1
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	f000 f894 	bl	80093a8 <_read_r>
 8009280:	2800      	cmp	r0, #0
 8009282:	bfab      	itete	ge
 8009284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009286:	89a3      	ldrhlt	r3, [r4, #12]
 8009288:	181b      	addge	r3, r3, r0
 800928a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800928e:	bfac      	ite	ge
 8009290:	6563      	strge	r3, [r4, #84]	; 0x54
 8009292:	81a3      	strhlt	r3, [r4, #12]
 8009294:	bd10      	pop	{r4, pc}

08009296 <__swrite>:
 8009296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	461f      	mov	r7, r3
 800929c:	898b      	ldrh	r3, [r1, #12]
 800929e:	05db      	lsls	r3, r3, #23
 80092a0:	4605      	mov	r5, r0
 80092a2:	460c      	mov	r4, r1
 80092a4:	4616      	mov	r6, r2
 80092a6:	d505      	bpl.n	80092b4 <__swrite+0x1e>
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b0:	f000 f868 	bl	8009384 <_lseek_r>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ca:	f000 b817 	b.w	80092fc <_write_r>

080092ce <__sseek>:
 80092ce:	b510      	push	{r4, lr}
 80092d0:	460c      	mov	r4, r1
 80092d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d6:	f000 f855 	bl	8009384 <_lseek_r>
 80092da:	1c43      	adds	r3, r0, #1
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	bf15      	itete	ne
 80092e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80092e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092ea:	81a3      	strheq	r3, [r4, #12]
 80092ec:	bf18      	it	ne
 80092ee:	81a3      	strhne	r3, [r4, #12]
 80092f0:	bd10      	pop	{r4, pc}

080092f2 <__sclose>:
 80092f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f6:	f000 b813 	b.w	8009320 <_close_r>
	...

080092fc <_write_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4c07      	ldr	r4, [pc, #28]	; (800931c <_write_r+0x20>)
 8009300:	4605      	mov	r5, r0
 8009302:	4608      	mov	r0, r1
 8009304:	4611      	mov	r1, r2
 8009306:	2200      	movs	r2, #0
 8009308:	6022      	str	r2, [r4, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	f7f7 fb3d 	bl	800098a <_write>
 8009310:	1c43      	adds	r3, r0, #1
 8009312:	d102      	bne.n	800931a <_write_r+0x1e>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	b103      	cbz	r3, 800931a <_write_r+0x1e>
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	20000bc0 	.word	0x20000bc0

08009320 <_close_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4c06      	ldr	r4, [pc, #24]	; (800933c <_close_r+0x1c>)
 8009324:	2300      	movs	r3, #0
 8009326:	4605      	mov	r5, r0
 8009328:	4608      	mov	r0, r1
 800932a:	6023      	str	r3, [r4, #0]
 800932c:	f7f7 fb49 	bl	80009c2 <_close>
 8009330:	1c43      	adds	r3, r0, #1
 8009332:	d102      	bne.n	800933a <_close_r+0x1a>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	b103      	cbz	r3, 800933a <_close_r+0x1a>
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	bd38      	pop	{r3, r4, r5, pc}
 800933c:	20000bc0 	.word	0x20000bc0

08009340 <_fstat_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4c07      	ldr	r4, [pc, #28]	; (8009360 <_fstat_r+0x20>)
 8009344:	2300      	movs	r3, #0
 8009346:	4605      	mov	r5, r0
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	f7f7 fb44 	bl	80009da <_fstat>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	d102      	bne.n	800935c <_fstat_r+0x1c>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	b103      	cbz	r3, 800935c <_fstat_r+0x1c>
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	20000bc0 	.word	0x20000bc0

08009364 <_isatty_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4c06      	ldr	r4, [pc, #24]	; (8009380 <_isatty_r+0x1c>)
 8009368:	2300      	movs	r3, #0
 800936a:	4605      	mov	r5, r0
 800936c:	4608      	mov	r0, r1
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	f7f7 fb43 	bl	80009fa <_isatty>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_isatty_r+0x1a>
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	b103      	cbz	r3, 800937e <_isatty_r+0x1a>
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000bc0 	.word	0x20000bc0

08009384 <_lseek_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4c07      	ldr	r4, [pc, #28]	; (80093a4 <_lseek_r+0x20>)
 8009388:	4605      	mov	r5, r0
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	2200      	movs	r2, #0
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f7f7 fb3c 	bl	8000a10 <_lseek>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_lseek_r+0x1e>
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_lseek_r+0x1e>
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000bc0 	.word	0x20000bc0

080093a8 <_read_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4c07      	ldr	r4, [pc, #28]	; (80093c8 <_read_r+0x20>)
 80093ac:	4605      	mov	r5, r0
 80093ae:	4608      	mov	r0, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	2200      	movs	r2, #0
 80093b4:	6022      	str	r2, [r4, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f7f7 faca 	bl	8000950 <_read>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_read_r+0x1e>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_read_r+0x1e>
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	20000bc0 	.word	0x20000bc0

080093cc <_init>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	bf00      	nop
 80093d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d2:	bc08      	pop	{r3}
 80093d4:	469e      	mov	lr, r3
 80093d6:	4770      	bx	lr

080093d8 <_fini>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr
