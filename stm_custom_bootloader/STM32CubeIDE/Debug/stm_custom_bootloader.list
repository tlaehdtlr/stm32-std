
stm_custom_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d8  0800a3d8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e0  0800a3e0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .dfu_state    00000000  0800fc00  0800fc00  00020170  2**0
                  CONTENTS
  9 .data         00000170  20000000  0800a3e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a74  20000170  0800a558  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20000be4  0800a558  00020be4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019425  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003f87  00000000  00000000  000395c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001130  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f48  00000000  00000000  0003e680  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00023cdd  00000000  00000000  0003f5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00012afb  00000000  00000000  000632a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c0161  00000000  00000000  00075da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00135f01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b70  00000000  00000000  00135f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000170 	.word	0x20000170
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009eb0 	.word	0x08009eb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000174 	.word	0x20000174
 800020c:	08009eb0 	.word	0x08009eb0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <bootloader_error_handler>:

uint8_t g_private_key[32] = "1234567890abcdefghij1234567890q";

/* display something depending on error type, soft reset */
void bootloader_error_handler(dfu_status_t dfu_status)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
    printf("bootloader error handler \r\n");
 80005da:	4816      	ldr	r0, [pc, #88]	; (8000634 <bootloader_error_handler+0x64>)
 80005dc:	f008 fe3c 	bl	8009258 <puts>
    switch (dfu_status)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d81a      	bhi.n	800061c <bootloader_error_handler+0x4c>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <bootloader_error_handler+0x1c>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	080005fd 	.word	0x080005fd
 80005f0:	08000605 	.word	0x08000605
 80005f4:	0800060d 	.word	0x0800060d
 80005f8:	08000615 	.word	0x08000615
    {
        case DFU_IDLE:
        {
            printf("DFU_IDLE \r\n");
 80005fc:	480e      	ldr	r0, [pc, #56]	; (8000638 <bootloader_error_handler+0x68>)
 80005fe:	f008 fe2b 	bl	8009258 <puts>
            return;
 8000602:	e013      	b.n	800062c <bootloader_error_handler+0x5c>
            // break;
        }
        case DFU_ERR_VERIFY:
        {
            printf("DFU_ERR_VERIFY \r\n");
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <bootloader_error_handler+0x6c>)
 8000606:	f008 fe27 	bl	8009258 <puts>
            break;
 800060a:	e00b      	b.n	8000624 <bootloader_error_handler+0x54>
        }
        case DFU_ERR_KEY:
        {
            printf("DFU_ERR_KEY \r\n");
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <bootloader_error_handler+0x70>)
 800060e:	f008 fe23 	bl	8009258 <puts>
            break;
 8000612:	e007      	b.n	8000624 <bootloader_error_handler+0x54>
        }
        case DFU_ERR_VERSION:
        {
            printf("DFU_ERR_VERSION \r\n");
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <bootloader_error_handler+0x74>)
 8000616:	f008 fe1f 	bl	8009258 <puts>
            break;
 800061a:	e003      	b.n	8000624 <bootloader_error_handler+0x54>
        }
        default:
        {
            printf("dfu error \r\n");
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <bootloader_error_handler+0x78>)
 800061e:	f008 fe1b 	bl	8009258 <puts>
            break;
 8000622:	bf00      	nop
        }
    }
    // HAL_Delay(10);
    MX_USB_DEVICE_stop();
 8000624:	f000 fdd2 	bl	80011cc <MX_USB_DEVICE_stop>
    HAL_NVIC_SystemReset();
 8000628:	f001 fd95 	bl	8002156 <HAL_NVIC_SystemReset>
}
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08009ec8 	.word	0x08009ec8
 8000638:	08009ee4 	.word	0x08009ee4
 800063c:	08009ef0 	.word	0x08009ef0
 8000640:	08009f04 	.word	0x08009f04
 8000644:	08009f14 	.word	0x08009f14
 8000648:	08009f28 	.word	0x08009f28

0800064c <bootloader_check_secure>:


/* check key, version  */
dfu_status_t bootloader_check_secure(uint8_t* src)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
    printf("check secure \r\n");
 8000654:	4823      	ldr	r0, [pc, #140]	; (80006e4 <bootloader_check_secure+0x98>)
 8000656:	f008 fdff 	bl	8009258 <puts>
    dfu_status_t dfu_status = DFU_IDLE;
 800065a:	2300      	movs	r3, #0
 800065c:	75fb      	strb	r3, [r7, #23]

    /*
        check key
        maybe... BL should need to have a key to compare with a key in APP
    */
    fw_info_t* p_fw_info = (fw_info_t*)(src);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	613b      	str	r3, [r7, #16]
    printf("new key : %s , version : %d \r\n", p_fw_info->private_key, p_fw_info->version);
 8000662:	6939      	ldr	r1, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	8c1b      	ldrh	r3, [r3, #32]
 8000668:	461a      	mov	r2, r3
 800066a:	481f      	ldr	r0, [pc, #124]	; (80006e8 <bootloader_check_secure+0x9c>)
 800066c:	f008 fd80 	bl	8009170 <iprintf>

    // if (strcmp((char*)p_fw_info->private_key, (char*)p_prev_fw_info->private_key))
    if (strcmp((char*)p_fw_info->private_key, g_private_key))
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	491e      	ldr	r1, [pc, #120]	; (80006ec <bootloader_check_secure+0xa0>)
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdcb 	bl	8000210 <strcmp>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d006      	beq.n	800068e <bootloader_check_secure+0x42>
    {
        dfu_status = DFU_ERR_KEY;
 8000680:	2302      	movs	r3, #2
 8000682:	75fb      	strb	r3, [r7, #23]
        printf("private key error \r\n");
 8000684:	481a      	ldr	r0, [pc, #104]	; (80006f0 <bootloader_check_secure+0xa4>)
 8000686:	f008 fde7 	bl	8009258 <puts>
        return dfu_status;
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	e026      	b.n	80006dc <bootloader_check_secure+0x90>
    }
    else
    {
        printf("private key pass \r\n");
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <bootloader_check_secure+0xa8>)
 8000690:	f008 fde2 	bl	8009258 <puts>
    }

    /* check version */
    if (*(__IO uint32_t *)(ADDR_PREV_FW_INFO) == 0xFFFFFFFF)
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <bootloader_check_secure+0xac>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800069c:	d104      	bne.n	80006a8 <bootloader_check_secure+0x5c>
    {
        printf("first dfu, don't need to compare \r\n");
 800069e:	4817      	ldr	r0, [pc, #92]	; (80006fc <bootloader_check_secure+0xb0>)
 80006a0:	f008 fdda 	bl	8009258 <puts>
        return dfu_status;
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	e019      	b.n	80006dc <bootloader_check_secure+0x90>
    }

    fw_info_t* p_prev_fw_info = (fw_info_t*)(ADDR_PREV_FW_INFO);
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <bootloader_check_secure+0xac>)
 80006aa:	60fb      	str	r3, [r7, #12]
    printf("previous key : %s , version : %d \r\n", p_prev_fw_info->private_key, p_prev_fw_info->version);
 80006ac:	68f9      	ldr	r1, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	8c1b      	ldrh	r3, [r3, #32]
 80006b2:	461a      	mov	r2, r3
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <bootloader_check_secure+0xb4>)
 80006b6:	f008 fd5b 	bl	8009170 <iprintf>

    if (p_fw_info->version >= p_prev_fw_info->version)
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	8c1a      	ldrh	r2, [r3, #32]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	8c1b      	ldrh	r3, [r3, #32]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d304      	bcc.n	80006d0 <bootloader_check_secure+0x84>
    {
        printf("version check pass \r\n");
 80006c6:	480f      	ldr	r0, [pc, #60]	; (8000704 <bootloader_check_secure+0xb8>)
 80006c8:	f008 fdc6 	bl	8009258 <puts>
        dfu_status = DFU_ERR_VERSION;
        printf("version check error \r\n");
        return dfu_status;
    }

    return dfu_status;
 80006cc:	7dfb      	ldrb	r3, [r7, #23]
 80006ce:	e005      	b.n	80006dc <bootloader_check_secure+0x90>
        dfu_status = DFU_ERR_VERSION;
 80006d0:	2303      	movs	r3, #3
 80006d2:	75fb      	strb	r3, [r7, #23]
        printf("version check error \r\n");
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <bootloader_check_secure+0xbc>)
 80006d6:	f008 fdbf 	bl	8009258 <puts>
        return dfu_status;
 80006da:	7dfb      	ldrb	r3, [r7, #23]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08009f34 	.word	0x08009f34
 80006e8:	08009f44 	.word	0x08009f44
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08009f64 	.word	0x08009f64
 80006f4:	08009f78 	.word	0x08009f78
 80006f8:	080a0400 	.word	0x080a0400
 80006fc:	08009f8c 	.word	0x08009f8c
 8000700:	08009fb0 	.word	0x08009fb0
 8000704:	08009fd4 	.word	0x08009fd4
 8000708:	08009fec 	.word	0x08009fec

0800070c <bootloader_copy_image>:


/*  flash copy  */
void bootloader_copy_image(uint32_t src, uint32_t dest, uint8_t nums_sec)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	4613      	mov	r3, r2
 8000718:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    status = flash_init();
 800071a:	f000 f863 	bl	80007e4 <flash_init>
 800071e:	4603      	mov	r3, r0
 8000720:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d003      	beq.n	8000730 <bootloader_copy_image+0x24>
    {
        /*  todo    */
        printf("flash err \r\n");
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <bootloader_copy_image+0x70>)
 800072a:	f008 fd95 	bl	8009258 <puts>
        return ;
 800072e:	e021      	b.n	8000774 <bootloader_copy_image+0x68>
    }

    uint8_t startsector = flash_get_sector(dest);
 8000730:	68b8      	ldr	r0, [r7, #8]
 8000732:	f000 f8f3 	bl	800091c <flash_get_sector>
 8000736:	4603      	mov	r3, r0
 8000738:	75bb      	strb	r3, [r7, #22]
    flash_erase(startsector, nums_sec);
 800073a:	7dbb      	ldrb	r3, [r7, #22]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f86d 	bl	8000820 <flash_erase>
    HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f001 fb9a 	bl	8001e80 <HAL_Delay>

    flash_copy(src, dest, nums_sec);
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	461a      	mov	r2, r3
 8000750:	68b9      	ldr	r1, [r7, #8]
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f000 f89a 	bl	800088c <flash_copy>
    HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f001 fb91 	bl	8001e80 <HAL_Delay>

    status = flash_deinit();
 800075e:	f000 f853 	bl	8000808 <flash_deinit>
 8000762:	4603      	mov	r3, r0
 8000764:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <bootloader_copy_image+0x68>
    {
        /*  todo    */
        printf("flash err \r\n");
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <bootloader_copy_image+0x70>)
 800076e:	f008 fd73 	bl	8009258 <puts>
        return ;
 8000772:	bf00      	nop
    }
}
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0800a004 	.word	0x0800a004

08000780 <bootloader_rollback_version>:
    }
}

/*  roll back to previos version */
void bootloader_rollback_version(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    printf("rollback version \r\n");
 8000784:	4808      	ldr	r0, [pc, #32]	; (80007a8 <bootloader_rollback_version+0x28>)
 8000786:	f008 fd67 	bl	8009258 <puts>
    bootloader_copy_image(ADDR_FLASH_COPY, USBD_DFU_APP_DEFAULT_ADD, APP_NUMS_SECTOR);
 800078a:	2203      	movs	r2, #3
 800078c:	4907      	ldr	r1, [pc, #28]	; (80007ac <bootloader_rollback_version+0x2c>)
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <bootloader_rollback_version+0x30>)
 8000790:	f7ff ffbc 	bl	800070c <bootloader_copy_image>
    HAL_Delay(50);
 8000794:	2032      	movs	r0, #50	; 0x32
 8000796:	f001 fb73 	bl	8001e80 <HAL_Delay>
    printf("roll back success \r\n");
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <bootloader_rollback_version+0x34>)
 800079c:	f008 fd5c 	bl	8009258 <puts>
    HAL_NVIC_SystemReset();
 80007a0:	f001 fcd9 	bl	8002156 <HAL_NVIC_SystemReset>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	0800a024 	.word	0x0800a024
 80007ac:	08020000 	.word	0x08020000
 80007b0:	080a0000 	.word	0x080a0000
 80007b4:	0800a038 	.word	0x0800a038

080007b8 <bootloader_check_DFU>:


/* check if occur error during DFU */
void bootloader_check_DFU(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
    dfu_integity_t* dfu_integrity = (dfu_integity_t *)(ADDR_DFU_INTEGRITY);
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <bootloader_check_DFU+0x24>)
 80007c0:	607b      	str	r3, [r7, #4]
    if (dfu_integrity->dfu_complete != DFU_COMPLETE)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b99      	cmp	r3, #153	; 0x99
 80007c8:	d004      	beq.n	80007d4 <bootloader_check_DFU+0x1c>
    {
      printf("DFU fail \r\n");
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <bootloader_check_DFU+0x28>)
 80007cc:	f008 fd44 	bl	8009258 <puts>
      bootloader_rollback_version();
 80007d0:	f7ff ffd6 	bl	8000780 <bootloader_rollback_version>
    }
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	0807fc00 	.word	0x0807fc00
 80007e0:	0800a04c 	.word	0x0800a04c

080007e4 <flash_init>:
#include "flash.h"


/* flash initialize */
HAL_StatusTypeDef flash_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  status = HAL_FLASH_Unlock();
 80007ea:	f001 fd3b 	bl	8002264 <HAL_FLASH_Unlock>
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <flash_init+0x20>)
 80007f4:	22f3      	movs	r2, #243	; 0xf3
 80007f6:	60da      	str	r2, [r3, #12]
  return status;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023c00 	.word	0x40023c00

08000808 <flash_deinit>:

HAL_StatusTypeDef flash_deinit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  status = HAL_FLASH_Lock();
 800080e:	f001 fd4b 	bl	80022a8 <HAL_FLASH_Lock>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  return status;
 8000816:	79fb      	ldrb	r3, [r7, #7]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <flash_erase>:

void flash_erase(uint32_t startsector, uint8_t nums_sec)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
  printf("flash erase start sector : %ld, number of sector : %d \r\n", startsector, nums_sec);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	461a      	mov	r2, r3
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	4814      	ldr	r0, [pc, #80]	; (8000884 <flash_erase+0x64>)
 8000834:	f008 fc9c 	bl	8009170 <iprintf>
  uint32_t sectorerror = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef eraseinitstruct;

  /* Get the number of sector */
  // startsector = flash_get_sector(Add);
  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  eraseinitstruct.Banks = FLASH_BANK_1;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  eraseinitstruct.Sector = startsector;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
  eraseinitstruct.NbSectors = nums_sec;
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	61bb      	str	r3, [r7, #24]
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8000850:	f107 0220 	add.w	r2, r7, #32
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f001 fe72 	bl	8002544 <HAL_FLASHEx_Erase>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status != HAL_OK)
 8000866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086a:	2b00      	cmp	r3, #0
 800086c:	d005      	beq.n	800087a <flash_erase+0x5a>
  {
    printf("erase error %ld sector \r\n", sectorerror);
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <flash_erase+0x68>)
 8000874:	f008 fc7c 	bl	8009170 <iprintf>
    // return USBD_FAIL;

  }
  return ;
 8000878:	bf00      	nop
 800087a:	bf00      	nop
}
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	0800a058 	.word	0x0800a058
 8000888:	0800a094 	.word	0x0800a094

0800088c <flash_copy>:

void flash_copy(uint32_t addr_src, uint32_t addr_dest, uint8_t nums_sec)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4613      	mov	r3, r2
 8000898:	71fb      	strb	r3, [r7, #7]
  printf("flash copy nums_sec : %d \r\n", nums_sec);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4619      	mov	r1, r3
 800089e:	481c      	ldr	r0, [pc, #112]	; (8000910 <flash_copy+0x84>)
 80008a0:	f008 fc66 	bl	8009170 <iprintf>
  /*  128kb*sectors */
  uint32_t i = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  uint32_t Len = 1024*128*nums_sec;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	045b      	lsls	r3, r3, #17
 80008ac:	613b      	str	r3, [r7, #16]
  for (i = 0; i < Len; i += 4)
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	e025      	b.n	8000900 <flash_copy+0x74>
  {
    if (HAL_FLASH_Program
        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (addr_dest + i),
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	18d1      	adds	r1, r2, r3
         *(uint32_t *) (addr_src + i)) == HAL_OK)
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	681b      	ldr	r3, [r3, #0]
    if (HAL_FLASH_Program
 80008c2:	f04f 0400 	mov.w	r4, #0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4623      	mov	r3, r4
 80008ca:	2002      	movs	r0, #2
 80008cc:	f001 fc76 	bl	80021bc <HAL_FLASH_Program>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10d      	bne.n	80008f2 <flash_copy+0x66>
    {
      /* Check the written value */
      if (*(uint32_t *) (addr_src + i) != *(uint32_t *) (addr_dest + i))
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	4413      	add	r3, r2
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68b9      	ldr	r1, [r7, #8]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	440b      	add	r3, r1
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d007      	beq.n	80008fa <flash_copy+0x6e>
      {
        /* Flash content doesn't match SRAM content */
        printf("flash verified fail \r\n");
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <flash_copy+0x88>)
 80008ec:	f008 fcb4 	bl	8009258 <puts>
        return ;
 80008f0:	e00a      	b.n	8000908 <flash_copy+0x7c>
      }
    }
    else
    {
      printf("Fail write flash \r\n");
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <flash_copy+0x8c>)
 80008f4:	f008 fcb0 	bl	8009258 <puts>
      /* Error occurred while writing data in Flash memory */
      return ;
 80008f8:	e006      	b.n	8000908 <flash_copy+0x7c>
  for (i = 0; i < Len; i += 4)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3304      	adds	r3, #4
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <flash_copy+0x28>
    }
  }
}
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
 800090e:	bf00      	nop
 8000910:	0800a0b0 	.word	0x0800a0b0
 8000914:	0800a0cc 	.word	0x0800a0cc
 8000918:	0800a0e4 	.word	0x0800a0e4

0800091c <flash_get_sector>:



uint32_t flash_get_sector(uint32_t Address)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a47      	ldr	r2, [pc, #284]	; (8000a48 <flash_get_sector+0x12c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d806      	bhi.n	800093e <flash_get_sector+0x22>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000936:	d302      	bcc.n	800093e <flash_get_sector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e07a      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a42      	ldr	r2, [pc, #264]	; (8000a4c <flash_get_sector+0x130>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d806      	bhi.n	8000954 <flash_get_sector+0x38>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <flash_get_sector+0x12c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d902      	bls.n	8000954 <flash_get_sector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800094e:	2301      	movs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e06f      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a3e      	ldr	r2, [pc, #248]	; (8000a50 <flash_get_sector+0x134>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d806      	bhi.n	800096a <flash_get_sector+0x4e>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a3b      	ldr	r2, [pc, #236]	; (8000a4c <flash_get_sector+0x130>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d902      	bls.n	800096a <flash_get_sector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000964:	2302      	movs	r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e064      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <flash_get_sector+0x138>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d806      	bhi.n	8000980 <flash_get_sector+0x64>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <flash_get_sector+0x134>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d902      	bls.n	8000980 <flash_get_sector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800097a:	2303      	movs	r3, #3
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e059      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a35      	ldr	r2, [pc, #212]	; (8000a58 <flash_get_sector+0x13c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d806      	bhi.n	8000996 <flash_get_sector+0x7a>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <flash_get_sector+0x138>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d902      	bls.n	8000996 <flash_get_sector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000990:	2304      	movs	r3, #4
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	e04e      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <flash_get_sector+0x140>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d806      	bhi.n	80009ac <flash_get_sector+0x90>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <flash_get_sector+0x13c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d902      	bls.n	80009ac <flash_get_sector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80009a6:	2305      	movs	r3, #5
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e043      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a2c      	ldr	r2, [pc, #176]	; (8000a60 <flash_get_sector+0x144>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d806      	bhi.n	80009c2 <flash_get_sector+0xa6>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a29      	ldr	r2, [pc, #164]	; (8000a5c <flash_get_sector+0x140>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d902      	bls.n	80009c2 <flash_get_sector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80009bc:	2306      	movs	r3, #6
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e038      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <flash_get_sector+0x148>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d806      	bhi.n	80009d8 <flash_get_sector+0xbc>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <flash_get_sector+0x144>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d902      	bls.n	80009d8 <flash_get_sector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e02d      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <flash_get_sector+0x14c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d806      	bhi.n	80009ee <flash_get_sector+0xd2>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <flash_get_sector+0x148>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d902      	bls.n	80009ee <flash_get_sector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80009e8:	2308      	movs	r3, #8
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	e022      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <flash_get_sector+0x150>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d806      	bhi.n	8000a04 <flash_get_sector+0xe8>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <flash_get_sector+0x14c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d902      	bls.n	8000a04 <flash_get_sector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80009fe:	2309      	movs	r3, #9
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e017      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <flash_get_sector+0x154>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d806      	bhi.n	8000a1a <flash_get_sector+0xfe>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <flash_get_sector+0x150>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d902      	bls.n	8000a1a <flash_get_sector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000a14:	230a      	movs	r3, #10
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	e00c      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else if ((Address < ADDR_FLASH_END) && (Address >= ADDR_FLASH_SECTOR_11))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a15      	ldr	r2, [pc, #84]	; (8000a74 <flash_get_sector+0x158>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d806      	bhi.n	8000a30 <flash_get_sector+0x114>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <flash_get_sector+0x154>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d902      	bls.n	8000a30 <flash_get_sector+0x114>
  {
    sector = FLASH_SECTOR_11;
 8000a2a:	230b      	movs	r3, #11
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e001      	b.n	8000a34 <flash_get_sector+0x118>
  }
  else
  {
    sector = FLASH_SECTOR_11;
 8000a30:	230b      	movs	r3, #11
 8000a32:	60fb      	str	r3, [r7, #12]
  }
  printf("sector : %ld \r\n", sector);
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <flash_get_sector+0x15c>)
 8000a38:	f008 fb9a 	bl	8009170 <iprintf>
  return sector;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08003fff 	.word	0x08003fff
 8000a4c:	08007fff 	.word	0x08007fff
 8000a50:	0800bfff 	.word	0x0800bfff
 8000a54:	0800ffff 	.word	0x0800ffff
 8000a58:	0801ffff 	.word	0x0801ffff
 8000a5c:	0803ffff 	.word	0x0803ffff
 8000a60:	0805ffff 	.word	0x0805ffff
 8000a64:	0807ffff 	.word	0x0807ffff
 8000a68:	0809ffff 	.word	0x0809ffff
 8000a6c:	080bffff 	.word	0x080bffff
 8000a70:	080dffff 	.word	0x080dffff
 8000a74:	080ffffe 	.word	0x080ffffe
 8000a78:	0800a0f8 	.word	0x0800a0f8

08000a7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a2d      	ldr	r2, [pc, #180]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_GPIO_Init+0xd4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b08:	4812      	ldr	r0, [pc, #72]	; (8000b54 <MX_GPIO_Init+0xd8>)
 8000b0a:	f002 f8d9 	bl	8002cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_GPIO_Init+0xdc>)
 8000b24:	f001 fe30 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000b28:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_GPIO_Init+0xd8>)
 8000b42:	f001 fe21 	bl	8002788 <HAL_GPIO_Init>

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40020800 	.word	0x40020800

08000b5c <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_13);
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_GPIO_DeInit+0x4c>)
 8000b66:	f001 ffa1 	bl	8002aac <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14|GPIO_PIN_7);
 8000b6a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <MX_GPIO_DeInit+0x50>)
 8000b70:	f001 ff9c 	bl	8002aac <HAL_GPIO_DeInit>

  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b7a:	f023 0304 	bic.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b92:	f023 0301 	bic.w	r3, r3, #1
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <MX_GPIO_DeInit+0x54>)
 8000b9e:	f023 0302 	bic.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40020800 	.word	0x40020800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <__io_putchar>:
HAL_UART_Transmit_IT(&huart2, (uint8_t*)&p, len);
return len;
}
#else
int __io_putchar(int ch)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	// if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) != HAL_OK)
	// 	return -1;
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 8000bbc:	1d39      	adds	r1, r7, #4
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <__io_putchar+0x20>)
 8000bc4:	f004 f971 	bl	8004eaa <HAL_UART_Transmit>
	return ch;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200002a4 	.word	0x200002a4

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bde:	f001 f8a9 	bl	8001d34 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be2:	f000 f89d 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be6:	f7ff ff49 	bl	8000a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bea:	f000 fa2b 	bl	8001044 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\r\n stm custom bootloader start \r\n");
 8000bee:	483b      	ldr	r0, [pc, #236]	; (8000cdc <main+0x104>)
 8000bf0:	f008 fb32 	bl	8009258 <puts>
  HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f001 f942 	bl	8001e80 <HAL_Delay>
  /*
    Test if user code is programmed starting from address USBD_DFU_APP_DEFAULT_ADD
    https://www.os4all.com/69
    stack pointer
   */
  if (((*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD - 1) & 0x2FFC0000) == 0x20000000)
 8000bfc:	4b38      	ldr	r3, [pc, #224]	; (8000ce0 <main+0x108>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1e5a      	subs	r2, r3, #1
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <main+0x10c>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c0a:	d148      	bne.n	8000c9e <main+0xc6>
  {
    printf("valid app \r\n");
 8000c0c:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <main+0x110>)
 8000c0e:	f008 fb23 	bl	8009258 <puts>

    /*  roll back when DFU fail caused by version, key etc.  */
    bootloader_check_DFU();
 8000c12:	f7ff fdd1 	bl	80007b8 <bootloader_check_DFU>

    if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4834      	ldr	r0, [pc, #208]	; (8000cec <main+0x114>)
 8000c1c:	f002 f838 	bl	8002c90 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d12f      	bne.n	8000c86 <main+0xae>
    {
      printf("pin reset APP start \r\n");
 8000c26:	4832      	ldr	r0, [pc, #200]	; (8000cf0 <main+0x118>)
 8000c28:	f008 fb16 	bl	8009258 <puts>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4830      	ldr	r0, [pc, #192]	; (8000cf4 <main+0x11c>)
 8000c32:	f002 f845 	bl	8002cc0 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f001 f922 	bl	8001e80 <HAL_Delay>
      /* Jump to user application */
      JumpAddress = *(__IO uint32_t *) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <main+0x120>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <main+0x124>)
 8000c42:	6013      	str	r3, [r2, #0]
      // JumpAddress = *(__IO uint32_t *) (USBD_DFU_APP_DEFAULT_ADD);
      JumpToApplication = (pFunction) JumpAddress;
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <main+0x124>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <main+0x128>)
 8000c4c:	601a      	str	r2, [r3, #0]

      HAL_UART_MspDeInit(&huart2);
 8000c4e:	482d      	ldr	r0, [pc, #180]	; (8000d04 <main+0x12c>)
 8000c50:	f000 fa72 	bl	8001138 <HAL_UART_MspDeInit>
      MX_GPIO_DeInit();
 8000c54:	f7ff ff82 	bl	8000b5c <MX_GPIO_DeInit>
      HAL_RCC_DeInit();
 8000c58:	f003 fdcc 	bl	80047f4 <HAL_RCC_DeInit>
      HAL_DeInit();
 8000c5c:	f001 f88c 	bl	8001d78 <HAL_DeInit>

	    SysTick->CTRL = 0;
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <main+0x130>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
	    SysTick->LOAD = 0;
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <main+0x130>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
	    SysTick->VAL  = 0;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <main+0x130>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]

      // SCB->VTOR = USBD_DFU_APP_DEFAULT_ADD;

      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD);
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <main+0x108>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f383 8808 	msr	MSP, r3

      JumpToApplication();
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <main+0x128>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4798      	blx	r3
 8000c84:	e01b      	b.n	8000cbe <main+0xe6>
    }
    else
    {
      /* back up code */

      printf("ready to dfu \r\n");
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <main+0x134>)
 8000c88:	f008 fae6 	bl	8009258 <puts>
      bootloader_copy_image(USBD_DFU_APP_DEFAULT_ADD, ADDR_FLASH_COPY, APP_NUMS_SECTOR);
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4920      	ldr	r1, [pc, #128]	; (8000d10 <main+0x138>)
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <main+0x108>)
 8000c92:	f7ff fd3b 	bl	800070c <bootloader_copy_image>
      HAL_Delay(100);
 8000c96:	2064      	movs	r0, #100	; 0x64
 8000c98:	f001 f8f2 	bl	8001e80 <HAL_Delay>
 8000c9c:	e00f      	b.n	8000cbe <main+0xe6>
    }
  }
  else
  {
    /*  whether there is a code at back up region  */
    if (((*(__IO uint32_t *) ADDR_FLASH_COPY - 1) & 0x2FFC0000) == 0x20000000)
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <main+0x138>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <main+0x10c>)
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cac:	d104      	bne.n	8000cb8 <main+0xe0>
    {
      printf("DFU fail during erase , roll back \r\n");
 8000cae:	4819      	ldr	r0, [pc, #100]	; (8000d14 <main+0x13c>)
 8000cb0:	f008 fad2 	bl	8009258 <puts>
      bootloader_rollback_version();
 8000cb4:	f7ff fd64 	bl	8000780 <bootloader_rollback_version>
    }
    printf("invalid app \r\n");
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <main+0x140>)
 8000cba:	f008 facd 	bl	8009258 <puts>
  }

  MX_USB_DEVICE_Init();
 8000cbe:	f000 fa93 	bl	80011e8 <MX_USB_DEVICE_Init>
  printf("DFU mode \r\n");
 8000cc2:	4816      	ldr	r0, [pc, #88]	; (8000d1c <main+0x144>)
 8000cc4:	f008 fac8 	bl	8009258 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <main+0x11c>)
 8000ccc:	f002 f811 	bl	8002cf2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd4:	f001 f8d4 	bl	8001e80 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000cd8:	e7f6      	b.n	8000cc8 <main+0xf0>
 8000cda:	bf00      	nop
 8000cdc:	0800a108 	.word	0x0800a108
 8000ce0:	08020000 	.word	0x08020000
 8000ce4:	2ffc0000 	.word	0x2ffc0000
 8000ce8:	0800a12c 	.word	0x0800a12c
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	0800a138 	.word	0x0800a138
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	08020004 	.word	0x08020004
 8000cfc:	2000029c 	.word	0x2000029c
 8000d00:	200002a0 	.word	0x200002a0
 8000d04:	200002a4 	.word	0x200002a4
 8000d08:	e000e010 	.word	0xe000e010
 8000d0c:	0800a150 	.word	0x0800a150
 8000d10:	080a0000 	.word	0x080a0000
 8000d14:	0800a160 	.word	0x0800a160
 8000d18:	0800a184 	.word	0x0800a184
 8000d1c:	0800a194 	.word	0x0800a194

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0a4      	sub	sp, #144	; 0x90
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f008 f96e 	bl	8009010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	223c      	movs	r2, #60	; 0x3c
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f008 f95f 	bl	8009010 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <SystemClock_Config+0x100>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <SystemClock_Config+0x100>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <SystemClock_Config+0x100>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <SystemClock_Config+0x104>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a2b      	ldr	r2, [pc, #172]	; (8000e24 <SystemClock_Config+0x104>)
 8000d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <SystemClock_Config+0x104>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d94:	2302      	movs	r3, #2
 8000d96:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d9c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000da8:	2304      	movs	r3, #4
 8000daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000dae:	2308      	movs	r3, #8
 8000db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fde4 	bl	800498c <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dca:	f000 f82d 	bl	8000e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000de4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000de8:	2103      	movs	r1, #3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f942 	bl	8004074 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000df6:	f000 f817 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fb26 	bl	8004458 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e12:	f000 f809 	bl	8000e28 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3790      	adds	r7, #144	; 0x90
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <Error_Handler+0x6>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 ffb8 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <USART2_IRQHandler+0x10>)
 8000eda:	f004 f87f 	bl	8004fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200002a4 	.word	0x200002a4

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f002 f8ab 	bl	8003048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200007b4 	.word	0x200007b4

08000efc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
	}

return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fe2f 	bl	8000bb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x12>
	}
	return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
	return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f007 ffc8 	bl	8008f9c <__errno>
 800100c:	4602      	mov	r2, r0
 800100e:	230c      	movs	r3, #12
 8001010:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20040000 	.word	0x20040000
 8001038:	00000400 	.word	0x00000400
 800103c:	2000018c 	.word	0x2000018c
 8001040:	20000be8 	.word	0x20000be8

08001044 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f003 fec8 	bl	8004e10 <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f7ff fecf 	bl	8000e28 <Error_Handler>
  }

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002a4 	.word	0x200002a4
 8001094:	40004400 	.word	0x40004400

08001098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1d      	ldr	r2, [pc, #116]	; (800112c <HAL_UART_MspInit+0x94>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d133      	bne.n	8001122 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_UART_MspInit+0x98>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f2:	230c      	movs	r3, #12
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <HAL_UART_MspInit+0x9c>)
 800110e:	f001 fb3b 	bl	8002788 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2026      	movs	r0, #38	; 0x26
 8001118:	f000 ffe5 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800111c:	2026      	movs	r0, #38	; 0x26
 800111e:	f000 fffe 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004400 	.word	0x40004400
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_UART_MspDeInit+0x34>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d10c      	bne.n	8001164 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_UART_MspDeInit+0x38>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_UART_MspDeInit+0x38>)
 8001150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001156:	210c      	movs	r1, #12
 8001158:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_UART_MspDeInit+0x3c>)
 800115a:	f001 fca7 	bl	8002aac <HAL_GPIO_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800115e:	2026      	movs	r0, #38	; 0x26
 8001160:	f000 ffeb 	bl	800213a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40004400 	.word	0x40004400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020000 	.word	0x40020000

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800117c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800117e:	e003      	b.n	8001188 <LoopCopyDataInit>

08001180 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001182:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001184:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001186:	3104      	adds	r1, #4

08001188 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800118c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800118e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001190:	d3f6      	bcc.n	8001180 <CopyDataInit>
  ldr  r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001194:	e002      	b.n	800119c <LoopFillZerobss>

08001196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001196:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001198:	f842 3b04 	str.w	r3, [r2], #4

0800119c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800119e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011a0:	d3f9      	bcc.n	8001196 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011a2:	f000 fdb1 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f007 feff 	bl	8008fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fd15 	bl	8000bd8 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011b0:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80011b4:	0800a3e8 	.word	0x0800a3e8
  ldr  r0, =_sdata
 80011b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011bc:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 80011c0:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 80011c4:	20000be4 	.word	0x20000be4

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>
	...

080011cc <MX_USB_DEVICE_stop>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_stop(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  if (USBD_Stop(&hUsbDeviceFS) != USBD_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_USB_DEVICE_stop+0x18>)
 80011d2:	f005 ffb0 	bl	8007136 <USBD_Stop>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USB_DEVICE_stop+0x14>
  {
    Error_Handler();
 80011dc:	f7ff fe24 	bl	8000e28 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002e4 	.word	0x200002e4

080011e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80011ec:	2200      	movs	r2, #0
 80011ee:	4912      	ldr	r1, [pc, #72]	; (8001238 <MX_USB_DEVICE_Init+0x50>)
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_USB_DEVICE_Init+0x54>)
 80011f2:	f005 ff3d 	bl	8007070 <USBD_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80011fc:	f7ff fe14 	bl	8000e28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <MX_USB_DEVICE_Init+0x58>)
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_USB_DEVICE_Init+0x54>)
 8001204:	f005 ff6a 	bl	80070dc <USBD_RegisterClass>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800120e:	f7ff fe0b 	bl	8000e28 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8001212:	490c      	ldr	r1, [pc, #48]	; (8001244 <MX_USB_DEVICE_Init+0x5c>)
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <MX_USB_DEVICE_Init+0x54>)
 8001216:	f007 fadb 	bl	80087d0 <USBD_DFU_RegisterMedia>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001220:	f7ff fe02 	bl	8000e28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USB_DEVICE_Init+0x54>)
 8001226:	f005 ff7a 	bl	800711e <USBD_Start>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001230:	f7ff fdfa 	bl	8000e28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000020 	.word	0x20000020
 800123c:	200002e4 	.word	0x200002e4
 8001240:	200000a8 	.word	0x200000a8
 8001244:	20000080 	.word	0x20000080

08001248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2212      	movs	r2, #18
 8001258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <USBD_FS_DeviceDescriptor+0x20>)
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000040 	.word	0x20000040

0800126c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2204      	movs	r2, #4
 800127c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800127e:	4b03      	ldr	r3, [pc, #12]	; (800128c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	20000060 	.word	0x20000060

08001290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	4907      	ldr	r1, [pc, #28]	; (80012c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80012a8:	f006 ff69 	bl	800817e <USBD_GetString>
 80012ac:	e004      	b.n	80012b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80012b4:	f006 ff63 	bl	800817e <USBD_GetString>
  }
  return USBD_StrDesc;
 80012b8:	4b02      	ldr	r3, [pc, #8]	; (80012c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200005b4 	.word	0x200005b4
 80012c8:	0800a1a0 	.word	0x0800a1a0

080012cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	4904      	ldr	r1, [pc, #16]	; (80012ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80012de:	f006 ff4e 	bl	800817e <USBD_GetString>
  return USBD_StrDesc;
 80012e2:	4b02      	ldr	r3, [pc, #8]	; (80012ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200005b4 	.word	0x200005b4
 80012f0:	0800a1c0 	.word	0x0800a1c0

080012f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	221a      	movs	r2, #26
 8001304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001306:	f000 f855 	bl	80013b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000064 	.word	0x20000064

08001318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <USBD_FS_ConfigStrDescriptor+0x34>)
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001330:	f006 ff25 	bl	800817e <USBD_GetString>
 8001334:	e004      	b.n	8001340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4904      	ldr	r1, [pc, #16]	; (800134c <USBD_FS_ConfigStrDescriptor+0x34>)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <USBD_FS_ConfigStrDescriptor+0x38>)
 800133c:	f006 ff1f 	bl	800817e <USBD_GetString>
  }
  return USBD_StrDesc;
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200005b4 	.word	0x200005b4
 8001350:	0800a1d4 	.word	0x0800a1d4

08001354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800136c:	f006 ff07 	bl	800817e <USBD_GetString>
 8001370:	e004      	b.n	800137c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4904      	ldr	r1, [pc, #16]	; (8001388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001378:	f006 ff01 	bl	800817e <USBD_GetString>
  }
  return USBD_StrDesc;
 800137c:	4b02      	ldr	r3, [pc, #8]	; (8001388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200005b4 	.word	0x200005b4
 800138c:	0800a1e0 	.word	0x0800a1e0

08001390 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	220c      	movs	r2, #12
 80013a0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000054 	.word	0x20000054

080013b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <Get_SerialNum+0x44>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <Get_SerialNum+0x48>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <Get_SerialNum+0x4c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d009      	beq.n	80013ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80013da:	2208      	movs	r2, #8
 80013dc:	4909      	ldr	r1, [pc, #36]	; (8001404 <Get_SerialNum+0x50>)
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f814 	bl	800140c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80013e4:	2204      	movs	r2, #4
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <Get_SerialNum+0x54>)
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f000 f80f 	bl	800140c <IntToUnicode>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	1fff7a10 	.word	0x1fff7a10
 80013fc:	1fff7a14 	.word	0x1fff7a14
 8001400:	1fff7a18 	.word	0x1fff7a18
 8001404:	20000066 	.word	0x20000066
 8001408:	20000076 	.word	0x20000076

0800140c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	4613      	mov	r3, r2
 8001418:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	e027      	b.n	8001474 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	0f1b      	lsrs	r3, r3, #28
 8001428:	2b09      	cmp	r3, #9
 800142a:	d80b      	bhi.n	8001444 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	0f1b      	lsrs	r3, r3, #28
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4619      	mov	r1, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	440b      	add	r3, r1
 800143c:	3230      	adds	r2, #48	; 0x30
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e00a      	b.n	800145a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	0f1b      	lsrs	r3, r3, #28
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4619      	mov	r1, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	440b      	add	r3, r1
 8001454:	3237      	adds	r2, #55	; 0x37
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	3301      	adds	r3, #1
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	4413      	add	r3, r2
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	3301      	adds	r3, #1
 8001472:	75fb      	strb	r3, [r7, #23]
 8001474:	7dfa      	ldrb	r2, [r7, #23]
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	429a      	cmp	r2, r3
 800147a:	d3d3      	bcc.n	8001424 <IntToUnicode+0x18>
  }
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  printf("dfu init \r\n");
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MEM_If_Init_FS+0x20>)
 800148e:	f007 fee3 	bl	8009258 <puts>
  if (flash_init())
 8001492:	f7ff f9a7 	bl	80007e4 <flash_init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MEM_If_Init_FS+0x18>
  {
    return (USBD_FAIL);
 800149c:	2303      	movs	r3, #3
 800149e:	e000      	b.n	80014a2 <MEM_If_Init_FS+0x1a>
  }

  return (USBD_OK);
 80014a0:	2300      	movs	r3, #0

  /* USER CODE END 0 */
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	0800a22c 	.word	0x0800a22c

080014ac <MEM_If_DeInit_FS>:
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */

uint16_t MEM_If_DeInit_FS(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  printf("dfu deinit \r\n");
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <MEM_If_DeInit_FS+0x20>)
 80014b2:	f007 fed1 	bl	8009258 <puts>
  if (flash_deinit())
 80014b6:	f7ff f9a7 	bl	8000808 <flash_deinit>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MEM_If_DeInit_FS+0x18>
  {
    return (USBD_FAIL);
 80014c0:	2303      	movs	r3, #3
 80014c2:	e000      	b.n	80014c6 <MEM_If_DeInit_FS+0x1a>
  }
  // HAL_NVIC_SystemReset();
  return (USBD_OK);
 80014c4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	0800a238 	.word	0x0800a238

080014d0 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  printf("usb dfu erase \r\n");
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <MEM_If_Erase_FS+0x40>)
 80014da:	f007 febd 	bl	8009258 <puts>
  uint32_t startsector = flash_get_sector(Add);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fa1c 	bl	800091c <flash_get_sector>
 80014e4:	60f8      	str	r0, [r7, #12]
  printf("Add : %08x \r\n", Add);
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	480a      	ldr	r0, [pc, #40]	; (8001514 <MEM_If_Erase_FS+0x44>)
 80014ea:	f007 fe41 	bl	8009170 <iprintf>
  if (startsector < FLASH_SECTOR_4)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d804      	bhi.n	80014fe <MEM_If_Erase_FS+0x2e>
  {
    printf("sector 0~3 are bootloader regions \r\n");
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <MEM_If_Erase_FS+0x48>)
 80014f6:	f007 feaf 	bl	8009258 <puts>
    /*
      todo : because programmer will re-try , add stoping if want
    */
    return (USBD_FAIL);
 80014fa:	2303      	movs	r3, #3
 80014fc:	e004      	b.n	8001508 <MEM_If_Erase_FS+0x38>
  }
  /* cube progammer  */
  flash_erase(startsector, 1);
 80014fe:	2101      	movs	r1, #1
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff f98d 	bl	8000820 <flash_erase>
  // flash_erase(startsector, APP_NUMS_SECTOR);

  return (USBD_OK);
 8001506:	2300      	movs	r3, #0

  /* USER CODE END 2 */
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800a248 	.word	0x0800a248
 8001514:	0800a258 	.word	0x0800a258
 8001518:	0800a268 	.word	0x0800a268

0800151c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  printf("write, src : %08x, dest : %08x, len : %ld \r\n", src, dest, Len);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	68f9      	ldr	r1, [r7, #12]
 800152e:	482f      	ldr	r0, [pc, #188]	; (80015ec <MEM_If_Write_FS+0xd0>)
 8001530:	f007 fe1e 	bl	8009170 <iprintf>
    cnt++;
  }
  printf("\r\n");
#endif
  dfu_status_t dfu_status;
  if ((uint32_t)dest == ADDR_FW_INFO)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <MEM_If_Write_FS+0xd4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d113      	bne.n	8001564 <MEM_If_Write_FS+0x48>
  {
    printf("ADDR_FW_INFO \r\n");
 800153c:	482d      	ldr	r0, [pc, #180]	; (80015f4 <MEM_If_Write_FS+0xd8>)
 800153e:	f007 fe8b 	bl	8009258 <puts>
    dfu_status = bootloader_check_secure(src);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff f882 	bl	800064c <bootloader_check_secure>
 8001548:	4603      	mov	r3, r0
 800154a:	74fb      	strb	r3, [r7, #19]
    if (dfu_status)
 800154c:	7cfb      	ldrb	r3, [r7, #19]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <MEM_If_Write_FS+0x48>
    {
      printf("dfu secure error \r\n");
 8001552:	4829      	ldr	r0, [pc, #164]	; (80015f8 <MEM_If_Write_FS+0xdc>)
 8001554:	f007 fe80 	bl	8009258 <puts>
      bootloader_error_handler(dfu_status);
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f838 	bl	80005d0 <bootloader_error_handler>
      // MX_USB_DEVICE_stop();
      return USBD_FAIL;
 8001560:	2303      	movs	r3, #3
 8001562:	e03e      	b.n	80015e2 <MEM_If_Write_FS+0xc6>
    }
  }


  uint32_t i = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  for (i = 0; i < Len; i += 4)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e034      	b.n	80015d8 <MEM_If_Write_FS+0xbc>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     * be done by byte */
    if (HAL_FLASH_Program
        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4413      	add	r3, r2
    if (HAL_FLASH_Program
 8001574:	4619      	mov	r1, r3
         *(uint32_t *) (src + i)) == HAL_OK)
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	4413      	add	r3, r2
 800157c:	681b      	ldr	r3, [r3, #0]
    if (HAL_FLASH_Program
 800157e:	f04f 0400 	mov.w	r4, #0
 8001582:	461a      	mov	r2, r3
 8001584:	4623      	mov	r3, r4
 8001586:	2002      	movs	r0, #2
 8001588:	f000 fe18 	bl	80021bc <HAL_FLASH_Program>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d114      	bne.n	80015bc <MEM_If_Write_FS+0xa0>
    {
      /* Check the written value */
      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	4413      	add	r3, r2
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	440b      	add	r3, r1
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d015      	beq.n	80015d2 <MEM_If_Write_FS+0xb6>
      {
        /* Flash content doesn't match SRAM content */
        printf("verified fail \r\n");
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <MEM_If_Write_FS+0xe0>)
 80015a8:	f007 fe56 	bl	8009258 <puts>
        // dfu_status = DFU_verified_err;
        dfu_status = DFU_ERR_VERIFY;
 80015ac:	2301      	movs	r3, #1
 80015ae:	74fb      	strb	r3, [r7, #19]
        bootloader_error_handler(dfu_status);
 80015b0:	7cfb      	ldrb	r3, [r7, #19]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f80c 	bl	80005d0 <bootloader_error_handler>
        return 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	e012      	b.n	80015e2 <MEM_If_Write_FS+0xc6>
      }
    }
    else
    {
      printf("Fail write flash \r\n");
 80015bc:	4810      	ldr	r0, [pc, #64]	; (8001600 <MEM_If_Write_FS+0xe4>)
 80015be:	f007 fe4b 	bl	8009258 <puts>
      /* Error occurred while writing data in Flash memory */
      dfu_status = DFU_UNKNOWN;
 80015c2:	2304      	movs	r3, #4
 80015c4:	74fb      	strb	r3, [r7, #19]
      bootloader_error_handler(dfu_status);
 80015c6:	7cfb      	ldrb	r3, [r7, #19]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f801 	bl	80005d0 <bootloader_error_handler>
      return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e007      	b.n	80015e2 <MEM_If_Write_FS+0xc6>
  for (i = 0; i < Len; i += 4)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3c6      	bcc.n	800156e <MEM_If_Write_FS+0x52>
    }
  }
  return (USBD_OK);
 80015e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	0800a28c 	.word	0x0800a28c
 80015f0:	08020400 	.word	0x08020400
 80015f4:	0800a2bc 	.word	0x0800a2bc
 80015f8:	0800a2cc 	.word	0x0800a2cc
 80015fc:	0800a2e0 	.word	0x0800a2e0
 8001600:	0800a2f0 	.word	0x0800a2f0

08001604 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  printf("read,  len :%ld, address : %08x \r\n", Len, src);
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	480e      	ldr	r0, [pc, #56]	; (8001650 <MEM_If_Read_FS+0x4c>)
 8001616:	f007 fdab 	bl	8009170 <iprintf>
    printf("%02x", *(src+j+(3-2*cnt)));
    cnt++;
  }
  printf("\r\n");
#endif
  uint32_t i = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint8_t *psrc = src;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	613b      	str	r3, [r7, #16]

  for (i = 0; i < Len; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e00a      	b.n	800163e <MEM_If_Read_FS+0x3a>
  {
    dest[i] = *psrc++;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	613a      	str	r2, [r7, #16]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	440a      	add	r2, r1
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < Len; i++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3f0      	bcc.n	8001628 <MEM_If_Read_FS+0x24>
  }

  // return (uint8_t*)(USBD_OK);
  return dest;
 8001646:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0800a304 	.word	0x0800a304

08001654 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	460b      	mov	r3, r1
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  // printf("get status add : %08x, cmd : %d \r\n", Add, Cmd);
  switch (Cmd)
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d10c      	bne.n	8001682 <MEM_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
      buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3301      	adds	r3, #1
 800166c:	2232      	movs	r2, #50	; 0x32
 800166e:	701a      	strb	r2, [r3, #0]
      buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3302      	adds	r3, #2
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      buffer[3] = 0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3303      	adds	r3, #3
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
      break;
 8001680:	e00c      	b.n	800169c <MEM_If_GetStatus_FS+0x48>

    case DFU_MEDIA_ERASE:
    default:
      buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3301      	adds	r3, #1
 8001686:	2232      	movs	r2, #50	; 0x32
 8001688:	701a      	strb	r2, [r3, #0]
      buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3302      	adds	r3, #2
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
      buffer[3] = 0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3303      	adds	r3, #3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
      break;
 800169a:	bf00      	nop
  }
  return (USBD_OK);
 800169c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016cc:	d13a      	bne.n	8001744 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_PCD_MspInit+0xa0>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <HAL_PCD_MspInit+0xa0>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_PCD_MspInit+0xa0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016fc:	230a      	movs	r3, #10
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	4812      	ldr	r0, [pc, #72]	; (8001750 <HAL_PCD_MspInit+0xa4>)
 8001708:	f001 f83e 	bl	8002788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_PCD_MspInit+0xa0>)
 800170e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <HAL_PCD_MspInit+0xa0>)
 8001712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001716:	6353      	str	r3, [r2, #52]	; 0x34
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_PCD_MspInit+0xa0>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_PCD_MspInit+0xa0>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6453      	str	r3, [r2, #68]	; 0x44
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_PCD_MspInit+0xa0>)
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2043      	movs	r0, #67	; 0x43
 800173a:	f000 fcd4 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800173e:	2043      	movs	r0, #67	; 0x43
 8001740:	f000 fced 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	; 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	40020000 	.word	0x40020000

08001754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f005 fd48 	bl	8007200 <USBD_LL_SetupStage>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f005 fd80 	bl	80072a6 <USBD_LL_DataOutStage>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3348      	adds	r3, #72	; 0x48
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f005 fdc9 	bl	800736c <USBD_LL_DataInStage>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80017f0:	4618      	mov	r0, r3
 80017f2:	f005 fecd 	bl	8007590 <USBD_LL_SOF>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001806:	2301      	movs	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d001      	beq.n	8001816 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001812:	f7ff fb09 	bl	8000e28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f005 fe7a 	bl	800751a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800182c:	4618      	mov	r0, r3
 800182e:	f005 fe33 	bl	8007498 <USBD_LL_Reset>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800184a:	4618      	mov	r0, r3
 800184c:	f005 fe75 	bl	800753a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_PCD_SuspendCallback+0x48>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_PCD_SuspendCallback+0x48>)
 8001876:	f043 0306 	orr.w	r3, r3, #6
 800187a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001896:	4618      	mov	r0, r3
 8001898:	f005 fe64 	bl	8007564 <USBD_LL_Resume>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 fe8f 	bl	80075de <USBD_LL_IsoOUTIncomplete>
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f005 fe70 	bl	80075c4 <USBD_LL_IsoINIncomplete>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80018fa:	4618      	mov	r0, r3
 80018fc:	f005 fe7c 	bl	80075f8 <USBD_LL_DevConnected>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fe79 	bl	800760e <USBD_LL_DevDisconnected>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d13f      	bne.n	80019b4 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001940:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800194a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <USBD_LL_Init+0x9c>)
 800194e:	2206      	movs	r2, #6
 8001950:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001954:	2202      	movs	r2, #2
 8001956:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <USBD_LL_Init+0x9c>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001960:	2202      	movs	r2, #2
 8001962:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <USBD_LL_Init+0x9c>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <USBD_LL_Init+0x9c>)
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <USBD_LL_Init+0x9c>)
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <USBD_LL_Init+0x9c>)
 800198a:	f001 f9cd 	bl	8002d28 <HAL_PCD_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8001994:	f7ff fa48 	bl	8000e28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <USBD_LL_Init+0x9c>)
 800199c:	f002 fb35 	bl	800400a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80019a0:	2240      	movs	r2, #64	; 0x40
 80019a2:	2100      	movs	r1, #0
 80019a4:	4806      	ldr	r0, [pc, #24]	; (80019c0 <USBD_LL_Init+0x9c>)
 80019a6:	f002 fae9 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	2101      	movs	r1, #1
 80019ae:	4804      	ldr	r0, [pc, #16]	; (80019c0 <USBD_LL_Init+0x9c>)
 80019b0:	f002 fae4 	bl	8003f7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200007b4 	.word	0x200007b4

080019c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80019da:	4618      	mov	r0, r3
 80019dc:	f001 fac8 	bl	8002f70 <HAL_PCD_Start>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f962 	bl	8001cb0 <USBD_Get_USB_Status>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fae0 	bl	8002fd6 <HAL_PCD_Stop>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f947 	bl	8001cb0 <USBD_Get_USB_Status>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4608      	mov	r0, r1
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4603      	mov	r3, r0
 8001a40:	70fb      	strb	r3, [r7, #3]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70bb      	strb	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001a58:	78bb      	ldrb	r3, [r7, #2]
 8001a5a:	883a      	ldrh	r2, [r7, #0]
 8001a5c:	78f9      	ldrb	r1, [r7, #3]
 8001a5e:	f001 fef7 	bl	8003850 <HAL_PCD_EP_Open>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f921 	bl	8001cb0 <USBD_Get_USB_Status>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 ffd5 	bl	8003a4a <HAL_PCD_EP_SetStall>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f902 	bl	8001cb0 <USBD_Get_USB_Status>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001ad4:	78fa      	ldrb	r2, [r7, #3]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f81a 	bl	8003b12 <HAL_PCD_EP_ClrStall>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8e3 	bl	8001cb0 <USBD_Get_USB_Status>
 8001aea:	4603      	mov	r3, r0
 8001aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001b0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	da0b      	bge.n	8001b2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	333e      	adds	r3, #62	; 0x3e
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	e00b      	b.n	8001b44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 fe49 	bl	8003806 <HAL_PCD_SetAddress>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f898 	bl	8001cb0 <USBD_Get_USB_Status>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001bac:	7af9      	ldrb	r1, [r7, #11]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	f001 ff00 	bl	80039b6 <HAL_PCD_EP_Transmit>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f877 	bl	8001cb0 <USBD_Get_USB_Status>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001bc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001bee:	7af9      	ldrb	r1, [r7, #11]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	f001 fe94 	bl	8003920 <HAL_PCD_EP_Receive>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f856 	bl	8001cb0 <USBD_Get_USB_Status>
 8001c04:	4603      	mov	r3, r0
 8001c06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_PCDEx_LPM_Callback+0x18>
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d01f      	beq.n	8001c6a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8001c2a:	e03b      	b.n	8001ca4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8001c34:	f7ff f874 	bl	8000d20 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_PCDEx_LPM_Callback+0x98>)
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_PCDEx_LPM_Callback+0x98>)
 8001c3e:	f023 0306 	bic.w	r3, r3, #6
 8001c42:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 fc7e 	bl	8007564 <USBD_LL_Resume>
    break;
 8001c68:	e01c      	b.n	8001ca4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f005 fc56 	bl	800753a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_PCDEx_LPM_Callback+0x98>)
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_PCDEx_LPM_Callback+0x98>)
 8001c9c:	f043 0306 	orr.w	r3, r3, #6
 8001ca0:	6113      	str	r3, [r2, #16]
    break;
 8001ca2:	bf00      	nop
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d817      	bhi.n	8001cf4 <USBD_Get_USB_Status+0x44>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <USBD_Get_USB_Status+0x1c>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001ce3 	.word	0x08001ce3
 8001cd4:	08001ce9 	.word	0x08001ce9
 8001cd8:	08001cef 	.word	0x08001cef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
    break;
 8001ce0:	e00b      	b.n	8001cfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8001ce6:	e008      	b.n	8001cfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
    break;
 8001cec:	e005      	b.n	8001cfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8001cf2:	e002      	b.n	8001cfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8001cf8:	bf00      	nop
  }
  return usb_status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <SystemInit+0x28>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <SystemInit+0x28>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SystemInit+0x28>)
 8001d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d22:	609a      	str	r2, [r3, #8]
#endif
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_Init+0x40>)
 8001d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_Init+0x40>)
 8001d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_Init+0x40>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 f9b7 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f83c 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d68:	f7ff f862 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_DeInit+0x54>)
 8001d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d82:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_DeInit+0x54>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_DeInit+0x54>)
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_DeInit+0x54>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_DeInit+0x54>)
 8001d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_DeInit+0x54>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_DeInit+0x54>)
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_DeInit+0x54>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_DeInit+0x54>)
 8001db6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dba:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_DeInit+0x54>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001dc2:	f000 f805 	bl	8001dd0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x54>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x58>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f9ad 	bl	800215e <HAL_SYSTICK_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00e      	b.n	8001e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d80a      	bhi.n	8001e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f000 f963 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_InitTick+0x5c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	2000009c 	.word	0x2000009c
 8001e38:	200000a4 	.word	0x200000a4
 8001e3c:	200000a0 	.word	0x200000a0

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200000a4 	.word	0x200000a4
 8001e64:	20000bbc 	.word	0x20000bbc

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000bbc 	.word	0x20000bbc

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <HAL_Delay+0x40>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200000a4 	.word	0x200000a4

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db10      	blt.n	8001f98 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <__NVIC_DisableIRQ+0x40>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	3320      	adds	r3, #32
 8001f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f94:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	; (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002068:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <__NVIC_SystemReset+0x20>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <__NVIC_SystemReset+0x20>)
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_SystemReset+0x24>)
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <__NVIC_SystemReset+0x1c>
 8002084:	e000ed00 	.word	0xe000ed00
 8002088:	05fa0004 	.word	0x05fa0004

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff7a 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fef3 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff08 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff7a 	bl	8001ffc <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff49 	bl	8001fa8 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fefb 	bl	8001f28 <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff0b 	bl	8001f64 <__NVIC_DisableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800215a:	f7ff ff83 	bl	8002064 <__NVIC_SystemReset>

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff90 	bl	800208c <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d004      	beq.n	8002194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e00c      	b.n	80021ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2205      	movs	r2, #5
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_FLASH_Program+0xa0>)
 80021d0:	7e1b      	ldrb	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_FLASH_Program+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e03b      	b.n	8002252 <HAL_FLASH_Program+0x96>
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_FLASH_Program+0xa0>)
 80021dc:	2201      	movs	r2, #1
 80021de:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021e4:	f000 f870 	bl	80022c8 <FLASH_WaitForLastOperation>
 80021e8:	4603      	mov	r3, r0
 80021ea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12b      	bne.n	800224a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021f8:	783b      	ldrb	r3, [r7, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	68b8      	ldr	r0, [r7, #8]
 80021fe:	f000 f919 	bl	8002434 <FLASH_Program_Byte>
 8002202:	e016      	b.n	8002232 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800220a:	883b      	ldrh	r3, [r7, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	68b8      	ldr	r0, [r7, #8]
 8002210:	f000 f8ec 	bl	80023ec <FLASH_Program_HalfWord>
 8002214:	e00d      	b.n	8002232 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d105      	bne.n	8002228 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	68b8      	ldr	r0, [r7, #8]
 8002222:	f000 f8c1 	bl	80023a8 <FLASH_Program_Word>
 8002226:	e004      	b.n	8002232 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f000 f88b 	bl	8002348 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002232:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002236:	f000 f847 	bl	80022c8 <FLASH_WaitForLastOperation>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <HAL_FLASH_Program+0xa4>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_FLASH_Program+0xa4>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_FLASH_Program+0xa0>)
 800224c:	2200      	movs	r2, #0
 800224e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002250:	7dfb      	ldrb	r3, [r7, #23]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000bc0 	.word	0x20000bc0
 8002260:	40023c00 	.word	0x40023c00

08002264 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_FLASH_Unlock+0x38>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	da0b      	bge.n	800228e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_FLASH_Unlock+0x38>)
 8002278:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_FLASH_Unlock+0x3c>)
 800227a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_FLASH_Unlock+0x38>)
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_FLASH_Unlock+0x40>)
 8002280:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_FLASH_Unlock+0x38>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	da01      	bge.n	800228e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800228e:	79fb      	ldrb	r3, [r7, #7]
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	45670123 	.word	0x45670123
 80022a4:	cdef89ab 	.word	0xcdef89ab

080022a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_FLASH_Lock+0x1c>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_FLASH_Lock+0x1c>)
 80022b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <FLASH_WaitForLastOperation+0x78>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022da:	f7ff fdc5 	bl	8001e68 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022e0:	e010      	b.n	8002304 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d00c      	beq.n	8002304 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <FLASH_WaitForLastOperation+0x38>
 80022f0:	f7ff fdba 	bl	8001e68 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d201      	bcs.n	8002304 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e019      	b.n	8002338 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <FLASH_WaitForLastOperation+0x7c>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e8      	bne.n	80022e2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <FLASH_WaitForLastOperation+0x7c>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <FLASH_WaitForLastOperation+0x7c>)
 800231e:	2201      	movs	r2, #1
 8002320:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <FLASH_WaitForLastOperation+0x7c>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800232e:	f000 f8a3 	bl	8002478 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
  
}  
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000bc0 	.word	0x20000bc0
 8002344:	40023c00 	.word	0x40023c00

08002348 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002348:	b490      	push	{r4, r7}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 800235a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 8002366:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800236a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <FLASH_Program_DoubleWord+0x5c>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800237e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002382:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	f04f 0400 	mov.w	r4, #0
 800238e:	0013      	movs	r3, r2
 8002390:	2400      	movs	r4, #0
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	3204      	adds	r2, #4
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bc90      	pop	{r4, r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a09      	ldr	r2, [pc, #36]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <FLASH_Program_Word+0x40>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40023c00 	.word	0x40023c00

080023ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 80023fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4a06      	ldr	r2, [pc, #24]	; (8002430 <FLASH_Program_HalfWord+0x44>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	801a      	strh	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00

08002434 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <FLASH_Program_Byte+0x40>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <FLASH_Program_Byte+0x40>)
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <FLASH_Program_Byte+0x40>)
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <FLASH_Program_Byte+0x40>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <FLASH_Program_Byte+0x40>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <FLASH_Program_Byte+0x40>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00

08002478 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <FLASH_SetErrorCode+0xc4>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 8002492:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <FLASH_SetErrorCode+0xc4>)
 8002496:	2210      	movs	r2, #16
 8002498:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <FLASH_SetErrorCode+0xc4>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024a6:	4b26      	ldr	r3, [pc, #152]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f043 0308 	orr.w	r3, r3, #8
 80024ae:	4a24      	ldr	r2, [pc, #144]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024b4:	2220      	movs	r2, #32
 80024b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 80024ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <FLASH_SetErrorCode+0xc4>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 800250a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <FLASH_SetErrorCode+0xc4>)
 800250e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002512:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <FLASH_SetErrorCode+0xc4>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f043 0320 	orr.w	r3, r3, #32
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <FLASH_SetErrorCode+0xc8>)
 800252a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <FLASH_SetErrorCode+0xc4>)
 800252e:	2202      	movs	r2, #2
 8002530:	60da      	str	r2, [r3, #12]
  }
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40023c00 	.word	0x40023c00
 8002540:	20000bc0 	.word	0x20000bc0

08002544 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_FLASHEx_Erase+0xd8>)
 8002558:	7e1b      	ldrb	r3, [r3, #24]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_FLASHEx_Erase+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e058      	b.n	8002614 <HAL_FLASHEx_Erase+0xd0>
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <HAL_FLASHEx_Erase+0xd8>)
 8002564:	2201      	movs	r2, #1
 8002566:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002568:	f24c 3050 	movw	r0, #50000	; 0xc350
 800256c:	f7ff feac 	bl	80022c8 <FLASH_WaitForLastOperation>
 8002570:	4603      	mov	r3, r0
 8002572:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d148      	bne.n	800260c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d115      	bne.n	80025b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f844 	bl	8002624 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800259c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025a0:	f7ff fe92 	bl	80022c8 <FLASH_WaitForLastOperation>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_FLASHEx_Erase+0xdc>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <HAL_FLASHEx_Erase+0xdc>)
 80025ae:	f023 0304 	bic.w	r3, r3, #4
 80025b2:	6113      	str	r3, [r2, #16]
 80025b4:	e028      	b.n	8002608 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	e01c      	b.n	80025f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	4619      	mov	r1, r3
 80025c6:	68b8      	ldr	r0, [r7, #8]
 80025c8:	f000 f850 	bl	800266c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025d0:	f7ff fe7a 	bl	80022c8 <FLASH_WaitForLastOperation>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_FLASHEx_Erase+0xdc>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_FLASHEx_Erase+0xdc>)
 80025de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80025e2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	601a      	str	r2, [r3, #0]
          break;
 80025f0:	e00a      	b.n	8002608 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4413      	add	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d3da      	bcc.n	80025be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002608:	f000 f878 	bl	80026fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_FLASHEx_Erase+0xd8>)
 800260e:	2200      	movs	r2, #0
 8002610:	761a      	strb	r2, [r3, #24]

  return status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000bc0 	.word	0x20000bc0
 8002620:	40023c00 	.word	0x40023c00

08002624 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <FLASH_MassErase+0x44>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <FLASH_MassErase+0x44>)
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <FLASH_MassErase+0x44>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	4a09      	ldr	r2, [pc, #36]	; (8002668 <FLASH_MassErase+0x44>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <FLASH_MassErase+0x44>)
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	4313      	orrs	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <FLASH_MassErase+0x44>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6113      	str	r3, [r2, #16]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023c00 	.word	0x40023c00

0800266c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e010      	b.n	80026aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d103      	bne.n	8002696 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800268e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e009      	b.n	80026aa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d103      	bne.n	80026a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e002      	b.n	80026aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80026a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	490f      	ldr	r1, [pc, #60]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80026cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	4a07      	ldr	r2, [pc, #28]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <FLASH_Erase_Sector+0x8c>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	6113      	str	r3, [r2, #16]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40023c00 	.word	0x40023c00

080026fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002700:	4b20      	ldr	r3, [pc, #128]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002708:	2b00      	cmp	r3, #0
 800270a:	d017      	beq.n	800273c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <FLASH_FlushCaches+0x88>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002712:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <FLASH_FlushCaches+0x88>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <FLASH_FlushCaches+0x88>)
 800271e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <FLASH_FlushCaches+0x88>)
 800272a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <FLASH_FlushCaches+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <FLASH_FlushCaches+0x88>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <FLASH_FlushCaches+0x88>)
 800274e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002752:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <FLASH_FlushCaches+0x88>)
 800275a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800276a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <FLASH_FlushCaches+0x88>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <FLASH_FlushCaches+0x88>)
 8002772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
  }
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e165      	b.n	8002a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a4:	2201      	movs	r2, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	429a      	cmp	r2, r3
 80027be:	f040 8154 	bne.w	8002a6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d00b      	beq.n	80027e2 <HAL_GPIO_Init+0x5a>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d6:	2b11      	cmp	r3, #17
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b12      	cmp	r3, #18
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0xfc>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d123      	bne.n	80028cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	08da      	lsrs	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3208      	adds	r2, #8
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80ae 	beq.w	8002a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a5b      	ldr	r2, [pc, #364]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_GPIO_Init+0x2fc>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292a:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_GPIO_Init+0x300>)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4e      	ldr	r2, [pc, #312]	; (8002a8c <HAL_GPIO_Init+0x304>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d025      	beq.n	80029a2 <HAL_GPIO_Init+0x21a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4d      	ldr	r2, [pc, #308]	; (8002a90 <HAL_GPIO_Init+0x308>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d01f      	beq.n	800299e <HAL_GPIO_Init+0x216>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4c      	ldr	r2, [pc, #304]	; (8002a94 <HAL_GPIO_Init+0x30c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d019      	beq.n	800299a <HAL_GPIO_Init+0x212>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <HAL_GPIO_Init+0x310>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4a      	ldr	r2, [pc, #296]	; (8002a9c <HAL_GPIO_Init+0x314>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00d      	beq.n	8002992 <HAL_GPIO_Init+0x20a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a49      	ldr	r2, [pc, #292]	; (8002aa0 <HAL_GPIO_Init+0x318>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <HAL_GPIO_Init+0x206>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a48      	ldr	r2, [pc, #288]	; (8002aa4 <HAL_GPIO_Init+0x31c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_GPIO_Init+0x202>
 8002986:	2306      	movs	r3, #6
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 800298a:	2307      	movs	r3, #7
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x21c>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4934      	ldr	r1, [pc, #208]	; (8002a88 <HAL_GPIO_Init+0x300>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_GPIO_Init+0x320>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae96 	bls.w	80027a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3724      	adds	r7, #36	; 0x24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40013c00 	.word	0x40013c00

08002aac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e0c7      	b.n	8002c58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	f040 80b7 	bne.w	8002c52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ae4:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_GPIO_DeInit+0x1c0>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4013      	ands	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a59      	ldr	r2, [pc, #356]	; (8002c70 <HAL_GPIO_DeInit+0x1c4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d025      	beq.n	8002b5a <HAL_GPIO_DeInit+0xae>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <HAL_GPIO_DeInit+0x1c8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01f      	beq.n	8002b56 <HAL_GPIO_DeInit+0xaa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_GPIO_DeInit+0x1cc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d019      	beq.n	8002b52 <HAL_GPIO_DeInit+0xa6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_GPIO_DeInit+0x1d0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_DeInit+0xa2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a55      	ldr	r2, [pc, #340]	; (8002c80 <HAL_GPIO_DeInit+0x1d4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00d      	beq.n	8002b4a <HAL_GPIO_DeInit+0x9e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_GPIO_DeInit+0x1d8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <HAL_GPIO_DeInit+0x9a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <HAL_GPIO_DeInit+0x1dc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_GPIO_DeInit+0x96>
 8002b3e:	2306      	movs	r3, #6
 8002b40:	e00c      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b42:	2307      	movs	r3, #7
 8002b44:	e00a      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_DeInit+0xb0>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	f002 0203 	and.w	r2, r2, #3
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d132      	bne.n	8002bd2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4945      	ldr	r1, [pc, #276]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4942      	ldr	r1, [pc, #264]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	493e      	ldr	r1, [pc, #248]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	493b      	ldr	r1, [pc, #236]	; (8002c8c <HAL_GPIO_DeInit+0x1e0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_GPIO_DeInit+0x1c0>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	4829      	ldr	r0, [pc, #164]	; (8002c6c <HAL_GPIO_DeInit+0x1c0>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	400a      	ands	r2, r1
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2103      	movs	r1, #3
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	08da      	lsrs	r2, r3, #3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3208      	adds	r2, #8
 8002bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	08d2      	lsrs	r2, r2, #3
 8002c08:	4019      	ands	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	401a      	ands	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2103      	movs	r1, #3
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b0f      	cmp	r3, #15
 8002c5c:	f67f af34 	bls.w	8002ac8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40013c00 	.word	0x40013c00

08002c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	e001      	b.n	8002cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	807b      	strh	r3, [r7, #2]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cdc:	e003      	b.n	8002ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	041a      	lsls	r2, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	619a      	str	r2, [r3, #24]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	401a      	ands	r2, r3
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d104      	bne.n	8002d16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d14:	e002      	b.n	8002d1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b08f      	sub	sp, #60	; 0x3c
 8002d2c:	af0a      	add	r7, sp, #40	; 0x28
 8002d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e116      	b.n	8002f68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fe fca9 	bl	80016ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 f84a 	bl	8005e12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	687e      	ldr	r6, [r7, #4]
 8002d86:	466d      	mov	r5, sp
 8002d88:	f106 0410 	add.w	r4, r6, #16
 8002d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d98:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d9c:	1d33      	adds	r3, r6, #4
 8002d9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002da0:	6838      	ldr	r0, [r7, #0]
 8002da2:	f002 ff21 	bl	8005be8 <USB_CoreInit>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0d7      	b.n	8002f68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 f838 	bl	8005e34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	e04a      	b.n	8002e60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	333d      	adds	r3, #61	; 0x3d
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	333c      	adds	r3, #60	; 0x3c
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002df2:	7bfa      	ldrb	r2, [r7, #15]
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	b298      	uxth	r0, r3
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3342      	adds	r3, #66	; 0x42
 8002e06:	4602      	mov	r2, r0
 8002e08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	333f      	adds	r3, #63	; 0x3f
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3344      	adds	r3, #68	; 0x44
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3348      	adds	r3, #72	; 0x48
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3350      	adds	r3, #80	; 0x50
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d3af      	bcc.n	8002dca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
 8002e6e:	e044      	b.n	8002efa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3b5      	bcc.n	8002e70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	687e      	ldr	r6, [r7, #4]
 8002f0c:	466d      	mov	r5, sp
 8002f0e:	f106 0410 	add.w	r4, r6, #16
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f22:	1d33      	adds	r3, r6, #4
 8002f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f26:	6838      	ldr	r0, [r7, #0]
 8002f28:	f002 ffae 	bl	8005e88 <USB_DevInit>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e014      	b.n	8002f68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f001 f868 	bl	800402c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 ff0d 	bl	8006d80 <USB_DevDisconnect>

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_Start+0x1c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e020      	b.n	8002fce <HAL_PCD_Start+0x5e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d109      	bne.n	8002fb0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d005      	beq.n	8002fb0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 ff1b 	bl	8005df0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 febd 	bl	8006d3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_PCD_Stop+0x1c>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e026      	b.n	8003040 <HAL_PCD_Stop+0x6a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 ff07 	bl	8005e12 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 feb9 	bl	8006d80 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2110      	movs	r1, #16
 8003014:	4618      	mov	r0, r3
 8003016:	f003 f895 	bl	8006144 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	2b01      	cmp	r3, #1
 8003020:	d109      	bne.n	8003036 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b08d      	sub	sp, #52	; 0x34
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f003 ff42 	bl	8006ee8 <USB_GetMode>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 83ca 	bne.w	8003800 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fea6 	bl	8006dc2 <USB_ReadInterrupts>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 83c0 	beq.w	80037fe <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fe9d 	bl	8006dc2 <USB_ReadInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d107      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f002 0202 	and.w	r2, r2, #2
 80030a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f003 fe8b 	bl	8006dc2 <USB_ReadInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d161      	bne.n	800317a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0210 	bic.w	r2, r2, #16
 80030c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	4613      	mov	r3, r2
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	0c5b      	lsrs	r3, r3, #17
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d124      	bne.n	800313c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d035      	beq.n	800316a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800310c:	b29b      	uxth	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	6a38      	ldr	r0, [r7, #32]
 8003112:	f003 fcf1 	bl	8006af8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003122:	441a      	add	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003134:	441a      	add	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	619a      	str	r2, [r3, #24]
 800313a:	e016      	b.n	800316a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	0c5b      	lsrs	r3, r3, #17
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	2b06      	cmp	r3, #6
 8003146:	d110      	bne.n	800316a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800314e:	2208      	movs	r2, #8
 8003150:	4619      	mov	r1, r3
 8003152:	6a38      	ldr	r0, [r7, #32]
 8003154:	f003 fcd0 	bl	8006af8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003164:	441a      	add	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0210 	orr.w	r2, r2, #16
 8003178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fe1f 	bl	8006dc2 <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800318a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800318e:	d16e      	bne.n	800326e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fe25 	bl	8006de8 <USB_ReadDevAllOutEpInterrupt>
 800319e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031a0:	e062      	b.n	8003268 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d057      	beq.n	800325c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fe4a 	bl	8006e50 <USB_ReadDevOutEPInterrupt>
 80031bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	461a      	mov	r2, r3
 80031d6:	2301      	movs	r3, #1
 80031d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fd7b 	bl	8003cd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	2308      	movs	r3, #8
 80031fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fe75 	bl	8003ef0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2310      	movs	r3, #16
 8003220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	2320      	movs	r3, #32
 800323c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800325a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	3301      	adds	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d199      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fda5 	bl	8006dc2 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003282:	f040 80c0 	bne.w	8003406 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fdc6 	bl	8006e1c <USB_ReadDevAllInEpInterrupt>
 8003290:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003296:	e0b2      	b.n	80033fe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a7 	beq.w	80033f2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f003 fdec 	bl	8006e8c <USB_ReadDevInEPInterrupt>
 80032b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d057      	beq.n	8003370 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69f9      	ldr	r1, [r7, #28]
 80032dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e0:	4013      	ands	r3, r2
 80032e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f0:	461a      	mov	r2, r3
 80032f2:	2301      	movs	r3, #1
 80032f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d132      	bne.n	8003364 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3348      	adds	r3, #72	; 0x48
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	3344      	adds	r3, #68	; 0x44
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4419      	add	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	3348      	adds	r3, #72	; 0x48
 8003334:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	2b00      	cmp	r3, #0
 800333a:	d113      	bne.n	8003364 <HAL_PCD_IRQHandler+0x31c>
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3350      	adds	r3, #80	; 0x50
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d108      	bne.n	8003364 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800335c:	461a      	mov	r2, r3
 800335e:	2101      	movs	r1, #1
 8003360:	f003 fdf4 	bl	8006f4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7fe fa1f 	bl	80017ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003386:	461a      	mov	r2, r3
 8003388:	2308      	movs	r3, #8
 800338a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	2310      	movs	r3, #16
 80033a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	461a      	mov	r2, r3
 80033c0:	2340      	movs	r3, #64	; 0x40
 80033c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	461a      	mov	r2, r3
 80033dc:	2302      	movs	r3, #2
 80033de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fbe6 	bl	8003bbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	3301      	adds	r3, #1
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	f47f af49 	bne.w	8003298 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f003 fcd9 	bl	8006dc2 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800341a:	d122      	bne.n	8003462 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003442:	2100      	movs	r1, #0
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fe fbe5 	bl	8001c14 <HAL_PCDEx_LPM_Callback>
 800344a:	e002      	b.n	8003452 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fe fa1b 	bl	8001888 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fcab 	bl	8006dc2 <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003476:	d112      	bne.n	800349e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d102      	bne.n	800348e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fe f9d7 	bl	800183c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800349c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 fc8d 	bl	8006dc2 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034b2:	d121      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80034c2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d111      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe fb92 	bl	8001c14 <HAL_PCDEx_LPM_Callback>
 80034f0:	e002      	b.n	80034f8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fe f9a2 	bl	800183c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f003 fc60 	bl	8006dc2 <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	f040 80c7 	bne.w	800369e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2110      	movs	r1, #16
 800352a:	4618      	mov	r0, r3
 800352c:	f002 fe0a 	bl	8006144 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003534:	e056      	b.n	80035e4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	461a      	mov	r2, r3
 8003544:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003548:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	440a      	add	r2, r1
 8003560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003568:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357a:	0151      	lsls	r1, r2, #5
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	440a      	add	r2, r1
 8003580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003584:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003588:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003596:	461a      	mov	r2, r3
 8003598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800359c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	3301      	adds	r3, #1
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3a3      	bcc.n	8003536 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003600:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361a:	f043 030b 	orr.w	r3, r3, #11
 800361e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003630:	f043 030b 	orr.w	r3, r3, #11
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	e015      	b.n	8003664 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800364a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800364e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	f043 030b 	orr.w	r3, r3, #11
 8003662:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003672:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003676:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003688:	461a      	mov	r2, r3
 800368a:	f003 fc5f 	bl	8006f4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800369c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fb8d 	bl	8006dc2 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b2:	d124      	bne.n	80036fe <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 fc23 	bl	8006f04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f002 fd9f 	bl	8006206 <USB_GetDevSpeed>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681c      	ldr	r4, [r3, #0]
 80036d4:	f000 fe8c 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 80036d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	4620      	mov	r0, r4
 80036e4:	f002 fae2 	bl	8005cac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe f888 	bl	80017fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fb5d 	bl	8006dc2 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d10a      	bne.n	8003728 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fe f865 	bl	80017e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f002 0208 	and.w	r2, r2, #8
 8003726:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fb48 	bl	8006dc2 <USB_ReadInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373c:	d10f      	bne.n	800375e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fe f8bd 	bl	80018c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fb2d 	bl	8006dc2 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003772:	d10f      	bne.n	8003794 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe f890 	bl	80018a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fb12 	bl	8006dc2 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d10a      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe f89e 	bl	80018ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80037be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 fafc 	bl	8006dc2 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d115      	bne.n	8003800 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe f88e 	bl	8001908 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e000      	b.n	8003800 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80037fe:	bf00      	nop
    }
  }
}
 8003800:	3734      	adds	r7, #52	; 0x34
 8003802:	46bd      	mov	sp, r7
 8003804:	bd90      	pop	{r4, r7, pc}

08003806 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_PCD_SetAddress+0x1a>
 800381c:	2302      	movs	r3, #2
 800381e:	e013      	b.n	8003848 <HAL_PCD_SetAddress+0x42>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f003 fa5a 	bl	8006cf2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	4608      	mov	r0, r1
 800385a:	4611      	mov	r1, r2
 800385c:	461a      	mov	r2, r3
 800385e:	4603      	mov	r3, r0
 8003860:	70fb      	strb	r3, [r7, #3]
 8003862:	460b      	mov	r3, r1
 8003864:	803b      	strh	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800386e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da0f      	bge.n	8003896 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	705a      	strb	r2, [r3, #1]
 8003894:	e00f      	b.n	80038b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 020f 	and.w	r2, r3, #15
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038c2:	883a      	ldrh	r2, [r7, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	78ba      	ldrb	r2, [r7, #2]
 80038cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	785b      	ldrb	r3, [r3, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038e0:	78bb      	ldrb	r3, [r7, #2]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d102      	bne.n	80038ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_PCD_EP_Open+0xaa>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e00e      	b.n	8003918 <HAL_PCD_EP_Open+0xc8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	4618      	mov	r0, r3
 800390a:	f002 fca1 	bl	8006250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003916:	7afb      	ldrb	r3, [r7, #11]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	460b      	mov	r3, r1
 800392e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003930:	7afb      	ldrb	r3, [r7, #11]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	b2da      	uxtb	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	f002 ff28 	bl	80067e8 <USB_EP0StartXfer>
 8003998:	e008      	b.n	80039ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	f002 fcda 	bl	8006360 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	460b      	mov	r3, r1
 80039c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	3338      	adds	r3, #56	; 0x38
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2201      	movs	r2, #1
 80039f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f6:	7afb      	ldrb	r3, [r7, #11]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6979      	ldr	r1, [r7, #20]
 8003a28:	f002 fede 	bl	80067e8 <USB_EP0StartXfer>
 8003a2c:	e008      	b.n	8003a40 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	f002 fc90 	bl	8006360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d901      	bls.n	8003a68 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e050      	b.n	8003b0a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da0f      	bge.n	8003a90 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	3338      	adds	r3, #56	; 0x38
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	705a      	strb	r2, [r3, #1]
 8003a8e:	e00d      	b.n	8003aac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_EP_SetStall+0x82>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e01e      	b.n	8003b0a <HAL_PCD_EP_SetStall+0xc0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 f835 	bl	8006b4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	b2d9      	uxtb	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003afa:	461a      	mov	r2, r3
 8003afc:	f003 fa26 	bl	8006f4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	f003 020f 	and.w	r2, r3, #15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d901      	bls.n	8003b30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e042      	b.n	8003bb6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	da0f      	bge.n	8003b58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	3338      	adds	r3, #56	; 0x38
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	705a      	strb	r2, [r3, #1]
 8003b56:	e00f      	b.n	8003b78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3304      	adds	r3, #4
 8003b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_PCD_EP_ClrStall+0x86>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e00e      	b.n	8003bb6 <HAL_PCD_EP_ClrStall+0xa4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 f83d 	bl	8006c26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b08a      	sub	sp, #40	; 0x28
 8003bc2:	af02      	add	r7, sp, #8
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3338      	adds	r3, #56	; 0x38
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d901      	bls.n	8003bf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06c      	b.n	8003cd0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d902      	bls.n	8003c12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3303      	adds	r3, #3
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1a:	e02b      	b.n	8003c74 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d902      	bls.n	8003c38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3303      	adds	r3, #3
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68d9      	ldr	r1, [r3, #12]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f002 ff19 	bl	8006a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	441a      	add	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d809      	bhi.n	8003c9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d203      	bcs.n	8003c9e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1be      	bne.n	8003c1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d811      	bhi.n	8003cce <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	6939      	ldr	r1, [r7, #16]
 8003cc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cca:	4013      	ands	r3, r2
 8003ccc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	333c      	adds	r3, #60	; 0x3c
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 80a0 	bne.w	8003e50 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d015      	beq.n	8003d46 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a72      	ldr	r2, [pc, #456]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f240 80dd 	bls.w	8003ede <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80d7 	beq.w	8003ede <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d42:	6093      	str	r3, [r2, #8]
 8003d44:	e0cb      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2320      	movs	r3, #32
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	e0bc      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 80b7 	bne.w	8003ede <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d90f      	bls.n	8003d98 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e0a2      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003daa:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	440b      	add	r3, r1
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003dbe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4403      	add	r3, r0
 8003dce:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003dd2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4403      	add	r3, r0
 8003df6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4419      	add	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4403      	add	r3, r0
 8003e0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e10:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d114      	bne.n	8003e42 <PCD_EP_OutXfrComplete_int+0x16a>
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d108      	bne.n	8003e42 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	f003 f885 	bl	8006f4c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fd fc95 	bl	8001778 <HAL_PCD_DataOutStageCallback>
 8003e4e:	e046      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <PCD_EP_OutXfrComplete_int+0x214>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d124      	bne.n	8003ea2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e74:	6093      	str	r3, [r2, #8]
 8003e76:	e032      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2320      	movs	r3, #32
 8003e92:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fc6c 	bl	8001778 <HAL_PCD_DataOutStageCallback>
 8003ea0:	e01d      	b.n	8003ede <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d114      	bne.n	8003ed2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f003 f83d 	bl	8006f4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fd fc4d 	bl	8001778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	4f54300a 	.word	0x4f54300a
 8003eec:	4f54310a 	.word	0x4f54310a

08003ef0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	333c      	adds	r3, #60	; 0x3c
 8003f08:	3304      	adds	r3, #4
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d90e      	bls.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fd fc05 	bl	8001754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90c      	bls.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d108      	bne.n	8003f6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f64:	461a      	mov	r2, r3
 8003f66:	2101      	movs	r1, #1
 8003f68:	f002 fff0 	bl	8006f4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	4f54300a 	.word	0x4f54300a

08003f7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d107      	bne.n	8003faa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f9a:	883b      	ldrh	r3, [r7, #0]
 8003f9c:	0419      	lsls	r1, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa8:	e028      	b.n	8003ffc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	0c1b      	lsrs	r3, r3, #16
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e00d      	b.n	8003fda <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	3340      	adds	r3, #64	; 0x40
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3ec      	bcc.n	8003fbe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fe4:	883b      	ldrh	r3, [r7, #0]
 8003fe6:	0418      	lsls	r0, r3, #16
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6819      	ldr	r1, [r3, #0]
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4302      	orrs	r2, r0
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405e:	f043 0303 	orr.w	r3, r3, #3
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0cc      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b68      	ldr	r3, [pc, #416]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d90c      	bls.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0b8      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c8:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a58      	ldr	r2, [pc, #352]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e0:	4b53      	ldr	r3, [pc, #332]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a52      	ldr	r2, [pc, #328]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	494d      	ldr	r1, [pc, #308]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d044      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004112:	4b47      	ldr	r3, [pc, #284]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d119      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e07f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d003      	beq.n	8004132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	2b03      	cmp	r3, #3
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e067      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4934      	ldr	r1, [pc, #208]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd fe80 	bl	8001e68 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fe7c 	bl	8001e68 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e04f      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d20c      	bcs.n	80041bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e032      	b.n	8004222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	f000 f821 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041fe:	4601      	mov	r1, r0
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	fa21 f303 	lsr.w	r3, r1, r3
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fde0 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023c00 	.word	0x40023c00
 8004230:	40023800 	.word	0x40023800
 8004234:	0800a328 	.word	0x0800a328
 8004238:	2000009c 	.word	0x2000009c
 800423c:	200000a0 	.word	0x200000a0

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	2300      	movs	r3, #0
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d007      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x32>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d008      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x38>
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80b4 	bne.w	80043d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b5e      	ldr	r3, [pc, #376]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800426e:	60bb      	str	r3, [r7, #8]
       break;
 8004270:	e0b3      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b5e      	ldr	r3, [pc, #376]	; (80043ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004274:	60bb      	str	r3, [r7, #8]
      break;
 8004276:	e0b0      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d04a      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	f04f 0400 	mov.w	r4, #0
 8004298:	f240 11ff 	movw	r1, #511	; 0x1ff
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	ea03 0501 	and.w	r5, r3, r1
 80042a4:	ea04 0602 	and.w	r6, r4, r2
 80042a8:	4629      	mov	r1, r5
 80042aa:	4632      	mov	r2, r6
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	0154      	lsls	r4, r2, #5
 80042b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ba:	014b      	lsls	r3, r1, #5
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	1b49      	subs	r1, r1, r5
 80042c2:	eb62 0206 	sbc.w	r2, r2, r6
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	f04f 0400 	mov.w	r4, #0
 80042ce:	0194      	lsls	r4, r2, #6
 80042d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042d4:	018b      	lsls	r3, r1, #6
 80042d6:	1a5b      	subs	r3, r3, r1
 80042d8:	eb64 0402 	sbc.w	r4, r4, r2
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042ea:	00d9      	lsls	r1, r3, #3
 80042ec:	460b      	mov	r3, r1
 80042ee:	4614      	mov	r4, r2
 80042f0:	195b      	adds	r3, r3, r5
 80042f2:	eb44 0406 	adc.w	r4, r4, r6
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	0262      	lsls	r2, r4, #9
 8004300:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004304:	0259      	lsls	r1, r3, #9
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	4618      	mov	r0, r3
 800430c:	4621      	mov	r1, r4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 0400 	mov.w	r4, #0
 8004314:	461a      	mov	r2, r3
 8004316:	4623      	mov	r3, r4
 8004318:	f7fb ffda 	bl	80002d0 <__aeabi_uldivmod>
 800431c:	4603      	mov	r3, r0
 800431e:	460c      	mov	r4, r1
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e049      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	f04f 0400 	mov.w	r4, #0
 800432e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	ea03 0501 	and.w	r5, r3, r1
 800433a:	ea04 0602 	and.w	r6, r4, r2
 800433e:	4629      	mov	r1, r5
 8004340:	4632      	mov	r2, r6
 8004342:	f04f 0300 	mov.w	r3, #0
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	0154      	lsls	r4, r2, #5
 800434c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004350:	014b      	lsls	r3, r1, #5
 8004352:	4619      	mov	r1, r3
 8004354:	4622      	mov	r2, r4
 8004356:	1b49      	subs	r1, r1, r5
 8004358:	eb62 0206 	sbc.w	r2, r2, r6
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	0194      	lsls	r4, r2, #6
 8004366:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800436a:	018b      	lsls	r3, r1, #6
 800436c:	1a5b      	subs	r3, r3, r1
 800436e:	eb64 0402 	sbc.w	r4, r4, r2
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004380:	00d9      	lsls	r1, r3, #3
 8004382:	460b      	mov	r3, r1
 8004384:	4614      	mov	r4, r2
 8004386:	195b      	adds	r3, r3, r5
 8004388:	eb44 0406 	adc.w	r4, r4, r6
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	02a2      	lsls	r2, r4, #10
 8004396:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800439a:	0299      	lsls	r1, r3, #10
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	4621      	mov	r1, r4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 0400 	mov.w	r4, #0
 80043aa:	461a      	mov	r2, r3
 80043ac:	4623      	mov	r3, r4
 80043ae:	f7fb ff8f 	bl	80002d0 <__aeabi_uldivmod>
 80043b2:	4603      	mov	r3, r0
 80043b4:	460c      	mov	r4, r1
 80043b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043d6:	60bb      	str	r3, [r7, #8]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	68bb      	ldr	r3, [r7, #8]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400
 80043ec:	007a1200 	.word	0x007a1200

080043f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f6:	681b      	ldr	r3, [r3, #0]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	2000009c 	.word	0x2000009c

08004408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800440c:	f7ff fff0 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004410:	4601      	mov	r1, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0a9b      	lsrs	r3, r3, #10
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <HAL_RCC_GetPCLK1Freq+0x24>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	0800a338 	.word	0x0800a338

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004434:	f7ff ffdc 	bl	80043f0 <HAL_RCC_GetHCLKFreq>
 8004438:	4601      	mov	r1, r0
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4a03      	ldr	r2, [pc, #12]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40023800 	.word	0x40023800
 8004454:	0800a338 	.word	0x0800a338

08004458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004478:	4b87      	ldr	r3, [pc, #540]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4984      	ldr	r1, [pc, #528]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d010      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80044a6:	4b7c      	ldr	r3, [pc, #496]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	4978      	ldr	r1, [pc, #480]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80044c4:	2301      	movs	r3, #1
 80044c6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a6e      	ldr	r2, [pc, #440]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b6c      	ldr	r3, [pc, #432]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044f2:	4b6a      	ldr	r3, [pc, #424]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044fe:	f7fd fcb3 	bl	8001e68 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fd fcaf 	bl	8001e68 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e162      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004518:	4b60      	ldr	r3, [pc, #384]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004524:	4b5c      	ldr	r3, [pc, #368]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d02f      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	429a      	cmp	r2, r3
 8004540:	d028      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004542:	4b55      	ldr	r3, [pc, #340]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454c:	4b54      	ldr	r3, [pc, #336]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800454e:	2201      	movs	r2, #1
 8004550:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004552:	4b53      	ldr	r3, [pc, #332]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004558:	4a4f      	ldr	r2, [pc, #316]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800455e:	4b4e      	ldr	r3, [pc, #312]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d114      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800456a:	f7fd fc7d 	bl	8001e68 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd fc79 	bl	8001e68 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e12a      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a0:	d10d      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045a2:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	4938      	ldr	r1, [pc, #224]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]
 80045bc:	e005      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4a35      	ldr	r2, [pc, #212]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045c8:	6093      	str	r3, [r2, #8]
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d6:	4930      	ldr	r1, [pc, #192]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d004      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80045f0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045fe:	4b26      	ldr	r3, [pc, #152]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	4922      	ldr	r1, [pc, #136]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d011      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004620:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	491a      	ldr	r1, [pc, #104]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800463e:	d101      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004640:	2301      	movs	r3, #1
 8004642:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004650:	4b11      	ldr	r3, [pc, #68]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004656:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d004      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	f040 8091 	bne.w	8004798 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004676:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467c:	f7fd fbf4 	bl	8001e68 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004682:	e013      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004684:	f7fd fbf0 	bl	8001e68 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d90c      	bls.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0a3      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40007000 	.word	0x40007000
 80046a0:	42470e40 	.word	0x42470e40
 80046a4:	424711e0 	.word	0x424711e0
 80046a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046ac:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80046b8:	4a4c      	ldr	r2, [pc, #304]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d019      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046fc:	d00e      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d019      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d115      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d110      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	019b      	lsls	r3, r3, #6
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	071b      	lsls	r3, r3, #28
 8004736:	492c      	ldr	r1, [pc, #176]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d010      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	019b      	lsls	r3, r3, #6
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	071b      	lsls	r3, r3, #28
 8004764:	4920      	ldr	r1, [pc, #128]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004772:	f7fd fb79 	bl	8001e68 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800477a:	f7fd fb75 	bl	8001e68 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e028      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478c:	4b16      	ldr	r3, [pc, #88]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a4:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	490d      	ldr	r1, [pc, #52]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047cc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	4904      	ldr	r1, [pc, #16]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	424710d8 	.word	0x424710d8
 80047f0:	42470068 	.word	0x42470068

080047f4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80047fa:	f7fd fb35 	bl	8001e68 <HAL_GetTick>
 80047fe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004800:	4b5d      	ldr	r3, [pc, #372]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5c      	ldr	r2, [pc, #368]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480e:	f7fd fb2b 	bl	8001e68 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e0a7      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004820:	4b55      	ldr	r3, [pc, #340]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800482c:	4b52      	ldr	r3, [pc, #328]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a51      	ldr	r2, [pc, #324]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004836:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004838:	f7fd fb16 	bl	8001e68 <HAL_GetTick>
 800483c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800483e:	4b4e      	ldr	r3, [pc, #312]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004840:	2200      	movs	r2, #0
 8004842:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004846:	f7fd fb0f 	bl	8001e68 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e089      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800485c:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ee      	bne.n	8004846 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004868:	f7fd fafe 	bl	8001e68 <HAL_GetTick>
 800486c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a41      	ldr	r2, [pc, #260]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004874:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004878:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487c:	f7fd faf4 	bl	8001e68 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b64      	cmp	r3, #100	; 0x64
 8004888:	d901      	bls.n	800488e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e070      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800488e:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800489a:	f7fd fae5 	bl	8001e68 <HAL_GetTick>
 800489e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80048a0:	4b35      	ldr	r3, [pc, #212]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a34      	ldr	r2, [pc, #208]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fd fadb 	bl	8001e68 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e057      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80048cc:	f7fd facc 	bl	8001e68 <HAL_GetTick>
 80048d0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80048d2:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a28      	ldr	r2, [pc, #160]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048dc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048e0:	f7fd fac2 	bl	8001e68 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e03e      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_RCC_DeInit+0x184>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004900:	4a1e      	ldr	r2, [pc, #120]	; (800497c <HAL_RCC_DeInit+0x188>)
 8004902:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004906:	4a1d      	ldr	r2, [pc, #116]	; (800497c <HAL_RCC_DeInit+0x188>)
 8004908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004912:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004916:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800491e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004922:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800492a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800492e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800493a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800493c:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800493e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004940:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_RCC_DeInit+0x184>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004948:	4b0b      	ldr	r3, [pc, #44]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_RCC_DeInit+0x184>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <HAL_RCC_DeInit+0x18c>)
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <HAL_RCC_DeInit+0x190>)
 8004958:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_DeInit+0x194>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fd fa3e 	bl	8001de0 <HAL_InitTick>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 800496e:	2300      	movs	r3, #0
  }
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	24003010 	.word	0x24003010
 8004980:	2000009c 	.word	0x2000009c
 8004984:	00f42400 	.word	0x00f42400
 8004988:	200000a0 	.word	0x200000a0

0800498c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d075      	beq.n	8004a90 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049a4:	4ba2      	ldr	r3, [pc, #648]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030c 	and.w	r3, r3, #12
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d00c      	beq.n	80049ca <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b0:	4b9f      	ldr	r3, [pc, #636]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d112      	bne.n	80049e2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049bc:	4b9c      	ldr	r3, [pc, #624]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c8:	d10b      	bne.n	80049e2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ca:	4b99      	ldr	r3, [pc, #612]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d05b      	beq.n	8004a8e <HAL_RCC_OscConfig+0x102>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d157      	bne.n	8004a8e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e20b      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x6e>
 80049ec:	4b90      	ldr	r3, [pc, #576]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a8f      	ldr	r2, [pc, #572]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 80049f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e01d      	b.n	8004a36 <HAL_RCC_OscConfig+0xaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a02:	d10c      	bne.n	8004a1e <HAL_RCC_OscConfig+0x92>
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a89      	ldr	r2, [pc, #548]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b87      	ldr	r3, [pc, #540]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a86      	ldr	r2, [pc, #536]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	e00b      	b.n	8004a36 <HAL_RCC_OscConfig+0xaa>
 8004a1e:	4b84      	ldr	r3, [pc, #528]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a83      	ldr	r2, [pc, #524]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b81      	ldr	r3, [pc, #516]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a80      	ldr	r2, [pc, #512]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d013      	beq.n	8004a66 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fa13 	bl	8001e68 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a46:	f7fd fa0f 	bl	8001e68 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	; 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1d0      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a58:	4b75      	ldr	r3, [pc, #468]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0xba>
 8004a64:	e014      	b.n	8004a90 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fd f9ff 	bl	8001e68 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6e:	f7fd f9fb 	bl	8001e68 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	; 0x64
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e1bc      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a80:	4b6b      	ldr	r3, [pc, #428]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f0      	bne.n	8004a6e <HAL_RCC_OscConfig+0xe2>
 8004a8c:	e000      	b.n	8004a90 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d063      	beq.n	8004b64 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a9c:	4b64      	ldr	r3, [pc, #400]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d11c      	bne.n	8004aee <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab4:	4b5e      	ldr	r3, [pc, #376]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac0:	4b5b      	ldr	r3, [pc, #364]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x14c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e190      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b55      	ldr	r3, [pc, #340]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4952      	ldr	r1, [pc, #328]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aec:	e03a      	b.n	8004b64 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af6:	4b4f      	ldr	r3, [pc, #316]	; (8004c34 <HAL_RCC_OscConfig+0x2a8>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd f9b4 	bl	8001e68 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fd f9b0 	bl	8001e68 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e171      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	493f      	ldr	r1, [pc, #252]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]
 8004b36:	e015      	b.n	8004b64 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b38:	4b3e      	ldr	r3, [pc, #248]	; (8004c34 <HAL_RCC_OscConfig+0x2a8>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd f993 	bl	8001e68 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fd f98f 	bl	8001e68 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e150      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d030      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d016      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCC_OscConfig+0x2ac>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7e:	f7fd f973 	bl	8001e68 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b86:	f7fd f96f 	bl	8001e68 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e130      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0f0      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1fa>
 8004ba4:	e015      	b.n	8004bd2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba6:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f95c 	bl	8001e68 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fd f958 	bl	8001e68 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e119      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 809f 	beq.w	8004d1e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004be4:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10f      	bne.n	8004c10 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_OscConfig+0x2a4>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <HAL_RCC_OscConfig+0x2b0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d120      	bne.n	8004c5e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c1c:	4b07      	ldr	r3, [pc, #28]	; (8004c3c <HAL_RCC_OscConfig+0x2b0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a06      	ldr	r2, [pc, #24]	; (8004c3c <HAL_RCC_OscConfig+0x2b0>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c28:	f7fd f91e 	bl	8001e68 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c2e:	e010      	b.n	8004c52 <HAL_RCC_OscConfig+0x2c6>
 8004c30:	40023800 	.word	0x40023800
 8004c34:	42470000 	.word	0x42470000
 8004c38:	42470e80 	.word	0x42470e80
 8004c3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c40:	f7fd f912 	bl	8001e68 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0d3      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x478>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d106      	bne.n	8004c74 <HAL_RCC_OscConfig+0x2e8>
 8004c66:	4b68      	ldr	r3, [pc, #416]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a67      	ldr	r2, [pc, #412]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	e01c      	b.n	8004cae <HAL_RCC_OscConfig+0x322>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d10c      	bne.n	8004c96 <HAL_RCC_OscConfig+0x30a>
 8004c7c:	4b62      	ldr	r3, [pc, #392]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	4a61      	ldr	r2, [pc, #388]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70
 8004c88:	4b5f      	ldr	r3, [pc, #380]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a5e      	ldr	r2, [pc, #376]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
 8004c94:	e00b      	b.n	8004cae <HAL_RCC_OscConfig+0x322>
 8004c96:	4b5c      	ldr	r3, [pc, #368]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	4a5b      	ldr	r2, [pc, #364]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca2:	4b59      	ldr	r3, [pc, #356]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a58      	ldr	r2, [pc, #352]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d015      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb6:	f7fd f8d7 	bl	8001e68 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fd f8d3 	bl	8001e68 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e092      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd4:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ee      	beq.n	8004cbe <HAL_RCC_OscConfig+0x332>
 8004ce0:	e014      	b.n	8004d0c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fd f8c1 	bl	8001e68 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fd f8bd 	bl	8001e68 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e07c      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d00:	4b41      	ldr	r3, [pc, #260]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1ee      	bne.n	8004cea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d105      	bne.n	8004d1e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d12:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d068      	beq.n	8004df8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d26:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d060      	beq.n	8004df4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d145      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_RCC_OscConfig+0x480>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd f892 	bl	8001e68 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd f88e 	bl	8001e68 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e04f      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b2b      	ldr	r3, [pc, #172]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	071b      	lsls	r3, r3, #28
 8004d92:	491d      	ldr	r1, [pc, #116]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_RCC_OscConfig+0x480>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fd f863 	bl	8001e68 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fd f85f 	bl	8001e68 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e020      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x41a>
 8004dc4:	e018      	b.n	8004df8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCC_OscConfig+0x480>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd f84c 	bl	8001e68 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fd f848 	bl	8001e68 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e009      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <HAL_RCC_OscConfig+0x47c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x448>
 8004df2:	e001      	b.n	8004df8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40007000 	.word	0x40007000
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470060 	.word	0x42470060

08004e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e03f      	b.n	8004ea2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc f92e 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fb4b 	bl	80054f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b088      	sub	sp, #32
 8004eae:	af02      	add	r7, sp, #8
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	f040 8083 	bne.w	8004fd2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Transmit+0x2e>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e07b      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Transmit+0x40>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e074      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	; 0x21
 8004efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f00:	f7fc ffb2 	bl	8001e68 <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	88fa      	ldrh	r2, [r7, #6]
 8004f0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f1a:	e042      	b.n	8004fa2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f32:	d122      	bne.n	8004f7a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 f96a 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e042      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f60:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	e017      	b.n	8004fa2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	3301      	adds	r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	e013      	b.n	8004fa2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f947 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e01f      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	60ba      	str	r2, [r7, #8]
 8004f9a:	781a      	ldrb	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1b7      	bne.n	8004f1c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	2140      	movs	r1, #64	; 0x40
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f92e 	bl	8005218 <UART_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e006      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10d      	bne.n	800502e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_UART_IRQHandler+0x52>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9e0 	bl	80053ec <UART_Receive_IT>
      return;
 800502c:	e0d1      	b.n	80051d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80b0 	beq.w	8005196 <HAL_UART_IRQHandler+0x1ba>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_UART_IRQHandler+0x70>
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80a5 	beq.w	8005196 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_UART_IRQHandler+0x90>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	f043 0201 	orr.w	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HAL_UART_IRQHandler+0xb0>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	f043 0202 	orr.w	r2, r3, #2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_UART_IRQHandler+0xd0>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	f043 0204 	orr.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <HAL_UART_IRQHandler+0xfa>
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_UART_IRQHandler+0xee>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	f043 0208 	orr.w	r2, r3, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d078      	beq.n	80051d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <HAL_UART_IRQHandler+0x11c>
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f97a 	bl	80053ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <HAL_UART_IRQHandler+0x144>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d031      	beq.n	8005184 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8c3 	bl	80052ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d123      	bne.n	800517c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005142:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	4a21      	ldr	r2, [pc, #132]	; (80051d8 <HAL_UART_IRQHandler+0x1fc>)
 8005152:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd f80c 	bl	8002176 <HAL_DMA_Abort_IT>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800516e:	4610      	mov	r0, r2
 8005170:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005172:	e00e      	b.n	8005192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f845 	bl	8005204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517a:	e00a      	b.n	8005192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f841 	bl	8005204 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005182:	e006      	b.n	8005192 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f83d 	bl	8005204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005190:	e01e      	b.n	80051d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005192:	bf00      	nop
    return;
 8005194:	e01c      	b.n	80051d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <HAL_UART_IRQHandler+0x1d6>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8b0 	bl	8005310 <UART_Transmit_IT>
    return;
 80051b0:	e00f      	b.n	80051d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_UART_IRQHandler+0x1f6>
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f8f8 	bl	80053bc <UART_EndTransmit_IT>
    return;
 80051cc:	bf00      	nop
 80051ce:	e000      	b.n	80051d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80051d0:	bf00      	nop
  }
}
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	080052e9 	.word	0x080052e9

080051dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	e02c      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d028      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <UART_WaitOnFlagUntilTimeout+0x30>
 8005238:	f7fc fe16 	bl	8001e68 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	429a      	cmp	r2, r3
 8005246:	d21d      	bcs.n	8005284 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005256:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e00f      	b.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d0c3      	beq.n	800522a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695a      	ldr	r2, [r3, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff7e 	bl	8005204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b21      	cmp	r3, #33	; 0x21
 8005322:	d144      	bne.n	80053ae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532c:	d11a      	bne.n	8005364 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005342:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	621a      	str	r2, [r3, #32]
 8005356:	e00e      	b.n	8005376 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]
 8005362:	e008      	b.n	8005376 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6211      	str	r1, [r2, #32]
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10f      	bne.n	80053aa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005398:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fefd 	bl	80051dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b22      	cmp	r3, #34	; 0x22
 80053fe:	d171      	bne.n	80054e4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005408:	d123      	bne.n	8005452 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10e      	bne.n	8005436 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	1c9a      	adds	r2, r3, #2
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
 8005434:	e029      	b.n	800548a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	b29b      	uxth	r3, r3
 800543e:	b2db      	uxtb	r3, r3
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
 8005450:	e01b      	b.n	800548a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6858      	ldr	r0, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	1c59      	adds	r1, r3, #1
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6291      	str	r1, [r2, #40]	; 0x28
 800546a:	b2c2      	uxtb	r2, r0
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e00c      	b.n	800548a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	1c58      	adds	r0, r3, #1
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	6288      	str	r0, [r1, #40]	; 0x28
 8005482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29b      	uxth	r3, r3
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	4619      	mov	r1, r3
 8005498:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800549a:	2b00      	cmp	r3, #0
 800549c:	d120      	bne.n	80054e0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0220 	bic.w	r2, r2, #32
 80054ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fe8a 	bl	80051f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e002      	b.n	80054e6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005532:	f023 030c 	bic.w	r3, r3, #12
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	430b      	orrs	r3, r1
 800553e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555e:	f040 818b 	bne.w	8005878 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4ac1      	ldr	r2, [pc, #772]	; (800586c <UART_SetConfig+0x37c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d005      	beq.n	8005578 <UART_SetConfig+0x88>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4abf      	ldr	r2, [pc, #764]	; (8005870 <UART_SetConfig+0x380>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f040 80bd 	bne.w	80056f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe ff5a 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 800557c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	461d      	mov	r5, r3
 8005582:	f04f 0600 	mov.w	r6, #0
 8005586:	46a8      	mov	r8, r5
 8005588:	46b1      	mov	r9, r6
 800558a:	eb18 0308 	adds.w	r3, r8, r8
 800558e:	eb49 0409 	adc.w	r4, r9, r9
 8005592:	4698      	mov	r8, r3
 8005594:	46a1      	mov	r9, r4
 8005596:	eb18 0805 	adds.w	r8, r8, r5
 800559a:	eb49 0906 	adc.w	r9, r9, r6
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055b2:	4688      	mov	r8, r1
 80055b4:	4691      	mov	r9, r2
 80055b6:	eb18 0005 	adds.w	r0, r8, r5
 80055ba:	eb49 0106 	adc.w	r1, r9, r6
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	461d      	mov	r5, r3
 80055c4:	f04f 0600 	mov.w	r6, #0
 80055c8:	196b      	adds	r3, r5, r5
 80055ca:	eb46 0406 	adc.w	r4, r6, r6
 80055ce:	461a      	mov	r2, r3
 80055d0:	4623      	mov	r3, r4
 80055d2:	f7fa fe7d 	bl	80002d0 <__aeabi_uldivmod>
 80055d6:	4603      	mov	r3, r0
 80055d8:	460c      	mov	r4, r1
 80055da:	461a      	mov	r2, r3
 80055dc:	4ba5      	ldr	r3, [pc, #660]	; (8005874 <UART_SetConfig+0x384>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	461d      	mov	r5, r3
 80055ec:	f04f 0600 	mov.w	r6, #0
 80055f0:	46a9      	mov	r9, r5
 80055f2:	46b2      	mov	sl, r6
 80055f4:	eb19 0309 	adds.w	r3, r9, r9
 80055f8:	eb4a 040a 	adc.w	r4, sl, sl
 80055fc:	4699      	mov	r9, r3
 80055fe:	46a2      	mov	sl, r4
 8005600:	eb19 0905 	adds.w	r9, r9, r5
 8005604:	eb4a 0a06 	adc.w	sl, sl, r6
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005614:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005618:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800561c:	4689      	mov	r9, r1
 800561e:	4692      	mov	sl, r2
 8005620:	eb19 0005 	adds.w	r0, r9, r5
 8005624:	eb4a 0106 	adc.w	r1, sl, r6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	461d      	mov	r5, r3
 800562e:	f04f 0600 	mov.w	r6, #0
 8005632:	196b      	adds	r3, r5, r5
 8005634:	eb46 0406 	adc.w	r4, r6, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4623      	mov	r3, r4
 800563c:	f7fa fe48 	bl	80002d0 <__aeabi_uldivmod>
 8005640:	4603      	mov	r3, r0
 8005642:	460c      	mov	r4, r1
 8005644:	461a      	mov	r2, r3
 8005646:	4b8b      	ldr	r3, [pc, #556]	; (8005874 <UART_SetConfig+0x384>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	; 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	3332      	adds	r3, #50	; 0x32
 800565a:	4a86      	ldr	r2, [pc, #536]	; (8005874 <UART_SetConfig+0x384>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005668:	4498      	add	r8, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	461d      	mov	r5, r3
 800566e:	f04f 0600 	mov.w	r6, #0
 8005672:	46a9      	mov	r9, r5
 8005674:	46b2      	mov	sl, r6
 8005676:	eb19 0309 	adds.w	r3, r9, r9
 800567a:	eb4a 040a 	adc.w	r4, sl, sl
 800567e:	4699      	mov	r9, r3
 8005680:	46a2      	mov	sl, r4
 8005682:	eb19 0905 	adds.w	r9, r9, r5
 8005686:	eb4a 0a06 	adc.w	sl, sl, r6
 800568a:	f04f 0100 	mov.w	r1, #0
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005696:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800569a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800569e:	4689      	mov	r9, r1
 80056a0:	4692      	mov	sl, r2
 80056a2:	eb19 0005 	adds.w	r0, r9, r5
 80056a6:	eb4a 0106 	adc.w	r1, sl, r6
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	461d      	mov	r5, r3
 80056b0:	f04f 0600 	mov.w	r6, #0
 80056b4:	196b      	adds	r3, r5, r5
 80056b6:	eb46 0406 	adc.w	r4, r6, r6
 80056ba:	461a      	mov	r2, r3
 80056bc:	4623      	mov	r3, r4
 80056be:	f7fa fe07 	bl	80002d0 <__aeabi_uldivmod>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <UART_SetConfig+0x384>)
 80056ca:	fba3 1302 	umull	r1, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2164      	movs	r1, #100	; 0x64
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a65      	ldr	r2, [pc, #404]	; (8005874 <UART_SetConfig+0x384>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 0207 	and.w	r2, r3, #7
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4442      	add	r2, r8
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	e26f      	b.n	8005bd2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f2:	f7fe fe89 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 80056f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	461d      	mov	r5, r3
 80056fc:	f04f 0600 	mov.w	r6, #0
 8005700:	46a8      	mov	r8, r5
 8005702:	46b1      	mov	r9, r6
 8005704:	eb18 0308 	adds.w	r3, r8, r8
 8005708:	eb49 0409 	adc.w	r4, r9, r9
 800570c:	4698      	mov	r8, r3
 800570e:	46a1      	mov	r9, r4
 8005710:	eb18 0805 	adds.w	r8, r8, r5
 8005714:	eb49 0906 	adc.w	r9, r9, r6
 8005718:	f04f 0100 	mov.w	r1, #0
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005724:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005728:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800572c:	4688      	mov	r8, r1
 800572e:	4691      	mov	r9, r2
 8005730:	eb18 0005 	adds.w	r0, r8, r5
 8005734:	eb49 0106 	adc.w	r1, r9, r6
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	196b      	adds	r3, r5, r5
 8005744:	eb46 0406 	adc.w	r4, r6, r6
 8005748:	461a      	mov	r2, r3
 800574a:	4623      	mov	r3, r4
 800574c:	f7fa fdc0 	bl	80002d0 <__aeabi_uldivmod>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	461a      	mov	r2, r3
 8005756:	4b47      	ldr	r3, [pc, #284]	; (8005874 <UART_SetConfig+0x384>)
 8005758:	fba3 2302 	umull	r2, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	461d      	mov	r5, r3
 8005766:	f04f 0600 	mov.w	r6, #0
 800576a:	46a9      	mov	r9, r5
 800576c:	46b2      	mov	sl, r6
 800576e:	eb19 0309 	adds.w	r3, r9, r9
 8005772:	eb4a 040a 	adc.w	r4, sl, sl
 8005776:	4699      	mov	r9, r3
 8005778:	46a2      	mov	sl, r4
 800577a:	eb19 0905 	adds.w	r9, r9, r5
 800577e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800578e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005796:	4689      	mov	r9, r1
 8005798:	4692      	mov	sl, r2
 800579a:	eb19 0005 	adds.w	r0, r9, r5
 800579e:	eb4a 0106 	adc.w	r1, sl, r6
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0600 	mov.w	r6, #0
 80057ac:	196b      	adds	r3, r5, r5
 80057ae:	eb46 0406 	adc.w	r4, r6, r6
 80057b2:	461a      	mov	r2, r3
 80057b4:	4623      	mov	r3, r4
 80057b6:	f7fa fd8b 	bl	80002d0 <__aeabi_uldivmod>
 80057ba:	4603      	mov	r3, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461a      	mov	r2, r3
 80057c0:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <UART_SetConfig+0x384>)
 80057c2:	fba3 1302 	umull	r1, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2164      	movs	r1, #100	; 0x64
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	3332      	adds	r3, #50	; 0x32
 80057d4:	4a27      	ldr	r2, [pc, #156]	; (8005874 <UART_SetConfig+0x384>)
 80057d6:	fba2 2303 	umull	r2, r3, r2, r3
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e2:	4498      	add	r8, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	461d      	mov	r5, r3
 80057e8:	f04f 0600 	mov.w	r6, #0
 80057ec:	46a9      	mov	r9, r5
 80057ee:	46b2      	mov	sl, r6
 80057f0:	eb19 0309 	adds.w	r3, r9, r9
 80057f4:	eb4a 040a 	adc.w	r4, sl, sl
 80057f8:	4699      	mov	r9, r3
 80057fa:	46a2      	mov	sl, r4
 80057fc:	eb19 0905 	adds.w	r9, r9, r5
 8005800:	eb4a 0a06 	adc.w	sl, sl, r6
 8005804:	f04f 0100 	mov.w	r1, #0
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005810:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005814:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005818:	4689      	mov	r9, r1
 800581a:	4692      	mov	sl, r2
 800581c:	eb19 0005 	adds.w	r0, r9, r5
 8005820:	eb4a 0106 	adc.w	r1, sl, r6
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	461d      	mov	r5, r3
 800582a:	f04f 0600 	mov.w	r6, #0
 800582e:	196b      	adds	r3, r5, r5
 8005830:	eb46 0406 	adc.w	r4, r6, r6
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fa fd4a 	bl	80002d0 <__aeabi_uldivmod>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	461a      	mov	r2, r3
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <UART_SetConfig+0x384>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	; 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	3332      	adds	r3, #50	; 0x32
 8005856:	4a07      	ldr	r2, [pc, #28]	; (8005874 <UART_SetConfig+0x384>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 0207 	and.w	r2, r3, #7
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4442      	add	r2, r8
 8005868:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800586a:	e1b2      	b.n	8005bd2 <UART_SetConfig+0x6e2>
 800586c:	40011000 	.word	0x40011000
 8005870:	40011400 	.word	0x40011400
 8005874:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4ad7      	ldr	r2, [pc, #860]	; (8005bdc <UART_SetConfig+0x6ec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d005      	beq.n	800588e <UART_SetConfig+0x39e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4ad6      	ldr	r2, [pc, #856]	; (8005be0 <UART_SetConfig+0x6f0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	f040 80d1 	bne.w	8005a30 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800588e:	f7fe fdcf 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 8005892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	469a      	mov	sl, r3
 8005898:	f04f 0b00 	mov.w	fp, #0
 800589c:	46d0      	mov	r8, sl
 800589e:	46d9      	mov	r9, fp
 80058a0:	eb18 0308 	adds.w	r3, r8, r8
 80058a4:	eb49 0409 	adc.w	r4, r9, r9
 80058a8:	4698      	mov	r8, r3
 80058aa:	46a1      	mov	r9, r4
 80058ac:	eb18 080a 	adds.w	r8, r8, sl
 80058b0:	eb49 090b 	adc.w	r9, r9, fp
 80058b4:	f04f 0100 	mov.w	r1, #0
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058c8:	4688      	mov	r8, r1
 80058ca:	4691      	mov	r9, r2
 80058cc:	eb1a 0508 	adds.w	r5, sl, r8
 80058d0:	eb4b 0609 	adc.w	r6, fp, r9
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	f04f 0400 	mov.w	r4, #0
 80058e6:	0094      	lsls	r4, r2, #2
 80058e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	461a      	mov	r2, r3
 80058f0:	4623      	mov	r3, r4
 80058f2:	4628      	mov	r0, r5
 80058f4:	4631      	mov	r1, r6
 80058f6:	f7fa fceb 	bl	80002d0 <__aeabi_uldivmod>
 80058fa:	4603      	mov	r3, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	461a      	mov	r2, r3
 8005900:	4bb8      	ldr	r3, [pc, #736]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	469b      	mov	fp, r3
 8005910:	f04f 0c00 	mov.w	ip, #0
 8005914:	46d9      	mov	r9, fp
 8005916:	46e2      	mov	sl, ip
 8005918:	eb19 0309 	adds.w	r3, r9, r9
 800591c:	eb4a 040a 	adc.w	r4, sl, sl
 8005920:	4699      	mov	r9, r3
 8005922:	46a2      	mov	sl, r4
 8005924:	eb19 090b 	adds.w	r9, r9, fp
 8005928:	eb4a 0a0c 	adc.w	sl, sl, ip
 800592c:	f04f 0100 	mov.w	r1, #0
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005938:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800593c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005940:	4689      	mov	r9, r1
 8005942:	4692      	mov	sl, r2
 8005944:	eb1b 0509 	adds.w	r5, fp, r9
 8005948:	eb4c 060a 	adc.w	r6, ip, sl
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4619      	mov	r1, r3
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	f04f 0400 	mov.w	r4, #0
 800595e:	0094      	lsls	r4, r2, #2
 8005960:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005964:	008b      	lsls	r3, r1, #2
 8005966:	461a      	mov	r2, r3
 8005968:	4623      	mov	r3, r4
 800596a:	4628      	mov	r0, r5
 800596c:	4631      	mov	r1, r6
 800596e:	f7fa fcaf 	bl	80002d0 <__aeabi_uldivmod>
 8005972:	4603      	mov	r3, r0
 8005974:	460c      	mov	r4, r1
 8005976:	461a      	mov	r2, r3
 8005978:	4b9a      	ldr	r3, [pc, #616]	; (8005be4 <UART_SetConfig+0x6f4>)
 800597a:	fba3 1302 	umull	r1, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	2164      	movs	r1, #100	; 0x64
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	3332      	adds	r3, #50	; 0x32
 800598c:	4a95      	ldr	r2, [pc, #596]	; (8005be4 <UART_SetConfig+0x6f4>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005998:	4498      	add	r8, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	469b      	mov	fp, r3
 800599e:	f04f 0c00 	mov.w	ip, #0
 80059a2:	46d9      	mov	r9, fp
 80059a4:	46e2      	mov	sl, ip
 80059a6:	eb19 0309 	adds.w	r3, r9, r9
 80059aa:	eb4a 040a 	adc.w	r4, sl, sl
 80059ae:	4699      	mov	r9, r3
 80059b0:	46a2      	mov	sl, r4
 80059b2:	eb19 090b 	adds.w	r9, r9, fp
 80059b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059ba:	f04f 0100 	mov.w	r1, #0
 80059be:	f04f 0200 	mov.w	r2, #0
 80059c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059ce:	4689      	mov	r9, r1
 80059d0:	4692      	mov	sl, r2
 80059d2:	eb1b 0509 	adds.w	r5, fp, r9
 80059d6:	eb4c 060a 	adc.w	r6, ip, sl
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4619      	mov	r1, r3
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	f04f 0400 	mov.w	r4, #0
 80059ec:	0094      	lsls	r4, r2, #2
 80059ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059f2:	008b      	lsls	r3, r1, #2
 80059f4:	461a      	mov	r2, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	4631      	mov	r1, r6
 80059fc:	f7fa fc68 	bl	80002d0 <__aeabi_uldivmod>
 8005a00:	4603      	mov	r3, r0
 8005a02:	460c      	mov	r4, r1
 8005a04:	461a      	mov	r2, r3
 8005a06:	4b77      	ldr	r3, [pc, #476]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005a08:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	2164      	movs	r1, #100	; 0x64
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3332      	adds	r3, #50	; 0x32
 8005a1a:	4a72      	ldr	r2, [pc, #456]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4442      	add	r2, r8
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	e0d0      	b.n	8005bd2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7fe fcea 	bl	8004408 <HAL_RCC_GetPCLK1Freq>
 8005a34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	469a      	mov	sl, r3
 8005a3a:	f04f 0b00 	mov.w	fp, #0
 8005a3e:	46d0      	mov	r8, sl
 8005a40:	46d9      	mov	r9, fp
 8005a42:	eb18 0308 	adds.w	r3, r8, r8
 8005a46:	eb49 0409 	adc.w	r4, r9, r9
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	46a1      	mov	r9, r4
 8005a4e:	eb18 080a 	adds.w	r8, r8, sl
 8005a52:	eb49 090b 	adc.w	r9, r9, fp
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a6a:	4688      	mov	r8, r1
 8005a6c:	4691      	mov	r9, r2
 8005a6e:	eb1a 0508 	adds.w	r5, sl, r8
 8005a72:	eb4b 0609 	adc.w	r6, fp, r9
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	f04f 0400 	mov.w	r4, #0
 8005a88:	0094      	lsls	r4, r2, #2
 8005a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a8e:	008b      	lsls	r3, r1, #2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	4631      	mov	r1, r6
 8005a98:	f7fa fc1a 	bl	80002d0 <__aeabi_uldivmod>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	469b      	mov	fp, r3
 8005ab2:	f04f 0c00 	mov.w	ip, #0
 8005ab6:	46d9      	mov	r9, fp
 8005ab8:	46e2      	mov	sl, ip
 8005aba:	eb19 0309 	adds.w	r3, r9, r9
 8005abe:	eb4a 040a 	adc.w	r4, sl, sl
 8005ac2:	4699      	mov	r9, r3
 8005ac4:	46a2      	mov	sl, r4
 8005ac6:	eb19 090b 	adds.w	r9, r9, fp
 8005aca:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ada:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ade:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ae2:	4689      	mov	r9, r1
 8005ae4:	4692      	mov	sl, r2
 8005ae6:	eb1b 0509 	adds.w	r5, fp, r9
 8005aea:	eb4c 060a 	adc.w	r6, ip, sl
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	f04f 0400 	mov.w	r4, #0
 8005b00:	0094      	lsls	r4, r2, #2
 8005b02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b06:	008b      	lsls	r3, r1, #2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	4631      	mov	r1, r6
 8005b10:	f7fa fbde 	bl	80002d0 <__aeabi_uldivmod>
 8005b14:	4603      	mov	r3, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b20:	095b      	lsrs	r3, r3, #5
 8005b22:	2164      	movs	r1, #100	; 0x64
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	3332      	adds	r3, #50	; 0x32
 8005b2e:	4a2d      	ldr	r2, [pc, #180]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	095b      	lsrs	r3, r3, #5
 8005b36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b3a:	4498      	add	r8, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	469b      	mov	fp, r3
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	46d9      	mov	r9, fp
 8005b46:	46e2      	mov	sl, ip
 8005b48:	eb19 0309 	adds.w	r3, r9, r9
 8005b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b50:	4699      	mov	r9, r3
 8005b52:	46a2      	mov	sl, r4
 8005b54:	eb19 090b 	adds.w	r9, r9, fp
 8005b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b70:	4689      	mov	r9, r1
 8005b72:	4692      	mov	sl, r2
 8005b74:	eb1b 0509 	adds.w	r5, fp, r9
 8005b78:	eb4c 060a 	adc.w	r6, ip, sl
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0094      	lsls	r4, r2, #2
 8005b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b94:	008b      	lsls	r3, r1, #2
 8005b96:	461a      	mov	r2, r3
 8005b98:	4623      	mov	r3, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	f7fa fb97 	bl	80002d0 <__aeabi_uldivmod>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005baa:	fba3 1302 	umull	r1, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2164      	movs	r1, #100	; 0x64
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <UART_SetConfig+0x6f4>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4442      	add	r2, r8
 8005bce:	609a      	str	r2, [r3, #8]
}
 8005bd0:	e7ff      	b.n	8005bd2 <UART_SetConfig+0x6e2>
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40011400 	.word	0x40011400
 8005be4:	51eb851f 	.word	0x51eb851f

08005be8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005be8:	b084      	sub	sp, #16
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	f107 001c 	add.w	r0, r7, #28
 8005bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d122      	bne.n	8005c46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d105      	bne.n	8005c3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 f9e4 	bl	8007008 <USB_CoreReset>
 8005c40:	4603      	mov	r3, r0
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	e01a      	b.n	8005c7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f9d8 	bl	8007008 <USB_CoreReset>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c6e:	e005      	b.n	8005c7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d10b      	bne.n	8005c9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f043 0206 	orr.w	r2, r3, #6
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f043 0220 	orr.w	r2, r3, #32
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ca6:	b004      	add	sp, #16
 8005ca8:	4770      	bx	lr
	...

08005cac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d165      	bne.n	8005d8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4a41      	ldr	r2, [pc, #260]	; (8005dc8 <USB_SetTurnaroundTime+0x11c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d906      	bls.n	8005cd6 <USB_SetTurnaroundTime+0x2a>
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4a40      	ldr	r2, [pc, #256]	; (8005dcc <USB_SetTurnaroundTime+0x120>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d802      	bhi.n	8005cd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005cd0:	230f      	movs	r3, #15
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e062      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4a3c      	ldr	r2, [pc, #240]	; (8005dcc <USB_SetTurnaroundTime+0x120>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d906      	bls.n	8005cec <USB_SetTurnaroundTime+0x40>
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4a3b      	ldr	r2, [pc, #236]	; (8005dd0 <USB_SetTurnaroundTime+0x124>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d802      	bhi.n	8005cec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ce6:	230e      	movs	r3, #14
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e057      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <USB_SetTurnaroundTime+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d906      	bls.n	8005d02 <USB_SetTurnaroundTime+0x56>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4a37      	ldr	r2, [pc, #220]	; (8005dd4 <USB_SetTurnaroundTime+0x128>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d802      	bhi.n	8005d02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005cfc:	230d      	movs	r3, #13
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e04c      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4a33      	ldr	r2, [pc, #204]	; (8005dd4 <USB_SetTurnaroundTime+0x128>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d906      	bls.n	8005d18 <USB_SetTurnaroundTime+0x6c>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4a32      	ldr	r2, [pc, #200]	; (8005dd8 <USB_SetTurnaroundTime+0x12c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d802      	bhi.n	8005d18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d12:	230c      	movs	r3, #12
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e041      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4a2f      	ldr	r2, [pc, #188]	; (8005dd8 <USB_SetTurnaroundTime+0x12c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d906      	bls.n	8005d2e <USB_SetTurnaroundTime+0x82>
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4a2e      	ldr	r2, [pc, #184]	; (8005ddc <USB_SetTurnaroundTime+0x130>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d802      	bhi.n	8005d2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d28:	230b      	movs	r3, #11
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e036      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <USB_SetTurnaroundTime+0x130>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d906      	bls.n	8005d44 <USB_SetTurnaroundTime+0x98>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <USB_SetTurnaroundTime+0x134>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d802      	bhi.n	8005d44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d3e:	230a      	movs	r3, #10
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e02b      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4a26      	ldr	r2, [pc, #152]	; (8005de0 <USB_SetTurnaroundTime+0x134>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d906      	bls.n	8005d5a <USB_SetTurnaroundTime+0xae>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <USB_SetTurnaroundTime+0x138>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d802      	bhi.n	8005d5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d54:	2309      	movs	r3, #9
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e020      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4a21      	ldr	r2, [pc, #132]	; (8005de4 <USB_SetTurnaroundTime+0x138>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d906      	bls.n	8005d70 <USB_SetTurnaroundTime+0xc4>
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <USB_SetTurnaroundTime+0x13c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d802      	bhi.n	8005d70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e015      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <USB_SetTurnaroundTime+0x13c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d906      	bls.n	8005d86 <USB_SetTurnaroundTime+0xda>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <USB_SetTurnaroundTime+0x140>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d802      	bhi.n	8005d86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d80:	2307      	movs	r3, #7
 8005d82:	617b      	str	r3, [r7, #20]
 8005d84:	e00a      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d86:	2306      	movs	r3, #6
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e007      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d92:	2309      	movs	r3, #9
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e001      	b.n	8005d9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d98:	2309      	movs	r3, #9
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	029b      	lsls	r3, r3, #10
 8005db0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	00d8acbf 	.word	0x00d8acbf
 8005dcc:	00e4e1bf 	.word	0x00e4e1bf
 8005dd0:	00f423ff 	.word	0x00f423ff
 8005dd4:	0106737f 	.word	0x0106737f
 8005dd8:	011a499f 	.word	0x011a499f
 8005ddc:	01312cff 	.word	0x01312cff
 8005de0:	014ca43f 	.word	0x014ca43f
 8005de4:	016e35ff 	.word	0x016e35ff
 8005de8:	01a6ab1f 	.word	0x01a6ab1f
 8005dec:	01e847ff 	.word	0x01e847ff

08005df0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f043 0201 	orr.w	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d106      	bne.n	8005e60 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	e00b      	b.n	8005e78 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	e001      	b.n	8005e78 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e003      	b.n	8005e80 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005e78:	2032      	movs	r0, #50	; 0x32
 8005e7a:	f7fc f801 	bl	8001e80 <HAL_Delay>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e88:	b084      	sub	sp, #16
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e009      	b.n	8005ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	3340      	adds	r3, #64	; 0x40
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b0e      	cmp	r3, #14
 8005ec0:	d9f2      	bls.n	8005ea8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11c      	bne.n	8005f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e005      	b.n	8005f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	4619      	mov	r1, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	461a      	mov	r2, r3
 8005f2a:	680b      	ldr	r3, [r1, #0]
 8005f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10c      	bne.n	8005f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f949 	bl	80061d4 <USB_SetDevSpeed>
 8005f42:	e008      	b.n	8005f56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f44:	2101      	movs	r1, #1
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f944 	bl	80061d4 <USB_SetDevSpeed>
 8005f4c:	e003      	b.n	8005f56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f4e:	2103      	movs	r1, #3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f93f 	bl	80061d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8f3 	bl	8006144 <USB_FlushTxFifo>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f911 	bl	8006190 <USB_FlushRxFifo>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2300      	movs	r3, #0
 8005f82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	461a      	mov	r2, r3
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	e043      	b.n	800602a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb8:	d118      	bne.n	8005fec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	015a      	lsls	r2, r3, #5
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e013      	b.n	8005ffe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e008      	b.n	8005ffe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600a:	461a      	mov	r2, r3
 800600c:	2300      	movs	r3, #0
 800600e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	461a      	mov	r2, r3
 800601e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	3301      	adds	r3, #1
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d3b7      	bcc.n	8005fa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	e043      	b.n	80060c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604e:	d118      	bne.n	8006082 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	461a      	mov	r2, r3
 8006064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e013      	b.n	8006094 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006078:	461a      	mov	r2, r3
 800607a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e008      	b.n	8006094 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a0:	461a      	mov	r2, r3
 80060a2:	2300      	movs	r3, #0
 80060a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	461a      	mov	r2, r3
 80060b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	3301      	adds	r3, #1
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b7      	bcc.n	8006038 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d105      	bne.n	80060fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	f043 0210 	orr.w	r2, r3, #16
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699a      	ldr	r2, [r3, #24]
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <USB_DevInit+0x2b8>)
 8006102:	4313      	orrs	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006130:	7dfb      	ldrb	r3, [r7, #23]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800613c:	b004      	add	sp, #16
 800613e:	4770      	bx	lr
 8006140:	803c3800 	.word	0x803c3800

08006144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	f043 0220 	orr.w	r2, r3, #32
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3301      	adds	r3, #1
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a09      	ldr	r2, [pc, #36]	; (800618c <USB_FlushTxFifo+0x48>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e006      	b.n	800617e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b20      	cmp	r3, #32
 800617a:	d0f0      	beq.n	800615e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	00030d40 	.word	0x00030d40

08006190 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2210      	movs	r2, #16
 80061a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <USB_FlushRxFifo+0x40>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d901      	bls.n	80061b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e006      	b.n	80061c2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d0f0      	beq.n	80061a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	00030d40 	.word	0x00030d40

080061d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f4:	4313      	orrs	r3, r2
 80061f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006226:	2300      	movs	r3, #0
 8006228:	75fb      	strb	r3, [r7, #23]
 800622a:	e00a      	b.n	8006242 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d002      	beq.n	8006238 <USB_GetDevSpeed+0x32>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b06      	cmp	r3, #6
 8006236:	d102      	bne.n	800623e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006238:	2302      	movs	r3, #2
 800623a:	75fb      	strb	r3, [r7, #23]
 800623c:	e001      	b.n	8006242 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800623e:	230f      	movs	r3, #15
 8006240:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006242:	7dfb      	ldrb	r3, [r7, #23]
}
 8006244:	4618      	mov	r0, r3
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d13a      	bne.n	80062e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	2101      	movs	r1, #1
 800627e:	fa01 f303 	lsl.w	r3, r1, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	68f9      	ldr	r1, [r7, #12]
 8006286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800628a:	4313      	orrs	r3, r2
 800628c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d155      	bne.n	8006350 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	78db      	ldrb	r3, [r3, #3]
 80062be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	059b      	lsls	r3, r3, #22
 80062c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c8:	4313      	orrs	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	e036      	b.n	8006350 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	2101      	movs	r1, #1
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006300:	4313      	orrs	r3, r2
 8006302:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11a      	bne.n	8006350 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	78db      	ldrb	r3, [r3, #3]
 8006334:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006336:	430b      	orrs	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800634a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b01      	cmp	r3, #1
 800637e:	f040 815c 	bne.w	800663a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d132      	bne.n	80063f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	0cdb      	lsrs	r3, r3, #19
 80063ea:	04db      	lsls	r3, r3, #19
 80063ec:	6113      	str	r3, [r2, #16]
 80063ee:	e074      	b.n	80064da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	0cdb      	lsrs	r3, r3, #19
 800640c:	04db      	lsls	r3, r3, #19
 800640e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	440a      	add	r2, r1
 8006426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800642e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	6959      	ldr	r1, [r3, #20]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	440b      	add	r3, r1
 800644c:	1e59      	subs	r1, r3, #1
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	fbb1 f3f3 	udiv	r3, r1, r3
 8006456:	04d9      	lsls	r1, r3, #19
 8006458:	4b9d      	ldr	r3, [pc, #628]	; (80066d0 <USB_EPStartXfer+0x370>)
 800645a:	400b      	ands	r3, r1
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	0148      	lsls	r0, r1, #5
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	4401      	add	r1, r0
 8006464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006468:	4313      	orrs	r3, r2
 800646a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006482:	69b9      	ldr	r1, [r7, #24]
 8006484:	0148      	lsls	r0, r1, #5
 8006486:	69f9      	ldr	r1, [r7, #28]
 8006488:	4401      	add	r1, r0
 800648a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800648e:	4313      	orrs	r3, r2
 8006490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d11f      	bne.n	80064da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80064b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d14b      	bne.n	8006578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	78db      	ldrb	r3, [r3, #3]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d128      	bne.n	8006556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d110      	bne.n	8006536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e00f      	b.n	8006556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e12f      	b.n	80067d8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	78db      	ldrb	r3, [r3, #3]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d015      	beq.n	80065cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8117 	beq.w	80067d8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	2101      	movs	r1, #1
 80065bc:	fa01 f303 	lsl.w	r3, r1, r3
 80065c0:	69f9      	ldr	r1, [r7, #28]
 80065c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c6:	4313      	orrs	r3, r2
 80065c8:	634b      	str	r3, [r1, #52]	; 0x34
 80065ca:	e105      	b.n	80067d8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d110      	bne.n	80065fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e00f      	b.n	800661e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	b298      	uxth	r0, r3
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4603      	mov	r3, r0
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fa2b 	bl	8006a8e <USB_WritePacket>
 8006638:	e0ce      	b.n	80067d8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006654:	0cdb      	lsrs	r3, r3, #19
 8006656:	04db      	lsls	r3, r3, #19
 8006658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800667c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d126      	bne.n	80066d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669c:	69b9      	ldr	r1, [r7, #24]
 800669e:	0148      	lsls	r0, r1, #5
 80066a0:	69f9      	ldr	r1, [r7, #28]
 80066a2:	4401      	add	r1, r0
 80066a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066a8:	4313      	orrs	r3, r2
 80066aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ca:	6113      	str	r3, [r2, #16]
 80066cc:	e036      	b.n	800673c <USB_EPStartXfer+0x3dc>
 80066ce:	bf00      	nop
 80066d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	1e5a      	subs	r2, r3, #1
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	8afb      	ldrh	r3, [r7, #22]
 80066fa:	04d9      	lsls	r1, r3, #19
 80066fc:	4b39      	ldr	r3, [pc, #228]	; (80067e4 <USB_EPStartXfer+0x484>)
 80066fe:	400b      	ands	r3, r1
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	0148      	lsls	r0, r1, #5
 8006704:	69f9      	ldr	r1, [r7, #28]
 8006706:	4401      	add	r1, r0
 8006708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800670c:	4313      	orrs	r3, r2
 800670e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	8af9      	ldrh	r1, [r7, #22]
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	0148      	lsls	r0, r1, #5
 8006730:	69f9      	ldr	r1, [r7, #28]
 8006732:	4401      	add	r1, r0
 8006734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006738:	4313      	orrs	r3, r2
 800673a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d10d      	bne.n	800675e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68d9      	ldr	r1, [r3, #12]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	460a      	mov	r2, r1
 800675c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d128      	bne.n	80067b8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d110      	bne.n	8006798 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006790:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e00f      	b.n	80067b8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	1ff80000 	.word	0x1ff80000

080067e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b01      	cmp	r3, #1
 8006806:	f040 80cd 	bne.w	80069a4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d132      	bne.n	8006878 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006830:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006834:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	0151      	lsls	r1, r2, #5
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	440a      	add	r2, r1
 800684c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006854:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	440a      	add	r2, r1
 800686c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006870:	0cdb      	lsrs	r3, r3, #19
 8006872:	04db      	lsls	r3, r3, #19
 8006874:	6113      	str	r3, [r2, #16]
 8006876:	e04e      	b.n	8006916 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006892:	0cdb      	lsrs	r3, r3, #19
 8006894:	04db      	lsls	r3, r3, #19
 8006896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	695a      	ldr	r2, [r3, #20]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d903      	bls.n	80068d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006906:	6939      	ldr	r1, [r7, #16]
 8006908:	0148      	lsls	r0, r1, #5
 800690a:	6979      	ldr	r1, [r7, #20]
 800690c:	4401      	add	r1, r0
 800690e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d11e      	bne.n	800695a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d009      	beq.n	8006938 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	461a      	mov	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e092      	b.n	8006a80 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006978:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d07e      	beq.n	8006a80 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	2101      	movs	r1, #1
 8006994:	fa01 f303 	lsl.w	r3, r1, r3
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800699e:	4313      	orrs	r3, r2
 80069a0:	634b      	str	r3, [r1, #52]	; 0x34
 80069a2:	e06d      	b.n	8006a80 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	0cdb      	lsrs	r3, r3, #19
 80069c0:	04db      	lsls	r3, r3, #19
 80069c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2e:	6939      	ldr	r1, [r7, #16]
 8006a30:	0148      	lsls	r0, r1, #5
 8006a32:	6979      	ldr	r1, [r7, #20]
 8006a34:	4401      	add	r1, r0
 8006a36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10d      	bne.n	8006a60 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68d9      	ldr	r1, [r3, #12]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	460a      	mov	r2, r1
 8006a5e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b089      	sub	sp, #36	; 0x24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	4611      	mov	r1, r2
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	71fb      	strb	r3, [r7, #7]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11a      	bne.n	8006aea <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ab4:	88bb      	ldrh	r3, [r7, #4]
 8006ab6:	3303      	adds	r3, #3
 8006ab8:	089b      	lsrs	r3, r3, #2
 8006aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e00f      	b.n	8006ae2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	031a      	lsls	r2, r3, #12
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ace:	461a      	mov	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3eb      	bcc.n	8006ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3724      	adds	r7, #36	; 0x24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b089      	sub	sp, #36	; 0x24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	3303      	adds	r3, #3
 8006b12:	089b      	lsrs	r3, r3, #2
 8006b14:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e00b      	b.n	8006b34 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	3301      	adds	r3, #1
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d3ef      	bcc.n	8006b1c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3724      	adds	r7, #36	; 0x24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d12c      	bne.n	8006bc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	db12      	blt.n	8006b9e <USB_EPSetStall+0x54>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e02b      	b.n	8006c18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	db12      	blt.n	8006bf8 <USB_EPSetStall+0xae>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00f      	beq.n	8006bf8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	0151      	lsls	r1, r2, #5
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	440a      	add	r2, r1
 8006bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bf6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d128      	bne.n	8006c94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	78db      	ldrb	r3, [r3, #3]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d003      	beq.n	8006c72 <USB_EPClearStall+0x4c>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	78db      	ldrb	r3, [r3, #3]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d138      	bne.n	8006ce4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	0151      	lsls	r1, r2, #5
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	440a      	add	r2, r1
 8006c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c90:	6013      	str	r3, [r2, #0]
 8006c92:	e027      	b.n	8006ce4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	78db      	ldrb	r3, [r3, #3]
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d003      	beq.n	8006cc4 <USB_EPClearStall+0x9e>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	78db      	ldrb	r3, [r3, #3]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d10f      	bne.n	8006ce4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6c:	f023 0302 	bic.w	r3, r3, #2
 8006d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dae:	f043 0302 	orr.w	r3, r3, #2
 8006db2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dda:	68fb      	ldr	r3, [r7, #12]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	0c1b      	lsrs	r3, r3, #16
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	b29b      	uxth	r3, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eda:	68bb      	ldr	r3, [r7, #8]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f22:	f023 0307 	bic.w	r3, r3, #7
 8006f26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
	...

08006f4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	460b      	mov	r3, r1
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	333c      	adds	r3, #60	; 0x3c
 8006f62:	3304      	adds	r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	4a26      	ldr	r2, [pc, #152]	; (8007004 <USB_EP0_OutStart+0xb8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d90a      	bls.n	8006f86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f80:	d101      	bne.n	8006f86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e037      	b.n	8006ff6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	2300      	movs	r3, #0
 8006f90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb4:	f043 0318 	orr.w	r3, r3, #24
 8006fb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10f      	bne.n	8006ff4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ff2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	4f54300a 	.word	0x4f54300a

08007008 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a13      	ldr	r2, [pc, #76]	; (800706c <USB_CoreReset+0x64>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e01b      	b.n	800705e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	daf2      	bge.n	8007014 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f043 0201 	orr.w	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <USB_CoreReset+0x64>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d901      	bls.n	8007050 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e006      	b.n	800705e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	2b01      	cmp	r3, #1
 800705a:	d0f0      	beq.n	800703e <USB_CoreReset+0x36>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	00030d40 	.word	0x00030d40

08007070 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007084:	2303      	movs	r3, #3
 8007086:	e025      	b.n	80070d4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	79fa      	ldrb	r2, [r7, #7]
 80070c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7fa fc2b 	bl	8001924 <USBD_LL_Init>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3718      	adds	r7, #24
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e010      	b.n	8007116 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f107 020e 	add.w	r2, r7, #14
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	4602      	mov	r2, r0
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fa fc4c 	bl	80019c4 <USBD_LL_Start>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6852      	ldr	r2, [r2, #4]
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fa fc43 	bl	80019fa <USBD_LL_Stop>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

  return ret;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071a4:	2303      	movs	r3, #3
 80071a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	4611      	mov	r1, r2
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	78fa      	ldrb	r2, [r7, #3]
 80071f0:	4611      	mov	r1, r2
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
  }

  return USBD_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 ff68 	bl	80080e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	2b01      	cmp	r3, #1
 800723a:	d00e      	beq.n	800725a <USBD_LL_SetupStage+0x5a>
 800723c:	2b01      	cmp	r3, #1
 800723e:	d302      	bcc.n	8007246 <USBD_LL_SetupStage+0x46>
 8007240:	2b02      	cmp	r3, #2
 8007242:	d014      	beq.n	800726e <USBD_LL_SetupStage+0x6e>
 8007244:	e01d      	b.n	8007282 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa18 	bl	8007684 <USBD_StdDevReq>
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
      break;
 8007258:	e020      	b.n	800729c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa7c 	bl	8007760 <USBD_StdItfReq>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e016      	b.n	800729c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fab8 	bl	80077ec <USBD_StdEPReq>
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e00c      	b.n	800729c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007288:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fa fbf3 	bl	8001a7c <USBD_LL_StallEP>
 8007296:	4603      	mov	r3, r0
 8007298:	73fb      	strb	r3, [r7, #15]
      break;
 800729a:	bf00      	nop
  }

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	460b      	mov	r3, r1
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d137      	bne.n	800732a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d14a      	bne.n	8007362 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d913      	bls.n	8007300 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	1ad2      	subs	r2, r2, r3
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	4293      	cmp	r3, r2
 80072f0:	bf28      	it	cs
 80072f2:	4613      	movcs	r3, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	6879      	ldr	r1, [r7, #4]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f001 fe18 	bl	8008f2e <USBD_CtlContinueRx>
 80072fe:	e030      	b.n	8007362 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007312:	2b03      	cmp	r3, #3
 8007314:	d105      	bne.n	8007322 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 fe14 	bl	8008f50 <USBD_CtlSendStatus>
 8007328:	e01b      	b.n	8007362 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d013      	beq.n	800735e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10e      	bne.n	800735e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	7afa      	ldrb	r2, [r7, #11]
 800734a:	4611      	mov	r1, r2
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	4798      	blx	r3
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	e002      	b.n	8007364 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	e000      	b.n	8007364 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	460b      	mov	r3, r1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d16a      	bne.n	8007456 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3314      	adds	r3, #20
 8007384:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800738c:	2b02      	cmp	r3, #2
 800738e:	d155      	bne.n	800743c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	429a      	cmp	r2, r3
 800739a:	d914      	bls.n	80073c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	1ad2      	subs	r2, r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f001 fd8d 	bl	8008ed2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7fa fc06 	bl	8001bd0 <USBD_LL_PrepareReceive>
 80073c4:	e03a      	b.n	800743c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11c      	bne.n	800740c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073da:	429a      	cmp	r2, r3
 80073dc:	d316      	bcc.n	800740c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d20f      	bcs.n	800740c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ec:	2200      	movs	r2, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 fd6e 	bl	8008ed2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073fe:	2300      	movs	r3, #0
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7fa fbe3 	bl	8001bd0 <USBD_LL_PrepareReceive>
 800740a:	e017      	b.n	800743c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800741e:	2b03      	cmp	r3, #3
 8007420:	d105      	bne.n	800742e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800742e:	2180      	movs	r1, #128	; 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7fa fb23 	bl	8001a7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f001 fd9d 	bl	8008f76 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007442:	2b01      	cmp	r3, #1
 8007444:	d123      	bne.n	800748e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f7ff fe9b 	bl	8007182 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007454:	e01b      	b.n	800748e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d013      	beq.n	800748a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007468:	2b03      	cmp	r3, #3
 800746a:	d10e      	bne.n	800748a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	7afa      	ldrb	r2, [r7, #11]
 8007476:	4611      	mov	r1, r2
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	4798      	blx	r3
 800747c:	4603      	mov	r3, r0
 800747e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	e002      	b.n	8007490 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800748a:	2303      	movs	r3, #3
 800748c:	e000      	b.n	8007490 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6852      	ldr	r2, [r2, #4]
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	4611      	mov	r1, r2
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fa faa4 	bl	8001a30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2240      	movs	r2, #64	; 0x40
 80074f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	2200      	movs	r2, #0
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fa fa96 	bl	8001a30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2240      	movs	r2, #64	; 0x40
 800750e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2204      	movs	r2, #4
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007572:	2b04      	cmp	r3, #4
 8007574:	d105      	bne.n	8007582 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d10b      	bne.n	80075ba <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6852      	ldr	r2, [r2, #4]
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	4611      	mov	r1, r2
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007646:	b480      	push	{r7}
 8007648:	b087      	sub	sp, #28
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3301      	adds	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007664:	8a3b      	ldrh	r3, [r7, #16]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b21a      	sxth	r2, r3
 800766a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800766e:	4313      	orrs	r3, r2
 8007670:	b21b      	sxth	r3, r3
 8007672:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007674:	89fb      	ldrh	r3, [r7, #14]
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800769a:	2b20      	cmp	r3, #32
 800769c:	d004      	beq.n	80076a8 <USBD_StdDevReq+0x24>
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d002      	beq.n	80076a8 <USBD_StdDevReq+0x24>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <USBD_StdDevReq+0x38>
 80076a6:	e050      	b.n	800774a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ba:	e04b      	b.n	8007754 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d83c      	bhi.n	800773e <USBD_StdDevReq+0xba>
 80076c4:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBD_StdDevReq+0x48>)
 80076c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ca:	bf00      	nop
 80076cc:	08007721 	.word	0x08007721
 80076d0:	08007735 	.word	0x08007735
 80076d4:	0800773f 	.word	0x0800773f
 80076d8:	0800772b 	.word	0x0800772b
 80076dc:	0800773f 	.word	0x0800773f
 80076e0:	080076ff 	.word	0x080076ff
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	0800773f 	.word	0x0800773f
 80076ec:	08007717 	.word	0x08007717
 80076f0:	08007709 	.word	0x08007709
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f9ce 	bl	8007a98 <USBD_GetDescriptor>
      break;
 80076fc:	e024      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fb6f 	bl	8007de4 <USBD_SetAddress>
      break;
 8007706:	e01f      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fbac 	bl	8007e68 <USBD_SetConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
      break;
 8007714:	e018      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc49 	bl	8007fb0 <USBD_GetConfig>
      break;
 800771e:	e013      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fc78 	bl	8008018 <USBD_GetStatus>
      break;
 8007728:	e00e      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fca6 	bl	800807e <USBD_SetFeature>
      break;
 8007732:	e009      	b.n	8007748 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fcb5 	bl	80080a6 <USBD_ClrFeature>
      break;
 800773c:	e004      	b.n	8007748 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fd0b 	bl	800815c <USBD_CtlError>
      break;
 8007746:	bf00      	nop
    }
    break;
 8007748:	e004      	b.n	8007754 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fd05 	bl	800815c <USBD_CtlError>
    break;
 8007752:	bf00      	nop
  }

  return ret;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop

08007760 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007776:	2b20      	cmp	r3, #32
 8007778:	d003      	beq.n	8007782 <USBD_StdItfReq+0x22>
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d001      	beq.n	8007782 <USBD_StdItfReq+0x22>
 800777e:	2b00      	cmp	r3, #0
 8007780:	d12a      	bne.n	80077d8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	3b01      	subs	r3, #1
 800778a:	2b02      	cmp	r3, #2
 800778c:	d81d      	bhi.n	80077ca <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	889b      	ldrh	r3, [r3, #4]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b01      	cmp	r3, #1
 8007796:	d813      	bhi.n	80077c0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d110      	bne.n	80077d4 <USBD_StdItfReq+0x74>
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10d      	bne.n	80077d4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fbc9 	bl	8008f50 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077be:	e009      	b.n	80077d4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fcca 	bl	800815c <USBD_CtlError>
      break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fcc5 	bl	800815c <USBD_CtlError>
      break;
 80077d2:	e000      	b.n	80077d6 <USBD_StdItfReq+0x76>
      break;
 80077d4:	bf00      	nop
    }
    break;
 80077d6:	e004      	b.n	80077e2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fcbe 	bl	800815c <USBD_CtlError>
    break;
 80077e0:	bf00      	nop
  }

  return ret;
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007808:	2b20      	cmp	r3, #32
 800780a:	d004      	beq.n	8007816 <USBD_StdEPReq+0x2a>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d002      	beq.n	8007816 <USBD_StdEPReq+0x2a>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <USBD_StdEPReq+0x3e>
 8007814:	e135      	b.n	8007a82 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	4798      	blx	r3
 8007824:	4603      	mov	r3, r0
 8007826:	73fb      	strb	r3, [r7, #15]
    break;
 8007828:	e130      	b.n	8007a8c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d03e      	beq.n	80078b0 <USBD_StdEPReq+0xc4>
 8007832:	2b03      	cmp	r3, #3
 8007834:	d002      	beq.n	800783c <USBD_StdEPReq+0x50>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d077      	beq.n	800792a <USBD_StdEPReq+0x13e>
 800783a:	e11c      	b.n	8007a76 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007842:	2b02      	cmp	r3, #2
 8007844:	d002      	beq.n	800784c <USBD_StdEPReq+0x60>
 8007846:	2b03      	cmp	r3, #3
 8007848:	d015      	beq.n	8007876 <USBD_StdEPReq+0x8a>
 800784a:	e02b      	b.n	80078a4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <USBD_StdEPReq+0x80>
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d009      	beq.n	800786c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fa f90d 	bl	8001a7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fa f909 	bl	8001a7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800786a:	e020      	b.n	80078ae <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc74 	bl	800815c <USBD_CtlError>
        break;
 8007874:	e01b      	b.n	80078ae <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	885b      	ldrh	r3, [r3, #2]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10e      	bne.n	800789c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00b      	beq.n	800789c <USBD_StdEPReq+0xb0>
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b80      	cmp	r3, #128	; 0x80
 8007888:	d008      	beq.n	800789c <USBD_StdEPReq+0xb0>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fa f8f0 	bl	8001a7c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 fb57 	bl	8008f50 <USBD_CtlSendStatus>

        break;
 80078a2:	e004      	b.n	80078ae <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc58 	bl	800815c <USBD_CtlError>
        break;
 80078ac:	bf00      	nop
      }
      break;
 80078ae:	e0e7      	b.n	8007a80 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d002      	beq.n	80078c0 <USBD_StdEPReq+0xd4>
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d015      	beq.n	80078ea <USBD_StdEPReq+0xfe>
 80078be:	e02d      	b.n	800791c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <USBD_StdEPReq+0xf4>
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d009      	beq.n	80078e0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fa f8d3 	bl	8001a7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fa f8cf 	bl	8001a7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80078de:	e023      	b.n	8007928 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fc3a 	bl	800815c <USBD_CtlError>
        break;
 80078e8:	e01e      	b.n	8007928 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d119      	bne.n	8007926 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fa f8da 	bl	8001aba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f001 fb22 	bl	8008f50 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
        }
        break;
 800791a:	e004      	b.n	8007926 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fc1c 	bl	800815c <USBD_CtlError>
        break;
 8007924:	e000      	b.n	8007928 <USBD_StdEPReq+0x13c>
        break;
 8007926:	bf00      	nop
      }
      break;
 8007928:	e0aa      	b.n	8007a80 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0x14e>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d032      	beq.n	800799e <USBD_StdEPReq+0x1b2>
 8007938:	e097      	b.n	8007a6a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <USBD_StdEPReq+0x164>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d004      	beq.n	8007950 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc07 	bl	800815c <USBD_CtlError>
          break;
 800794e:	e091      	b.n	8007a74 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007954:	2b00      	cmp	r3, #0
 8007956:	da0b      	bge.n	8007970 <USBD_StdEPReq+0x184>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	3310      	adds	r3, #16
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	e00b      	b.n	8007988 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	4413      	add	r3, r2
 8007986:	3304      	adds	r3, #4
 8007988:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2202      	movs	r2, #2
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fa80 	bl	8008e9c <USBD_CtlSendData>
        break;
 800799c:	e06a      	b.n	8007a74 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800799e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da11      	bge.n	80079ca <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d117      	bne.n	80079f0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fbca 	bl	800815c <USBD_CtlError>
            break;
 80079c8:	e054      	b.n	8007a74 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079e6:	6839      	ldr	r1, [r7, #0]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fbb7 	bl	800815c <USBD_CtlError>
            break;
 80079ee:	e041      	b.n	8007a74 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da0b      	bge.n	8007a10 <USBD_StdEPReq+0x224>
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3310      	adds	r3, #16
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	e00b      	b.n	8007a28 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a16:	4613      	mov	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	3304      	adds	r3, #4
 8007a28:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x24a>
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d103      	bne.n	8007a3e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e00e      	b.n	8007a5c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fa f858 	bl	8001af8 <USBD_LL_IsStallEP>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	e002      	b.n	8007a5c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fa1a 	bl	8008e9c <USBD_CtlSendData>
          break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb75 	bl	800815c <USBD_CtlError>
        break;
 8007a72:	bf00      	nop
      }
      break;
 8007a74:	e004      	b.n	8007a80 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fb6f 	bl	800815c <USBD_CtlError>
      break;
 8007a7e:	bf00      	nop
    }
    break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fb69 	bl	800815c <USBD_CtlError>
    break;
 8007a8a:	bf00      	nop
  }

  return ret;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	2b0e      	cmp	r3, #14
 8007aba:	f200 8165 	bhi.w	8007d88 <USBD_GetDescriptor+0x2f0>
 8007abe:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <USBD_GetDescriptor+0x2c>)
 8007ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac4:	08007b35 	.word	0x08007b35
 8007ac8:	08007b4d 	.word	0x08007b4d
 8007acc:	08007b8d 	.word	0x08007b8d
 8007ad0:	08007d89 	.word	0x08007d89
 8007ad4:	08007d89 	.word	0x08007d89
 8007ad8:	08007d29 	.word	0x08007d29
 8007adc:	08007d55 	.word	0x08007d55
 8007ae0:	08007d89 	.word	0x08007d89
 8007ae4:	08007d89 	.word	0x08007d89
 8007ae8:	08007d89 	.word	0x08007d89
 8007aec:	08007d89 	.word	0x08007d89
 8007af0:	08007d89 	.word	0x08007d89
 8007af4:	08007d89 	.word	0x08007d89
 8007af8:	08007d89 	.word	0x08007d89
 8007afc:	08007b01 	.word	0x08007b01
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	7c12      	ldrb	r2, [r2, #16]
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
 8007b20:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007b22:	e139      	b.n	8007d98 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fb18 	bl	800815c <USBD_CtlError>
      err++;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	72fb      	strb	r3, [r7, #11]
    break;
 8007b32:	e131      	b.n	8007d98 <USBD_GetDescriptor+0x300>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
    break;
 8007b4a:	e125      	b.n	8007d98 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	7c1b      	ldrb	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10d      	bne.n	8007b70 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f107 0208 	add.w	r2, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b6e:	e113      	b.n	8007d98 <USBD_GetDescriptor+0x300>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	f107 0208 	add.w	r2, r7, #8
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3301      	adds	r3, #1
 8007b86:	2202      	movs	r2, #2
 8007b88:	701a      	strb	r2, [r3, #0]
    break;
 8007b8a:	e105      	b.n	8007d98 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	885b      	ldrh	r3, [r3, #2]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	f200 80ac 	bhi.w	8007cf0 <USBD_GetDescriptor+0x258>
 8007b98:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <USBD_GetDescriptor+0x108>)
 8007b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9e:	bf00      	nop
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007c21 	.word	0x08007c21
 8007bac:	08007c55 	.word	0x08007c55
 8007bb0:	08007c89 	.word	0x08007c89
 8007bb4:	08007cbd 	.word	0x08007cbd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00b      	beq.n	8007bdc <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7c12      	ldrb	r2, [r2, #16]
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bda:	e0a4      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fabc 	bl	800815c <USBD_CtlError>
        err++;
 8007be4:	7afb      	ldrb	r3, [r7, #11]
 8007be6:	3301      	adds	r3, #1
 8007be8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bea:	e09c      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c0e:	e08a      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 faa2 	bl	800815c <USBD_CtlError>
        err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c1e:	e082      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c42:	e070      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa88 	bl	800815c <USBD_CtlError>
        err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
      break;
 8007c52:	e068      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c76:	e056      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa6e 	bl	800815c <USBD_CtlError>
        err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
      break;
 8007c86:	e04e      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007caa:	e03c      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa54 	bl	800815c <USBD_CtlError>
        err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cba:	e034      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cde:	e022      	b.n	8007d26 <USBD_GetDescriptor+0x28e>
        USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa3a 	bl	800815c <USBD_CtlError>
        err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
      break;
 8007cee:	e01a      	b.n	8007d26 <USBD_GetDescriptor+0x28e>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <USBD_GetDescriptor+0x27e>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	8852      	ldrh	r2, [r2, #2]
 8007d08:	b2d1      	uxtb	r1, r2
 8007d0a:	f107 0208 	add.w	r2, r7, #8
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	4798      	blx	r3
 8007d12:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 8007d14:	e006      	b.n	8007d24 <USBD_GetDescriptor+0x28c>
        USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fa1f 	bl	800815c <USBD_CtlError>
        err++;
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	3301      	adds	r3, #1
 8007d22:	72fb      	strb	r3, [r7, #11]
      break;
 8007d24:	bf00      	nop
    }
    break;
 8007d26:	e037      	b.n	8007d98 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7c1b      	ldrb	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <USBD_GetDescriptor+0x2ac>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d38:	f107 0208 	add.w	r2, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d42:	e029      	b.n	8007d98 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa08 	bl	800815c <USBD_CtlError>
      err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
    break;
 8007d52:	e021      	b.n	8007d98 <USBD_GetDescriptor+0x300>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7c1b      	ldrb	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10d      	bne.n	8007d78 <USBD_GetDescriptor+0x2e0>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	2207      	movs	r2, #7
 8007d74:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d76:	e00f      	b.n	8007d98 <USBD_GetDescriptor+0x300>
      USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9ee 	bl	800815c <USBD_CtlError>
      err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
    break;
 8007d86:	e007      	b.n	8007d98 <USBD_GetDescriptor+0x300>

  default:
    USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f9e6 	bl	800815c <USBD_CtlError>
    err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
    break;
 8007d96:	bf00      	nop
  }

  if (err != 0U)
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d11e      	bne.n	8007ddc <USBD_GetDescriptor+0x344>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	88db      	ldrh	r3, [r3, #6]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <USBD_GetDescriptor+0x33c>
    {
      if (len != 0U)
 8007da6:	893b      	ldrh	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <USBD_GetDescriptor+0x332>
      {
        len = MIN(len, req->wLength);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88da      	ldrh	r2, [r3, #6]
 8007db0:	893b      	ldrh	r3, [r7, #8]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	bf28      	it	cs
 8007db6:	4613      	movcs	r3, r2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 f86a 	bl	8008e9c <USBD_CtlSendData>
 8007dc8:	e009      	b.n	8007dde <USBD_GetDescriptor+0x346>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9c5 	bl	800815c <USBD_CtlError>
 8007dd2:	e004      	b.n	8007dde <USBD_GetDescriptor+0x346>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 f8bb 	bl	8008f50 <USBD_CtlSendStatus>
 8007dda:	e000      	b.n	8007dde <USBD_GetDescriptor+0x346>
    return;
 8007ddc:	bf00      	nop
    }
  }
}
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d130      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	88db      	ldrh	r3, [r3, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12c      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b7f      	cmp	r3, #127	; 0x7f
 8007e04:	d828      	bhi.n	8007e58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	885b      	ldrh	r3, [r3, #2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d104      	bne.n	8007e26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f99c 	bl	800815c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e01c      	b.n	8007e60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7f9 fe8c 	bl	8001b50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f889 	bl	8008f50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	e008      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	e003      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f97e 	bl	800815c <USBD_CtlError>
  }
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <USBD_SetConfig+0x144>)
 8007e7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e80:	4b4a      	ldr	r3, [pc, #296]	; (8007fac <USBD_SetConfig+0x144>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d905      	bls.n	8007e94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f966 	bl	800815c <USBD_CtlError>
    return USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	e087      	b.n	8007fa4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d002      	beq.n	8007ea4 <USBD_SetConfig+0x3c>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d025      	beq.n	8007eee <USBD_SetConfig+0x86>
 8007ea2:	e071      	b.n	8007f88 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007ea4:	4b41      	ldr	r3, [pc, #260]	; (8007fac <USBD_SetConfig+0x144>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01c      	beq.n	8007ee6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007eac:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <USBD_SetConfig+0x144>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007eb6:	4b3d      	ldr	r3, [pc, #244]	; (8007fac <USBD_SetConfig+0x144>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff f96b 	bl	8007198 <USBD_SetClassConfig>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d004      	beq.n	8007ed6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f944 	bl	800815c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ed4:	e065      	b.n	8007fa2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f83a 	bl	8008f50 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2203      	movs	r2, #3
 8007ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ee4:	e05d      	b.n	8007fa2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f832 	bl	8008f50 <USBD_CtlSendStatus>
    break;
 8007eec:	e059      	b.n	8007fa2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007eee:	4b2f      	ldr	r3, [pc, #188]	; (8007fac <USBD_SetConfig+0x144>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d112      	bne.n	8007f1c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007efe:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <USBD_SetConfig+0x144>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f08:	4b28      	ldr	r3, [pc, #160]	; (8007fac <USBD_SetConfig+0x144>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff f95e 	bl	80071d0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 f81b 	bl	8008f50 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f1a:	e042      	b.n	8007fa2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f1c:	4b23      	ldr	r3, [pc, #140]	; (8007fac <USBD_SetConfig+0x144>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d02a      	beq.n	8007f80 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff f94c 	bl	80071d0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <USBD_SetConfig+0x144>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f42:	4b1a      	ldr	r3, [pc, #104]	; (8007fac <USBD_SetConfig+0x144>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff f925 	bl	8007198 <USBD_SetClassConfig>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00f      	beq.n	8007f78 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8fe 	bl	800815c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff f931 	bl	80071d0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f76:	e014      	b.n	8007fa2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 ffe9 	bl	8008f50 <USBD_CtlSendStatus>
    break;
 8007f7e:	e010      	b.n	8007fa2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 ffe5 	bl	8008f50 <USBD_CtlSendStatus>
    break;
 8007f86:	e00c      	b.n	8007fa2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f8e6 	bl	800815c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f90:	4b06      	ldr	r3, [pc, #24]	; (8007fac <USBD_SetConfig+0x144>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff f91a 	bl	80071d0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa0:	bf00      	nop
  }

  return ret;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000190 	.word	0x20000190

08007fb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	88db      	ldrh	r3, [r3, #6]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d004      	beq.n	8007fcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f8c9 	bl	800815c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007fca:	e021      	b.n	8008010 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	db17      	blt.n	8008006 <USBD_GetConfig+0x56>
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	dd02      	ble.n	8007fe0 <USBD_GetConfig+0x30>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d00b      	beq.n	8007ff6 <USBD_GetConfig+0x46>
 8007fde:	e012      	b.n	8008006 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	2201      	movs	r2, #1
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 ff54 	bl	8008e9c <USBD_CtlSendData>
      break;
 8007ff4:	e00c      	b.n	8008010 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 ff4c 	bl	8008e9c <USBD_CtlSendData>
      break;
 8008004:	e004      	b.n	8008010 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8a7 	bl	800815c <USBD_CtlError>
      break;
 800800e:	bf00      	nop
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	3b01      	subs	r3, #1
 800802a:	2b02      	cmp	r3, #2
 800802c:	d81e      	bhi.n	800806c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	88db      	ldrh	r3, [r3, #6]
 8008032:	2b02      	cmp	r3, #2
 8008034:	d004      	beq.n	8008040 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f88f 	bl	800815c <USBD_CtlError>
      break;
 800803e:	e01a      	b.n	8008076 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f043 0202 	orr.w	r2, r3, #2
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	330c      	adds	r3, #12
 8008060:	2202      	movs	r2, #2
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 ff19 	bl	8008e9c <USBD_CtlSendData>
    break;
 800806a:	e004      	b.n	8008076 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f874 	bl	800815c <USBD_CtlError>
    break;
 8008074:	bf00      	nop
  }
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	885b      	ldrh	r3, [r3, #2]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d106      	bne.n	800809e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 ff59 	bl	8008f50 <USBD_CtlSendStatus>
  }
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	3b01      	subs	r3, #1
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d80b      	bhi.n	80080d4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	885b      	ldrh	r3, [r3, #2]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d10c      	bne.n	80080de <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 ff3f 	bl	8008f50 <USBD_CtlSendStatus>
      }
      break;
 80080d2:	e004      	b.n	80080de <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f840 	bl	800815c <USBD_CtlError>
      break;
 80080dc:	e000      	b.n	80080e0 <USBD_ClrFeature+0x3a>
      break;
 80080de:	bf00      	nop
  }
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	3301      	adds	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fa97 	bl	8007646 <SWAPBYTE>
 8008118:	4603      	mov	r3, r0
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3301      	adds	r3, #1
 8008124:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3301      	adds	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7ff fa8a 	bl	8007646 <SWAPBYTE>
 8008132:	4603      	mov	r3, r0
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fa7d 	bl	8007646 <SWAPBYTE>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	80da      	strh	r2, [r3, #6]
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7f9 fc87 	bl	8001a7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7f9 fc83 	bl	8001a7c <USBD_LL_StallEP>
}
 8008176:	bf00      	nop
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b086      	sub	sp, #24
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d036      	beq.n	8008202 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008198:	6938      	ldr	r0, [r7, #16]
 800819a:	f000 f836 	bl	800820a <USBD_GetLen>
 800819e:	4603      	mov	r3, r0
 80081a0:	3301      	adds	r3, #1
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081ac:	7dfb      	ldrb	r3, [r7, #23]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	7812      	ldrb	r2, [r2, #0]
 80081b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	3301      	adds	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4413      	add	r3, r2
 80081c4:	2203      	movs	r2, #3
 80081c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	3301      	adds	r3, #1
 80081cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081ce:	e013      	b.n	80081f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	3301      	adds	r3, #1
 80081e0:	613b      	str	r3, [r7, #16]
    idx++;
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	3301      	adds	r3, #1
 80081e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	3301      	adds	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e7      	bne.n	80081d0 <USBD_GetString+0x52>
 8008200:	e000      	b.n	8008204 <USBD_GetString+0x86>
    return;
 8008202:	bf00      	nop
  }
}
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800821a:	e005      	b.n	8008228 <USBD_GetLen+0x1e>
  {
    len++;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	3301      	adds	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	3301      	adds	r3, #1
 8008226:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f5      	bne.n	800821c <USBD_GetLen+0x12>
  }

  return len;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <__NVIC_SystemReset>:
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008244:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <__NVIC_SystemReset+0x20>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008250:	4903      	ldr	r1, [pc, #12]	; (8008260 <__NVIC_SystemReset+0x20>)
 8008252:	4b04      	ldr	r3, [pc, #16]	; (8008264 <__NVIC_SystemReset+0x24>)
 8008254:	4313      	orrs	r3, r2
 8008256:	60cb      	str	r3, [r1, #12]
 8008258:	f3bf 8f4f 	dsb	sy
    __NOP();
 800825c:	bf00      	nop
 800825e:	e7fd      	b.n	800825c <__NVIC_SystemReset+0x1c>
 8008260:	e000ed00 	.word	0xe000ed00
 8008264:	05fa0004 	.word	0x05fa0004

08008268 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8008274:	f240 401c 	movw	r0, #1052	; 0x41c
 8008278:	f000 feba 	bl	8008ff0 <malloc>
 800827c:	4603      	mov	r3, r0
 800827e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d105      	bne.n	8008292 <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800828e:	2302      	movs	r3, #2
 8008290:	e03e      	b.n	8008310 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a1c      	ldr	r2, [pc, #112]	; (8008318 <USBD_DFU_Init+0xb0>)
 80082a6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2202      	movs	r2, #2
 80082c6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2202      	movs	r2, #2
 80082ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4798      	blx	r3
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	e000      	b.n	8008310 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	08020000 	.word	0x08020000

0800831c <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8008332:	2302      	movs	r3, #2
 8008334:	e027      	b.n	8008386 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800833c:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2202      	movs	r2, #2
 8008352:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2202      	movs	r2, #2
 8008362:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008376:	4618      	mov	r0, r3
 8008378:	f000 fe42 	bl	8009000 <free>
  pdev->pClassData = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d03f      	beq.n	800843e <USBD_DFU_Setup+0xae>
 80083be:	2b20      	cmp	r3, #32
 80083c0:	f040 80c3 	bne.w	800854a <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b06      	cmp	r3, #6
 80083ca:	d830      	bhi.n	800842e <USBD_DFU_Setup+0x9e>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBD_DFU_Setup+0x44>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008425 	.word	0x08008425
 80083d8:	080083f1 	.word	0x080083f1
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	08008405 	.word	0x08008405
 80083e4:	0800840d 	.word	0x0800840d
 80083e8:	08008415 	.word	0x08008415
 80083ec:	0800841d 	.word	0x0800841d
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fa62 	bl	80088bc <DFU_Download>
      break;
 80083f8:	e020      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 80083fa:	6839      	ldr	r1, [r7, #0]
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fac7 	bl	8008990 <DFU_Upload>
      break;
 8008402:	e01b      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fb9b 	bl	8008b40 <DFU_GetStatus>
      break;
 800840a:	e017      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fc49 	bl	8008ca4 <DFU_ClearStatus>
      break;
 8008412:	e013      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fc95 	bl	8008d44 <DFU_GetState>
      break;
 800841a:	e00f      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fca5 	bl	8008d6c <DFU_Abort>
      break;
 8008422:	e00b      	b.n	800843c <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9e8 	bl	80087fc <DFU_Detach>
      break;
 800842c:	e006      	b.n	800843c <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7ff fe93 	bl	800815c <USBD_CtlError>
      ret = USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	77fb      	strb	r3, [r7, #31]
      break;
 800843a:	bf00      	nop
    }
    break;
 800843c:	e08c      	b.n	8008558 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	2b0b      	cmp	r3, #11
 8008444:	d878      	bhi.n	8008538 <USBD_DFU_Setup+0x1a8>
 8008446:	a201      	add	r2, pc, #4	; (adr r2, 800844c <USBD_DFU_Setup+0xbc>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	0800847d 	.word	0x0800847d
 8008450:	08008547 	.word	0x08008547
 8008454:	08008539 	.word	0x08008539
 8008458:	08008539 	.word	0x08008539
 800845c:	08008539 	.word	0x08008539
 8008460:	08008539 	.word	0x08008539
 8008464:	080084a5 	.word	0x080084a5
 8008468:	08008539 	.word	0x08008539
 800846c:	08008539 	.word	0x08008539
 8008470:	08008539 	.word	0x08008539
 8008474:	080084cf 	.word	0x080084cf
 8008478:	080084f9 	.word	0x080084f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008482:	2b03      	cmp	r3, #3
 8008484:	d107      	bne.n	8008496 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008486:	f107 030e 	add.w	r3, r7, #14
 800848a:	2202      	movs	r2, #2
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fd04 	bl	8008e9c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008494:	e058      	b.n	8008548 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8008496:	6839      	ldr	r1, [r7, #0]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff fe5f 	bl	800815c <USBD_CtlError>
        ret = USBD_FAIL;
 800849e:	2303      	movs	r3, #3
 80084a0:	77fb      	strb	r3, [r7, #31]
      break;
 80084a2:	e051      	b.n	8008548 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	0a1b      	lsrs	r3, r3, #8
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	2b21      	cmp	r3, #33	; 0x21
 80084ae:	d107      	bne.n	80084c0 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80084b0:	4b2c      	ldr	r3, [pc, #176]	; (8008564 <USBD_DFU_Setup+0x1d4>)
 80084b2:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	88db      	ldrh	r3, [r3, #6]
 80084b8:	2b09      	cmp	r3, #9
 80084ba:	bf28      	it	cs
 80084bc:	2309      	movcs	r3, #9
 80084be:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084c0:	8afb      	ldrh	r3, [r7, #22]
 80084c2:	461a      	mov	r2, r3
 80084c4:	69b9      	ldr	r1, [r7, #24]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fce8 	bl	8008e9c <USBD_CtlSendData>
      break;
 80084cc:	e03c      	b.n	8008548 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d108      	bne.n	80084ea <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80084de:	2201      	movs	r2, #1
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fcda 	bl	8008e9c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084e8:	e02e      	b.n	8008548 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff fe35 	bl	800815c <USBD_CtlError>
        ret = USBD_FAIL;
 80084f2:	2303      	movs	r3, #3
 80084f4:	77fb      	strb	r3, [r7, #31]
      break;
 80084f6:	e027      	b.n	8008548 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	885b      	ldrh	r3, [r3, #2]
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d113      	bne.n	800852a <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008508:	2b03      	cmp	r3, #3
 800850a:	d107      	bne.n	800851c <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	885b      	ldrh	r3, [r3, #2]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	461a      	mov	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800851a:	e015      	b.n	8008548 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fe1c 	bl	800815c <USBD_CtlError>
          ret = USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	77fb      	strb	r3, [r7, #31]
      break;
 8008528:	e00e      	b.n	8008548 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff fe15 	bl	800815c <USBD_CtlError>
        ret = USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	77fb      	strb	r3, [r7, #31]
      break;
 8008536:	e007      	b.n	8008548 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fe0e 	bl	800815c <USBD_CtlError>
      ret = USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	77fb      	strb	r3, [r7, #31]
      break;
 8008544:	e000      	b.n	8008548 <USBD_DFU_Setup+0x1b8>
      break;
 8008546:	bf00      	nop
    }
    break;
 8008548:	e006      	b.n	8008558 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fe05 	bl	800815c <USBD_CtlError>
    ret = USBD_FAIL;
 8008552:	2303      	movs	r3, #3
 8008554:	77fb      	strb	r3, [r7, #31]
    break;
 8008556:	bf00      	nop
  }

  return (uint8_t)ret;
 8008558:	7ffb      	ldrb	r3, [r7, #31]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	200000f6 	.word	0x200000f6

08008568 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	221b      	movs	r2, #27
 8008574:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008576:	4b03      	ldr	r3, [pc, #12]	; (8008584 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	200000e4 	.word	0x200000e4

08008588 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	4618      	mov	r0, r3
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ae:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b6:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80085be:	2b04      	cmp	r3, #4
 80085c0:	f040 80bc 	bne.w	800873c <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d17a      	bne.n	80086c4 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	f000 8092 	beq.w	80086fe <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80085e0:	2b05      	cmp	r3, #5
 80085e2:	d15c      	bne.n	800869e <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b21      	cmp	r3, #33	; 0x21
 80085ea:	d124      	bne.n	8008636 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	461a      	mov	r2, r3
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	789b      	ldrb	r3, [r3, #2]
 8008602:	021b      	lsls	r3, r3, #8
 8008604:	441a      	add	r2, r3
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	78db      	ldrb	r3, [r3, #3]
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	441a      	add	r2, r3
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	791b      	ldrb	r3, [r3, #4]
 800862a:	061b      	lsls	r3, r3, #24
 800862c:	441a      	add	r2, r3
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008634:	e063      	b.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b41      	cmp	r3, #65	; 0x41
 800863c:	d15f      	bne.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	461a      	mov	r2, r3
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	789b      	ldrb	r3, [r3, #2]
 8008654:	021b      	lsls	r3, r3, #8
 8008656:	441a      	add	r2, r3
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	78db      	ldrb	r3, [r3, #3]
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	441a      	add	r2, r3
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	791b      	ldrb	r3, [r3, #4]
 800867c:	061b      	lsls	r3, r3, #24
 800867e:	441a      	add	r2, r3
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d031      	beq.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 800869a:	2303      	movs	r3, #3
 800869c:	e057      	b.n	800874e <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80086b2:	2301      	movs	r3, #1
 80086b4:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80086b6:	f107 030c 	add.w	r3, r7, #12
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff fd4d 	bl	800815c <USBD_CtlError>
 80086c2:	e01c      	b.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d917      	bls.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80086d4:	4b20      	ldr	r3, [pc, #128]	; (8008758 <USBD_DFU_EP0_TxReady+0x1b8>)
 80086d6:	4413      	add	r3, r2
 80086d8:	029a      	lsls	r2, r3, #10
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80086e0:	4413      	add	r3, r2
 80086e2:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	69f8      	ldr	r0, [r7, #28]
 80086ea:	6979      	ldr	r1, [r7, #20]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80086f2:	4798      	blx	r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e027      	b.n	800874e <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	2200      	movs	r2, #0
 8008702:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	2203      	movs	r2, #3
 8008712:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800873a:	e007      	b.n	800874c <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008742:	2b07      	cmp	r3, #7
 8008744:	d102      	bne.n	800874c <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fb5e 	bl	8008e08 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	003ffffe 	.word	0x003ffffe

0800875c <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
	...

08008774 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	220a      	movs	r2, #10
 8008780:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008782:	4b03      	ldr	r3, [pc, #12]	; (8008790 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	20000100 	.word	0x20000100

08008794 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	460b      	mov	r3, r1
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087a8:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b06      	cmp	r3, #6
 80087ae:	d808      	bhi.n	80087c2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	4905      	ldr	r1, [pc, #20]	; (80087cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fce0 	bl	800817e <USBD_GetString>
    return USBD_StrDesc;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80087c0:	e000      	b.n	80087c4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80087c2:	2300      	movs	r3, #0
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000194 	.word	0x20000194

080087d0 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e004      	b.n	80087ee <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800880c:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008814:	2b02      	cmp	r3, #2
 8008816:	d013      	beq.n	8008840 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800881e:	2b03      	cmp	r3, #3
 8008820:	d00e      	beq.n	8008840 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008828:	2b05      	cmp	r3, #5
 800882a:	d009      	beq.n	8008840 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008832:	2b06      	cmp	r3, #6
 8008834:	d004      	beq.n	8008840 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800883c:	2b09      	cmp	r3, #9
 800883e:	d125      	bne.n	800888c <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <DFU_Detach+0xbc>)
 800888e:	7d5b      	ldrb	r3, [r3, #21]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fe fc4c 	bl	8007136 <USBD_Stop>
    (void)USBD_Start(pdev);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fe fc3d 	bl	800711e <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 80088a4:	e004      	b.n	80088b0 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f9 fae8 	bl	8001e80 <HAL_Delay>
}
 80088b0:	bf00      	nop
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200000e4 	.word	0x200000e4

080088bc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	88db      	ldrh	r3, [r3, #6]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d02d      	beq.n	8008932 <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d004      	beq.n	80088ea <DFU_Download+0x2e>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d11e      	bne.n	8008928 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	885b      	ldrh	r3, [r3, #2]
 80088ee:	461a      	mov	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	88db      	ldrh	r3, [r3, #6]
 80088fa:	461a      	mov	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2203      	movs	r2, #3
 8008906:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800891e:	461a      	mov	r2, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fae7 	bl	8008ef4 <USBD_CtlPrepareRx>
 8008926:	e02e      	b.n	8008986 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fc16 	bl	800815c <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8008930:	e029      	b.n	8008986 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008938:	2b05      	cmp	r3, #5
 800893a:	d004      	beq.n	8008946 <DFU_Download+0x8a>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008942:	2b02      	cmp	r3, #2
 8008944:	d11a      	bne.n	800897c <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2206      	movs	r2, #6
 8008952:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800897a:	e004      	b.n	8008986 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fbec 	bl	800815c <USBD_CtlError>
}
 8008984:	e7ff      	b.n	8008986 <DFU_Download+0xca>
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a0:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a8:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	88db      	ldrh	r3, [r3, #6]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80a9 	beq.w	8008b06 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d005      	beq.n	80089ca <DFU_Upload+0x3a>
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80089c4:	2b09      	cmp	r3, #9
 80089c6:	f040 8091 	bne.w	8008aec <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	885b      	ldrh	r3, [r3, #2]
 80089ce:	461a      	mov	r2, r3
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	88db      	ldrh	r3, [r3, #6]
 80089da:	461a      	mov	r2, r3
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d12c      	bne.n	8008a46 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d901      	bls.n	80089fa <DFU_Upload+0x6a>
 80089f6:	2202      	movs	r2, #2
 80089f8:	e000      	b.n	80089fc <DFU_Upload+0x6c>
 80089fa:	2209      	movs	r2, #9
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2221      	movs	r2, #33	; 0x21
 8008a30:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2241      	movs	r2, #65	; 0x41
 8008a36:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2203      	movs	r2, #3
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa2c 	bl	8008e9c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008a44:	e076      	b.n	8008b34 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d932      	bls.n	8008ab6 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	2209      	movs	r2, #9
 8008a54:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008a82:	4b2e      	ldr	r3, [pc, #184]	; (8008b3c <DFU_Upload+0x1ac>)
 8008a84:	4413      	add	r3, r2
 8008a86:	029a      	lsls	r2, r3, #10
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008a8e:	4413      	add	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8008aa0:	4798      	blx	r3
 8008aa2:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aaa:	461a      	mov	r2, r3
 8008aac:	68b9      	ldr	r1, [r7, #8]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f9f4 	bl	8008e9c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008ab4:	e03e      	b.n	8008b34 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	220f      	movs	r2, #15
 8008aba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff fb39 	bl	800815c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008aea:	e023      	b.n	8008b34 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff fb2c 	bl	800815c <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8008b04:	e016      	b.n	8008b34 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2202      	movs	r2, #2
 8008b0a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8008b32:	e7ff      	b.n	8008b34 <DFU_Upload+0x1a4>
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	003ffffe 	.word	0x003ffffe

08008b40 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b4e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b56:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d002      	beq.n	8008b68 <DFU_GetStatus+0x28>
 8008b62:	2b06      	cmp	r3, #6
 8008b64:	d051      	beq.n	8008c0a <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 8008b66:	e08e      	b.n	8008c86 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d034      	beq.n	8008bdc <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2204      	movs	r2, #4
 8008b76:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10e      	bne.n	8008bc6 <DFU_GetStatus+0x86>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b41      	cmp	r3, #65	; 0x41
 8008bae:	d10a      	bne.n	8008bc6 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4798      	blx	r3
    break;
 8008bc4:	e05f      	b.n	8008c86 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	4798      	blx	r3
    break;
 8008bda:	e054      	b.n	8008c86 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2205      	movs	r2, #5
 8008be0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8008c08:	e03d      	b.n	8008c86 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d116      	bne.n	8008c42 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2207      	movs	r2, #7
 8008c18:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8008c40:	e020      	b.n	8008c84 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d11b      	bne.n	8008c84 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008c4c:	4b14      	ldr	r3, [pc, #80]	; (8008ca0 <DFU_GetStatus+0x160>)
 8008c4e:	7d1b      	ldrb	r3, [r3, #20]
 8008c50:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d015      	beq.n	8008c84 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8008c84:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8008c8c:	2206      	movs	r2, #6
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f903 	bl	8008e9c <USBD_CtlSendData>
}
 8008c96:	bf00      	nop
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200000e4 	.word	0x200000e4

08008ca4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cb2:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008cba:	2b0a      	cmp	r3, #10
 8008cbc:	d11e      	bne.n	8008cfc <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 8008cfa:	e01d      	b.n	8008d38 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	220a      	movs	r2, #10
 8008d00:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	220e      	movs	r2, #14
 8008d08:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f89c 	bl	8008e9c <USBD_CtlSendData>
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d7a:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d013      	beq.n	8008dae <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d00e      	beq.n	8008dae <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d009      	beq.n	8008dae <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008da0:	2b06      	cmp	r3, #6
 8008da2:	d004      	beq.n	8008dae <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008daa:	2b09      	cmp	r3, #9
 8008dac:	d125      	bne.n	8008dfa <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2202      	movs	r2, #2
 8008db2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e16:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008e20:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <DFU_Leave+0x90>)
 8008e22:	7d1b      	ldrb	r3, [r3, #20]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d016      	beq.n	8008e5a <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2206      	movs	r2, #6
 8008e30:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8008e58:	e01a      	b.n	8008e90 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe f955 	bl	8007136 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008e8c:	f7ff f9d8 	bl	8008240 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200000e4 	.word	0x200000e4

08008e9c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f7f8 fe63 	bl	8001b8e <USBD_LL_Transmit>

  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7f8 fe52 	bl	8001b8e <USBD_LL_Transmit>

  return USBD_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2203      	movs	r2, #3
 8008f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7f8 fe56 	bl	8001bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7f8 fe45 	bl	8001bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f60:	2300      	movs	r3, #0
 8008f62:	2200      	movs	r2, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f8 fe11 	bl	8001b8e <USBD_LL_Transmit>

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2205      	movs	r2, #5
 8008f82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f86:	2300      	movs	r3, #0
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7f8 fe1f 	bl	8001bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <__errno>:
 8008f9c:	4b01      	ldr	r3, [pc, #4]	; (8008fa4 <__errno+0x8>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	2000010c 	.word	0x2000010c

08008fa8 <__libc_init_array>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	4e0d      	ldr	r6, [pc, #52]	; (8008fe0 <__libc_init_array+0x38>)
 8008fac:	4c0d      	ldr	r4, [pc, #52]	; (8008fe4 <__libc_init_array+0x3c>)
 8008fae:	1ba4      	subs	r4, r4, r6
 8008fb0:	10a4      	asrs	r4, r4, #2
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	42a5      	cmp	r5, r4
 8008fb6:	d109      	bne.n	8008fcc <__libc_init_array+0x24>
 8008fb8:	4e0b      	ldr	r6, [pc, #44]	; (8008fe8 <__libc_init_array+0x40>)
 8008fba:	4c0c      	ldr	r4, [pc, #48]	; (8008fec <__libc_init_array+0x44>)
 8008fbc:	f000 ff78 	bl	8009eb0 <_init>
 8008fc0:	1ba4      	subs	r4, r4, r6
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	2500      	movs	r5, #0
 8008fc6:	42a5      	cmp	r5, r4
 8008fc8:	d105      	bne.n	8008fd6 <__libc_init_array+0x2e>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fd0:	4798      	blx	r3
 8008fd2:	3501      	adds	r5, #1
 8008fd4:	e7ee      	b.n	8008fb4 <__libc_init_array+0xc>
 8008fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008fda:	4798      	blx	r3
 8008fdc:	3501      	adds	r5, #1
 8008fde:	e7f2      	b.n	8008fc6 <__libc_init_array+0x1e>
 8008fe0:	0800a3e0 	.word	0x0800a3e0
 8008fe4:	0800a3e0 	.word	0x0800a3e0
 8008fe8:	0800a3e0 	.word	0x0800a3e0
 8008fec:	0800a3e4 	.word	0x0800a3e4

08008ff0 <malloc>:
 8008ff0:	4b02      	ldr	r3, [pc, #8]	; (8008ffc <malloc+0xc>)
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	6818      	ldr	r0, [r3, #0]
 8008ff6:	f000 b861 	b.w	80090bc <_malloc_r>
 8008ffa:	bf00      	nop
 8008ffc:	2000010c 	.word	0x2000010c

08009000 <free>:
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <free+0xc>)
 8009002:	4601      	mov	r1, r0
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f000 b80b 	b.w	8009020 <_free_r>
 800900a:	bf00      	nop
 800900c:	2000010c 	.word	0x2000010c

08009010 <memset>:
 8009010:	4402      	add	r2, r0
 8009012:	4603      	mov	r3, r0
 8009014:	4293      	cmp	r3, r2
 8009016:	d100      	bne.n	800901a <memset+0xa>
 8009018:	4770      	bx	lr
 800901a:	f803 1b01 	strb.w	r1, [r3], #1
 800901e:	e7f9      	b.n	8009014 <memset+0x4>

08009020 <_free_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4605      	mov	r5, r0
 8009024:	2900      	cmp	r1, #0
 8009026:	d045      	beq.n	80090b4 <_free_r+0x94>
 8009028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902c:	1f0c      	subs	r4, r1, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfb8      	it	lt
 8009032:	18e4      	addlt	r4, r4, r3
 8009034:	f000 fbc6 	bl	80097c4 <__malloc_lock>
 8009038:	4a1f      	ldr	r2, [pc, #124]	; (80090b8 <_free_r+0x98>)
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	4610      	mov	r0, r2
 800903e:	b933      	cbnz	r3, 800904e <_free_r+0x2e>
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	6014      	str	r4, [r2, #0]
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800904a:	f000 bbbc 	b.w	80097c6 <__malloc_unlock>
 800904e:	42a3      	cmp	r3, r4
 8009050:	d90c      	bls.n	800906c <_free_r+0x4c>
 8009052:	6821      	ldr	r1, [r4, #0]
 8009054:	1862      	adds	r2, r4, r1
 8009056:	4293      	cmp	r3, r2
 8009058:	bf04      	itt	eq
 800905a:	681a      	ldreq	r2, [r3, #0]
 800905c:	685b      	ldreq	r3, [r3, #4]
 800905e:	6063      	str	r3, [r4, #4]
 8009060:	bf04      	itt	eq
 8009062:	1852      	addeq	r2, r2, r1
 8009064:	6022      	streq	r2, [r4, #0]
 8009066:	6004      	str	r4, [r0, #0]
 8009068:	e7ec      	b.n	8009044 <_free_r+0x24>
 800906a:	4613      	mov	r3, r2
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	b10a      	cbz	r2, 8009074 <_free_r+0x54>
 8009070:	42a2      	cmp	r2, r4
 8009072:	d9fa      	bls.n	800906a <_free_r+0x4a>
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	1858      	adds	r0, r3, r1
 8009078:	42a0      	cmp	r0, r4
 800907a:	d10b      	bne.n	8009094 <_free_r+0x74>
 800907c:	6820      	ldr	r0, [r4, #0]
 800907e:	4401      	add	r1, r0
 8009080:	1858      	adds	r0, r3, r1
 8009082:	4282      	cmp	r2, r0
 8009084:	6019      	str	r1, [r3, #0]
 8009086:	d1dd      	bne.n	8009044 <_free_r+0x24>
 8009088:	6810      	ldr	r0, [r2, #0]
 800908a:	6852      	ldr	r2, [r2, #4]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	4401      	add	r1, r0
 8009090:	6019      	str	r1, [r3, #0]
 8009092:	e7d7      	b.n	8009044 <_free_r+0x24>
 8009094:	d902      	bls.n	800909c <_free_r+0x7c>
 8009096:	230c      	movs	r3, #12
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	e7d3      	b.n	8009044 <_free_r+0x24>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	1821      	adds	r1, r4, r0
 80090a0:	428a      	cmp	r2, r1
 80090a2:	bf04      	itt	eq
 80090a4:	6811      	ldreq	r1, [r2, #0]
 80090a6:	6852      	ldreq	r2, [r2, #4]
 80090a8:	6062      	str	r2, [r4, #4]
 80090aa:	bf04      	itt	eq
 80090ac:	1809      	addeq	r1, r1, r0
 80090ae:	6021      	streq	r1, [r4, #0]
 80090b0:	605c      	str	r4, [r3, #4]
 80090b2:	e7c7      	b.n	8009044 <_free_r+0x24>
 80090b4:	bd38      	pop	{r3, r4, r5, pc}
 80090b6:	bf00      	nop
 80090b8:	20000294 	.word	0x20000294

080090bc <_malloc_r>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	1ccd      	adds	r5, r1, #3
 80090c0:	f025 0503 	bic.w	r5, r5, #3
 80090c4:	3508      	adds	r5, #8
 80090c6:	2d0c      	cmp	r5, #12
 80090c8:	bf38      	it	cc
 80090ca:	250c      	movcc	r5, #12
 80090cc:	2d00      	cmp	r5, #0
 80090ce:	4606      	mov	r6, r0
 80090d0:	db01      	blt.n	80090d6 <_malloc_r+0x1a>
 80090d2:	42a9      	cmp	r1, r5
 80090d4:	d903      	bls.n	80090de <_malloc_r+0x22>
 80090d6:	230c      	movs	r3, #12
 80090d8:	6033      	str	r3, [r6, #0]
 80090da:	2000      	movs	r0, #0
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
 80090de:	f000 fb71 	bl	80097c4 <__malloc_lock>
 80090e2:	4a21      	ldr	r2, [pc, #132]	; (8009168 <_malloc_r+0xac>)
 80090e4:	6814      	ldr	r4, [r2, #0]
 80090e6:	4621      	mov	r1, r4
 80090e8:	b991      	cbnz	r1, 8009110 <_malloc_r+0x54>
 80090ea:	4c20      	ldr	r4, [pc, #128]	; (800916c <_malloc_r+0xb0>)
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	b91b      	cbnz	r3, 80090f8 <_malloc_r+0x3c>
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f8b9 	bl	8009268 <_sbrk_r>
 80090f6:	6020      	str	r0, [r4, #0]
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f8b4 	bl	8009268 <_sbrk_r>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d124      	bne.n	800914e <_malloc_r+0x92>
 8009104:	230c      	movs	r3, #12
 8009106:	6033      	str	r3, [r6, #0]
 8009108:	4630      	mov	r0, r6
 800910a:	f000 fb5c 	bl	80097c6 <__malloc_unlock>
 800910e:	e7e4      	b.n	80090da <_malloc_r+0x1e>
 8009110:	680b      	ldr	r3, [r1, #0]
 8009112:	1b5b      	subs	r3, r3, r5
 8009114:	d418      	bmi.n	8009148 <_malloc_r+0x8c>
 8009116:	2b0b      	cmp	r3, #11
 8009118:	d90f      	bls.n	800913a <_malloc_r+0x7e>
 800911a:	600b      	str	r3, [r1, #0]
 800911c:	50cd      	str	r5, [r1, r3]
 800911e:	18cc      	adds	r4, r1, r3
 8009120:	4630      	mov	r0, r6
 8009122:	f000 fb50 	bl	80097c6 <__malloc_unlock>
 8009126:	f104 000b 	add.w	r0, r4, #11
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	f020 0007 	bic.w	r0, r0, #7
 8009130:	1ac3      	subs	r3, r0, r3
 8009132:	d0d3      	beq.n	80090dc <_malloc_r+0x20>
 8009134:	425a      	negs	r2, r3
 8009136:	50e2      	str	r2, [r4, r3]
 8009138:	e7d0      	b.n	80090dc <_malloc_r+0x20>
 800913a:	428c      	cmp	r4, r1
 800913c:	684b      	ldr	r3, [r1, #4]
 800913e:	bf16      	itet	ne
 8009140:	6063      	strne	r3, [r4, #4]
 8009142:	6013      	streq	r3, [r2, #0]
 8009144:	460c      	movne	r4, r1
 8009146:	e7eb      	b.n	8009120 <_malloc_r+0x64>
 8009148:	460c      	mov	r4, r1
 800914a:	6849      	ldr	r1, [r1, #4]
 800914c:	e7cc      	b.n	80090e8 <_malloc_r+0x2c>
 800914e:	1cc4      	adds	r4, r0, #3
 8009150:	f024 0403 	bic.w	r4, r4, #3
 8009154:	42a0      	cmp	r0, r4
 8009156:	d005      	beq.n	8009164 <_malloc_r+0xa8>
 8009158:	1a21      	subs	r1, r4, r0
 800915a:	4630      	mov	r0, r6
 800915c:	f000 f884 	bl	8009268 <_sbrk_r>
 8009160:	3001      	adds	r0, #1
 8009162:	d0cf      	beq.n	8009104 <_malloc_r+0x48>
 8009164:	6025      	str	r5, [r4, #0]
 8009166:	e7db      	b.n	8009120 <_malloc_r+0x64>
 8009168:	20000294 	.word	0x20000294
 800916c:	20000298 	.word	0x20000298

08009170 <iprintf>:
 8009170:	b40f      	push	{r0, r1, r2, r3}
 8009172:	4b0a      	ldr	r3, [pc, #40]	; (800919c <iprintf+0x2c>)
 8009174:	b513      	push	{r0, r1, r4, lr}
 8009176:	681c      	ldr	r4, [r3, #0]
 8009178:	b124      	cbz	r4, 8009184 <iprintf+0x14>
 800917a:	69a3      	ldr	r3, [r4, #24]
 800917c:	b913      	cbnz	r3, 8009184 <iprintf+0x14>
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fa32 	bl	80095e8 <__sinit>
 8009184:	ab05      	add	r3, sp, #20
 8009186:	9a04      	ldr	r2, [sp, #16]
 8009188:	68a1      	ldr	r1, [r4, #8]
 800918a:	9301      	str	r3, [sp, #4]
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fb45 	bl	800981c <_vfiprintf_r>
 8009192:	b002      	add	sp, #8
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	b004      	add	sp, #16
 800919a:	4770      	bx	lr
 800919c:	2000010c 	.word	0x2000010c

080091a0 <_puts_r>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	460e      	mov	r6, r1
 80091a4:	4605      	mov	r5, r0
 80091a6:	b118      	cbz	r0, 80091b0 <_puts_r+0x10>
 80091a8:	6983      	ldr	r3, [r0, #24]
 80091aa:	b90b      	cbnz	r3, 80091b0 <_puts_r+0x10>
 80091ac:	f000 fa1c 	bl	80095e8 <__sinit>
 80091b0:	69ab      	ldr	r3, [r5, #24]
 80091b2:	68ac      	ldr	r4, [r5, #8]
 80091b4:	b913      	cbnz	r3, 80091bc <_puts_r+0x1c>
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 fa16 	bl	80095e8 <__sinit>
 80091bc:	4b23      	ldr	r3, [pc, #140]	; (800924c <_puts_r+0xac>)
 80091be:	429c      	cmp	r4, r3
 80091c0:	d117      	bne.n	80091f2 <_puts_r+0x52>
 80091c2:	686c      	ldr	r4, [r5, #4]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	071b      	lsls	r3, r3, #28
 80091c8:	d51d      	bpl.n	8009206 <_puts_r+0x66>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	b1db      	cbz	r3, 8009206 <_puts_r+0x66>
 80091ce:	3e01      	subs	r6, #1
 80091d0:	68a3      	ldr	r3, [r4, #8]
 80091d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091d6:	3b01      	subs	r3, #1
 80091d8:	60a3      	str	r3, [r4, #8]
 80091da:	b9e9      	cbnz	r1, 8009218 <_puts_r+0x78>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da2e      	bge.n	800923e <_puts_r+0x9e>
 80091e0:	4622      	mov	r2, r4
 80091e2:	210a      	movs	r1, #10
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 f84f 	bl	8009288 <__swbuf_r>
 80091ea:	3001      	adds	r0, #1
 80091ec:	d011      	beq.n	8009212 <_puts_r+0x72>
 80091ee:	200a      	movs	r0, #10
 80091f0:	e011      	b.n	8009216 <_puts_r+0x76>
 80091f2:	4b17      	ldr	r3, [pc, #92]	; (8009250 <_puts_r+0xb0>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d101      	bne.n	80091fc <_puts_r+0x5c>
 80091f8:	68ac      	ldr	r4, [r5, #8]
 80091fa:	e7e3      	b.n	80091c4 <_puts_r+0x24>
 80091fc:	4b15      	ldr	r3, [pc, #84]	; (8009254 <_puts_r+0xb4>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	bf08      	it	eq
 8009202:	68ec      	ldreq	r4, [r5, #12]
 8009204:	e7de      	b.n	80091c4 <_puts_r+0x24>
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f000 f88f 	bl	800932c <__swsetup_r>
 800920e:	2800      	cmp	r0, #0
 8009210:	d0dd      	beq.n	80091ce <_puts_r+0x2e>
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	2b00      	cmp	r3, #0
 800921a:	da04      	bge.n	8009226 <_puts_r+0x86>
 800921c:	69a2      	ldr	r2, [r4, #24]
 800921e:	429a      	cmp	r2, r3
 8009220:	dc06      	bgt.n	8009230 <_puts_r+0x90>
 8009222:	290a      	cmp	r1, #10
 8009224:	d004      	beq.n	8009230 <_puts_r+0x90>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	7019      	strb	r1, [r3, #0]
 800922e:	e7cf      	b.n	80091d0 <_puts_r+0x30>
 8009230:	4622      	mov	r2, r4
 8009232:	4628      	mov	r0, r5
 8009234:	f000 f828 	bl	8009288 <__swbuf_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d1c9      	bne.n	80091d0 <_puts_r+0x30>
 800923c:	e7e9      	b.n	8009212 <_puts_r+0x72>
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	200a      	movs	r0, #10
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	6022      	str	r2, [r4, #0]
 8009246:	7018      	strb	r0, [r3, #0]
 8009248:	e7e5      	b.n	8009216 <_puts_r+0x76>
 800924a:	bf00      	nop
 800924c:	0800a364 	.word	0x0800a364
 8009250:	0800a384 	.word	0x0800a384
 8009254:	0800a344 	.word	0x0800a344

08009258 <puts>:
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <puts+0xc>)
 800925a:	4601      	mov	r1, r0
 800925c:	6818      	ldr	r0, [r3, #0]
 800925e:	f7ff bf9f 	b.w	80091a0 <_puts_r>
 8009262:	bf00      	nop
 8009264:	2000010c 	.word	0x2000010c

08009268 <_sbrk_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4c06      	ldr	r4, [pc, #24]	; (8009284 <_sbrk_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4605      	mov	r5, r0
 8009270:	4608      	mov	r0, r1
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	f7f7 feb0 	bl	8000fd8 <_sbrk>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_sbrk_r+0x1a>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	b103      	cbz	r3, 8009282 <_sbrk_r+0x1a>
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20000be0 	.word	0x20000be0

08009288 <__swbuf_r>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	460e      	mov	r6, r1
 800928c:	4614      	mov	r4, r2
 800928e:	4605      	mov	r5, r0
 8009290:	b118      	cbz	r0, 800929a <__swbuf_r+0x12>
 8009292:	6983      	ldr	r3, [r0, #24]
 8009294:	b90b      	cbnz	r3, 800929a <__swbuf_r+0x12>
 8009296:	f000 f9a7 	bl	80095e8 <__sinit>
 800929a:	4b21      	ldr	r3, [pc, #132]	; (8009320 <__swbuf_r+0x98>)
 800929c:	429c      	cmp	r4, r3
 800929e:	d12a      	bne.n	80092f6 <__swbuf_r+0x6e>
 80092a0:	686c      	ldr	r4, [r5, #4]
 80092a2:	69a3      	ldr	r3, [r4, #24]
 80092a4:	60a3      	str	r3, [r4, #8]
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	071a      	lsls	r2, r3, #28
 80092aa:	d52e      	bpl.n	800930a <__swbuf_r+0x82>
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	b363      	cbz	r3, 800930a <__swbuf_r+0x82>
 80092b0:	6923      	ldr	r3, [r4, #16]
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	1ac0      	subs	r0, r0, r3
 80092b6:	6963      	ldr	r3, [r4, #20]
 80092b8:	b2f6      	uxtb	r6, r6
 80092ba:	4283      	cmp	r3, r0
 80092bc:	4637      	mov	r7, r6
 80092be:	dc04      	bgt.n	80092ca <__swbuf_r+0x42>
 80092c0:	4621      	mov	r1, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f926 	bl	8009514 <_fflush_r>
 80092c8:	bb28      	cbnz	r0, 8009316 <__swbuf_r+0x8e>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	60a3      	str	r3, [r4, #8]
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	701e      	strb	r6, [r3, #0]
 80092d8:	6963      	ldr	r3, [r4, #20]
 80092da:	3001      	adds	r0, #1
 80092dc:	4283      	cmp	r3, r0
 80092de:	d004      	beq.n	80092ea <__swbuf_r+0x62>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	07db      	lsls	r3, r3, #31
 80092e4:	d519      	bpl.n	800931a <__swbuf_r+0x92>
 80092e6:	2e0a      	cmp	r6, #10
 80092e8:	d117      	bne.n	800931a <__swbuf_r+0x92>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 f911 	bl	8009514 <_fflush_r>
 80092f2:	b190      	cbz	r0, 800931a <__swbuf_r+0x92>
 80092f4:	e00f      	b.n	8009316 <__swbuf_r+0x8e>
 80092f6:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <__swbuf_r+0x9c>)
 80092f8:	429c      	cmp	r4, r3
 80092fa:	d101      	bne.n	8009300 <__swbuf_r+0x78>
 80092fc:	68ac      	ldr	r4, [r5, #8]
 80092fe:	e7d0      	b.n	80092a2 <__swbuf_r+0x1a>
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <__swbuf_r+0xa0>)
 8009302:	429c      	cmp	r4, r3
 8009304:	bf08      	it	eq
 8009306:	68ec      	ldreq	r4, [r5, #12]
 8009308:	e7cb      	b.n	80092a2 <__swbuf_r+0x1a>
 800930a:	4621      	mov	r1, r4
 800930c:	4628      	mov	r0, r5
 800930e:	f000 f80d 	bl	800932c <__swsetup_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	d0cc      	beq.n	80092b0 <__swbuf_r+0x28>
 8009316:	f04f 37ff 	mov.w	r7, #4294967295
 800931a:	4638      	mov	r0, r7
 800931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800931e:	bf00      	nop
 8009320:	0800a364 	.word	0x0800a364
 8009324:	0800a384 	.word	0x0800a384
 8009328:	0800a344 	.word	0x0800a344

0800932c <__swsetup_r>:
 800932c:	4b32      	ldr	r3, [pc, #200]	; (80093f8 <__swsetup_r+0xcc>)
 800932e:	b570      	push	{r4, r5, r6, lr}
 8009330:	681d      	ldr	r5, [r3, #0]
 8009332:	4606      	mov	r6, r0
 8009334:	460c      	mov	r4, r1
 8009336:	b125      	cbz	r5, 8009342 <__swsetup_r+0x16>
 8009338:	69ab      	ldr	r3, [r5, #24]
 800933a:	b913      	cbnz	r3, 8009342 <__swsetup_r+0x16>
 800933c:	4628      	mov	r0, r5
 800933e:	f000 f953 	bl	80095e8 <__sinit>
 8009342:	4b2e      	ldr	r3, [pc, #184]	; (80093fc <__swsetup_r+0xd0>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d10f      	bne.n	8009368 <__swsetup_r+0x3c>
 8009348:	686c      	ldr	r4, [r5, #4]
 800934a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934e:	b29a      	uxth	r2, r3
 8009350:	0715      	lsls	r5, r2, #28
 8009352:	d42c      	bmi.n	80093ae <__swsetup_r+0x82>
 8009354:	06d0      	lsls	r0, r2, #27
 8009356:	d411      	bmi.n	800937c <__swsetup_r+0x50>
 8009358:	2209      	movs	r2, #9
 800935a:	6032      	str	r2, [r6, #0]
 800935c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009360:	81a3      	strh	r3, [r4, #12]
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	e03e      	b.n	80093e6 <__swsetup_r+0xba>
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <__swsetup_r+0xd4>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d101      	bne.n	8009372 <__swsetup_r+0x46>
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	e7eb      	b.n	800934a <__swsetup_r+0x1e>
 8009372:	4b24      	ldr	r3, [pc, #144]	; (8009404 <__swsetup_r+0xd8>)
 8009374:	429c      	cmp	r4, r3
 8009376:	bf08      	it	eq
 8009378:	68ec      	ldreq	r4, [r5, #12]
 800937a:	e7e6      	b.n	800934a <__swsetup_r+0x1e>
 800937c:	0751      	lsls	r1, r2, #29
 800937e:	d512      	bpl.n	80093a6 <__swsetup_r+0x7a>
 8009380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009382:	b141      	cbz	r1, 8009396 <__swsetup_r+0x6a>
 8009384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009388:	4299      	cmp	r1, r3
 800938a:	d002      	beq.n	8009392 <__swsetup_r+0x66>
 800938c:	4630      	mov	r0, r6
 800938e:	f7ff fe47 	bl	8009020 <_free_r>
 8009392:	2300      	movs	r3, #0
 8009394:	6363      	str	r3, [r4, #52]	; 0x34
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	2300      	movs	r3, #0
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	6023      	str	r3, [r4, #0]
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	f043 0308 	orr.w	r3, r3, #8
 80093ac:	81a3      	strh	r3, [r4, #12]
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	b94b      	cbnz	r3, 80093c6 <__swsetup_r+0x9a>
 80093b2:	89a3      	ldrh	r3, [r4, #12]
 80093b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093bc:	d003      	beq.n	80093c6 <__swsetup_r+0x9a>
 80093be:	4621      	mov	r1, r4
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 f9bf 	bl	8009744 <__smakebuf_r>
 80093c6:	89a2      	ldrh	r2, [r4, #12]
 80093c8:	f012 0301 	ands.w	r3, r2, #1
 80093cc:	d00c      	beq.n	80093e8 <__swsetup_r+0xbc>
 80093ce:	2300      	movs	r3, #0
 80093d0:	60a3      	str	r3, [r4, #8]
 80093d2:	6963      	ldr	r3, [r4, #20]
 80093d4:	425b      	negs	r3, r3
 80093d6:	61a3      	str	r3, [r4, #24]
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	b953      	cbnz	r3, 80093f2 <__swsetup_r+0xc6>
 80093dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80093e4:	d1ba      	bne.n	800935c <__swsetup_r+0x30>
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	0792      	lsls	r2, r2, #30
 80093ea:	bf58      	it	pl
 80093ec:	6963      	ldrpl	r3, [r4, #20]
 80093ee:	60a3      	str	r3, [r4, #8]
 80093f0:	e7f2      	b.n	80093d8 <__swsetup_r+0xac>
 80093f2:	2000      	movs	r0, #0
 80093f4:	e7f7      	b.n	80093e6 <__swsetup_r+0xba>
 80093f6:	bf00      	nop
 80093f8:	2000010c 	.word	0x2000010c
 80093fc:	0800a364 	.word	0x0800a364
 8009400:	0800a384 	.word	0x0800a384
 8009404:	0800a344 	.word	0x0800a344

08009408 <__sflush_r>:
 8009408:	898a      	ldrh	r2, [r1, #12]
 800940a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940e:	4605      	mov	r5, r0
 8009410:	0710      	lsls	r0, r2, #28
 8009412:	460c      	mov	r4, r1
 8009414:	d458      	bmi.n	80094c8 <__sflush_r+0xc0>
 8009416:	684b      	ldr	r3, [r1, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc05      	bgt.n	8009428 <__sflush_r+0x20>
 800941c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	dc02      	bgt.n	8009428 <__sflush_r+0x20>
 8009422:	2000      	movs	r0, #0
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800942a:	2e00      	cmp	r6, #0
 800942c:	d0f9      	beq.n	8009422 <__sflush_r+0x1a>
 800942e:	2300      	movs	r3, #0
 8009430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009434:	682f      	ldr	r7, [r5, #0]
 8009436:	6a21      	ldr	r1, [r4, #32]
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	d032      	beq.n	80094a2 <__sflush_r+0x9a>
 800943c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800943e:	89a3      	ldrh	r3, [r4, #12]
 8009440:	075a      	lsls	r2, r3, #29
 8009442:	d505      	bpl.n	8009450 <__sflush_r+0x48>
 8009444:	6863      	ldr	r3, [r4, #4]
 8009446:	1ac0      	subs	r0, r0, r3
 8009448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800944a:	b10b      	cbz	r3, 8009450 <__sflush_r+0x48>
 800944c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800944e:	1ac0      	subs	r0, r0, r3
 8009450:	2300      	movs	r3, #0
 8009452:	4602      	mov	r2, r0
 8009454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009456:	6a21      	ldr	r1, [r4, #32]
 8009458:	4628      	mov	r0, r5
 800945a:	47b0      	blx	r6
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	89a3      	ldrh	r3, [r4, #12]
 8009460:	d106      	bne.n	8009470 <__sflush_r+0x68>
 8009462:	6829      	ldr	r1, [r5, #0]
 8009464:	291d      	cmp	r1, #29
 8009466:	d848      	bhi.n	80094fa <__sflush_r+0xf2>
 8009468:	4a29      	ldr	r2, [pc, #164]	; (8009510 <__sflush_r+0x108>)
 800946a:	40ca      	lsrs	r2, r1
 800946c:	07d6      	lsls	r6, r2, #31
 800946e:	d544      	bpl.n	80094fa <__sflush_r+0xf2>
 8009470:	2200      	movs	r2, #0
 8009472:	6062      	str	r2, [r4, #4]
 8009474:	04d9      	lsls	r1, r3, #19
 8009476:	6922      	ldr	r2, [r4, #16]
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	d504      	bpl.n	8009486 <__sflush_r+0x7e>
 800947c:	1c42      	adds	r2, r0, #1
 800947e:	d101      	bne.n	8009484 <__sflush_r+0x7c>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b903      	cbnz	r3, 8009486 <__sflush_r+0x7e>
 8009484:	6560      	str	r0, [r4, #84]	; 0x54
 8009486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009488:	602f      	str	r7, [r5, #0]
 800948a:	2900      	cmp	r1, #0
 800948c:	d0c9      	beq.n	8009422 <__sflush_r+0x1a>
 800948e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009492:	4299      	cmp	r1, r3
 8009494:	d002      	beq.n	800949c <__sflush_r+0x94>
 8009496:	4628      	mov	r0, r5
 8009498:	f7ff fdc2 	bl	8009020 <_free_r>
 800949c:	2000      	movs	r0, #0
 800949e:	6360      	str	r0, [r4, #52]	; 0x34
 80094a0:	e7c0      	b.n	8009424 <__sflush_r+0x1c>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b0      	blx	r6
 80094a8:	1c41      	adds	r1, r0, #1
 80094aa:	d1c8      	bne.n	800943e <__sflush_r+0x36>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0c5      	beq.n	800943e <__sflush_r+0x36>
 80094b2:	2b1d      	cmp	r3, #29
 80094b4:	d001      	beq.n	80094ba <__sflush_r+0xb2>
 80094b6:	2b16      	cmp	r3, #22
 80094b8:	d101      	bne.n	80094be <__sflush_r+0xb6>
 80094ba:	602f      	str	r7, [r5, #0]
 80094bc:	e7b1      	b.n	8009422 <__sflush_r+0x1a>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	e7ad      	b.n	8009424 <__sflush_r+0x1c>
 80094c8:	690f      	ldr	r7, [r1, #16]
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	d0a9      	beq.n	8009422 <__sflush_r+0x1a>
 80094ce:	0793      	lsls	r3, r2, #30
 80094d0:	680e      	ldr	r6, [r1, #0]
 80094d2:	bf08      	it	eq
 80094d4:	694b      	ldreq	r3, [r1, #20]
 80094d6:	600f      	str	r7, [r1, #0]
 80094d8:	bf18      	it	ne
 80094da:	2300      	movne	r3, #0
 80094dc:	eba6 0807 	sub.w	r8, r6, r7
 80094e0:	608b      	str	r3, [r1, #8]
 80094e2:	f1b8 0f00 	cmp.w	r8, #0
 80094e6:	dd9c      	ble.n	8009422 <__sflush_r+0x1a>
 80094e8:	4643      	mov	r3, r8
 80094ea:	463a      	mov	r2, r7
 80094ec:	6a21      	ldr	r1, [r4, #32]
 80094ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b0      	blx	r6
 80094f4:	2800      	cmp	r0, #0
 80094f6:	dc06      	bgt.n	8009506 <__sflush_r+0xfe>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094fe:	81a3      	strh	r3, [r4, #12]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	e78e      	b.n	8009424 <__sflush_r+0x1c>
 8009506:	4407      	add	r7, r0
 8009508:	eba8 0800 	sub.w	r8, r8, r0
 800950c:	e7e9      	b.n	80094e2 <__sflush_r+0xda>
 800950e:	bf00      	nop
 8009510:	20400001 	.word	0x20400001

08009514 <_fflush_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	690b      	ldr	r3, [r1, #16]
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b1db      	cbz	r3, 8009556 <_fflush_r+0x42>
 800951e:	b118      	cbz	r0, 8009528 <_fflush_r+0x14>
 8009520:	6983      	ldr	r3, [r0, #24]
 8009522:	b90b      	cbnz	r3, 8009528 <_fflush_r+0x14>
 8009524:	f000 f860 	bl	80095e8 <__sinit>
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <_fflush_r+0x48>)
 800952a:	429c      	cmp	r4, r3
 800952c:	d109      	bne.n	8009542 <_fflush_r+0x2e>
 800952e:	686c      	ldr	r4, [r5, #4]
 8009530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009534:	b17b      	cbz	r3, 8009556 <_fflush_r+0x42>
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800953e:	f7ff bf63 	b.w	8009408 <__sflush_r>
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <_fflush_r+0x4c>)
 8009544:	429c      	cmp	r4, r3
 8009546:	d101      	bne.n	800954c <_fflush_r+0x38>
 8009548:	68ac      	ldr	r4, [r5, #8]
 800954a:	e7f1      	b.n	8009530 <_fflush_r+0x1c>
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <_fflush_r+0x50>)
 800954e:	429c      	cmp	r4, r3
 8009550:	bf08      	it	eq
 8009552:	68ec      	ldreq	r4, [r5, #12]
 8009554:	e7ec      	b.n	8009530 <_fflush_r+0x1c>
 8009556:	2000      	movs	r0, #0
 8009558:	bd38      	pop	{r3, r4, r5, pc}
 800955a:	bf00      	nop
 800955c:	0800a364 	.word	0x0800a364
 8009560:	0800a384 	.word	0x0800a384
 8009564:	0800a344 	.word	0x0800a344

08009568 <std>:
 8009568:	2300      	movs	r3, #0
 800956a:	b510      	push	{r4, lr}
 800956c:	4604      	mov	r4, r0
 800956e:	e9c0 3300 	strd	r3, r3, [r0]
 8009572:	6083      	str	r3, [r0, #8]
 8009574:	8181      	strh	r1, [r0, #12]
 8009576:	6643      	str	r3, [r0, #100]	; 0x64
 8009578:	81c2      	strh	r2, [r0, #14]
 800957a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800957e:	6183      	str	r3, [r0, #24]
 8009580:	4619      	mov	r1, r3
 8009582:	2208      	movs	r2, #8
 8009584:	305c      	adds	r0, #92	; 0x5c
 8009586:	f7ff fd43 	bl	8009010 <memset>
 800958a:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <std+0x38>)
 800958c:	6263      	str	r3, [r4, #36]	; 0x24
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <std+0x3c>)
 8009590:	62a3      	str	r3, [r4, #40]	; 0x28
 8009592:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <std+0x40>)
 8009594:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <std+0x44>)
 8009598:	6224      	str	r4, [r4, #32]
 800959a:	6323      	str	r3, [r4, #48]	; 0x30
 800959c:	bd10      	pop	{r4, pc}
 800959e:	bf00      	nop
 80095a0:	08009d59 	.word	0x08009d59
 80095a4:	08009d7b 	.word	0x08009d7b
 80095a8:	08009db3 	.word	0x08009db3
 80095ac:	08009dd7 	.word	0x08009dd7

080095b0 <_cleanup_r>:
 80095b0:	4901      	ldr	r1, [pc, #4]	; (80095b8 <_cleanup_r+0x8>)
 80095b2:	f000 b885 	b.w	80096c0 <_fwalk_reent>
 80095b6:	bf00      	nop
 80095b8:	08009515 	.word	0x08009515

080095bc <__sfmoreglue>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	1e4a      	subs	r2, r1, #1
 80095c0:	2568      	movs	r5, #104	; 0x68
 80095c2:	4355      	muls	r5, r2
 80095c4:	460e      	mov	r6, r1
 80095c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095ca:	f7ff fd77 	bl	80090bc <_malloc_r>
 80095ce:	4604      	mov	r4, r0
 80095d0:	b140      	cbz	r0, 80095e4 <__sfmoreglue+0x28>
 80095d2:	2100      	movs	r1, #0
 80095d4:	e9c0 1600 	strd	r1, r6, [r0]
 80095d8:	300c      	adds	r0, #12
 80095da:	60a0      	str	r0, [r4, #8]
 80095dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095e0:	f7ff fd16 	bl	8009010 <memset>
 80095e4:	4620      	mov	r0, r4
 80095e6:	bd70      	pop	{r4, r5, r6, pc}

080095e8 <__sinit>:
 80095e8:	6983      	ldr	r3, [r0, #24]
 80095ea:	b510      	push	{r4, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	bb33      	cbnz	r3, 800963e <__sinit+0x56>
 80095f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80095f4:	6503      	str	r3, [r0, #80]	; 0x50
 80095f6:	4b12      	ldr	r3, [pc, #72]	; (8009640 <__sinit+0x58>)
 80095f8:	4a12      	ldr	r2, [pc, #72]	; (8009644 <__sinit+0x5c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6282      	str	r2, [r0, #40]	; 0x28
 80095fe:	4298      	cmp	r0, r3
 8009600:	bf04      	itt	eq
 8009602:	2301      	moveq	r3, #1
 8009604:	6183      	streq	r3, [r0, #24]
 8009606:	f000 f81f 	bl	8009648 <__sfp>
 800960a:	6060      	str	r0, [r4, #4]
 800960c:	4620      	mov	r0, r4
 800960e:	f000 f81b 	bl	8009648 <__sfp>
 8009612:	60a0      	str	r0, [r4, #8]
 8009614:	4620      	mov	r0, r4
 8009616:	f000 f817 	bl	8009648 <__sfp>
 800961a:	2200      	movs	r2, #0
 800961c:	60e0      	str	r0, [r4, #12]
 800961e:	2104      	movs	r1, #4
 8009620:	6860      	ldr	r0, [r4, #4]
 8009622:	f7ff ffa1 	bl	8009568 <std>
 8009626:	2201      	movs	r2, #1
 8009628:	2109      	movs	r1, #9
 800962a:	68a0      	ldr	r0, [r4, #8]
 800962c:	f7ff ff9c 	bl	8009568 <std>
 8009630:	2202      	movs	r2, #2
 8009632:	2112      	movs	r1, #18
 8009634:	68e0      	ldr	r0, [r4, #12]
 8009636:	f7ff ff97 	bl	8009568 <std>
 800963a:	2301      	movs	r3, #1
 800963c:	61a3      	str	r3, [r4, #24]
 800963e:	bd10      	pop	{r4, pc}
 8009640:	0800a340 	.word	0x0800a340
 8009644:	080095b1 	.word	0x080095b1

08009648 <__sfp>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	4b1b      	ldr	r3, [pc, #108]	; (80096b8 <__sfp+0x70>)
 800964c:	681e      	ldr	r6, [r3, #0]
 800964e:	69b3      	ldr	r3, [r6, #24]
 8009650:	4607      	mov	r7, r0
 8009652:	b913      	cbnz	r3, 800965a <__sfp+0x12>
 8009654:	4630      	mov	r0, r6
 8009656:	f7ff ffc7 	bl	80095e8 <__sinit>
 800965a:	3648      	adds	r6, #72	; 0x48
 800965c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009660:	3b01      	subs	r3, #1
 8009662:	d503      	bpl.n	800966c <__sfp+0x24>
 8009664:	6833      	ldr	r3, [r6, #0]
 8009666:	b133      	cbz	r3, 8009676 <__sfp+0x2e>
 8009668:	6836      	ldr	r6, [r6, #0]
 800966a:	e7f7      	b.n	800965c <__sfp+0x14>
 800966c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009670:	b16d      	cbz	r5, 800968e <__sfp+0x46>
 8009672:	3468      	adds	r4, #104	; 0x68
 8009674:	e7f4      	b.n	8009660 <__sfp+0x18>
 8009676:	2104      	movs	r1, #4
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff ff9f 	bl	80095bc <__sfmoreglue>
 800967e:	6030      	str	r0, [r6, #0]
 8009680:	2800      	cmp	r0, #0
 8009682:	d1f1      	bne.n	8009668 <__sfp+0x20>
 8009684:	230c      	movs	r3, #12
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4604      	mov	r4, r0
 800968a:	4620      	mov	r0, r4
 800968c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800968e:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <__sfp+0x74>)
 8009690:	6665      	str	r5, [r4, #100]	; 0x64
 8009692:	e9c4 5500 	strd	r5, r5, [r4]
 8009696:	60a5      	str	r5, [r4, #8]
 8009698:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800969c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80096a0:	2208      	movs	r2, #8
 80096a2:	4629      	mov	r1, r5
 80096a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096a8:	f7ff fcb2 	bl	8009010 <memset>
 80096ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096b4:	e7e9      	b.n	800968a <__sfp+0x42>
 80096b6:	bf00      	nop
 80096b8:	0800a340 	.word	0x0800a340
 80096bc:	ffff0001 	.word	0xffff0001

080096c0 <_fwalk_reent>:
 80096c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c4:	4680      	mov	r8, r0
 80096c6:	4689      	mov	r9, r1
 80096c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096cc:	2600      	movs	r6, #0
 80096ce:	b914      	cbnz	r4, 80096d6 <_fwalk_reent+0x16>
 80096d0:	4630      	mov	r0, r6
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80096da:	3f01      	subs	r7, #1
 80096dc:	d501      	bpl.n	80096e2 <_fwalk_reent+0x22>
 80096de:	6824      	ldr	r4, [r4, #0]
 80096e0:	e7f5      	b.n	80096ce <_fwalk_reent+0xe>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d907      	bls.n	80096f8 <_fwalk_reent+0x38>
 80096e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096ec:	3301      	adds	r3, #1
 80096ee:	d003      	beq.n	80096f8 <_fwalk_reent+0x38>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4640      	mov	r0, r8
 80096f4:	47c8      	blx	r9
 80096f6:	4306      	orrs	r6, r0
 80096f8:	3568      	adds	r5, #104	; 0x68
 80096fa:	e7ee      	b.n	80096da <_fwalk_reent+0x1a>

080096fc <__swhatbuf_r>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	460e      	mov	r6, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	2900      	cmp	r1, #0
 8009706:	b096      	sub	sp, #88	; 0x58
 8009708:	4614      	mov	r4, r2
 800970a:	461d      	mov	r5, r3
 800970c:	da07      	bge.n	800971e <__swhatbuf_r+0x22>
 800970e:	2300      	movs	r3, #0
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	89b3      	ldrh	r3, [r6, #12]
 8009714:	061a      	lsls	r2, r3, #24
 8009716:	d410      	bmi.n	800973a <__swhatbuf_r+0x3e>
 8009718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971c:	e00e      	b.n	800973c <__swhatbuf_r+0x40>
 800971e:	466a      	mov	r2, sp
 8009720:	f000 fb80 	bl	8009e24 <_fstat_r>
 8009724:	2800      	cmp	r0, #0
 8009726:	dbf2      	blt.n	800970e <__swhatbuf_r+0x12>
 8009728:	9a01      	ldr	r2, [sp, #4]
 800972a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800972e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009732:	425a      	negs	r2, r3
 8009734:	415a      	adcs	r2, r3
 8009736:	602a      	str	r2, [r5, #0]
 8009738:	e7ee      	b.n	8009718 <__swhatbuf_r+0x1c>
 800973a:	2340      	movs	r3, #64	; 0x40
 800973c:	2000      	movs	r0, #0
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	b016      	add	sp, #88	; 0x58
 8009742:	bd70      	pop	{r4, r5, r6, pc}

08009744 <__smakebuf_r>:
 8009744:	898b      	ldrh	r3, [r1, #12]
 8009746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009748:	079d      	lsls	r5, r3, #30
 800974a:	4606      	mov	r6, r0
 800974c:	460c      	mov	r4, r1
 800974e:	d507      	bpl.n	8009760 <__smakebuf_r+0x1c>
 8009750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	6123      	str	r3, [r4, #16]
 8009758:	2301      	movs	r3, #1
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	b002      	add	sp, #8
 800975e:	bd70      	pop	{r4, r5, r6, pc}
 8009760:	ab01      	add	r3, sp, #4
 8009762:	466a      	mov	r2, sp
 8009764:	f7ff ffca 	bl	80096fc <__swhatbuf_r>
 8009768:	9900      	ldr	r1, [sp, #0]
 800976a:	4605      	mov	r5, r0
 800976c:	4630      	mov	r0, r6
 800976e:	f7ff fca5 	bl	80090bc <_malloc_r>
 8009772:	b948      	cbnz	r0, 8009788 <__smakebuf_r+0x44>
 8009774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009778:	059a      	lsls	r2, r3, #22
 800977a:	d4ef      	bmi.n	800975c <__smakebuf_r+0x18>
 800977c:	f023 0303 	bic.w	r3, r3, #3
 8009780:	f043 0302 	orr.w	r3, r3, #2
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	e7e3      	b.n	8009750 <__smakebuf_r+0xc>
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <__smakebuf_r+0x7c>)
 800978a:	62b3      	str	r3, [r6, #40]	; 0x28
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	6020      	str	r0, [r4, #0]
 8009790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	6163      	str	r3, [r4, #20]
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	6120      	str	r0, [r4, #16]
 800979e:	b15b      	cbz	r3, 80097b8 <__smakebuf_r+0x74>
 80097a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 fb4f 	bl	8009e48 <_isatty_r>
 80097aa:	b128      	cbz	r0, 80097b8 <__smakebuf_r+0x74>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	f043 0301 	orr.w	r3, r3, #1
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	431d      	orrs	r5, r3
 80097bc:	81a5      	strh	r5, [r4, #12]
 80097be:	e7cd      	b.n	800975c <__smakebuf_r+0x18>
 80097c0:	080095b1 	.word	0x080095b1

080097c4 <__malloc_lock>:
 80097c4:	4770      	bx	lr

080097c6 <__malloc_unlock>:
 80097c6:	4770      	bx	lr

080097c8 <__sfputc_r>:
 80097c8:	6893      	ldr	r3, [r2, #8]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	b410      	push	{r4}
 80097d0:	6093      	str	r3, [r2, #8]
 80097d2:	da08      	bge.n	80097e6 <__sfputc_r+0x1e>
 80097d4:	6994      	ldr	r4, [r2, #24]
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	db01      	blt.n	80097de <__sfputc_r+0x16>
 80097da:	290a      	cmp	r1, #10
 80097dc:	d103      	bne.n	80097e6 <__sfputc_r+0x1e>
 80097de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e2:	f7ff bd51 	b.w	8009288 <__swbuf_r>
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	1c58      	adds	r0, r3, #1
 80097ea:	6010      	str	r0, [r2, #0]
 80097ec:	7019      	strb	r1, [r3, #0]
 80097ee:	4608      	mov	r0, r1
 80097f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <__sfputs_r>:
 80097f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	18d5      	adds	r5, r2, r3
 8009800:	42ac      	cmp	r4, r5
 8009802:	d101      	bne.n	8009808 <__sfputs_r+0x12>
 8009804:	2000      	movs	r0, #0
 8009806:	e007      	b.n	8009818 <__sfputs_r+0x22>
 8009808:	463a      	mov	r2, r7
 800980a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff ffda 	bl	80097c8 <__sfputc_r>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d1f3      	bne.n	8009800 <__sfputs_r+0xa>
 8009818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800981c <_vfiprintf_r>:
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	460c      	mov	r4, r1
 8009822:	b09d      	sub	sp, #116	; 0x74
 8009824:	4617      	mov	r7, r2
 8009826:	461d      	mov	r5, r3
 8009828:	4606      	mov	r6, r0
 800982a:	b118      	cbz	r0, 8009834 <_vfiprintf_r+0x18>
 800982c:	6983      	ldr	r3, [r0, #24]
 800982e:	b90b      	cbnz	r3, 8009834 <_vfiprintf_r+0x18>
 8009830:	f7ff feda 	bl	80095e8 <__sinit>
 8009834:	4b7c      	ldr	r3, [pc, #496]	; (8009a28 <_vfiprintf_r+0x20c>)
 8009836:	429c      	cmp	r4, r3
 8009838:	d158      	bne.n	80098ec <_vfiprintf_r+0xd0>
 800983a:	6874      	ldr	r4, [r6, #4]
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	0718      	lsls	r0, r3, #28
 8009840:	d55e      	bpl.n	8009900 <_vfiprintf_r+0xe4>
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d05b      	beq.n	8009900 <_vfiprintf_r+0xe4>
 8009848:	2300      	movs	r3, #0
 800984a:	9309      	str	r3, [sp, #36]	; 0x24
 800984c:	2320      	movs	r3, #32
 800984e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009852:	2330      	movs	r3, #48	; 0x30
 8009854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009858:	9503      	str	r5, [sp, #12]
 800985a:	f04f 0b01 	mov.w	fp, #1
 800985e:	46b8      	mov	r8, r7
 8009860:	4645      	mov	r5, r8
 8009862:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009866:	b10b      	cbz	r3, 800986c <_vfiprintf_r+0x50>
 8009868:	2b25      	cmp	r3, #37	; 0x25
 800986a:	d154      	bne.n	8009916 <_vfiprintf_r+0xfa>
 800986c:	ebb8 0a07 	subs.w	sl, r8, r7
 8009870:	d00b      	beq.n	800988a <_vfiprintf_r+0x6e>
 8009872:	4653      	mov	r3, sl
 8009874:	463a      	mov	r2, r7
 8009876:	4621      	mov	r1, r4
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff ffbc 	bl	80097f6 <__sfputs_r>
 800987e:	3001      	adds	r0, #1
 8009880:	f000 80c2 	beq.w	8009a08 <_vfiprintf_r+0x1ec>
 8009884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009886:	4453      	add	r3, sl
 8009888:	9309      	str	r3, [sp, #36]	; 0x24
 800988a:	f898 3000 	ldrb.w	r3, [r8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 80ba 	beq.w	8009a08 <_vfiprintf_r+0x1ec>
 8009894:	2300      	movs	r3, #0
 8009896:	f04f 32ff 	mov.w	r2, #4294967295
 800989a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a6:	931a      	str	r3, [sp, #104]	; 0x68
 80098a8:	46a8      	mov	r8, r5
 80098aa:	2205      	movs	r2, #5
 80098ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80098b0:	485e      	ldr	r0, [pc, #376]	; (8009a2c <_vfiprintf_r+0x210>)
 80098b2:	f7f6 fcbd 	bl	8000230 <memchr>
 80098b6:	9b04      	ldr	r3, [sp, #16]
 80098b8:	bb78      	cbnz	r0, 800991a <_vfiprintf_r+0xfe>
 80098ba:	06d9      	lsls	r1, r3, #27
 80098bc:	bf44      	itt	mi
 80098be:	2220      	movmi	r2, #32
 80098c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80098c4:	071a      	lsls	r2, r3, #28
 80098c6:	bf44      	itt	mi
 80098c8:	222b      	movmi	r2, #43	; 0x2b
 80098ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80098ce:	782a      	ldrb	r2, [r5, #0]
 80098d0:	2a2a      	cmp	r2, #42	; 0x2a
 80098d2:	d02a      	beq.n	800992a <_vfiprintf_r+0x10e>
 80098d4:	9a07      	ldr	r2, [sp, #28]
 80098d6:	46a8      	mov	r8, r5
 80098d8:	2000      	movs	r0, #0
 80098da:	250a      	movs	r5, #10
 80098dc:	4641      	mov	r1, r8
 80098de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e2:	3b30      	subs	r3, #48	; 0x30
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d969      	bls.n	80099bc <_vfiprintf_r+0x1a0>
 80098e8:	b360      	cbz	r0, 8009944 <_vfiprintf_r+0x128>
 80098ea:	e024      	b.n	8009936 <_vfiprintf_r+0x11a>
 80098ec:	4b50      	ldr	r3, [pc, #320]	; (8009a30 <_vfiprintf_r+0x214>)
 80098ee:	429c      	cmp	r4, r3
 80098f0:	d101      	bne.n	80098f6 <_vfiprintf_r+0xda>
 80098f2:	68b4      	ldr	r4, [r6, #8]
 80098f4:	e7a2      	b.n	800983c <_vfiprintf_r+0x20>
 80098f6:	4b4f      	ldr	r3, [pc, #316]	; (8009a34 <_vfiprintf_r+0x218>)
 80098f8:	429c      	cmp	r4, r3
 80098fa:	bf08      	it	eq
 80098fc:	68f4      	ldreq	r4, [r6, #12]
 80098fe:	e79d      	b.n	800983c <_vfiprintf_r+0x20>
 8009900:	4621      	mov	r1, r4
 8009902:	4630      	mov	r0, r6
 8009904:	f7ff fd12 	bl	800932c <__swsetup_r>
 8009908:	2800      	cmp	r0, #0
 800990a:	d09d      	beq.n	8009848 <_vfiprintf_r+0x2c>
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	b01d      	add	sp, #116	; 0x74
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	46a8      	mov	r8, r5
 8009918:	e7a2      	b.n	8009860 <_vfiprintf_r+0x44>
 800991a:	4a44      	ldr	r2, [pc, #272]	; (8009a2c <_vfiprintf_r+0x210>)
 800991c:	1a80      	subs	r0, r0, r2
 800991e:	fa0b f000 	lsl.w	r0, fp, r0
 8009922:	4318      	orrs	r0, r3
 8009924:	9004      	str	r0, [sp, #16]
 8009926:	4645      	mov	r5, r8
 8009928:	e7be      	b.n	80098a8 <_vfiprintf_r+0x8c>
 800992a:	9a03      	ldr	r2, [sp, #12]
 800992c:	1d11      	adds	r1, r2, #4
 800992e:	6812      	ldr	r2, [r2, #0]
 8009930:	9103      	str	r1, [sp, #12]
 8009932:	2a00      	cmp	r2, #0
 8009934:	db01      	blt.n	800993a <_vfiprintf_r+0x11e>
 8009936:	9207      	str	r2, [sp, #28]
 8009938:	e004      	b.n	8009944 <_vfiprintf_r+0x128>
 800993a:	4252      	negs	r2, r2
 800993c:	f043 0302 	orr.w	r3, r3, #2
 8009940:	9207      	str	r2, [sp, #28]
 8009942:	9304      	str	r3, [sp, #16]
 8009944:	f898 3000 	ldrb.w	r3, [r8]
 8009948:	2b2e      	cmp	r3, #46	; 0x2e
 800994a:	d10e      	bne.n	800996a <_vfiprintf_r+0x14e>
 800994c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009950:	2b2a      	cmp	r3, #42	; 0x2a
 8009952:	d138      	bne.n	80099c6 <_vfiprintf_r+0x1aa>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	9203      	str	r2, [sp, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	bfb8      	it	lt
 8009960:	f04f 33ff 	movlt.w	r3, #4294967295
 8009964:	f108 0802 	add.w	r8, r8, #2
 8009968:	9305      	str	r3, [sp, #20]
 800996a:	4d33      	ldr	r5, [pc, #204]	; (8009a38 <_vfiprintf_r+0x21c>)
 800996c:	f898 1000 	ldrb.w	r1, [r8]
 8009970:	2203      	movs	r2, #3
 8009972:	4628      	mov	r0, r5
 8009974:	f7f6 fc5c 	bl	8000230 <memchr>
 8009978:	b140      	cbz	r0, 800998c <_vfiprintf_r+0x170>
 800997a:	2340      	movs	r3, #64	; 0x40
 800997c:	1b40      	subs	r0, r0, r5
 800997e:	fa03 f000 	lsl.w	r0, r3, r0
 8009982:	9b04      	ldr	r3, [sp, #16]
 8009984:	4303      	orrs	r3, r0
 8009986:	f108 0801 	add.w	r8, r8, #1
 800998a:	9304      	str	r3, [sp, #16]
 800998c:	f898 1000 	ldrb.w	r1, [r8]
 8009990:	482a      	ldr	r0, [pc, #168]	; (8009a3c <_vfiprintf_r+0x220>)
 8009992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009996:	2206      	movs	r2, #6
 8009998:	f108 0701 	add.w	r7, r8, #1
 800999c:	f7f6 fc48 	bl	8000230 <memchr>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d037      	beq.n	8009a14 <_vfiprintf_r+0x1f8>
 80099a4:	4b26      	ldr	r3, [pc, #152]	; (8009a40 <_vfiprintf_r+0x224>)
 80099a6:	bb1b      	cbnz	r3, 80099f0 <_vfiprintf_r+0x1d4>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	3307      	adds	r3, #7
 80099ac:	f023 0307 	bic.w	r3, r3, #7
 80099b0:	3308      	adds	r3, #8
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b6:	444b      	add	r3, r9
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	e750      	b.n	800985e <_vfiprintf_r+0x42>
 80099bc:	fb05 3202 	mla	r2, r5, r2, r3
 80099c0:	2001      	movs	r0, #1
 80099c2:	4688      	mov	r8, r1
 80099c4:	e78a      	b.n	80098dc <_vfiprintf_r+0xc0>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f108 0801 	add.w	r8, r8, #1
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	4619      	mov	r1, r3
 80099d0:	250a      	movs	r5, #10
 80099d2:	4640      	mov	r0, r8
 80099d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099d8:	3a30      	subs	r2, #48	; 0x30
 80099da:	2a09      	cmp	r2, #9
 80099dc:	d903      	bls.n	80099e6 <_vfiprintf_r+0x1ca>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d0c3      	beq.n	800996a <_vfiprintf_r+0x14e>
 80099e2:	9105      	str	r1, [sp, #20]
 80099e4:	e7c1      	b.n	800996a <_vfiprintf_r+0x14e>
 80099e6:	fb05 2101 	mla	r1, r5, r1, r2
 80099ea:	2301      	movs	r3, #1
 80099ec:	4680      	mov	r8, r0
 80099ee:	e7f0      	b.n	80099d2 <_vfiprintf_r+0x1b6>
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4622      	mov	r2, r4
 80099f6:	4b13      	ldr	r3, [pc, #76]	; (8009a44 <_vfiprintf_r+0x228>)
 80099f8:	a904      	add	r1, sp, #16
 80099fa:	4630      	mov	r0, r6
 80099fc:	f3af 8000 	nop.w
 8009a00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a04:	4681      	mov	r9, r0
 8009a06:	d1d5      	bne.n	80099b4 <_vfiprintf_r+0x198>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	065b      	lsls	r3, r3, #25
 8009a0c:	f53f af7e 	bmi.w	800990c <_vfiprintf_r+0xf0>
 8009a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a12:	e77d      	b.n	8009910 <_vfiprintf_r+0xf4>
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <_vfiprintf_r+0x228>)
 8009a1c:	a904      	add	r1, sp, #16
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f000 f888 	bl	8009b34 <_printf_i>
 8009a24:	e7ec      	b.n	8009a00 <_vfiprintf_r+0x1e4>
 8009a26:	bf00      	nop
 8009a28:	0800a364 	.word	0x0800a364
 8009a2c:	0800a3a4 	.word	0x0800a3a4
 8009a30:	0800a384 	.word	0x0800a384
 8009a34:	0800a344 	.word	0x0800a344
 8009a38:	0800a3aa 	.word	0x0800a3aa
 8009a3c:	0800a3ae 	.word	0x0800a3ae
 8009a40:	00000000 	.word	0x00000000
 8009a44:	080097f7 	.word	0x080097f7

08009a48 <_printf_common>:
 8009a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4c:	4691      	mov	r9, r2
 8009a4e:	461f      	mov	r7, r3
 8009a50:	688a      	ldr	r2, [r1, #8]
 8009a52:	690b      	ldr	r3, [r1, #16]
 8009a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	bfb8      	it	lt
 8009a5c:	4613      	movlt	r3, r2
 8009a5e:	f8c9 3000 	str.w	r3, [r9]
 8009a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a66:	4606      	mov	r6, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	b112      	cbz	r2, 8009a72 <_printf_common+0x2a>
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	f8c9 3000 	str.w	r3, [r9]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	0699      	lsls	r1, r3, #26
 8009a76:	bf42      	ittt	mi
 8009a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009a7c:	3302      	addmi	r3, #2
 8009a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8009a82:	6825      	ldr	r5, [r4, #0]
 8009a84:	f015 0506 	ands.w	r5, r5, #6
 8009a88:	d107      	bne.n	8009a9a <_printf_common+0x52>
 8009a8a:	f104 0a19 	add.w	sl, r4, #25
 8009a8e:	68e3      	ldr	r3, [r4, #12]
 8009a90:	f8d9 2000 	ldr.w	r2, [r9]
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	42ab      	cmp	r3, r5
 8009a98:	dc28      	bgt.n	8009aec <_printf_common+0xa4>
 8009a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a9e:	6822      	ldr	r2, [r4, #0]
 8009aa0:	3300      	adds	r3, #0
 8009aa2:	bf18      	it	ne
 8009aa4:	2301      	movne	r3, #1
 8009aa6:	0692      	lsls	r2, r2, #26
 8009aa8:	d42d      	bmi.n	8009b06 <_printf_common+0xbe>
 8009aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	47c0      	blx	r8
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d020      	beq.n	8009afa <_printf_common+0xb2>
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	68e5      	ldr	r5, [r4, #12]
 8009abc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ac0:	f003 0306 	and.w	r3, r3, #6
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	bf08      	it	eq
 8009ac8:	1aad      	subeq	r5, r5, r2
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	6922      	ldr	r2, [r4, #16]
 8009ace:	bf0c      	ite	eq
 8009ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ad4:	2500      	movne	r5, #0
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	bfc4      	itt	gt
 8009ada:	1a9b      	subgt	r3, r3, r2
 8009adc:	18ed      	addgt	r5, r5, r3
 8009ade:	f04f 0900 	mov.w	r9, #0
 8009ae2:	341a      	adds	r4, #26
 8009ae4:	454d      	cmp	r5, r9
 8009ae6:	d11a      	bne.n	8009b1e <_printf_common+0xd6>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	e008      	b.n	8009afe <_printf_common+0xb6>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4652      	mov	r2, sl
 8009af0:	4639      	mov	r1, r7
 8009af2:	4630      	mov	r0, r6
 8009af4:	47c0      	blx	r8
 8009af6:	3001      	adds	r0, #1
 8009af8:	d103      	bne.n	8009b02 <_printf_common+0xba>
 8009afa:	f04f 30ff 	mov.w	r0, #4294967295
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	3501      	adds	r5, #1
 8009b04:	e7c3      	b.n	8009a8e <_printf_common+0x46>
 8009b06:	18e1      	adds	r1, r4, r3
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	2030      	movs	r0, #48	; 0x30
 8009b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b10:	4422      	add	r2, r4
 8009b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	e7c5      	b.n	8009aaa <_printf_common+0x62>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	4622      	mov	r2, r4
 8009b22:	4639      	mov	r1, r7
 8009b24:	4630      	mov	r0, r6
 8009b26:	47c0      	blx	r8
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d0e6      	beq.n	8009afa <_printf_common+0xb2>
 8009b2c:	f109 0901 	add.w	r9, r9, #1
 8009b30:	e7d8      	b.n	8009ae4 <_printf_common+0x9c>
	...

08009b34 <_printf_i>:
 8009b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	7e09      	ldrb	r1, [r1, #24]
 8009b40:	b085      	sub	sp, #20
 8009b42:	296e      	cmp	r1, #110	; 0x6e
 8009b44:	4617      	mov	r7, r2
 8009b46:	4606      	mov	r6, r0
 8009b48:	4698      	mov	r8, r3
 8009b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b4c:	f000 80b3 	beq.w	8009cb6 <_printf_i+0x182>
 8009b50:	d822      	bhi.n	8009b98 <_printf_i+0x64>
 8009b52:	2963      	cmp	r1, #99	; 0x63
 8009b54:	d036      	beq.n	8009bc4 <_printf_i+0x90>
 8009b56:	d80a      	bhi.n	8009b6e <_printf_i+0x3a>
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	f000 80b9 	beq.w	8009cd0 <_printf_i+0x19c>
 8009b5e:	2958      	cmp	r1, #88	; 0x58
 8009b60:	f000 8083 	beq.w	8009c6a <_printf_i+0x136>
 8009b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009b6c:	e032      	b.n	8009bd4 <_printf_i+0xa0>
 8009b6e:	2964      	cmp	r1, #100	; 0x64
 8009b70:	d001      	beq.n	8009b76 <_printf_i+0x42>
 8009b72:	2969      	cmp	r1, #105	; 0x69
 8009b74:	d1f6      	bne.n	8009b64 <_printf_i+0x30>
 8009b76:	6820      	ldr	r0, [r4, #0]
 8009b78:	6813      	ldr	r3, [r2, #0]
 8009b7a:	0605      	lsls	r5, r0, #24
 8009b7c:	f103 0104 	add.w	r1, r3, #4
 8009b80:	d52a      	bpl.n	8009bd8 <_printf_i+0xa4>
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6011      	str	r1, [r2, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da03      	bge.n	8009b92 <_printf_i+0x5e>
 8009b8a:	222d      	movs	r2, #45	; 0x2d
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009b92:	486f      	ldr	r0, [pc, #444]	; (8009d50 <_printf_i+0x21c>)
 8009b94:	220a      	movs	r2, #10
 8009b96:	e039      	b.n	8009c0c <_printf_i+0xd8>
 8009b98:	2973      	cmp	r1, #115	; 0x73
 8009b9a:	f000 809d 	beq.w	8009cd8 <_printf_i+0x1a4>
 8009b9e:	d808      	bhi.n	8009bb2 <_printf_i+0x7e>
 8009ba0:	296f      	cmp	r1, #111	; 0x6f
 8009ba2:	d020      	beq.n	8009be6 <_printf_i+0xb2>
 8009ba4:	2970      	cmp	r1, #112	; 0x70
 8009ba6:	d1dd      	bne.n	8009b64 <_printf_i+0x30>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	f043 0320 	orr.w	r3, r3, #32
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	e003      	b.n	8009bba <_printf_i+0x86>
 8009bb2:	2975      	cmp	r1, #117	; 0x75
 8009bb4:	d017      	beq.n	8009be6 <_printf_i+0xb2>
 8009bb6:	2978      	cmp	r1, #120	; 0x78
 8009bb8:	d1d4      	bne.n	8009b64 <_printf_i+0x30>
 8009bba:	2378      	movs	r3, #120	; 0x78
 8009bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bc0:	4864      	ldr	r0, [pc, #400]	; (8009d54 <_printf_i+0x220>)
 8009bc2:	e055      	b.n	8009c70 <_printf_i+0x13c>
 8009bc4:	6813      	ldr	r3, [r2, #0]
 8009bc6:	1d19      	adds	r1, r3, #4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6011      	str	r1, [r2, #0]
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e08c      	b.n	8009cf2 <_printf_i+0x1be>
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6011      	str	r1, [r2, #0]
 8009bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be0:	bf18      	it	ne
 8009be2:	b21b      	sxthne	r3, r3
 8009be4:	e7cf      	b.n	8009b86 <_printf_i+0x52>
 8009be6:	6813      	ldr	r3, [r2, #0]
 8009be8:	6825      	ldr	r5, [r4, #0]
 8009bea:	1d18      	adds	r0, r3, #4
 8009bec:	6010      	str	r0, [r2, #0]
 8009bee:	0628      	lsls	r0, r5, #24
 8009bf0:	d501      	bpl.n	8009bf6 <_printf_i+0xc2>
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	e002      	b.n	8009bfc <_printf_i+0xc8>
 8009bf6:	0668      	lsls	r0, r5, #25
 8009bf8:	d5fb      	bpl.n	8009bf2 <_printf_i+0xbe>
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	4854      	ldr	r0, [pc, #336]	; (8009d50 <_printf_i+0x21c>)
 8009bfe:	296f      	cmp	r1, #111	; 0x6f
 8009c00:	bf14      	ite	ne
 8009c02:	220a      	movne	r2, #10
 8009c04:	2208      	moveq	r2, #8
 8009c06:	2100      	movs	r1, #0
 8009c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c0c:	6865      	ldr	r5, [r4, #4]
 8009c0e:	60a5      	str	r5, [r4, #8]
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	f2c0 8095 	blt.w	8009d40 <_printf_i+0x20c>
 8009c16:	6821      	ldr	r1, [r4, #0]
 8009c18:	f021 0104 	bic.w	r1, r1, #4
 8009c1c:	6021      	str	r1, [r4, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d13d      	bne.n	8009c9e <_printf_i+0x16a>
 8009c22:	2d00      	cmp	r5, #0
 8009c24:	f040 808e 	bne.w	8009d44 <_printf_i+0x210>
 8009c28:	4665      	mov	r5, ip
 8009c2a:	2a08      	cmp	r2, #8
 8009c2c:	d10b      	bne.n	8009c46 <_printf_i+0x112>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	07db      	lsls	r3, r3, #31
 8009c32:	d508      	bpl.n	8009c46 <_printf_i+0x112>
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	6862      	ldr	r2, [r4, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	bfde      	ittt	le
 8009c3c:	2330      	movle	r3, #48	; 0x30
 8009c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c46:	ebac 0305 	sub.w	r3, ip, r5
 8009c4a:	6123      	str	r3, [r4, #16]
 8009c4c:	f8cd 8000 	str.w	r8, [sp]
 8009c50:	463b      	mov	r3, r7
 8009c52:	aa03      	add	r2, sp, #12
 8009c54:	4621      	mov	r1, r4
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7ff fef6 	bl	8009a48 <_printf_common>
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	d14d      	bne.n	8009cfc <_printf_i+0x1c8>
 8009c60:	f04f 30ff 	mov.w	r0, #4294967295
 8009c64:	b005      	add	sp, #20
 8009c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	4839      	ldr	r0, [pc, #228]	; (8009d50 <_printf_i+0x21c>)
 8009c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	6821      	ldr	r1, [r4, #0]
 8009c74:	1d1d      	adds	r5, r3, #4
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6015      	str	r5, [r2, #0]
 8009c7a:	060a      	lsls	r2, r1, #24
 8009c7c:	d50b      	bpl.n	8009c96 <_printf_i+0x162>
 8009c7e:	07ca      	lsls	r2, r1, #31
 8009c80:	bf44      	itt	mi
 8009c82:	f041 0120 	orrmi.w	r1, r1, #32
 8009c86:	6021      	strmi	r1, [r4, #0]
 8009c88:	b91b      	cbnz	r3, 8009c92 <_printf_i+0x15e>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	f022 0220 	bic.w	r2, r2, #32
 8009c90:	6022      	str	r2, [r4, #0]
 8009c92:	2210      	movs	r2, #16
 8009c94:	e7b7      	b.n	8009c06 <_printf_i+0xd2>
 8009c96:	064d      	lsls	r5, r1, #25
 8009c98:	bf48      	it	mi
 8009c9a:	b29b      	uxthmi	r3, r3
 8009c9c:	e7ef      	b.n	8009c7e <_printf_i+0x14a>
 8009c9e:	4665      	mov	r5, ip
 8009ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8009ca8:	5cc3      	ldrb	r3, [r0, r3]
 8009caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009cae:	460b      	mov	r3, r1
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	d1f5      	bne.n	8009ca0 <_printf_i+0x16c>
 8009cb4:	e7b9      	b.n	8009c2a <_printf_i+0xf6>
 8009cb6:	6813      	ldr	r3, [r2, #0]
 8009cb8:	6825      	ldr	r5, [r4, #0]
 8009cba:	6961      	ldr	r1, [r4, #20]
 8009cbc:	1d18      	adds	r0, r3, #4
 8009cbe:	6010      	str	r0, [r2, #0]
 8009cc0:	0628      	lsls	r0, r5, #24
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	d501      	bpl.n	8009cca <_printf_i+0x196>
 8009cc6:	6019      	str	r1, [r3, #0]
 8009cc8:	e002      	b.n	8009cd0 <_printf_i+0x19c>
 8009cca:	066a      	lsls	r2, r5, #25
 8009ccc:	d5fb      	bpl.n	8009cc6 <_printf_i+0x192>
 8009cce:	8019      	strh	r1, [r3, #0]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	4665      	mov	r5, ip
 8009cd6:	e7b9      	b.n	8009c4c <_printf_i+0x118>
 8009cd8:	6813      	ldr	r3, [r2, #0]
 8009cda:	1d19      	adds	r1, r3, #4
 8009cdc:	6011      	str	r1, [r2, #0]
 8009cde:	681d      	ldr	r5, [r3, #0]
 8009ce0:	6862      	ldr	r2, [r4, #4]
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	f7f6 faa3 	bl	8000230 <memchr>
 8009cea:	b108      	cbz	r0, 8009cf0 <_printf_i+0x1bc>
 8009cec:	1b40      	subs	r0, r0, r5
 8009cee:	6060      	str	r0, [r4, #4]
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	6123      	str	r3, [r4, #16]
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfa:	e7a7      	b.n	8009c4c <_printf_i+0x118>
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	462a      	mov	r2, r5
 8009d00:	4639      	mov	r1, r7
 8009d02:	4630      	mov	r0, r6
 8009d04:	47c0      	blx	r8
 8009d06:	3001      	adds	r0, #1
 8009d08:	d0aa      	beq.n	8009c60 <_printf_i+0x12c>
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	079b      	lsls	r3, r3, #30
 8009d0e:	d413      	bmi.n	8009d38 <_printf_i+0x204>
 8009d10:	68e0      	ldr	r0, [r4, #12]
 8009d12:	9b03      	ldr	r3, [sp, #12]
 8009d14:	4298      	cmp	r0, r3
 8009d16:	bfb8      	it	lt
 8009d18:	4618      	movlt	r0, r3
 8009d1a:	e7a3      	b.n	8009c64 <_printf_i+0x130>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	464a      	mov	r2, r9
 8009d20:	4639      	mov	r1, r7
 8009d22:	4630      	mov	r0, r6
 8009d24:	47c0      	blx	r8
 8009d26:	3001      	adds	r0, #1
 8009d28:	d09a      	beq.n	8009c60 <_printf_i+0x12c>
 8009d2a:	3501      	adds	r5, #1
 8009d2c:	68e3      	ldr	r3, [r4, #12]
 8009d2e:	9a03      	ldr	r2, [sp, #12]
 8009d30:	1a9b      	subs	r3, r3, r2
 8009d32:	42ab      	cmp	r3, r5
 8009d34:	dcf2      	bgt.n	8009d1c <_printf_i+0x1e8>
 8009d36:	e7eb      	b.n	8009d10 <_printf_i+0x1dc>
 8009d38:	2500      	movs	r5, #0
 8009d3a:	f104 0919 	add.w	r9, r4, #25
 8009d3e:	e7f5      	b.n	8009d2c <_printf_i+0x1f8>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1ac      	bne.n	8009c9e <_printf_i+0x16a>
 8009d44:	7803      	ldrb	r3, [r0, #0]
 8009d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d4e:	e76c      	b.n	8009c2a <_printf_i+0xf6>
 8009d50:	0800a3b5 	.word	0x0800a3b5
 8009d54:	0800a3c6 	.word	0x0800a3c6

08009d58 <__sread>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d60:	f000 f894 	bl	8009e8c <_read_r>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	bfab      	itete	ge
 8009d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d6c:	181b      	addge	r3, r3, r0
 8009d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d72:	bfac      	ite	ge
 8009d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d76:	81a3      	strhlt	r3, [r4, #12]
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <__swrite>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	461f      	mov	r7, r3
 8009d80:	898b      	ldrh	r3, [r1, #12]
 8009d82:	05db      	lsls	r3, r3, #23
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	4616      	mov	r6, r2
 8009d8a:	d505      	bpl.n	8009d98 <__swrite+0x1e>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d94:	f000 f868 	bl	8009e68 <_lseek_r>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da2:	81a3      	strh	r3, [r4, #12]
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	4628      	mov	r0, r5
 8009daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dae:	f000 b817 	b.w	8009de0 <_write_r>

08009db2 <__sseek>:
 8009db2:	b510      	push	{r4, lr}
 8009db4:	460c      	mov	r4, r1
 8009db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dba:	f000 f855 	bl	8009e68 <_lseek_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	bf15      	itete	ne
 8009dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dce:	81a3      	strheq	r3, [r4, #12]
 8009dd0:	bf18      	it	ne
 8009dd2:	81a3      	strhne	r3, [r4, #12]
 8009dd4:	bd10      	pop	{r4, pc}

08009dd6 <__sclose>:
 8009dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dda:	f000 b813 	b.w	8009e04 <_close_r>
	...

08009de0 <_write_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4c07      	ldr	r4, [pc, #28]	; (8009e00 <_write_r+0x20>)
 8009de4:	4605      	mov	r5, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7f7 f8a1 	bl	8000f36 <_write>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_write_r+0x1e>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_write_r+0x1e>
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	20000be0 	.word	0x20000be0

08009e04 <_close_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4c06      	ldr	r4, [pc, #24]	; (8009e20 <_close_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	f7f7 f8ad 	bl	8000f6e <_close>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_close_r+0x1a>
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_close_r+0x1a>
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000be0 	.word	0x20000be0

08009e24 <_fstat_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4c07      	ldr	r4, [pc, #28]	; (8009e44 <_fstat_r+0x20>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	f7f7 f8a8 	bl	8000f86 <_fstat>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d102      	bne.n	8009e40 <_fstat_r+0x1c>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	b103      	cbz	r3, 8009e40 <_fstat_r+0x1c>
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	bd38      	pop	{r3, r4, r5, pc}
 8009e42:	bf00      	nop
 8009e44:	20000be0 	.word	0x20000be0

08009e48 <_isatty_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4c06      	ldr	r4, [pc, #24]	; (8009e64 <_isatty_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4605      	mov	r5, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	6023      	str	r3, [r4, #0]
 8009e54:	f7f7 f8a7 	bl	8000fa6 <_isatty>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_isatty_r+0x1a>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_isatty_r+0x1a>
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20000be0 	.word	0x20000be0

08009e68 <_lseek_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4c07      	ldr	r4, [pc, #28]	; (8009e88 <_lseek_r+0x20>)
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	6022      	str	r2, [r4, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f7f7 f8a0 	bl	8000fbc <_lseek>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_lseek_r+0x1e>
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_lseek_r+0x1e>
 8009e84:	602b      	str	r3, [r5, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000be0 	.word	0x20000be0

08009e8c <_read_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4c07      	ldr	r4, [pc, #28]	; (8009eac <_read_r+0x20>)
 8009e90:	4605      	mov	r5, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	6022      	str	r2, [r4, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 f82e 	bl	8000efc <_read>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_read_r+0x1e>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_read_r+0x1e>
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000be0 	.word	0x20000be0

08009eb0 <_init>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr

08009ebc <_fini>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr
