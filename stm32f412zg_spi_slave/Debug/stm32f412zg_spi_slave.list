
stm32f412zg_spi_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005048  08005048  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005050  08005050  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000074  080050cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080050cc  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8b1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020d6  00000000  00000000  0002c955  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002ea30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002f480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206a1  00000000  00000000  0002fda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009df3  00000000  00000000  00050449  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bcddc  00000000  00000000  0005a23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f1c  00000000  00000000  00117094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ee4 	.word	0x08004ee4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08004ee4 	.word	0x08004ee4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_DMA_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <MX_DMA_Init+0x4c>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_DMA_Init+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2038      	movs	r0, #56	; 0x38
 80005d8:	f000 feb5 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80005dc:	2038      	movs	r0, #56	; 0x38
 80005de:	f000 fece 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	203a      	movs	r0, #58	; 0x3a
 80005e8:	f000 fead 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005ec:	203a      	movs	r0, #58	; 0x3a
 80005ee:	f000 fec6 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <MX_GPIO_Init+0xb8>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <MX_GPIO_Init+0xb8>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_GPIO_Init+0xb8>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_GPIO_Init+0xbc>)
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	4817      	ldr	r0, [pc, #92]	; (80006c0 <MX_GPIO_Init+0xc0>)
 8000664:	f001 fa36 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000668:	2311      	movs	r3, #17
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_GPIO_Init+0xc4>)
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4813      	ldr	r0, [pc, #76]	; (80006c8 <MX_GPIO_Init+0xc8>)
 800067c:	f001 fa2a 	bl	8001ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fe5e 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800068a:	2006      	movs	r0, #6
 800068c:	f000 fe77 	bl	800137e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fe56 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fe6f 	bl	800137e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2028      	movs	r0, #40	; 0x28
 80006a6:	f000 fe4e 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006aa:	2028      	movs	r0, #40	; 0x28
 80006ac:	f000 fe67 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	10110000 	.word	0x10110000
 80006c0:	40020800 	.word	0x40020800
 80006c4:	10310000 	.word	0x10310000
 80006c8:	40020000 	.word	0x40020000

080006cc <__io_putchar>:

#define BUF_LEN     30


int __io_putchar(int ch)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1);
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2301      	movs	r3, #1
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <__io_putchar+0x20>)
 80006dc:	f002 fd59 	bl	8003192 <HAL_UART_Transmit>
	return ch;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200003f8 	.word	0x200003f8

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f000 fcd9 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f88d 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f7ff ff7f 	bl	8000600 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f7ff ff55 	bl	80005b0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000706:	f000 f98d 	bl	8000a24 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fbc5 	bl	8000e98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800070e:	f000 fbed 	bl	8000eec <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("\r\n ============= spi slave start =============\r\n");
 8000712:	4832      	ldr	r0, [pc, #200]	; (80007dc <main+0xec>)
 8000714:	f003 fd12 	bl	800413c <puts>
  memset(m_spi_rx, 0, spi_rx_len);
 8000718:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <main+0xf0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4830      	ldr	r0, [pc, #192]	; (80007e4 <main+0xf4>)
 8000722:	f003 fc8f 	bl	8004044 <memset>
  memset(m_spi_tx, 0, spi_tx_len);
 8000726:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <main+0xf8>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	2100      	movs	r1, #0
 800072e:	482f      	ldr	r0, [pc, #188]	; (80007ec <main+0xfc>)
 8000730:	f003 fc88 	bl	8004044 <memset>
  // m_spi_tx[0] = 0x11;
  m_spi_tx[0] = 0x02;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <main+0xfc>)
 8000736:	2202      	movs	r2, #2
 8000738:	701a      	strb	r2, [r3, #0]
  m_spi_tx[1] = 0x06;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <main+0xfc>)
 800073c:	2206      	movs	r2, #6
 800073e:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Receive_DMA(&hspi1, m_spi_rx, spi_rx_len);
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <main+0xf0>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b29b      	uxth	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	4926      	ldr	r1, [pc, #152]	; (80007e4 <main+0xf4>)
 800074a:	4829      	ldr	r0, [pc, #164]	; (80007f0 <main+0x100>)
 800074c:	f001 fff6 	bl	800273c <HAL_SPI_Receive_DMA>
  // HAL_SPI_Receive_DMA(&hspi1, m_spi_rx, spi_rx_len);
  uint8_t tx_flag = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	71fb      	strb	r3, [r7, #7]

  buf_tx[0] = 0x7e;
 8000754:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <main+0x104>)
 8000756:	227e      	movs	r2, #126	; 0x7e
 8000758:	701a      	strb	r2, [r3, #0]
  buf_tx[BUF_LEN-1] = 0x70;
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <main+0x104>)
 800075c:	2270      	movs	r2, #112	; 0x70
 800075e:	775a      	strb	r2, [r3, #29]
  HAL_UART_Receive_IT(&huart2, buf_rx, BUF_LEN);
 8000760:	221e      	movs	r2, #30
 8000762:	4925      	ldr	r1, [pc, #148]	; (80007f8 <main+0x108>)
 8000764:	4825      	ldr	r0, [pc, #148]	; (80007fc <main+0x10c>)
 8000766:	f002 fdf2 	bl	800334e <HAL_UART_Receive_IT>
  while (1)
  {
    switch (cs_pin)
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <main+0x110>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d002      	beq.n	8000778 <main+0x88>
 8000772:	2b02      	cmp	r3, #2
 8000774:	d007      	beq.n	8000786 <main+0x96>
        printf("cs pin falling \r\n");
        printf("spi ready \r\n");
      }
        break;
      default:
        break;
 8000776:	e010      	b.n	800079a <main+0xaa>
        cs_pin = 0;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <main+0x110>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
        printf("cs pin rising \r\n");
 800077e:	4821      	ldr	r0, [pc, #132]	; (8000804 <main+0x114>)
 8000780:	f003 fcdc 	bl	800413c <puts>
        break;
 8000784:	e009      	b.n	800079a <main+0xaa>
        cs_pin = 0;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <main+0x110>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
        printf("cs pin falling \r\n");
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <main+0x118>)
 800078e:	f003 fcd5 	bl	800413c <puts>
        printf("spi ready \r\n");
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <main+0x11c>)
 8000794:	f003 fcd2 	bl	800413c <puts>
        break;
 8000798:	bf00      	nop
    }

    switch (spi_rx)
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <main+0x120>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d000      	beq.n	80007a4 <main+0xb4>
        printf("spi_rx : %d %d %d %d \r\n", m_spi_rx[0], m_spi_rx[1], m_spi_rx[2], m_spi_rx[3]);
        // HAL_SPI_Receive_DMA(&hspi1, m_spi_rx, spi_rx_len);
      }
        break;
      default:
        break;
 80007a2:	e015      	b.n	80007d0 <main+0xe0>
        spi_rx = 0;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <main+0x120>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
        tx_flag = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	71fb      	strb	r3, [r7, #7]
        printf("spi_rx : %d %d %d %d \r\n", m_spi_rx[0], m_spi_rx[1], m_spi_rx[2], m_spi_rx[3]);
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <main+0xf4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0xf4>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <main+0xf4>)
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	4618      	mov	r0, r3
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <main+0xf4>)
 80007c2:	78db      	ldrb	r3, [r3, #3]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	4603      	mov	r3, r0
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <main+0x124>)
 80007ca:	f003 fc43 	bl	8004054 <iprintf>
        break;
 80007ce:	bf00      	nop
    }
    if (tx_flag)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d0c9      	beq.n	800076a <main+0x7a>
    {
      tx_flag = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	71fb      	strb	r3, [r7, #7]
    switch (cs_pin)
 80007da:	e7c6      	b.n	800076a <main+0x7a>
 80007dc:	08004efc 	.word	0x08004efc
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000094 	.word	0x20000094
 80007e8:	20000001 	.word	0x20000001
 80007ec:	20000194 	.word	0x20000194
 80007f0:	200002e0 	.word	0x200002e0
 80007f4:	200002b4 	.word	0x200002b4
 80007f8:	20000294 	.word	0x20000294
 80007fc:	20000438 	.word	0x20000438
 8000800:	20000090 	.word	0x20000090
 8000804:	08004f2c 	.word	0x08004f2c
 8000808:	08004f3c 	.word	0x08004f3c
 800080c:	08004f50 	.word	0x08004f50
 8000810:	20000091 	.word	0x20000091
 8000814:	08004f5c 	.word	0x08004f5c

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fc0c 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <SystemClock_Config+0xd0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <SystemClock_Config+0xd0>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	; (80008ec <SystemClock_Config+0xd4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <SystemClock_Config+0xd4>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fca5 	bl	80021f0 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ac:	f000 f8b6 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2103      	movs	r1, #3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fac2 	bl	8001e58 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008da:	f000 f89f 	bl	8000a1c <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4)
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d116      	bne.n	800092e <HAL_GPIO_EXTI_Callback+0x3e>
  {
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8000900:	2110      	movs	r1, #16
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <HAL_GPIO_EXTI_Callback+0x58>)
 8000904:	f001 fa78 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <HAL_GPIO_EXTI_Callback+0x26>
    {
      cs_pin = 1;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
  else
  {
    printf("button \r\n");
    HAL_UART_Transmit_IT(&huart2, buf_tx, BUF_LEN);
  }
}
 8000914:	e013      	b.n	800093e <HAL_GPIO_EXTI_Callback+0x4e>
      HAL_SPI_TransmitReceive_DMA(&hspi1, m_spi_tx, m_spi_rx, spi_rx_len);
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_GPIO_EXTI_Callback+0x60>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_GPIO_EXTI_Callback+0x64>)
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <HAL_GPIO_EXTI_Callback+0x68>)
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000922:	f001 ffcb 	bl	80028bc <HAL_SPI_TransmitReceive_DMA>
      cs_pin = 2;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000928:	2202      	movs	r2, #2
 800092a:	701a      	strb	r2, [r3, #0]
}
 800092c:	e007      	b.n	800093e <HAL_GPIO_EXTI_Callback+0x4e>
    printf("button \r\n");
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <HAL_GPIO_EXTI_Callback+0x70>)
 8000930:	f003 fc04 	bl	800413c <puts>
    HAL_UART_Transmit_IT(&huart2, buf_tx, BUF_LEN);
 8000934:	221e      	movs	r2, #30
 8000936:	490b      	ldr	r1, [pc, #44]	; (8000964 <HAL_GPIO_EXTI_Callback+0x74>)
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <HAL_GPIO_EXTI_Callback+0x78>)
 800093a:	f002 fcc3 	bl	80032c4 <HAL_UART_Transmit_IT>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40020000 	.word	0x40020000
 800094c:	20000090 	.word	0x20000090
 8000950:	20000000 	.word	0x20000000
 8000954:	20000094 	.word	0x20000094
 8000958:	20000194 	.word	0x20000194
 800095c:	200002e0 	.word	0x200002e0
 8000960:	08004f74 	.word	0x08004f74
 8000964:	200002b4 	.word	0x200002b4
 8000968:	20000438 	.word	0x20000438

0800096c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  spi_rx = 1;
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_SPI_RxCpltCallback+0x28>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Receive_DMA(&hspi1, m_spi_rx, spi_rx_len);
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_SPI_RxCpltCallback+0x2c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	4906      	ldr	r1, [pc, #24]	; (800099c <HAL_SPI_RxCpltCallback+0x30>)
 8000984:	4806      	ldr	r0, [pc, #24]	; (80009a0 <HAL_SPI_RxCpltCallback+0x34>)
 8000986:	f001 fed9 	bl	800273c <HAL_SPI_Receive_DMA>
  // else if (m_spi_rx[0]==0x05)
  // {
  //   // HAL_SPI_Transmit_DMA(&hspi1, m_spi_tx, 1);
  //   HAL_SPI_TransmitReceive_DMA(&hspi1, m_spi_tx, m_spi_rx, spi_rx_len);
  // }
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000091 	.word	0x20000091
 8000998:	20000000 	.word	0x20000000
 800099c:	20000094 	.word	0x20000094
 80009a0:	200002e0 	.word	0x200002e0

080009a4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  // HAL_SPI_Receive_DMA(&hspi1, m_spi_rx, spi_rx_len);
  spi_rx = 1;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <HAL_SPI_TxRxCpltCallback+0x28>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive_DMA(&hspi1, m_spi_tx, m_spi_rx, spi_rx_len);
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_SPI_TxRxCpltCallback+0x30>)
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <HAL_SPI_TxRxCpltCallback+0x34>)
 80009bc:	4807      	ldr	r0, [pc, #28]	; (80009dc <HAL_SPI_TxRxCpltCallback+0x38>)
 80009be:	f001 ff7d 	bl	80028bc <HAL_SPI_TransmitReceive_DMA>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000091 	.word	0x20000091
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000094 	.word	0x20000094
 80009d8:	20000194 	.word	0x20000194
 80009dc:	200002e0 	.word	0x200002e0

080009e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_UART_RxCpltCallback+0x2c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d107      	bne.n	8000a02 <HAL_UART_RxCpltCallback+0x22>
  {
    HAL_UART_Receive_IT(&huart2, buf_rx, BUF_LEN);
 80009f2:	221e      	movs	r2, #30
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <HAL_UART_RxCpltCallback+0x30>)
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x34>)
 80009f8:	f002 fca9 	bl	800334e <HAL_UART_Receive_IT>
    printf("uart rx int \r\n");
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_UART_RxCpltCallback+0x38>)
 80009fe:	f003 fb9d 	bl	800413c <puts>
  }
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004400 	.word	0x40004400
 8000a10:	20000294 	.word	0x20000294
 8000a14:	20000438 	.word	0x20000438
 8000a18:	08004f80 	.word	0x08004f80

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <Error_Handler+0x6>

08000a24 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <MX_SPI1_Init+0x60>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a52:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a68:	220a      	movs	r2, #10
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI1_Init+0x5c>)
 8000a6e:	f001 fe01 	bl	8002674 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000a78:	f7ff ffd0 	bl	8000a1c <Error_Handler>
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200002e0 	.word	0x200002e0
 8000a84:	40013000 	.word	0x40013000

08000a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a4b      	ldr	r2, [pc, #300]	; (8000bd4 <HAL_SPI_MspInit+0x14c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	f040 8090 	bne.w	8000bcc <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000ab6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aba:	6453      	str	r3, [r2, #68]	; 0x44
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a41      	ldr	r2, [pc, #260]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <HAL_SPI_MspInit+0x150>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae4:	23e0      	movs	r3, #224	; 0xe0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000af4:	2305      	movs	r3, #5
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4837      	ldr	r0, [pc, #220]	; (8000bdc <HAL_SPI_MspInit+0x154>)
 8000b00:	f000 ffe8 	bl	8001ad4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b06:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <HAL_SPI_MspInit+0x15c>)
 8000b08:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000b0a:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b24:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b44:	4826      	ldr	r0, [pc, #152]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b46:	f000 fc35 	bl	80013b4 <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000b50:	f7ff ff64 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b58:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b5a:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_SPI_MspInit+0x158>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <HAL_SPI_MspInit+0x164>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b6c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b70:	2240      	movs	r2, #64	; 0x40
 8000b72:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b80:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ba0:	4811      	ldr	r0, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000ba2:	f000 fc07 	bl	80013b4 <HAL_DMA_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000bac:	f7ff ff36 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <HAL_SPI_MspInit+0x160>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2023      	movs	r0, #35	; 0x23
 8000bc2:	f000 fbc0 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000bc6:	2023      	movs	r0, #35	; 0x23
 8000bc8:	f000 fbd9 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013000 	.word	0x40013000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	20000338 	.word	0x20000338
 8000be4:	40026410 	.word	0x40026410
 8000be8:	20000398 	.word	0x20000398
 8000bec:	40026440 	.word	0x40026440

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_MspInit+0x4c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 fa60 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f001 f8c5 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f001 f8be 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <SPI1_IRQHandler+0x10>)
 8000cb6:	f001 ff03 	bl	8002ac0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002e0 	.word	0x200002e0

08000cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <USART1_IRQHandler+0x10>)
 8000cca:	f002 fb95 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200003f8 	.word	0x200003f8

08000cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USART2_IRQHandler+0x10>)
 8000cde:	f002 fb8b 	bl	80033f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000438 	.word	0x20000438

08000cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf4:	f001 f898 	bl	8001e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DMA2_Stream0_IRQHandler+0x10>)
 8000d02:	f000 fc7f 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000338 	.word	0x20000338

08000d10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA2_Stream2_IRQHandler+0x10>)
 8000d16:	f000 fc75 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000398 	.word	0x20000398

08000d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
	}

return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fca7 	bl	80006cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
	}
	return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f003 f8de 	bl	8003ff0 <__errno>
 8000e34:	4602      	mov	r2, r0
 8000e36:	230c      	movs	r3, #12
 8000e38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20040000 	.word	0x20040000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200002d4 	.word	0x200002d4
 8000e68:	20000480 	.word	0x20000480

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemInit+0x28>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SystemInit+0x28>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SystemInit+0x28>)
 8000e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e86:	609a      	str	r2, [r3, #8]
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART1_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART1_UART_Init+0x4c>)
 8000ed0:	f002 f912 	bl	80030f8 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f7ff fd9f 	bl	8000a1c <Error_Handler>
  }

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200003f8 	.word	0x200003f8
 8000ee8:	40011000 	.word	0x40011000

08000eec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART2_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART2_UART_Init+0x4c>)
 8000f24:	f002 f8e8 	bl	80030f8 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f7ff fd75 	bl	8000a1c <Error_Handler>
  }

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000438 	.word	0x20000438
 8000f3c:	40004400 	.word	0x40004400

08000f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a3a      	ldr	r2, [pc, #232]	; (8001048 <HAL_UART_MspInit+0x108>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d135      	bne.n	8000fce <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	4a38      	ldr	r2, [pc, #224]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6453      	str	r3, [r2, #68]	; 0x44
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4826      	ldr	r0, [pc, #152]	; (8001050 <HAL_UART_MspInit+0x110>)
 8000fb8:	f000 fd8c 	bl	8001ad4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2025      	movs	r0, #37	; 0x25
 8000fc2:	f000 f9c0 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fc6:	2025      	movs	r0, #37	; 0x25
 8000fc8:	f000 f9d9 	bl	800137e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fcc:	e038      	b.n	8001040 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <HAL_UART_MspInit+0x114>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d133      	bne.n	8001040 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_UART_MspInit+0x10c>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x10c>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001010:	230c      	movs	r3, #12
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001020:	2307      	movs	r3, #7
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_UART_MspInit+0x110>)
 800102c:	f000 fd52 	bl	8001ad4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2026      	movs	r0, #38	; 0x26
 8001036:	f000 f986 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103a:	2026      	movs	r0, #38	; 0x26
 800103c:	f000 f99f 	bl	800137e <HAL_NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40011000 	.word	0x40011000
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000
 8001054:	40004400 	.word	0x40004400

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800105c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800105e:	e003      	b.n	8001068 <LoopCopyDataInit>

08001060 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001062:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001064:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001066:	3104      	adds	r1, #4

08001068 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001068:	480b      	ldr	r0, [pc, #44]	; (8001098 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800106c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001070:	d3f6      	bcc.n	8001060 <CopyDataInit>
  ldr  r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001074:	e002      	b.n	800107c <LoopFillZerobss>

08001076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001076:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001078:	f842 3b04 	str.w	r3, [r2], #4

0800107c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001080:	d3f9      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001082:	f7ff fef3 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 ffb9 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fb31 	bl	80006f0 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001090:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8001094:	08005058 	.word	0x08005058
  ldr  r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800109c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80010a0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80010a4:	20000480 	.word	0x20000480

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f92b 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fd86 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f943 	bl	800139a <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f90b 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000004 	.word	0x20000004
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000008 	.word	0x20000008

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000478 	.word	0x20000478

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000478 	.word	0x20000478

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feda 	bl	8001178 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e099      	b.n	8001504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f0:	e00f      	b.n	8001412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f2:	f7ff fec1 	bl	8001178 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d908      	bls.n	8001412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e078      	b.n	8001504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e8      	bne.n	80013f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_DMA_Init+0x158>)
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2b04      	cmp	r3, #4
 800146a:	d107      	bne.n	800147c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4313      	orrs	r3, r2
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f023 0307 	bic.w	r3, r3, #7
 8001492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d117      	bne.n	80014d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fa91 	bl	80019e0 <DMA_CheckFifoParam>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014d2:	2301      	movs	r3, #1
 80014d4:	e016      	b.n	8001504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa48 	bl	8001974 <DMA_CalcBaseAndBitshift>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	223f      	movs	r2, #63	; 0x3f
 80014ee:	409a      	lsls	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	f010803f 	.word	0xf010803f

08001510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Start_IT+0x26>
 8001532:	2302      	movs	r3, #2
 8001534:	e040      	b.n	80015b8 <HAL_DMA_Start_IT+0xa8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12f      	bne.n	80015aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f9da 	bl	8001918 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0216 	orr.w	r2, r2, #22
 800157e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0208 	orr.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e005      	b.n	80015b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d004      	beq.n	80015de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e00c      	b.n	80015f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001610:	4b92      	ldr	r3, [pc, #584]	; (800185c <HAL_DMA_IRQHandler+0x258>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a92      	ldr	r2, [pc, #584]	; (8001860 <HAL_DMA_IRQHandler+0x25c>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0a9b      	lsrs	r3, r3, #10
 800161c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	2208      	movs	r2, #8
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01a      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2208      	movs	r2, #8
 800165e:	409a      	lsls	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001692:	2201      	movs	r2, #1
 8001694:	409a      	lsls	r2, r3
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	2204      	movs	r2, #4
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d012      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00b      	beq.n	80016dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e0:	2210      	movs	r2, #16
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d043      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d03c      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2210      	movs	r2, #16
 8001700:	409a      	lsls	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d018      	beq.n	8001746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d108      	bne.n	8001734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
 8001732:	e01f      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01b      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
 8001744:	e016      	b.n	8001774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0208 	bic.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2220      	movs	r2, #32
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 808e 	beq.w	80018a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8086 	beq.w	80018a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	2220      	movs	r2, #32
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d136      	bne.n	800181c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0216 	bic.w	r2, r2, #22
 80017bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_DMA_IRQHandler+0x1da>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0208 	bic.w	r2, r2, #8
 80017ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	223f      	movs	r2, #63	; 0x3f
 80017f4:	409a      	lsls	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180e:	2b00      	cmp	r3, #0
 8001810:	d07d      	beq.n	800190e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	4798      	blx	r3
        }
        return;
 800181a:	e078      	b.n	800190e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01c      	beq.n	8001864 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	2b00      	cmp	r3, #0
 800183e:	d030      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
 8001848:	e02b      	b.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184e:	2b00      	cmp	r3, #0
 8001850:	d027      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
 800185a:	e022      	b.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
 800185c:	20000004 	.word	0x20000004
 8001860:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10f      	bne.n	8001892 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0210 	bic.w	r2, r2, #16
 8001880:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d032      	beq.n	8001910 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d022      	beq.n	80018fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2205      	movs	r2, #5
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0201 	bic.w	r2, r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d307      	bcc.n	80018ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f2      	bne.n	80018ce <HAL_DMA_IRQHandler+0x2ca>
 80018e8:	e000      	b.n	80018ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
 800190c:	e000      	b.n	8001910 <HAL_DMA_IRQHandler+0x30c>
        return;
 800190e:	bf00      	nop
    }
  }
}
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop

08001918 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001934:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b40      	cmp	r3, #64	; 0x40
 8001944:	d108      	bne.n	8001958 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001956:	e007      	b.n	8001968 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3b10      	subs	r3, #16
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800198e:	4a13      	ldr	r2, [pc, #76]	; (80019dc <DMA_CalcBaseAndBitshift+0x68>)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d909      	bls.n	80019b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	; 0x58
 80019b4:	e007      	b.n	80019c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	aaaaaaab 	.word	0xaaaaaaab
 80019dc:	08004fa8 	.word	0x08004fa8

080019e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11f      	bne.n	8001a3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d855      	bhi.n	8001aac <DMA_CheckFifoParam+0xcc>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <DMA_CheckFifoParam+0x28>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a2b 	.word	0x08001a2b
 8001a10:	08001a19 	.word	0x08001a19
 8001a14:	08001aad 	.word	0x08001aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d045      	beq.n	8001ab0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a28:	e042      	b.n	8001ab0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a32:	d13f      	bne.n	8001ab4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a38:	e03c      	b.n	8001ab4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a42:	d121      	bne.n	8001a88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d836      	bhi.n	8001ab8 <DMA_CheckFifoParam+0xd8>
 8001a4a:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <DMA_CheckFifoParam+0x70>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a67 	.word	0x08001a67
 8001a58:	08001a61 	.word	0x08001a61
 8001a5c:	08001a79 	.word	0x08001a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
      break;
 8001a64:	e02f      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d024      	beq.n	8001abc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a76:	e021      	b.n	8001abc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a80:	d11e      	bne.n	8001ac0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a86:	e01b      	b.n	8001ac0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d902      	bls.n	8001a94 <DMA_CheckFifoParam+0xb4>
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d003      	beq.n	8001a9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a92:	e018      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      break;
 8001a98:	e015      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00e      	beq.n	8001ac4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8001aaa:	e00b      	b.n	8001ac4 <DMA_CheckFifoParam+0xe4>
      break;
 8001aac:	bf00      	nop
 8001aae:	e00a      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ab0:	bf00      	nop
 8001ab2:	e008      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ab4:	bf00      	nop
 8001ab6:	e006      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ab8:	bf00      	nop
 8001aba:	e004      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001abc:	bf00      	nop
 8001abe:	e002      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001ac0:	bf00      	nop
 8001ac2:	e000      	b.n	8001ac6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ac4:	bf00      	nop
    }
  } 
  
  return status; 
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e165      	b.n	8001dbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8154 	bne.w	8001db6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00b      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d130      	bne.n	8001b90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	2203      	movs	r2, #3
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b64:	2201      	movs	r2, #1
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0201 	and.w	r2, r3, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0xfc>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80ae 	beq.w	8001db6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d025      	beq.n	8001cee <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4d      	ldr	r2, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x308>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d01f      	beq.n	8001cea <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4c      	ldr	r2, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x30c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d019      	beq.n	8001ce6 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4b      	ldr	r2, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x310>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d013      	beq.n	8001ce2 <HAL_GPIO_Init+0x20e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_GPIO_Init+0x314>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00d      	beq.n	8001cde <HAL_GPIO_Init+0x20a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a49      	ldr	r2, [pc, #292]	; (8001dec <HAL_GPIO_Init+0x318>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d007      	beq.n	8001cda <HAL_GPIO_Init+0x206>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	; (8001df0 <HAL_GPIO_Init+0x31c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d101      	bne.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001cd2:	2306      	movs	r3, #6
 8001cd4:	e00c      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00a      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cda:	2305      	movs	r3, #5
 8001cdc:	e008      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e004      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e002      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x21c>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f002 0203 	and.w	r2, r2, #3
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	4093      	lsls	r3, r2
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d00:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d0e:	4b39      	ldr	r3, [pc, #228]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d86:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db0:	4a10      	ldr	r2, [pc, #64]	; (8001df4 <HAL_GPIO_Init+0x320>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3301      	adds	r3, #1
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b0f      	cmp	r3, #15
 8001dc0:	f67f ae96 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3724      	adds	r7, #36	; 0x24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40021400 	.word	0x40021400
 8001df0:	40021800 	.word	0x40021800
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fd52 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013c00 	.word	0x40013c00

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f916 	bl	8001178 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f912 	bl	8001178 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f876 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	08004f90 	.word	0x08004f90
 800201c:	20000004 	.word	0x20000004
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d007      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x32>
 8002046:	2b08      	cmp	r3, #8
 8002048:	d008      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x38>
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 808d 	bne.w	800216a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002052:	60bb      	str	r3, [r7, #8]
       break;
 8002054:	e08c      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b4b      	ldr	r3, [pc, #300]	; (8002184 <HAL_RCC_GetSysClockFreq+0x160>)
 8002058:	60bb      	str	r3, [r7, #8]
      break;
 800205a:	e089      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4b45      	ldr	r3, [pc, #276]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d023      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	ea03 0501 	and.w	r5, r3, r1
 8002088:	ea04 0602 	and.w	r6, r4, r2
 800208c:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_RCC_GetSysClockFreq+0x160>)
 800208e:	fb02 f106 	mul.w	r1, r2, r6
 8002092:	2200      	movs	r2, #0
 8002094:	fb02 f205 	mul.w	r2, r2, r5
 8002098:	440a      	add	r2, r1
 800209a:	493a      	ldr	r1, [pc, #232]	; (8002184 <HAL_RCC_GetSysClockFreq+0x160>)
 800209c:	fba5 0101 	umull	r0, r1, r5, r1
 80020a0:	1853      	adds	r3, r2, r1
 80020a2:	4619      	mov	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f04f 0400 	mov.w	r4, #0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4623      	mov	r3, r4
 80020ae:	f7fe f8ff 	bl	80002b0 <__aeabi_uldivmod>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e049      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ba:	4b30      	ldr	r3, [pc, #192]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	f04f 0400 	mov.w	r4, #0
 80020c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	ea03 0501 	and.w	r5, r3, r1
 80020d0:	ea04 0602 	and.w	r6, r4, r2
 80020d4:	4629      	mov	r1, r5
 80020d6:	4632      	mov	r2, r6
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	0154      	lsls	r4, r2, #5
 80020e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020e6:	014b      	lsls	r3, r1, #5
 80020e8:	4619      	mov	r1, r3
 80020ea:	4622      	mov	r2, r4
 80020ec:	1b49      	subs	r1, r1, r5
 80020ee:	eb62 0206 	sbc.w	r2, r2, r6
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	f04f 0400 	mov.w	r4, #0
 80020fa:	0194      	lsls	r4, r2, #6
 80020fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002100:	018b      	lsls	r3, r1, #6
 8002102:	1a5b      	subs	r3, r3, r1
 8002104:	eb64 0402 	sbc.w	r4, r4, r2
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	00e2      	lsls	r2, r4, #3
 8002112:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002116:	00d9      	lsls	r1, r3, #3
 8002118:	460b      	mov	r3, r1
 800211a:	4614      	mov	r4, r2
 800211c:	195b      	adds	r3, r3, r5
 800211e:	eb44 0406 	adc.w	r4, r4, r6
 8002122:	f04f 0100 	mov.w	r1, #0
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	02a2      	lsls	r2, r4, #10
 800212c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002130:	0299      	lsls	r1, r3, #10
 8002132:	460b      	mov	r3, r1
 8002134:	4614      	mov	r4, r2
 8002136:	4618      	mov	r0, r3
 8002138:	4621      	mov	r1, r4
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f04f 0400 	mov.w	r4, #0
 8002140:	461a      	mov	r2, r3
 8002142:	4623      	mov	r3, r4
 8002144:	f7fe f8b4 	bl	80002b0 <__aeabi_uldivmod>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_GetSysClockFreq+0x158>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	0c1b      	lsrs	r3, r3, #16
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	3301      	adds	r3, #1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	60bb      	str	r3, [r7, #8]
      break;
 8002168:	e002      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_RCC_GetSysClockFreq+0x15c>)
 800216c:	60bb      	str	r3, [r7, #8]
      break;
 800216e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002170:	68bb      	ldr	r3, [r7, #8]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	00f42400 	.word	0x00f42400
 8002184:	017d7840 	.word	0x017d7840

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021a4:	f7ff fff0 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a8:	4601      	mov	r1, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0a9b      	lsrs	r3, r3, #10
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4a03      	ldr	r2, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08004fa0 	.word	0x08004fa0

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021cc:	f7ff ffdc 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021d0:	4601      	mov	r1, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0b5b      	lsrs	r3, r3, #13
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08004fa0 	.word	0x08004fa0

080021f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d075      	beq.n	80022f4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002208:	4ba2      	ldr	r3, [pc, #648]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b04      	cmp	r3, #4
 8002212:	d00c      	beq.n	800222e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002214:	4b9f      	ldr	r3, [pc, #636]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800221c:	2b08      	cmp	r3, #8
 800221e:	d112      	bne.n	8002246 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002220:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222c:	d10b      	bne.n	8002246 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222e:	4b99      	ldr	r3, [pc, #612]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d05b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x102>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d157      	bne.n	80022f2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e20b      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x6e>
 8002250:	4b90      	ldr	r3, [pc, #576]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a8f      	ldr	r2, [pc, #572]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	e01d      	b.n	800229a <HAL_RCC_OscConfig+0xaa>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002266:	d10c      	bne.n	8002282 <HAL_RCC_OscConfig+0x92>
 8002268:	4b8a      	ldr	r3, [pc, #552]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a89      	ldr	r2, [pc, #548]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800226e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b87      	ldr	r3, [pc, #540]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a86      	ldr	r2, [pc, #536]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e00b      	b.n	800229a <HAL_RCC_OscConfig+0xaa>
 8002282:	4b84      	ldr	r3, [pc, #528]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a83      	ldr	r2, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b81      	ldr	r3, [pc, #516]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a80      	ldr	r2, [pc, #512]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d013      	beq.n	80022ca <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe ff69 	bl	8001178 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022aa:	f7fe ff65 	bl	8001178 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1d0      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022bc:	4b75      	ldr	r3, [pc, #468]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0xba>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff55 	bl	8001178 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d2:	f7fe ff51 	bl	8001178 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1bc      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e4:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0xe2>
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d063      	beq.n	80023c8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002314:	2b08      	cmp	r3, #8
 8002316:	d11c      	bne.n	8002352 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d116      	bne.n	8002352 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002324:	4b5b      	ldr	r3, [pc, #364]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_OscConfig+0x14c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e190      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b55      	ldr	r3, [pc, #340]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4952      	ldr	r1, [pc, #328]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002350:	e03a      	b.n	80023c8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d020      	beq.n	800239c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235a:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x2a8>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ff0a 	bl	8001178 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe ff06 	bl	8001178 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e171      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	493f      	ldr	r1, [pc, #252]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239c:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_OscConfig+0x2a8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fee9 	bl	8001178 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe fee5 	bl	8001178 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e150      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023bc:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d030      	beq.n	8002436 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023dc:	4b2f      	ldr	r3, [pc, #188]	; (800249c <HAL_RCC_OscConfig+0x2ac>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fec9 	bl	8001178 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe fec5 	bl	8001178 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e130      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x1fa>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe feb2 	bl	8001178 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe feae 	bl	8001178 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e119      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f0      	bne.n	8002418 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 809f 	beq.w	8002582 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10f      	bne.n	8002474 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x2a4>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_RCC_OscConfig+0x2b0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d120      	bne.n	80024c2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_RCC_OscConfig+0x2b0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a06      	ldr	r2, [pc, #24]	; (80024a0 <HAL_RCC_OscConfig+0x2b0>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248c:	f7fe fe74 	bl	8001178 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	e010      	b.n	80024b6 <HAL_RCC_OscConfig+0x2c6>
 8002494:	40023800 	.word	0x40023800
 8002498:	42470000 	.word	0x42470000
 800249c:	42470e80 	.word	0x42470e80
 80024a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe fe68 	bl	8001178 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0d3      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2e8>
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	4a67      	ldr	r2, [pc, #412]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	6713      	str	r3, [r2, #112]	; 0x70
 80024d6:	e01c      	b.n	8002512 <HAL_RCC_OscConfig+0x322>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_OscConfig+0x30a>
 80024e0:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a61      	ldr	r2, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	4a5e      	ldr	r2, [pc, #376]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70
 80024f8:	e00b      	b.n	8002512 <HAL_RCC_OscConfig+0x322>
 80024fa:	4b5c      	ldr	r3, [pc, #368]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5b      	ldr	r2, [pc, #364]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a58      	ldr	r2, [pc, #352]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d015      	beq.n	8002546 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fe2d 	bl	8001178 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fe29 	bl	8001178 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e092      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	4b4c      	ldr	r3, [pc, #304]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ee      	beq.n	8002522 <HAL_RCC_OscConfig+0x332>
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe fe17 	bl	8001178 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fe13 	bl	8001178 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e07c      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a3c      	ldr	r2, [pc, #240]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d068      	beq.n	800265c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b08      	cmp	r3, #8
 8002594:	d060      	beq.n	8002658 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d145      	bne.n	800262a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x480>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fde8 	bl	8001178 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fde4 	bl	8001178 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e04f      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69da      	ldr	r2, [r3, #28]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	3b01      	subs	r3, #1
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	431a      	orrs	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	071b      	lsls	r3, r3, #28
 80025f6:	491d      	ldr	r1, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCC_OscConfig+0x480>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fdb9 	bl	8001178 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe fdb5 	bl	8001178 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e020      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x41a>
 8002628:	e018      	b.n	800265c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_OscConfig+0x480>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fda2 	bl	8001178 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fd9e 	bl	8001178 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e009      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_RCC_OscConfig+0x47c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x448>
 8002656:	e001      	b.n	800265c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40007000 	.word	0x40007000
 800266c:	40023800 	.word	0x40023800
 8002670:	42470060 	.word	0x42470060

08002674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e056      	b.n	8002734 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe f9f1 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	ea42 0103 	orr.w	r1, r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	0c1b      	lsrs	r3, r3, #16
 8002704:	f003 0104 	and.w	r1, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d110      	bne.n	8002778 <HAL_SPI_Receive_DMA+0x3c>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275e:	d10b      	bne.n	8002778 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2204      	movs	r2, #4
 8002764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f8a4 	bl	80028bc <HAL_SPI_TransmitReceive_DMA>
 8002774:	4603      	mov	r3, r0
 8002776:	e097      	b.n	80028a8 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_SPI_Receive_DMA+0x4a>
 8002782:	2302      	movs	r3, #2
 8002784:	e090      	b.n	80028a8 <HAL_SPI_Receive_DMA+0x16c>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d002      	beq.n	80027a0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800279e:	e07e      	b.n	800289e <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_SPI_Receive_DMA+0x70>
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027b0:	e075      	b.n	800289e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2204      	movs	r2, #4
 80027b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	88fa      	ldrh	r2, [r7, #6]
 80027d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f2:	d107      	bne.n	8002804 <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002802:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <HAL_SPI_Receive_DMA+0x174>)
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_SPI_Receive_DMA+0x178>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_SPI_Receive_DMA+0x17c>)
 800281a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	2200      	movs	r2, #0
 8002822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	4619      	mov	r1, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800283c:	f7fe fe68 	bl	8001510 <HAL_DMA_Start_IT>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00c      	beq.n	8002860 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800285e:	e01e      	b.n	800289e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d007      	beq.n	800287e <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0220 	orr.w	r2, r2, #32
 800288c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08002e35 	.word	0x08002e35
 80028b4:	08002cfd 	.word	0x08002cfd
 80028b8:	08002e6d 	.word	0x08002e6d

080028bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e0e3      	b.n	8002aa4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80028f2:	7dbb      	ldrb	r3, [r7, #22]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d00d      	beq.n	8002914 <HAL_SPI_TransmitReceive_DMA+0x58>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028fe:	d106      	bne.n	800290e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <HAL_SPI_TransmitReceive_DMA+0x52>
 8002908:	7dbb      	ldrb	r3, [r7, #22]
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002912:	e0c2      	b.n	8002a9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002920:	887b      	ldrh	r3, [r7, #2]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800292a:	e0b6      	b.n	8002a9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b04      	cmp	r3, #4
 8002936:	d003      	beq.n	8002940 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2205      	movs	r2, #5
 800293c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	887a      	ldrh	r2, [r7, #2]
 8002956:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	887a      	ldrh	r2, [r7, #2]
 8002962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	887a      	ldrh	r2, [r7, #2]
 8002968:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b04      	cmp	r3, #4
 8002980:	d108      	bne.n	8002994 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	4a49      	ldr	r2, [pc, #292]	; (8002aac <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c
 8002992:	e007      	b.n	80029a4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	4a45      	ldr	r2, [pc, #276]	; (8002ab8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a8:	4a44      	ldr	r2, [pc, #272]	; (8002abc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80029aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	2200      	movs	r2, #0
 80029b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	4619      	mov	r1, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80029cc:	f7fe fda0 	bl	8001510 <HAL_DMA_Start_IT>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0210 	orr.w	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80029ee:	e054      	b.n	8002a9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	2200      	movs	r2, #0
 8002a16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4619      	mov	r1, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	330c      	adds	r3, #12
 8002a30:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a36:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002a38:	f7fe fd6a 	bl	8001510 <HAL_DMA_Start_IT>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002a5a:	e01e      	b.n	8002a9a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d007      	beq.n	8002a7a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a78:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0220 	orr.w	r2, r2, #32
 8002a88:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0202 	orr.w	r2, r2, #2
 8002a98:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08002e35 	.word	0x08002e35
 8002ab0:	08002cfd 	.word	0x08002cfd
 8002ab4:	08002e51 	.word	0x08002e51
 8002ab8:	08002da5 	.word	0x08002da5
 8002abc:	08002e6d 	.word	0x08002e6d

08002ac0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	099b      	lsrs	r3, r3, #6
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10f      	bne.n	8002b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
    return;
 8002b02:	e0d8      	b.n	8002cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_SPI_IRQHandler+0x66>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	09db      	lsrs	r3, r3, #7
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
    return;
 8002b24:	e0c7      	b.n	8002cb6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_SPI_IRQHandler+0x8c>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80b5 	beq.w	8002cb6 <HAL_SPI_IRQHandler+0x1f6>
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80ae 	beq.w	8002cb6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d023      	beq.n	8002bae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d011      	beq.n	8002b96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f043 0204 	orr.w	r2, r3, #4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	e00b      	b.n	8002bae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
        return;
 8002bac:	e083      	b.n	8002cb6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	095b      	lsrs	r3, r3, #5
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d014      	beq.n	8002be4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00c      	beq.n	8002c0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f043 0208 	orr.w	r2, r3, #8
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d050      	beq.n	8002cb4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <HAL_SPI_IRQHandler+0x17e>
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d034      	beq.n	8002ca8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0203 	bic.w	r2, r2, #3
 8002c4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d011      	beq.n	8002c7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_SPI_IRQHandler+0x1fc>)
 8002c5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fcac 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <HAL_SPI_IRQHandler+0x1fc>)
 8002c88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fc96 	bl	80015c0 <HAL_DMA_Abort_IT>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ca6:	e003      	b.n	8002cb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f81d 	bl	8002ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cae:	e000      	b.n	8002cb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002cb0:	bf00      	nop
    return;
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
  }
}
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08002ead 	.word	0x08002ead

08002cc0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d0a:	f7fe fa35 	bl	8001178 <HAL_GetTick>
 8002d0e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d03b      	beq.n	8002d98 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0220 	bic.w	r2, r2, #32
 8002d2e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10d      	bne.n	8002d54 <SPI_DMAReceiveCplt+0x58>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d40:	d108      	bne.n	8002d54 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0203 	bic.w	r2, r2, #3
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e007      	b.n	8002d64 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	2164      	movs	r1, #100	; 0x64
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f91d 	bl	8002fa8 <SPI_EndRxTransaction>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7ff ffa9 	bl	8002ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d96:	e002      	b.n	8002d9e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7fd fde7 	bl	800096c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db2:	f7fe f9e1 	bl	8001178 <HAL_GetTick>
 8002db6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	d02f      	beq.n	8002e28 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0220 	bic.w	r2, r2, #32
 8002dd6:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f949 	bl	8003074 <SPI_EndRxTxTransaction>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0203 	bic.w	r2, r2, #3
 8002e02:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff ff61 	bl	8002ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002e26:	e002      	b.n	8002e2e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7fd fdbb 	bl	80009a4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff ff3c 	bl	8002cc0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f7ff ff38 	bl	8002cd4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0203 	bic.w	r2, r2, #3
 8002e88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0210 	orr.w	r2, r3, #16
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff22 	bl	8002ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff ff0e 	bl	8002ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ee4:	e04c      	b.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d048      	beq.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002eee:	f7fe f943 	bl	8001178 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d902      	bls.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d13d      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f1c:	d111      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f26:	d004      	beq.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f30:	d107      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4a:	d10f      	bne.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e00f      	b.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d1a3      	bne.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fbc:	d111      	bne.n	8002fe2 <SPI_EndRxTransaction+0x3a>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc6:	d004      	beq.n	8002fd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd0:	d107      	bne.n	8002fe2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fea:	d12a      	bne.n	8003042 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d012      	beq.n	800301c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2180      	movs	r1, #128	; 0x80
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff67 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02d      	beq.n	8003068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e026      	b.n	800306a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2200      	movs	r2, #0
 8003024:	2101      	movs	r1, #1
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff ff54 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e013      	b.n	800306a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	2101      	movs	r1, #1
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff41 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e000      	b.n	800306a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <SPI_EndRxTxTransaction+0x7c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <SPI_EndRxTxTransaction+0x80>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0d5b      	lsrs	r3, r3, #21
 800308c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d112      	bne.n	80030c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff ff12 	bl	8002ed4 <SPI_WaitFlagStateUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e00f      	b.n	80030e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d0f2      	beq.n	80030c6 <SPI_EndRxTxTransaction+0x52>
 80030e0:	e000      	b.n	80030e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80030e2:	bf00      	nop
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000004 	.word	0x20000004
 80030f4:	165e9f81 	.word	0x165e9f81

080030f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e03f      	b.n	800318a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd ff0e 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800313a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fbdb 	bl	80038f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b088      	sub	sp, #32
 8003196:	af02      	add	r7, sp, #8
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 8083 	bne.w	80032ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_UART_Transmit+0x2e>
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e07b      	b.n	80032bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Transmit+0x40>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e074      	b.n	80032bc <HAL_UART_Transmit+0x12a>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2221      	movs	r2, #33	; 0x21
 80031e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031e8:	f7fd ffc6 	bl	8001178 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003202:	e042      	b.n	800328a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d122      	bne.n	8003262 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f9fa 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e042      	b.n	80032bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003248:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3302      	adds	r3, #2
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	e017      	b.n	800328a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	e013      	b.n	800328a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f9d7 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e01f      	b.n	80032bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	60ba      	str	r2, [r7, #8]
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1b7      	bne.n	8003204 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2200      	movs	r2, #0
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f9be 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e006      	b.n	80032bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d130      	bne.n	8003340 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_UART_Transmit_IT+0x26>
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e029      	b.n	8003342 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit_IT+0x38>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e022      	b.n	8003342 <HAL_UART_Transmit_IT+0x7e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2221      	movs	r2, #33	; 0x21
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800333a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	e000      	b.n	8003342 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003340:	2302      	movs	r3, #2
  }
}
 8003342:	4618      	mov	r0, r3
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	4613      	mov	r3, r2
 800335a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	d140      	bne.n	80033ea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Receive_IT+0x26>
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e039      	b.n	80033ec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_UART_Receive_IT+0x38>
 8003382:	2302      	movs	r3, #2
 8003384:	e032      	b.n	80033ec <HAL_UART_Receive_IT+0x9e>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2222      	movs	r2, #34	; 0x22
 80033aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_UART_IRQHandler+0x52>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9d6 	bl	80037f4 <UART_Receive_IT>
      return;
 8003448:	e0d1      	b.n	80035ee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80b0 	beq.w	80035b2 <HAL_UART_IRQHandler+0x1ba>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_UART_IRQHandler+0x70>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a5 	beq.w	80035b2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_UART_IRQHandler+0x90>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	f043 0201 	orr.w	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_UART_IRQHandler+0xb0>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	f043 0202 	orr.w	r2, r3, #2
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_UART_IRQHandler+0xd0>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00f      	beq.n	80034f2 <HAL_UART_IRQHandler+0xfa>
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_UART_IRQHandler+0xee>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	f043 0208 	orr.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d078      	beq.n	80035ec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_UART_IRQHandler+0x11c>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f970 	bl	80037f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_UART_IRQHandler+0x144>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d031      	beq.n	80035a0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8b9 	bl	80036b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d123      	bne.n	8003598 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_UART_IRQHandler+0x1fc>)
 800356e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe f823 	bl	80015c0 <HAL_DMA_Abort_IT>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d016      	beq.n	80035ae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358a:	4610      	mov	r0, r2
 800358c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	e00e      	b.n	80035ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f83b 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003596:	e00a      	b.n	80035ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f837 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359e:	e006      	b.n	80035ae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f833 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035ac:	e01e      	b.n	80035ec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ae:	bf00      	nop
    return;
 80035b0:	e01c      	b.n	80035ec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_UART_IRQHandler+0x1d6>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8a6 	bl	8003718 <UART_Transmit_IT>
    return;
 80035cc:	e00f      	b.n	80035ee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_UART_IRQHandler+0x1f6>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f8ee 	bl	80037c4 <UART_EndTransmit_IT>
    return;
 80035e8:	bf00      	nop
 80035ea:	e000      	b.n	80035ee <HAL_UART_IRQHandler+0x1f6>
    return;
 80035ec:	bf00      	nop
  }
}
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	080036f1 	.word	0x080036f1

080035f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	e02c      	b.n	800368c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d028      	beq.n	800368c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
 8003640:	f7fd fd9a 	bl	8001178 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	d21d      	bcs.n	800368c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800365e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e00f      	b.n	80036ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d0c3      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff ff7e 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b21      	cmp	r3, #33	; 0x21
 800372a:	d144      	bne.n	80037b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d11a      	bne.n	800376c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	621a      	str	r2, [r3, #32]
 800375e:	e00e      	b.n	800377e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]
 800376a:	e008      	b.n	800377e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	1c59      	adds	r1, r3, #1
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6211      	str	r1, [r2, #32]
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4619      	mov	r1, r3
 800378c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
  }
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff07 	bl	80035f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b22      	cmp	r3, #34	; 0x22
 8003806:	d171      	bne.n	80038ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d123      	bne.n	800385a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10e      	bne.n	800383e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	1c9a      	adds	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
 800383c:	e029      	b.n	8003892 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	b29b      	uxth	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	; 0x28
 8003858:	e01b      	b.n	8003892 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6858      	ldr	r0, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6291      	str	r1, [r2, #40]	; 0x28
 8003872:	b2c2      	uxtb	r2, r0
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e00c      	b.n	8003892 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	1c58      	adds	r0, r3, #1
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	6288      	str	r0, [r1, #40]	; 0x28
 800388a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4619      	mov	r1, r3
 80038a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d120      	bne.n	80038e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0220 	bic.w	r2, r2, #32
 80038b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd f87e 	bl	80009e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e002      	b.n	80038ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	431a      	orrs	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800393a:	f023 030c 	bic.w	r3, r3, #12
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	430b      	orrs	r3, r1
 8003946:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003966:	f040 818b 	bne.w	8003c80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4ac1      	ldr	r2, [pc, #772]	; (8003c74 <UART_SetConfig+0x37c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d005      	beq.n	8003980 <UART_SetConfig+0x88>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4abf      	ldr	r2, [pc, #764]	; (8003c78 <UART_SetConfig+0x380>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f040 80bd 	bne.w	8003afa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fc22 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003984:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	461d      	mov	r5, r3
 800398a:	f04f 0600 	mov.w	r6, #0
 800398e:	46a8      	mov	r8, r5
 8003990:	46b1      	mov	r9, r6
 8003992:	eb18 0308 	adds.w	r3, r8, r8
 8003996:	eb49 0409 	adc.w	r4, r9, r9
 800399a:	4698      	mov	r8, r3
 800399c:	46a1      	mov	r9, r4
 800399e:	eb18 0805 	adds.w	r8, r8, r5
 80039a2:	eb49 0906 	adc.w	r9, r9, r6
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039ba:	4688      	mov	r8, r1
 80039bc:	4691      	mov	r9, r2
 80039be:	eb18 0005 	adds.w	r0, r8, r5
 80039c2:	eb49 0106 	adc.w	r1, r9, r6
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	461d      	mov	r5, r3
 80039cc:	f04f 0600 	mov.w	r6, #0
 80039d0:	196b      	adds	r3, r5, r5
 80039d2:	eb46 0406 	adc.w	r4, r6, r6
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	f7fc fc69 	bl	80002b0 <__aeabi_uldivmod>
 80039de:	4603      	mov	r3, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	461a      	mov	r2, r3
 80039e4:	4ba5      	ldr	r3, [pc, #660]	; (8003c7c <UART_SetConfig+0x384>)
 80039e6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ea:	095b      	lsrs	r3, r3, #5
 80039ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	461d      	mov	r5, r3
 80039f4:	f04f 0600 	mov.w	r6, #0
 80039f8:	46a9      	mov	r9, r5
 80039fa:	46b2      	mov	sl, r6
 80039fc:	eb19 0309 	adds.w	r3, r9, r9
 8003a00:	eb4a 040a 	adc.w	r4, sl, sl
 8003a04:	4699      	mov	r9, r3
 8003a06:	46a2      	mov	sl, r4
 8003a08:	eb19 0905 	adds.w	r9, r9, r5
 8003a0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a24:	4689      	mov	r9, r1
 8003a26:	4692      	mov	sl, r2
 8003a28:	eb19 0005 	adds.w	r0, r9, r5
 8003a2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	461d      	mov	r5, r3
 8003a36:	f04f 0600 	mov.w	r6, #0
 8003a3a:	196b      	adds	r3, r5, r5
 8003a3c:	eb46 0406 	adc.w	r4, r6, r6
 8003a40:	461a      	mov	r2, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	f7fc fc34 	bl	80002b0 <__aeabi_uldivmod>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b8b      	ldr	r3, [pc, #556]	; (8003c7c <UART_SetConfig+0x384>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a86      	ldr	r2, [pc, #536]	; (8003c7c <UART_SetConfig+0x384>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	4498      	add	r8, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	461d      	mov	r5, r3
 8003a76:	f04f 0600 	mov.w	r6, #0
 8003a7a:	46a9      	mov	r9, r5
 8003a7c:	46b2      	mov	sl, r6
 8003a7e:	eb19 0309 	adds.w	r3, r9, r9
 8003a82:	eb4a 040a 	adc.w	r4, sl, sl
 8003a86:	4699      	mov	r9, r3
 8003a88:	46a2      	mov	sl, r4
 8003a8a:	eb19 0905 	adds.w	r9, r9, r5
 8003a8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a92:	f04f 0100 	mov.w	r1, #0
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003aa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aa6:	4689      	mov	r9, r1
 8003aa8:	4692      	mov	sl, r2
 8003aaa:	eb19 0005 	adds.w	r0, r9, r5
 8003aae:	eb4a 0106 	adc.w	r1, sl, r6
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	f04f 0600 	mov.w	r6, #0
 8003abc:	196b      	adds	r3, r5, r5
 8003abe:	eb46 0406 	adc.w	r4, r6, r6
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	f7fc fbf3 	bl	80002b0 <__aeabi_uldivmod>
 8003aca:	4603      	mov	r3, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <UART_SetConfig+0x384>)
 8003ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2164      	movs	r1, #100	; 0x64
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	3332      	adds	r3, #50	; 0x32
 8003ae4:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <UART_SetConfig+0x384>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	f003 0207 	and.w	r2, r3, #7
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4442      	add	r2, r8
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e26f      	b.n	8003fda <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003afa:	f7fe fb51 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8003afe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	461d      	mov	r5, r3
 8003b04:	f04f 0600 	mov.w	r6, #0
 8003b08:	46a8      	mov	r8, r5
 8003b0a:	46b1      	mov	r9, r6
 8003b0c:	eb18 0308 	adds.w	r3, r8, r8
 8003b10:	eb49 0409 	adc.w	r4, r9, r9
 8003b14:	4698      	mov	r8, r3
 8003b16:	46a1      	mov	r9, r4
 8003b18:	eb18 0805 	adds.w	r8, r8, r5
 8003b1c:	eb49 0906 	adc.w	r9, r9, r6
 8003b20:	f04f 0100 	mov.w	r1, #0
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b34:	4688      	mov	r8, r1
 8003b36:	4691      	mov	r9, r2
 8003b38:	eb18 0005 	adds.w	r0, r8, r5
 8003b3c:	eb49 0106 	adc.w	r1, r9, r6
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	461d      	mov	r5, r3
 8003b46:	f04f 0600 	mov.w	r6, #0
 8003b4a:	196b      	adds	r3, r5, r5
 8003b4c:	eb46 0406 	adc.w	r4, r6, r6
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fbac 	bl	80002b0 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <UART_SetConfig+0x384>)
 8003b60:	fba3 2302 	umull	r2, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	461d      	mov	r5, r3
 8003b6e:	f04f 0600 	mov.w	r6, #0
 8003b72:	46a9      	mov	r9, r5
 8003b74:	46b2      	mov	sl, r6
 8003b76:	eb19 0309 	adds.w	r3, r9, r9
 8003b7a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b7e:	4699      	mov	r9, r3
 8003b80:	46a2      	mov	sl, r4
 8003b82:	eb19 0905 	adds.w	r9, r9, r5
 8003b86:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b9e:	4689      	mov	r9, r1
 8003ba0:	4692      	mov	sl, r2
 8003ba2:	eb19 0005 	adds.w	r0, r9, r5
 8003ba6:	eb4a 0106 	adc.w	r1, sl, r6
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	461d      	mov	r5, r3
 8003bb0:	f04f 0600 	mov.w	r6, #0
 8003bb4:	196b      	adds	r3, r5, r5
 8003bb6:	eb46 0406 	adc.w	r4, r6, r6
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	f7fc fb77 	bl	80002b0 <__aeabi_uldivmod>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <UART_SetConfig+0x384>)
 8003bca:	fba3 1302 	umull	r1, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	2164      	movs	r1, #100	; 0x64
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	3332      	adds	r3, #50	; 0x32
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <UART_SetConfig+0x384>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bea:	4498      	add	r8, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	461d      	mov	r5, r3
 8003bf0:	f04f 0600 	mov.w	r6, #0
 8003bf4:	46a9      	mov	r9, r5
 8003bf6:	46b2      	mov	sl, r6
 8003bf8:	eb19 0309 	adds.w	r3, r9, r9
 8003bfc:	eb4a 040a 	adc.w	r4, sl, sl
 8003c00:	4699      	mov	r9, r3
 8003c02:	46a2      	mov	sl, r4
 8003c04:	eb19 0905 	adds.w	r9, r9, r5
 8003c08:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c20:	4689      	mov	r9, r1
 8003c22:	4692      	mov	sl, r2
 8003c24:	eb19 0005 	adds.w	r0, r9, r5
 8003c28:	eb4a 0106 	adc.w	r1, sl, r6
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	461d      	mov	r5, r3
 8003c32:	f04f 0600 	mov.w	r6, #0
 8003c36:	196b      	adds	r3, r5, r5
 8003c38:	eb46 0406 	adc.w	r4, r6, r6
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	f7fc fb36 	bl	80002b0 <__aeabi_uldivmod>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <UART_SetConfig+0x384>)
 8003c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	2164      	movs	r1, #100	; 0x64
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	3332      	adds	r3, #50	; 0x32
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <UART_SetConfig+0x384>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	f003 0207 	and.w	r2, r3, #7
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4442      	add	r2, r8
 8003c70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c72:	e1b2      	b.n	8003fda <UART_SetConfig+0x6e2>
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4ad7      	ldr	r2, [pc, #860]	; (8003fe4 <UART_SetConfig+0x6ec>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d005      	beq.n	8003c96 <UART_SetConfig+0x39e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4ad6      	ldr	r2, [pc, #856]	; (8003fe8 <UART_SetConfig+0x6f0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f040 80d1 	bne.w	8003e38 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c96:	f7fe fa97 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003c9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	469a      	mov	sl, r3
 8003ca0:	f04f 0b00 	mov.w	fp, #0
 8003ca4:	46d0      	mov	r8, sl
 8003ca6:	46d9      	mov	r9, fp
 8003ca8:	eb18 0308 	adds.w	r3, r8, r8
 8003cac:	eb49 0409 	adc.w	r4, r9, r9
 8003cb0:	4698      	mov	r8, r3
 8003cb2:	46a1      	mov	r9, r4
 8003cb4:	eb18 080a 	adds.w	r8, r8, sl
 8003cb8:	eb49 090b 	adc.w	r9, r9, fp
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ccc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cd0:	4688      	mov	r8, r1
 8003cd2:	4691      	mov	r9, r2
 8003cd4:	eb1a 0508 	adds.w	r5, sl, r8
 8003cd8:	eb4b 0609 	adc.w	r6, fp, r9
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	0094      	lsls	r4, r2, #2
 8003cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf4:	008b      	lsls	r3, r1, #2
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	f7fc fad7 	bl	80002b0 <__aeabi_uldivmod>
 8003d02:	4603      	mov	r3, r0
 8003d04:	460c      	mov	r4, r1
 8003d06:	461a      	mov	r2, r3
 8003d08:	4bb8      	ldr	r3, [pc, #736]	; (8003fec <UART_SetConfig+0x6f4>)
 8003d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	469b      	mov	fp, r3
 8003d18:	f04f 0c00 	mov.w	ip, #0
 8003d1c:	46d9      	mov	r9, fp
 8003d1e:	46e2      	mov	sl, ip
 8003d20:	eb19 0309 	adds.w	r3, r9, r9
 8003d24:	eb4a 040a 	adc.w	r4, sl, sl
 8003d28:	4699      	mov	r9, r3
 8003d2a:	46a2      	mov	sl, r4
 8003d2c:	eb19 090b 	adds.w	r9, r9, fp
 8003d30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d48:	4689      	mov	r9, r1
 8003d4a:	4692      	mov	sl, r2
 8003d4c:	eb1b 0509 	adds.w	r5, fp, r9
 8003d50:	eb4c 060a 	adc.w	r6, ip, sl
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	0094      	lsls	r4, r2, #2
 8003d68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d6c:	008b      	lsls	r3, r1, #2
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4623      	mov	r3, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	4631      	mov	r1, r6
 8003d76:	f7fc fa9b 	bl	80002b0 <__aeabi_uldivmod>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	460c      	mov	r4, r1
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4b9a      	ldr	r3, [pc, #616]	; (8003fec <UART_SetConfig+0x6f4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a95      	ldr	r2, [pc, #596]	; (8003fec <UART_SetConfig+0x6f4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da0:	4498      	add	r8, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	469b      	mov	fp, r3
 8003da6:	f04f 0c00 	mov.w	ip, #0
 8003daa:	46d9      	mov	r9, fp
 8003dac:	46e2      	mov	sl, ip
 8003dae:	eb19 0309 	adds.w	r3, r9, r9
 8003db2:	eb4a 040a 	adc.w	r4, sl, sl
 8003db6:	4699      	mov	r9, r3
 8003db8:	46a2      	mov	sl, r4
 8003dba:	eb19 090b 	adds.w	r9, r9, fp
 8003dbe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dd6:	4689      	mov	r9, r1
 8003dd8:	4692      	mov	sl, r2
 8003dda:	eb1b 0509 	adds.w	r5, fp, r9
 8003dde:	eb4c 060a 	adc.w	r6, ip, sl
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4619      	mov	r1, r3
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	f04f 0400 	mov.w	r4, #0
 8003df4:	0094      	lsls	r4, r2, #2
 8003df6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dfa:	008b      	lsls	r3, r1, #2
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	4631      	mov	r1, r6
 8003e04:	f7fc fa54 	bl	80002b0 <__aeabi_uldivmod>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b77      	ldr	r3, [pc, #476]	; (8003fec <UART_SetConfig+0x6f4>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	2164      	movs	r1, #100	; 0x64
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	3332      	adds	r3, #50	; 0x32
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <UART_SetConfig+0x6f4>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4442      	add	r2, r8
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	e0d0      	b.n	8003fda <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7fe f9b2 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8003e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	469a      	mov	sl, r3
 8003e42:	f04f 0b00 	mov.w	fp, #0
 8003e46:	46d0      	mov	r8, sl
 8003e48:	46d9      	mov	r9, fp
 8003e4a:	eb18 0308 	adds.w	r3, r8, r8
 8003e4e:	eb49 0409 	adc.w	r4, r9, r9
 8003e52:	4698      	mov	r8, r3
 8003e54:	46a1      	mov	r9, r4
 8003e56:	eb18 080a 	adds.w	r8, r8, sl
 8003e5a:	eb49 090b 	adc.w	r9, r9, fp
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e72:	4688      	mov	r8, r1
 8003e74:	4691      	mov	r9, r2
 8003e76:	eb1a 0508 	adds.w	r5, sl, r8
 8003e7a:	eb4b 0609 	adc.w	r6, fp, r9
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4619      	mov	r1, r3
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	f04f 0400 	mov.w	r4, #0
 8003e90:	0094      	lsls	r4, r2, #2
 8003e92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e96:	008b      	lsls	r3, r1, #2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4623      	mov	r3, r4
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	f7fc fa06 	bl	80002b0 <__aeabi_uldivmod>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <UART_SetConfig+0x6f4>)
 8003eac:	fba3 2302 	umull	r2, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	469b      	mov	fp, r3
 8003eba:	f04f 0c00 	mov.w	ip, #0
 8003ebe:	46d9      	mov	r9, fp
 8003ec0:	46e2      	mov	sl, ip
 8003ec2:	eb19 0309 	adds.w	r3, r9, r9
 8003ec6:	eb4a 040a 	adc.w	r4, sl, sl
 8003eca:	4699      	mov	r9, r3
 8003ecc:	46a2      	mov	sl, r4
 8003ece:	eb19 090b 	adds.w	r9, r9, fp
 8003ed2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eea:	4689      	mov	r9, r1
 8003eec:	4692      	mov	sl, r2
 8003eee:	eb1b 0509 	adds.w	r5, fp, r9
 8003ef2:	eb4c 060a 	adc.w	r6, ip, sl
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	0094      	lsls	r4, r2, #2
 8003f0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	4628      	mov	r0, r5
 8003f16:	4631      	mov	r1, r6
 8003f18:	f7fc f9ca 	bl	80002b0 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b32      	ldr	r3, [pc, #200]	; (8003fec <UART_SetConfig+0x6f4>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <UART_SetConfig+0x6f4>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f42:	4498      	add	r8, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	469b      	mov	fp, r3
 8003f48:	f04f 0c00 	mov.w	ip, #0
 8003f4c:	46d9      	mov	r9, fp
 8003f4e:	46e2      	mov	sl, ip
 8003f50:	eb19 0309 	adds.w	r3, r9, r9
 8003f54:	eb4a 040a 	adc.w	r4, sl, sl
 8003f58:	4699      	mov	r9, r3
 8003f5a:	46a2      	mov	sl, r4
 8003f5c:	eb19 090b 	adds.w	r9, r9, fp
 8003f60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f64:	f04f 0100 	mov.w	r1, #0
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f78:	4689      	mov	r9, r1
 8003f7a:	4692      	mov	sl, r2
 8003f7c:	eb1b 0509 	adds.w	r5, fp, r9
 8003f80:	eb4c 060a 	adc.w	r6, ip, sl
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	f04f 0400 	mov.w	r4, #0
 8003f96:	0094      	lsls	r4, r2, #2
 8003f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f9c:	008b      	lsls	r3, r1, #2
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	f7fc f983 	bl	80002b0 <__aeabi_uldivmod>
 8003faa:	4603      	mov	r3, r0
 8003fac:	460c      	mov	r4, r1
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <UART_SetConfig+0x6f4>)
 8003fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2164      	movs	r1, #100	; 0x64
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	3332      	adds	r3, #50	; 0x32
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <UART_SetConfig+0x6f4>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f003 020f 	and.w	r2, r3, #15
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4442      	add	r2, r8
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	e7ff      	b.n	8003fda <UART_SetConfig+0x6e2>
 8003fda:	bf00      	nop
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f

08003ff0 <__errno>:
 8003ff0:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <__errno+0x8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000010 	.word	0x20000010

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4e0d      	ldr	r6, [pc, #52]	; (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004002:	1ba4      	subs	r4, r4, r6
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2500      	movs	r5, #0
 8004008:	42a5      	cmp	r5, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4e0b      	ldr	r6, [pc, #44]	; (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	; (8004040 <__libc_init_array+0x44>)
 8004010:	f000 ff68 	bl	8004ee4 <_init>
 8004014:	1ba4      	subs	r4, r4, r6
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2500      	movs	r5, #0
 800401a:	42a5      	cmp	r5, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004024:	4798      	blx	r3
 8004026:	3501      	adds	r5, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800402e:	4798      	blx	r3
 8004030:	3501      	adds	r5, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	08005050 	.word	0x08005050
 8004038:	08005050 	.word	0x08005050
 800403c:	08005050 	.word	0x08005050
 8004040:	08005054 	.word	0x08005054

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <iprintf>:
 8004054:	b40f      	push	{r0, r1, r2, r3}
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <iprintf+0x2c>)
 8004058:	b513      	push	{r0, r1, r4, lr}
 800405a:	681c      	ldr	r4, [r3, #0]
 800405c:	b124      	cbz	r4, 8004068 <iprintf+0x14>
 800405e:	69a3      	ldr	r3, [r4, #24]
 8004060:	b913      	cbnz	r3, 8004068 <iprintf+0x14>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 fa22 	bl	80044ac <__sinit>
 8004068:	ab05      	add	r3, sp, #20
 800406a:	9a04      	ldr	r2, [sp, #16]
 800406c:	68a1      	ldr	r1, [r4, #8]
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fbdb 	bl	800482c <_vfiprintf_r>
 8004076:	b002      	add	sp, #8
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	b004      	add	sp, #16
 800407e:	4770      	bx	lr
 8004080:	20000010 	.word	0x20000010

08004084 <_puts_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	460e      	mov	r6, r1
 8004088:	4605      	mov	r5, r0
 800408a:	b118      	cbz	r0, 8004094 <_puts_r+0x10>
 800408c:	6983      	ldr	r3, [r0, #24]
 800408e:	b90b      	cbnz	r3, 8004094 <_puts_r+0x10>
 8004090:	f000 fa0c 	bl	80044ac <__sinit>
 8004094:	69ab      	ldr	r3, [r5, #24]
 8004096:	68ac      	ldr	r4, [r5, #8]
 8004098:	b913      	cbnz	r3, 80040a0 <_puts_r+0x1c>
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fa06 	bl	80044ac <__sinit>
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <_puts_r+0xac>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d117      	bne.n	80040d6 <_puts_r+0x52>
 80040a6:	686c      	ldr	r4, [r5, #4]
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	d51d      	bpl.n	80040ea <_puts_r+0x66>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b1db      	cbz	r3, 80040ea <_puts_r+0x66>
 80040b2:	3e01      	subs	r6, #1
 80040b4:	68a3      	ldr	r3, [r4, #8]
 80040b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ba:	3b01      	subs	r3, #1
 80040bc:	60a3      	str	r3, [r4, #8]
 80040be:	b9e9      	cbnz	r1, 80040fc <_puts_r+0x78>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da2e      	bge.n	8004122 <_puts_r+0x9e>
 80040c4:	4622      	mov	r2, r4
 80040c6:	210a      	movs	r1, #10
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f83f 	bl	800414c <__swbuf_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	d011      	beq.n	80040f6 <_puts_r+0x72>
 80040d2:	200a      	movs	r0, #10
 80040d4:	e011      	b.n	80040fa <_puts_r+0x76>
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <_puts_r+0xb0>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	d101      	bne.n	80040e0 <_puts_r+0x5c>
 80040dc:	68ac      	ldr	r4, [r5, #8]
 80040de:	e7e3      	b.n	80040a8 <_puts_r+0x24>
 80040e0:	4b15      	ldr	r3, [pc, #84]	; (8004138 <_puts_r+0xb4>)
 80040e2:	429c      	cmp	r4, r3
 80040e4:	bf08      	it	eq
 80040e6:	68ec      	ldreq	r4, [r5, #12]
 80040e8:	e7de      	b.n	80040a8 <_puts_r+0x24>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f000 f87f 	bl	80041f0 <__swsetup_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d0dd      	beq.n	80040b2 <_puts_r+0x2e>
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	bd70      	pop	{r4, r5, r6, pc}
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	da04      	bge.n	800410a <_puts_r+0x86>
 8004100:	69a2      	ldr	r2, [r4, #24]
 8004102:	429a      	cmp	r2, r3
 8004104:	dc06      	bgt.n	8004114 <_puts_r+0x90>
 8004106:	290a      	cmp	r1, #10
 8004108:	d004      	beq.n	8004114 <_puts_r+0x90>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	7019      	strb	r1, [r3, #0]
 8004112:	e7cf      	b.n	80040b4 <_puts_r+0x30>
 8004114:	4622      	mov	r2, r4
 8004116:	4628      	mov	r0, r5
 8004118:	f000 f818 	bl	800414c <__swbuf_r>
 800411c:	3001      	adds	r0, #1
 800411e:	d1c9      	bne.n	80040b4 <_puts_r+0x30>
 8004120:	e7e9      	b.n	80040f6 <_puts_r+0x72>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	200a      	movs	r0, #10
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	7018      	strb	r0, [r3, #0]
 800412c:	e7e5      	b.n	80040fa <_puts_r+0x76>
 800412e:	bf00      	nop
 8004130:	08004fd4 	.word	0x08004fd4
 8004134:	08004ff4 	.word	0x08004ff4
 8004138:	08004fb4 	.word	0x08004fb4

0800413c <puts>:
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <puts+0xc>)
 800413e:	4601      	mov	r1, r0
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	f7ff bf9f 	b.w	8004084 <_puts_r>
 8004146:	bf00      	nop
 8004148:	20000010 	.word	0x20000010

0800414c <__swbuf_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	460e      	mov	r6, r1
 8004150:	4614      	mov	r4, r2
 8004152:	4605      	mov	r5, r0
 8004154:	b118      	cbz	r0, 800415e <__swbuf_r+0x12>
 8004156:	6983      	ldr	r3, [r0, #24]
 8004158:	b90b      	cbnz	r3, 800415e <__swbuf_r+0x12>
 800415a:	f000 f9a7 	bl	80044ac <__sinit>
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <__swbuf_r+0x98>)
 8004160:	429c      	cmp	r4, r3
 8004162:	d12a      	bne.n	80041ba <__swbuf_r+0x6e>
 8004164:	686c      	ldr	r4, [r5, #4]
 8004166:	69a3      	ldr	r3, [r4, #24]
 8004168:	60a3      	str	r3, [r4, #8]
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	071a      	lsls	r2, r3, #28
 800416e:	d52e      	bpl.n	80041ce <__swbuf_r+0x82>
 8004170:	6923      	ldr	r3, [r4, #16]
 8004172:	b363      	cbz	r3, 80041ce <__swbuf_r+0x82>
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	1ac0      	subs	r0, r0, r3
 800417a:	6963      	ldr	r3, [r4, #20]
 800417c:	b2f6      	uxtb	r6, r6
 800417e:	4283      	cmp	r3, r0
 8004180:	4637      	mov	r7, r6
 8004182:	dc04      	bgt.n	800418e <__swbuf_r+0x42>
 8004184:	4621      	mov	r1, r4
 8004186:	4628      	mov	r0, r5
 8004188:	f000 f926 	bl	80043d8 <_fflush_r>
 800418c:	bb28      	cbnz	r0, 80041da <__swbuf_r+0x8e>
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	3b01      	subs	r3, #1
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	701e      	strb	r6, [r3, #0]
 800419c:	6963      	ldr	r3, [r4, #20]
 800419e:	3001      	adds	r0, #1
 80041a0:	4283      	cmp	r3, r0
 80041a2:	d004      	beq.n	80041ae <__swbuf_r+0x62>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	07db      	lsls	r3, r3, #31
 80041a8:	d519      	bpl.n	80041de <__swbuf_r+0x92>
 80041aa:	2e0a      	cmp	r6, #10
 80041ac:	d117      	bne.n	80041de <__swbuf_r+0x92>
 80041ae:	4621      	mov	r1, r4
 80041b0:	4628      	mov	r0, r5
 80041b2:	f000 f911 	bl	80043d8 <_fflush_r>
 80041b6:	b190      	cbz	r0, 80041de <__swbuf_r+0x92>
 80041b8:	e00f      	b.n	80041da <__swbuf_r+0x8e>
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <__swbuf_r+0x9c>)
 80041bc:	429c      	cmp	r4, r3
 80041be:	d101      	bne.n	80041c4 <__swbuf_r+0x78>
 80041c0:	68ac      	ldr	r4, [r5, #8]
 80041c2:	e7d0      	b.n	8004166 <__swbuf_r+0x1a>
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <__swbuf_r+0xa0>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	bf08      	it	eq
 80041ca:	68ec      	ldreq	r4, [r5, #12]
 80041cc:	e7cb      	b.n	8004166 <__swbuf_r+0x1a>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f80d 	bl	80041f0 <__swsetup_r>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0cc      	beq.n	8004174 <__swbuf_r+0x28>
 80041da:	f04f 37ff 	mov.w	r7, #4294967295
 80041de:	4638      	mov	r0, r7
 80041e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	08004fd4 	.word	0x08004fd4
 80041e8:	08004ff4 	.word	0x08004ff4
 80041ec:	08004fb4 	.word	0x08004fb4

080041f0 <__swsetup_r>:
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <__swsetup_r+0xcc>)
 80041f2:	b570      	push	{r4, r5, r6, lr}
 80041f4:	681d      	ldr	r5, [r3, #0]
 80041f6:	4606      	mov	r6, r0
 80041f8:	460c      	mov	r4, r1
 80041fa:	b125      	cbz	r5, 8004206 <__swsetup_r+0x16>
 80041fc:	69ab      	ldr	r3, [r5, #24]
 80041fe:	b913      	cbnz	r3, 8004206 <__swsetup_r+0x16>
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f953 	bl	80044ac <__sinit>
 8004206:	4b2e      	ldr	r3, [pc, #184]	; (80042c0 <__swsetup_r+0xd0>)
 8004208:	429c      	cmp	r4, r3
 800420a:	d10f      	bne.n	800422c <__swsetup_r+0x3c>
 800420c:	686c      	ldr	r4, [r5, #4]
 800420e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004212:	b29a      	uxth	r2, r3
 8004214:	0715      	lsls	r5, r2, #28
 8004216:	d42c      	bmi.n	8004272 <__swsetup_r+0x82>
 8004218:	06d0      	lsls	r0, r2, #27
 800421a:	d411      	bmi.n	8004240 <__swsetup_r+0x50>
 800421c:	2209      	movs	r2, #9
 800421e:	6032      	str	r2, [r6, #0]
 8004220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	f04f 30ff 	mov.w	r0, #4294967295
 800422a:	e03e      	b.n	80042aa <__swsetup_r+0xba>
 800422c:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <__swsetup_r+0xd4>)
 800422e:	429c      	cmp	r4, r3
 8004230:	d101      	bne.n	8004236 <__swsetup_r+0x46>
 8004232:	68ac      	ldr	r4, [r5, #8]
 8004234:	e7eb      	b.n	800420e <__swsetup_r+0x1e>
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <__swsetup_r+0xd8>)
 8004238:	429c      	cmp	r4, r3
 800423a:	bf08      	it	eq
 800423c:	68ec      	ldreq	r4, [r5, #12]
 800423e:	e7e6      	b.n	800420e <__swsetup_r+0x1e>
 8004240:	0751      	lsls	r1, r2, #29
 8004242:	d512      	bpl.n	800426a <__swsetup_r+0x7a>
 8004244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004246:	b141      	cbz	r1, 800425a <__swsetup_r+0x6a>
 8004248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800424c:	4299      	cmp	r1, r3
 800424e:	d002      	beq.n	8004256 <__swsetup_r+0x66>
 8004250:	4630      	mov	r0, r6
 8004252:	f000 fa19 	bl	8004688 <_free_r>
 8004256:	2300      	movs	r3, #0
 8004258:	6363      	str	r3, [r4, #52]	; 0x34
 800425a:	89a3      	ldrh	r3, [r4, #12]
 800425c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004260:	81a3      	strh	r3, [r4, #12]
 8004262:	2300      	movs	r3, #0
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	6923      	ldr	r3, [r4, #16]
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f043 0308 	orr.w	r3, r3, #8
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	b94b      	cbnz	r3, 800428a <__swsetup_r+0x9a>
 8004276:	89a3      	ldrh	r3, [r4, #12]
 8004278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d003      	beq.n	800428a <__swsetup_r+0x9a>
 8004282:	4621      	mov	r1, r4
 8004284:	4630      	mov	r0, r6
 8004286:	f000 f9bf 	bl	8004608 <__smakebuf_r>
 800428a:	89a2      	ldrh	r2, [r4, #12]
 800428c:	f012 0301 	ands.w	r3, r2, #1
 8004290:	d00c      	beq.n	80042ac <__swsetup_r+0xbc>
 8004292:	2300      	movs	r3, #0
 8004294:	60a3      	str	r3, [r4, #8]
 8004296:	6963      	ldr	r3, [r4, #20]
 8004298:	425b      	negs	r3, r3
 800429a:	61a3      	str	r3, [r4, #24]
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b953      	cbnz	r3, 80042b6 <__swsetup_r+0xc6>
 80042a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80042a8:	d1ba      	bne.n	8004220 <__swsetup_r+0x30>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	0792      	lsls	r2, r2, #30
 80042ae:	bf58      	it	pl
 80042b0:	6963      	ldrpl	r3, [r4, #20]
 80042b2:	60a3      	str	r3, [r4, #8]
 80042b4:	e7f2      	b.n	800429c <__swsetup_r+0xac>
 80042b6:	2000      	movs	r0, #0
 80042b8:	e7f7      	b.n	80042aa <__swsetup_r+0xba>
 80042ba:	bf00      	nop
 80042bc:	20000010 	.word	0x20000010
 80042c0:	08004fd4 	.word	0x08004fd4
 80042c4:	08004ff4 	.word	0x08004ff4
 80042c8:	08004fb4 	.word	0x08004fb4

080042cc <__sflush_r>:
 80042cc:	898a      	ldrh	r2, [r1, #12]
 80042ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d2:	4605      	mov	r5, r0
 80042d4:	0710      	lsls	r0, r2, #28
 80042d6:	460c      	mov	r4, r1
 80042d8:	d458      	bmi.n	800438c <__sflush_r+0xc0>
 80042da:	684b      	ldr	r3, [r1, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	dc05      	bgt.n	80042ec <__sflush_r+0x20>
 80042e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dc02      	bgt.n	80042ec <__sflush_r+0x20>
 80042e6:	2000      	movs	r0, #0
 80042e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d0f9      	beq.n	80042e6 <__sflush_r+0x1a>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042f8:	682f      	ldr	r7, [r5, #0]
 80042fa:	6a21      	ldr	r1, [r4, #32]
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	d032      	beq.n	8004366 <__sflush_r+0x9a>
 8004300:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	075a      	lsls	r2, r3, #29
 8004306:	d505      	bpl.n	8004314 <__sflush_r+0x48>
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	1ac0      	subs	r0, r0, r3
 800430c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800430e:	b10b      	cbz	r3, 8004314 <__sflush_r+0x48>
 8004310:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004312:	1ac0      	subs	r0, r0, r3
 8004314:	2300      	movs	r3, #0
 8004316:	4602      	mov	r2, r0
 8004318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800431a:	6a21      	ldr	r1, [r4, #32]
 800431c:	4628      	mov	r0, r5
 800431e:	47b0      	blx	r6
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	d106      	bne.n	8004334 <__sflush_r+0x68>
 8004326:	6829      	ldr	r1, [r5, #0]
 8004328:	291d      	cmp	r1, #29
 800432a:	d848      	bhi.n	80043be <__sflush_r+0xf2>
 800432c:	4a29      	ldr	r2, [pc, #164]	; (80043d4 <__sflush_r+0x108>)
 800432e:	40ca      	lsrs	r2, r1
 8004330:	07d6      	lsls	r6, r2, #31
 8004332:	d544      	bpl.n	80043be <__sflush_r+0xf2>
 8004334:	2200      	movs	r2, #0
 8004336:	6062      	str	r2, [r4, #4]
 8004338:	04d9      	lsls	r1, r3, #19
 800433a:	6922      	ldr	r2, [r4, #16]
 800433c:	6022      	str	r2, [r4, #0]
 800433e:	d504      	bpl.n	800434a <__sflush_r+0x7e>
 8004340:	1c42      	adds	r2, r0, #1
 8004342:	d101      	bne.n	8004348 <__sflush_r+0x7c>
 8004344:	682b      	ldr	r3, [r5, #0]
 8004346:	b903      	cbnz	r3, 800434a <__sflush_r+0x7e>
 8004348:	6560      	str	r0, [r4, #84]	; 0x54
 800434a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800434c:	602f      	str	r7, [r5, #0]
 800434e:	2900      	cmp	r1, #0
 8004350:	d0c9      	beq.n	80042e6 <__sflush_r+0x1a>
 8004352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004356:	4299      	cmp	r1, r3
 8004358:	d002      	beq.n	8004360 <__sflush_r+0x94>
 800435a:	4628      	mov	r0, r5
 800435c:	f000 f994 	bl	8004688 <_free_r>
 8004360:	2000      	movs	r0, #0
 8004362:	6360      	str	r0, [r4, #52]	; 0x34
 8004364:	e7c0      	b.n	80042e8 <__sflush_r+0x1c>
 8004366:	2301      	movs	r3, #1
 8004368:	4628      	mov	r0, r5
 800436a:	47b0      	blx	r6
 800436c:	1c41      	adds	r1, r0, #1
 800436e:	d1c8      	bne.n	8004302 <__sflush_r+0x36>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0c5      	beq.n	8004302 <__sflush_r+0x36>
 8004376:	2b1d      	cmp	r3, #29
 8004378:	d001      	beq.n	800437e <__sflush_r+0xb2>
 800437a:	2b16      	cmp	r3, #22
 800437c:	d101      	bne.n	8004382 <__sflush_r+0xb6>
 800437e:	602f      	str	r7, [r5, #0]
 8004380:	e7b1      	b.n	80042e6 <__sflush_r+0x1a>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004388:	81a3      	strh	r3, [r4, #12]
 800438a:	e7ad      	b.n	80042e8 <__sflush_r+0x1c>
 800438c:	690f      	ldr	r7, [r1, #16]
 800438e:	2f00      	cmp	r7, #0
 8004390:	d0a9      	beq.n	80042e6 <__sflush_r+0x1a>
 8004392:	0793      	lsls	r3, r2, #30
 8004394:	680e      	ldr	r6, [r1, #0]
 8004396:	bf08      	it	eq
 8004398:	694b      	ldreq	r3, [r1, #20]
 800439a:	600f      	str	r7, [r1, #0]
 800439c:	bf18      	it	ne
 800439e:	2300      	movne	r3, #0
 80043a0:	eba6 0807 	sub.w	r8, r6, r7
 80043a4:	608b      	str	r3, [r1, #8]
 80043a6:	f1b8 0f00 	cmp.w	r8, #0
 80043aa:	dd9c      	ble.n	80042e6 <__sflush_r+0x1a>
 80043ac:	4643      	mov	r3, r8
 80043ae:	463a      	mov	r2, r7
 80043b0:	6a21      	ldr	r1, [r4, #32]
 80043b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b0      	blx	r6
 80043b8:	2800      	cmp	r0, #0
 80043ba:	dc06      	bgt.n	80043ca <__sflush_r+0xfe>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e78e      	b.n	80042e8 <__sflush_r+0x1c>
 80043ca:	4407      	add	r7, r0
 80043cc:	eba8 0800 	sub.w	r8, r8, r0
 80043d0:	e7e9      	b.n	80043a6 <__sflush_r+0xda>
 80043d2:	bf00      	nop
 80043d4:	20400001 	.word	0x20400001

080043d8 <_fflush_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	690b      	ldr	r3, [r1, #16]
 80043dc:	4605      	mov	r5, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b1db      	cbz	r3, 800441a <_fflush_r+0x42>
 80043e2:	b118      	cbz	r0, 80043ec <_fflush_r+0x14>
 80043e4:	6983      	ldr	r3, [r0, #24]
 80043e6:	b90b      	cbnz	r3, 80043ec <_fflush_r+0x14>
 80043e8:	f000 f860 	bl	80044ac <__sinit>
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <_fflush_r+0x48>)
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d109      	bne.n	8004406 <_fflush_r+0x2e>
 80043f2:	686c      	ldr	r4, [r5, #4]
 80043f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f8:	b17b      	cbz	r3, 800441a <_fflush_r+0x42>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004402:	f7ff bf63 	b.w	80042cc <__sflush_r>
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <_fflush_r+0x4c>)
 8004408:	429c      	cmp	r4, r3
 800440a:	d101      	bne.n	8004410 <_fflush_r+0x38>
 800440c:	68ac      	ldr	r4, [r5, #8]
 800440e:	e7f1      	b.n	80043f4 <_fflush_r+0x1c>
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <_fflush_r+0x50>)
 8004412:	429c      	cmp	r4, r3
 8004414:	bf08      	it	eq
 8004416:	68ec      	ldreq	r4, [r5, #12]
 8004418:	e7ec      	b.n	80043f4 <_fflush_r+0x1c>
 800441a:	2000      	movs	r0, #0
 800441c:	bd38      	pop	{r3, r4, r5, pc}
 800441e:	bf00      	nop
 8004420:	08004fd4 	.word	0x08004fd4
 8004424:	08004ff4 	.word	0x08004ff4
 8004428:	08004fb4 	.word	0x08004fb4

0800442c <std>:
 800442c:	2300      	movs	r3, #0
 800442e:	b510      	push	{r4, lr}
 8004430:	4604      	mov	r4, r0
 8004432:	e9c0 3300 	strd	r3, r3, [r0]
 8004436:	6083      	str	r3, [r0, #8]
 8004438:	8181      	strh	r1, [r0, #12]
 800443a:	6643      	str	r3, [r0, #100]	; 0x64
 800443c:	81c2      	strh	r2, [r0, #14]
 800443e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004442:	6183      	str	r3, [r0, #24]
 8004444:	4619      	mov	r1, r3
 8004446:	2208      	movs	r2, #8
 8004448:	305c      	adds	r0, #92	; 0x5c
 800444a:	f7ff fdfb 	bl	8004044 <memset>
 800444e:	4b05      	ldr	r3, [pc, #20]	; (8004464 <std+0x38>)
 8004450:	6263      	str	r3, [r4, #36]	; 0x24
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <std+0x3c>)
 8004454:	62a3      	str	r3, [r4, #40]	; 0x28
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <std+0x40>)
 8004458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <std+0x44>)
 800445c:	6224      	str	r4, [r4, #32]
 800445e:	6323      	str	r3, [r4, #48]	; 0x30
 8004460:	bd10      	pop	{r4, pc}
 8004462:	bf00      	nop
 8004464:	08004d89 	.word	0x08004d89
 8004468:	08004dab 	.word	0x08004dab
 800446c:	08004de3 	.word	0x08004de3
 8004470:	08004e07 	.word	0x08004e07

08004474 <_cleanup_r>:
 8004474:	4901      	ldr	r1, [pc, #4]	; (800447c <_cleanup_r+0x8>)
 8004476:	f000 b885 	b.w	8004584 <_fwalk_reent>
 800447a:	bf00      	nop
 800447c:	080043d9 	.word	0x080043d9

08004480 <__sfmoreglue>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	1e4a      	subs	r2, r1, #1
 8004484:	2568      	movs	r5, #104	; 0x68
 8004486:	4355      	muls	r5, r2
 8004488:	460e      	mov	r6, r1
 800448a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800448e:	f000 f949 	bl	8004724 <_malloc_r>
 8004492:	4604      	mov	r4, r0
 8004494:	b140      	cbz	r0, 80044a8 <__sfmoreglue+0x28>
 8004496:	2100      	movs	r1, #0
 8004498:	e9c0 1600 	strd	r1, r6, [r0]
 800449c:	300c      	adds	r0, #12
 800449e:	60a0      	str	r0, [r4, #8]
 80044a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044a4:	f7ff fdce 	bl	8004044 <memset>
 80044a8:	4620      	mov	r0, r4
 80044aa:	bd70      	pop	{r4, r5, r6, pc}

080044ac <__sinit>:
 80044ac:	6983      	ldr	r3, [r0, #24]
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
 80044b2:	bb33      	cbnz	r3, 8004502 <__sinit+0x56>
 80044b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80044b8:	6503      	str	r3, [r0, #80]	; 0x50
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <__sinit+0x58>)
 80044bc:	4a12      	ldr	r2, [pc, #72]	; (8004508 <__sinit+0x5c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6282      	str	r2, [r0, #40]	; 0x28
 80044c2:	4298      	cmp	r0, r3
 80044c4:	bf04      	itt	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	6183      	streq	r3, [r0, #24]
 80044ca:	f000 f81f 	bl	800450c <__sfp>
 80044ce:	6060      	str	r0, [r4, #4]
 80044d0:	4620      	mov	r0, r4
 80044d2:	f000 f81b 	bl	800450c <__sfp>
 80044d6:	60a0      	str	r0, [r4, #8]
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 f817 	bl	800450c <__sfp>
 80044de:	2200      	movs	r2, #0
 80044e0:	60e0      	str	r0, [r4, #12]
 80044e2:	2104      	movs	r1, #4
 80044e4:	6860      	ldr	r0, [r4, #4]
 80044e6:	f7ff ffa1 	bl	800442c <std>
 80044ea:	2201      	movs	r2, #1
 80044ec:	2109      	movs	r1, #9
 80044ee:	68a0      	ldr	r0, [r4, #8]
 80044f0:	f7ff ff9c 	bl	800442c <std>
 80044f4:	2202      	movs	r2, #2
 80044f6:	2112      	movs	r1, #18
 80044f8:	68e0      	ldr	r0, [r4, #12]
 80044fa:	f7ff ff97 	bl	800442c <std>
 80044fe:	2301      	movs	r3, #1
 8004500:	61a3      	str	r3, [r4, #24]
 8004502:	bd10      	pop	{r4, pc}
 8004504:	08004fb0 	.word	0x08004fb0
 8004508:	08004475 	.word	0x08004475

0800450c <__sfp>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <__sfp+0x70>)
 8004510:	681e      	ldr	r6, [r3, #0]
 8004512:	69b3      	ldr	r3, [r6, #24]
 8004514:	4607      	mov	r7, r0
 8004516:	b913      	cbnz	r3, 800451e <__sfp+0x12>
 8004518:	4630      	mov	r0, r6
 800451a:	f7ff ffc7 	bl	80044ac <__sinit>
 800451e:	3648      	adds	r6, #72	; 0x48
 8004520:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004524:	3b01      	subs	r3, #1
 8004526:	d503      	bpl.n	8004530 <__sfp+0x24>
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	b133      	cbz	r3, 800453a <__sfp+0x2e>
 800452c:	6836      	ldr	r6, [r6, #0]
 800452e:	e7f7      	b.n	8004520 <__sfp+0x14>
 8004530:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004534:	b16d      	cbz	r5, 8004552 <__sfp+0x46>
 8004536:	3468      	adds	r4, #104	; 0x68
 8004538:	e7f4      	b.n	8004524 <__sfp+0x18>
 800453a:	2104      	movs	r1, #4
 800453c:	4638      	mov	r0, r7
 800453e:	f7ff ff9f 	bl	8004480 <__sfmoreglue>
 8004542:	6030      	str	r0, [r6, #0]
 8004544:	2800      	cmp	r0, #0
 8004546:	d1f1      	bne.n	800452c <__sfp+0x20>
 8004548:	230c      	movs	r3, #12
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4604      	mov	r4, r0
 800454e:	4620      	mov	r0, r4
 8004550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <__sfp+0x74>)
 8004554:	6665      	str	r5, [r4, #100]	; 0x64
 8004556:	e9c4 5500 	strd	r5, r5, [r4]
 800455a:	60a5      	str	r5, [r4, #8]
 800455c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004560:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004564:	2208      	movs	r2, #8
 8004566:	4629      	mov	r1, r5
 8004568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800456c:	f7ff fd6a 	bl	8004044 <memset>
 8004570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004578:	e7e9      	b.n	800454e <__sfp+0x42>
 800457a:	bf00      	nop
 800457c:	08004fb0 	.word	0x08004fb0
 8004580:	ffff0001 	.word	0xffff0001

08004584 <_fwalk_reent>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	4680      	mov	r8, r0
 800458a:	4689      	mov	r9, r1
 800458c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004590:	2600      	movs	r6, #0
 8004592:	b914      	cbnz	r4, 800459a <_fwalk_reent+0x16>
 8004594:	4630      	mov	r0, r6
 8004596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800459a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800459e:	3f01      	subs	r7, #1
 80045a0:	d501      	bpl.n	80045a6 <_fwalk_reent+0x22>
 80045a2:	6824      	ldr	r4, [r4, #0]
 80045a4:	e7f5      	b.n	8004592 <_fwalk_reent+0xe>
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d907      	bls.n	80045bc <_fwalk_reent+0x38>
 80045ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045b0:	3301      	adds	r3, #1
 80045b2:	d003      	beq.n	80045bc <_fwalk_reent+0x38>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4640      	mov	r0, r8
 80045b8:	47c8      	blx	r9
 80045ba:	4306      	orrs	r6, r0
 80045bc:	3568      	adds	r5, #104	; 0x68
 80045be:	e7ee      	b.n	800459e <_fwalk_reent+0x1a>

080045c0 <__swhatbuf_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	460e      	mov	r6, r1
 80045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c8:	2900      	cmp	r1, #0
 80045ca:	b096      	sub	sp, #88	; 0x58
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	da07      	bge.n	80045e2 <__swhatbuf_r+0x22>
 80045d2:	2300      	movs	r3, #0
 80045d4:	602b      	str	r3, [r5, #0]
 80045d6:	89b3      	ldrh	r3, [r6, #12]
 80045d8:	061a      	lsls	r2, r3, #24
 80045da:	d410      	bmi.n	80045fe <__swhatbuf_r+0x3e>
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	e00e      	b.n	8004600 <__swhatbuf_r+0x40>
 80045e2:	466a      	mov	r2, sp
 80045e4:	f000 fc36 	bl	8004e54 <_fstat_r>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	dbf2      	blt.n	80045d2 <__swhatbuf_r+0x12>
 80045ec:	9a01      	ldr	r2, [sp, #4]
 80045ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045f6:	425a      	negs	r2, r3
 80045f8:	415a      	adcs	r2, r3
 80045fa:	602a      	str	r2, [r5, #0]
 80045fc:	e7ee      	b.n	80045dc <__swhatbuf_r+0x1c>
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	2000      	movs	r0, #0
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	b016      	add	sp, #88	; 0x58
 8004606:	bd70      	pop	{r4, r5, r6, pc}

08004608 <__smakebuf_r>:
 8004608:	898b      	ldrh	r3, [r1, #12]
 800460a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800460c:	079d      	lsls	r5, r3, #30
 800460e:	4606      	mov	r6, r0
 8004610:	460c      	mov	r4, r1
 8004612:	d507      	bpl.n	8004624 <__smakebuf_r+0x1c>
 8004614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2301      	movs	r3, #1
 800461e:	6163      	str	r3, [r4, #20]
 8004620:	b002      	add	sp, #8
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	ab01      	add	r3, sp, #4
 8004626:	466a      	mov	r2, sp
 8004628:	f7ff ffca 	bl	80045c0 <__swhatbuf_r>
 800462c:	9900      	ldr	r1, [sp, #0]
 800462e:	4605      	mov	r5, r0
 8004630:	4630      	mov	r0, r6
 8004632:	f000 f877 	bl	8004724 <_malloc_r>
 8004636:	b948      	cbnz	r0, 800464c <__smakebuf_r+0x44>
 8004638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463c:	059a      	lsls	r2, r3, #22
 800463e:	d4ef      	bmi.n	8004620 <__smakebuf_r+0x18>
 8004640:	f023 0303 	bic.w	r3, r3, #3
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	81a3      	strh	r3, [r4, #12]
 800464a:	e7e3      	b.n	8004614 <__smakebuf_r+0xc>
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <__smakebuf_r+0x7c>)
 800464e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	6020      	str	r0, [r4, #0]
 8004654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	9b00      	ldr	r3, [sp, #0]
 800465c:	6163      	str	r3, [r4, #20]
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	6120      	str	r0, [r4, #16]
 8004662:	b15b      	cbz	r3, 800467c <__smakebuf_r+0x74>
 8004664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004668:	4630      	mov	r0, r6
 800466a:	f000 fc05 	bl	8004e78 <_isatty_r>
 800466e:	b128      	cbz	r0, 800467c <__smakebuf_r+0x74>
 8004670:	89a3      	ldrh	r3, [r4, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	81a3      	strh	r3, [r4, #12]
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	431d      	orrs	r5, r3
 8004680:	81a5      	strh	r5, [r4, #12]
 8004682:	e7cd      	b.n	8004620 <__smakebuf_r+0x18>
 8004684:	08004475 	.word	0x08004475

08004688 <_free_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4605      	mov	r5, r0
 800468c:	2900      	cmp	r1, #0
 800468e:	d045      	beq.n	800471c <_free_r+0x94>
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f0c      	subs	r4, r1, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfb8      	it	lt
 800469a:	18e4      	addlt	r4, r4, r3
 800469c:	f000 fc0e 	bl	8004ebc <__malloc_lock>
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <_free_r+0x98>)
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	4610      	mov	r0, r2
 80046a6:	b933      	cbnz	r3, 80046b6 <_free_r+0x2e>
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6014      	str	r4, [r2, #0]
 80046ac:	4628      	mov	r0, r5
 80046ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b2:	f000 bc04 	b.w	8004ebe <__malloc_unlock>
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d90c      	bls.n	80046d4 <_free_r+0x4c>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	1862      	adds	r2, r4, r1
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf04      	itt	eq
 80046c2:	681a      	ldreq	r2, [r3, #0]
 80046c4:	685b      	ldreq	r3, [r3, #4]
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	bf04      	itt	eq
 80046ca:	1852      	addeq	r2, r2, r1
 80046cc:	6022      	streq	r2, [r4, #0]
 80046ce:	6004      	str	r4, [r0, #0]
 80046d0:	e7ec      	b.n	80046ac <_free_r+0x24>
 80046d2:	4613      	mov	r3, r2
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	b10a      	cbz	r2, 80046dc <_free_r+0x54>
 80046d8:	42a2      	cmp	r2, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x4a>
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	1858      	adds	r0, r3, r1
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x74>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	4401      	add	r1, r0
 80046e8:	1858      	adds	r0, r3, r1
 80046ea:	4282      	cmp	r2, r0
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	d1dd      	bne.n	80046ac <_free_r+0x24>
 80046f0:	6810      	ldr	r0, [r2, #0]
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	4401      	add	r1, r0
 80046f8:	6019      	str	r1, [r3, #0]
 80046fa:	e7d7      	b.n	80046ac <_free_r+0x24>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x7c>
 80046fe:	230c      	movs	r3, #12
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	e7d3      	b.n	80046ac <_free_r+0x24>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	bf04      	itt	eq
 800470c:	6811      	ldreq	r1, [r2, #0]
 800470e:	6852      	ldreq	r2, [r2, #4]
 8004710:	6062      	str	r2, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	605c      	str	r4, [r3, #4]
 800471a:	e7c7      	b.n	80046ac <_free_r+0x24>
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	200002d8 	.word	0x200002d8

08004724 <_malloc_r>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	1ccd      	adds	r5, r1, #3
 8004728:	f025 0503 	bic.w	r5, r5, #3
 800472c:	3508      	adds	r5, #8
 800472e:	2d0c      	cmp	r5, #12
 8004730:	bf38      	it	cc
 8004732:	250c      	movcc	r5, #12
 8004734:	2d00      	cmp	r5, #0
 8004736:	4606      	mov	r6, r0
 8004738:	db01      	blt.n	800473e <_malloc_r+0x1a>
 800473a:	42a9      	cmp	r1, r5
 800473c:	d903      	bls.n	8004746 <_malloc_r+0x22>
 800473e:	230c      	movs	r3, #12
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	2000      	movs	r0, #0
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	f000 fbb9 	bl	8004ebc <__malloc_lock>
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <_malloc_r+0xac>)
 800474c:	6814      	ldr	r4, [r2, #0]
 800474e:	4621      	mov	r1, r4
 8004750:	b991      	cbnz	r1, 8004778 <_malloc_r+0x54>
 8004752:	4c20      	ldr	r4, [pc, #128]	; (80047d4 <_malloc_r+0xb0>)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	b91b      	cbnz	r3, 8004760 <_malloc_r+0x3c>
 8004758:	4630      	mov	r0, r6
 800475a:	f000 fb05 	bl	8004d68 <_sbrk_r>
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	4629      	mov	r1, r5
 8004762:	4630      	mov	r0, r6
 8004764:	f000 fb00 	bl	8004d68 <_sbrk_r>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d124      	bne.n	80047b6 <_malloc_r+0x92>
 800476c:	230c      	movs	r3, #12
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	4630      	mov	r0, r6
 8004772:	f000 fba4 	bl	8004ebe <__malloc_unlock>
 8004776:	e7e4      	b.n	8004742 <_malloc_r+0x1e>
 8004778:	680b      	ldr	r3, [r1, #0]
 800477a:	1b5b      	subs	r3, r3, r5
 800477c:	d418      	bmi.n	80047b0 <_malloc_r+0x8c>
 800477e:	2b0b      	cmp	r3, #11
 8004780:	d90f      	bls.n	80047a2 <_malloc_r+0x7e>
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	50cd      	str	r5, [r1, r3]
 8004786:	18cc      	adds	r4, r1, r3
 8004788:	4630      	mov	r0, r6
 800478a:	f000 fb98 	bl	8004ebe <__malloc_unlock>
 800478e:	f104 000b 	add.w	r0, r4, #11
 8004792:	1d23      	adds	r3, r4, #4
 8004794:	f020 0007 	bic.w	r0, r0, #7
 8004798:	1ac3      	subs	r3, r0, r3
 800479a:	d0d3      	beq.n	8004744 <_malloc_r+0x20>
 800479c:	425a      	negs	r2, r3
 800479e:	50e2      	str	r2, [r4, r3]
 80047a0:	e7d0      	b.n	8004744 <_malloc_r+0x20>
 80047a2:	428c      	cmp	r4, r1
 80047a4:	684b      	ldr	r3, [r1, #4]
 80047a6:	bf16      	itet	ne
 80047a8:	6063      	strne	r3, [r4, #4]
 80047aa:	6013      	streq	r3, [r2, #0]
 80047ac:	460c      	movne	r4, r1
 80047ae:	e7eb      	b.n	8004788 <_malloc_r+0x64>
 80047b0:	460c      	mov	r4, r1
 80047b2:	6849      	ldr	r1, [r1, #4]
 80047b4:	e7cc      	b.n	8004750 <_malloc_r+0x2c>
 80047b6:	1cc4      	adds	r4, r0, #3
 80047b8:	f024 0403 	bic.w	r4, r4, #3
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d005      	beq.n	80047cc <_malloc_r+0xa8>
 80047c0:	1a21      	subs	r1, r4, r0
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 fad0 	bl	8004d68 <_sbrk_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d0cf      	beq.n	800476c <_malloc_r+0x48>
 80047cc:	6025      	str	r5, [r4, #0]
 80047ce:	e7db      	b.n	8004788 <_malloc_r+0x64>
 80047d0:	200002d8 	.word	0x200002d8
 80047d4:	200002dc 	.word	0x200002dc

080047d8 <__sfputc_r>:
 80047d8:	6893      	ldr	r3, [r2, #8]
 80047da:	3b01      	subs	r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	b410      	push	{r4}
 80047e0:	6093      	str	r3, [r2, #8]
 80047e2:	da08      	bge.n	80047f6 <__sfputc_r+0x1e>
 80047e4:	6994      	ldr	r4, [r2, #24]
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	db01      	blt.n	80047ee <__sfputc_r+0x16>
 80047ea:	290a      	cmp	r1, #10
 80047ec:	d103      	bne.n	80047f6 <__sfputc_r+0x1e>
 80047ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f2:	f7ff bcab 	b.w	800414c <__swbuf_r>
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	1c58      	adds	r0, r3, #1
 80047fa:	6010      	str	r0, [r2, #0]
 80047fc:	7019      	strb	r1, [r3, #0]
 80047fe:	4608      	mov	r0, r1
 8004800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004804:	4770      	bx	lr

08004806 <__sfputs_r>:
 8004806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004808:	4606      	mov	r6, r0
 800480a:	460f      	mov	r7, r1
 800480c:	4614      	mov	r4, r2
 800480e:	18d5      	adds	r5, r2, r3
 8004810:	42ac      	cmp	r4, r5
 8004812:	d101      	bne.n	8004818 <__sfputs_r+0x12>
 8004814:	2000      	movs	r0, #0
 8004816:	e007      	b.n	8004828 <__sfputs_r+0x22>
 8004818:	463a      	mov	r2, r7
 800481a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff ffda 	bl	80047d8 <__sfputc_r>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d1f3      	bne.n	8004810 <__sfputs_r+0xa>
 8004828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800482c <_vfiprintf_r>:
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	460c      	mov	r4, r1
 8004832:	b09d      	sub	sp, #116	; 0x74
 8004834:	4617      	mov	r7, r2
 8004836:	461d      	mov	r5, r3
 8004838:	4606      	mov	r6, r0
 800483a:	b118      	cbz	r0, 8004844 <_vfiprintf_r+0x18>
 800483c:	6983      	ldr	r3, [r0, #24]
 800483e:	b90b      	cbnz	r3, 8004844 <_vfiprintf_r+0x18>
 8004840:	f7ff fe34 	bl	80044ac <__sinit>
 8004844:	4b7c      	ldr	r3, [pc, #496]	; (8004a38 <_vfiprintf_r+0x20c>)
 8004846:	429c      	cmp	r4, r3
 8004848:	d158      	bne.n	80048fc <_vfiprintf_r+0xd0>
 800484a:	6874      	ldr	r4, [r6, #4]
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	0718      	lsls	r0, r3, #28
 8004850:	d55e      	bpl.n	8004910 <_vfiprintf_r+0xe4>
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d05b      	beq.n	8004910 <_vfiprintf_r+0xe4>
 8004858:	2300      	movs	r3, #0
 800485a:	9309      	str	r3, [sp, #36]	; 0x24
 800485c:	2320      	movs	r3, #32
 800485e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004862:	2330      	movs	r3, #48	; 0x30
 8004864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004868:	9503      	str	r5, [sp, #12]
 800486a:	f04f 0b01 	mov.w	fp, #1
 800486e:	46b8      	mov	r8, r7
 8004870:	4645      	mov	r5, r8
 8004872:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004876:	b10b      	cbz	r3, 800487c <_vfiprintf_r+0x50>
 8004878:	2b25      	cmp	r3, #37	; 0x25
 800487a:	d154      	bne.n	8004926 <_vfiprintf_r+0xfa>
 800487c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004880:	d00b      	beq.n	800489a <_vfiprintf_r+0x6e>
 8004882:	4653      	mov	r3, sl
 8004884:	463a      	mov	r2, r7
 8004886:	4621      	mov	r1, r4
 8004888:	4630      	mov	r0, r6
 800488a:	f7ff ffbc 	bl	8004806 <__sfputs_r>
 800488e:	3001      	adds	r0, #1
 8004890:	f000 80c2 	beq.w	8004a18 <_vfiprintf_r+0x1ec>
 8004894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004896:	4453      	add	r3, sl
 8004898:	9309      	str	r3, [sp, #36]	; 0x24
 800489a:	f898 3000 	ldrb.w	r3, [r8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80ba 	beq.w	8004a18 <_vfiprintf_r+0x1ec>
 80048a4:	2300      	movs	r3, #0
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	9307      	str	r3, [sp, #28]
 80048b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048b6:	931a      	str	r3, [sp, #104]	; 0x68
 80048b8:	46a8      	mov	r8, r5
 80048ba:	2205      	movs	r2, #5
 80048bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80048c0:	485e      	ldr	r0, [pc, #376]	; (8004a3c <_vfiprintf_r+0x210>)
 80048c2:	f7fb fca5 	bl	8000210 <memchr>
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	bb78      	cbnz	r0, 800492a <_vfiprintf_r+0xfe>
 80048ca:	06d9      	lsls	r1, r3, #27
 80048cc:	bf44      	itt	mi
 80048ce:	2220      	movmi	r2, #32
 80048d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d4:	071a      	lsls	r2, r3, #28
 80048d6:	bf44      	itt	mi
 80048d8:	222b      	movmi	r2, #43	; 0x2b
 80048da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048de:	782a      	ldrb	r2, [r5, #0]
 80048e0:	2a2a      	cmp	r2, #42	; 0x2a
 80048e2:	d02a      	beq.n	800493a <_vfiprintf_r+0x10e>
 80048e4:	9a07      	ldr	r2, [sp, #28]
 80048e6:	46a8      	mov	r8, r5
 80048e8:	2000      	movs	r0, #0
 80048ea:	250a      	movs	r5, #10
 80048ec:	4641      	mov	r1, r8
 80048ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048f2:	3b30      	subs	r3, #48	; 0x30
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	d969      	bls.n	80049cc <_vfiprintf_r+0x1a0>
 80048f8:	b360      	cbz	r0, 8004954 <_vfiprintf_r+0x128>
 80048fa:	e024      	b.n	8004946 <_vfiprintf_r+0x11a>
 80048fc:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <_vfiprintf_r+0x214>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d101      	bne.n	8004906 <_vfiprintf_r+0xda>
 8004902:	68b4      	ldr	r4, [r6, #8]
 8004904:	e7a2      	b.n	800484c <_vfiprintf_r+0x20>
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <_vfiprintf_r+0x218>)
 8004908:	429c      	cmp	r4, r3
 800490a:	bf08      	it	eq
 800490c:	68f4      	ldreq	r4, [r6, #12]
 800490e:	e79d      	b.n	800484c <_vfiprintf_r+0x20>
 8004910:	4621      	mov	r1, r4
 8004912:	4630      	mov	r0, r6
 8004914:	f7ff fc6c 	bl	80041f0 <__swsetup_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	d09d      	beq.n	8004858 <_vfiprintf_r+0x2c>
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	b01d      	add	sp, #116	; 0x74
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	46a8      	mov	r8, r5
 8004928:	e7a2      	b.n	8004870 <_vfiprintf_r+0x44>
 800492a:	4a44      	ldr	r2, [pc, #272]	; (8004a3c <_vfiprintf_r+0x210>)
 800492c:	1a80      	subs	r0, r0, r2
 800492e:	fa0b f000 	lsl.w	r0, fp, r0
 8004932:	4318      	orrs	r0, r3
 8004934:	9004      	str	r0, [sp, #16]
 8004936:	4645      	mov	r5, r8
 8004938:	e7be      	b.n	80048b8 <_vfiprintf_r+0x8c>
 800493a:	9a03      	ldr	r2, [sp, #12]
 800493c:	1d11      	adds	r1, r2, #4
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	9103      	str	r1, [sp, #12]
 8004942:	2a00      	cmp	r2, #0
 8004944:	db01      	blt.n	800494a <_vfiprintf_r+0x11e>
 8004946:	9207      	str	r2, [sp, #28]
 8004948:	e004      	b.n	8004954 <_vfiprintf_r+0x128>
 800494a:	4252      	negs	r2, r2
 800494c:	f043 0302 	orr.w	r3, r3, #2
 8004950:	9207      	str	r2, [sp, #28]
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	f898 3000 	ldrb.w	r3, [r8]
 8004958:	2b2e      	cmp	r3, #46	; 0x2e
 800495a:	d10e      	bne.n	800497a <_vfiprintf_r+0x14e>
 800495c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004960:	2b2a      	cmp	r3, #42	; 0x2a
 8004962:	d138      	bne.n	80049d6 <_vfiprintf_r+0x1aa>
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	9203      	str	r2, [sp, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	bfb8      	it	lt
 8004970:	f04f 33ff 	movlt.w	r3, #4294967295
 8004974:	f108 0802 	add.w	r8, r8, #2
 8004978:	9305      	str	r3, [sp, #20]
 800497a:	4d33      	ldr	r5, [pc, #204]	; (8004a48 <_vfiprintf_r+0x21c>)
 800497c:	f898 1000 	ldrb.w	r1, [r8]
 8004980:	2203      	movs	r2, #3
 8004982:	4628      	mov	r0, r5
 8004984:	f7fb fc44 	bl	8000210 <memchr>
 8004988:	b140      	cbz	r0, 800499c <_vfiprintf_r+0x170>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	1b40      	subs	r0, r0, r5
 800498e:	fa03 f000 	lsl.w	r0, r3, r0
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	4303      	orrs	r3, r0
 8004996:	f108 0801 	add.w	r8, r8, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	f898 1000 	ldrb.w	r1, [r8]
 80049a0:	482a      	ldr	r0, [pc, #168]	; (8004a4c <_vfiprintf_r+0x220>)
 80049a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a6:	2206      	movs	r2, #6
 80049a8:	f108 0701 	add.w	r7, r8, #1
 80049ac:	f7fb fc30 	bl	8000210 <memchr>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d037      	beq.n	8004a24 <_vfiprintf_r+0x1f8>
 80049b4:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <_vfiprintf_r+0x224>)
 80049b6:	bb1b      	cbnz	r3, 8004a00 <_vfiprintf_r+0x1d4>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	3307      	adds	r3, #7
 80049bc:	f023 0307 	bic.w	r3, r3, #7
 80049c0:	3308      	adds	r3, #8
 80049c2:	9303      	str	r3, [sp, #12]
 80049c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c6:	444b      	add	r3, r9
 80049c8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ca:	e750      	b.n	800486e <_vfiprintf_r+0x42>
 80049cc:	fb05 3202 	mla	r2, r5, r2, r3
 80049d0:	2001      	movs	r0, #1
 80049d2:	4688      	mov	r8, r1
 80049d4:	e78a      	b.n	80048ec <_vfiprintf_r+0xc0>
 80049d6:	2300      	movs	r3, #0
 80049d8:	f108 0801 	add.w	r8, r8, #1
 80049dc:	9305      	str	r3, [sp, #20]
 80049de:	4619      	mov	r1, r3
 80049e0:	250a      	movs	r5, #10
 80049e2:	4640      	mov	r0, r8
 80049e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e8:	3a30      	subs	r2, #48	; 0x30
 80049ea:	2a09      	cmp	r2, #9
 80049ec:	d903      	bls.n	80049f6 <_vfiprintf_r+0x1ca>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0c3      	beq.n	800497a <_vfiprintf_r+0x14e>
 80049f2:	9105      	str	r1, [sp, #20]
 80049f4:	e7c1      	b.n	800497a <_vfiprintf_r+0x14e>
 80049f6:	fb05 2101 	mla	r1, r5, r1, r2
 80049fa:	2301      	movs	r3, #1
 80049fc:	4680      	mov	r8, r0
 80049fe:	e7f0      	b.n	80049e2 <_vfiprintf_r+0x1b6>
 8004a00:	ab03      	add	r3, sp, #12
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4622      	mov	r2, r4
 8004a06:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <_vfiprintf_r+0x228>)
 8004a08:	a904      	add	r1, sp, #16
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f3af 8000 	nop.w
 8004a10:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a14:	4681      	mov	r9, r0
 8004a16:	d1d5      	bne.n	80049c4 <_vfiprintf_r+0x198>
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	065b      	lsls	r3, r3, #25
 8004a1c:	f53f af7e 	bmi.w	800491c <_vfiprintf_r+0xf0>
 8004a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a22:	e77d      	b.n	8004920 <_vfiprintf_r+0xf4>
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	4622      	mov	r2, r4
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <_vfiprintf_r+0x228>)
 8004a2c:	a904      	add	r1, sp, #16
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 f888 	bl	8004b44 <_printf_i>
 8004a34:	e7ec      	b.n	8004a10 <_vfiprintf_r+0x1e4>
 8004a36:	bf00      	nop
 8004a38:	08004fd4 	.word	0x08004fd4
 8004a3c:	08005014 	.word	0x08005014
 8004a40:	08004ff4 	.word	0x08004ff4
 8004a44:	08004fb4 	.word	0x08004fb4
 8004a48:	0800501a 	.word	0x0800501a
 8004a4c:	0800501e 	.word	0x0800501e
 8004a50:	00000000 	.word	0x00000000
 8004a54:	08004807 	.word	0x08004807

08004a58 <_printf_common>:
 8004a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	4691      	mov	r9, r2
 8004a5e:	461f      	mov	r7, r3
 8004a60:	688a      	ldr	r2, [r1, #8]
 8004a62:	690b      	ldr	r3, [r1, #16]
 8004a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bfb8      	it	lt
 8004a6c:	4613      	movlt	r3, r2
 8004a6e:	f8c9 3000 	str.w	r3, [r9]
 8004a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a76:	4606      	mov	r6, r0
 8004a78:	460c      	mov	r4, r1
 8004a7a:	b112      	cbz	r2, 8004a82 <_printf_common+0x2a>
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c9 3000 	str.w	r3, [r9]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	0699      	lsls	r1, r3, #26
 8004a86:	bf42      	ittt	mi
 8004a88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a8c:	3302      	addmi	r3, #2
 8004a8e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d107      	bne.n	8004aaa <_printf_common+0x52>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	42ab      	cmp	r3, r5
 8004aa8:	dc28      	bgt.n	8004afc <_printf_common+0xa4>
 8004aaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	3300      	adds	r3, #0
 8004ab2:	bf18      	it	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	0692      	lsls	r2, r2, #26
 8004ab8:	d42d      	bmi.n	8004b16 <_printf_common+0xbe>
 8004aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004abe:	4639      	mov	r1, r7
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	47c0      	blx	r8
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d020      	beq.n	8004b0a <_printf_common+0xb2>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	68e5      	ldr	r5, [r4, #12]
 8004acc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	bf08      	it	eq
 8004ad8:	1aad      	subeq	r5, r5, r2
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf0c      	ite	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	2500      	movne	r5, #0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	bfc4      	itt	gt
 8004aea:	1a9b      	subgt	r3, r3, r2
 8004aec:	18ed      	addgt	r5, r5, r3
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	341a      	adds	r4, #26
 8004af4:	454d      	cmp	r5, r9
 8004af6:	d11a      	bne.n	8004b2e <_printf_common+0xd6>
 8004af8:	2000      	movs	r0, #0
 8004afa:	e008      	b.n	8004b0e <_printf_common+0xb6>
 8004afc:	2301      	movs	r3, #1
 8004afe:	4652      	mov	r2, sl
 8004b00:	4639      	mov	r1, r7
 8004b02:	4630      	mov	r0, r6
 8004b04:	47c0      	blx	r8
 8004b06:	3001      	adds	r0, #1
 8004b08:	d103      	bne.n	8004b12 <_printf_common+0xba>
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b12:	3501      	adds	r5, #1
 8004b14:	e7c3      	b.n	8004a9e <_printf_common+0x46>
 8004b16:	18e1      	adds	r1, r4, r3
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	2030      	movs	r0, #48	; 0x30
 8004b1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b20:	4422      	add	r2, r4
 8004b22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	e7c5      	b.n	8004aba <_printf_common+0x62>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4622      	mov	r2, r4
 8004b32:	4639      	mov	r1, r7
 8004b34:	4630      	mov	r0, r6
 8004b36:	47c0      	blx	r8
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d0e6      	beq.n	8004b0a <_printf_common+0xb2>
 8004b3c:	f109 0901 	add.w	r9, r9, #1
 8004b40:	e7d8      	b.n	8004af4 <_printf_common+0x9c>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	7e09      	ldrb	r1, [r1, #24]
 8004b50:	b085      	sub	sp, #20
 8004b52:	296e      	cmp	r1, #110	; 0x6e
 8004b54:	4617      	mov	r7, r2
 8004b56:	4606      	mov	r6, r0
 8004b58:	4698      	mov	r8, r3
 8004b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b5c:	f000 80b3 	beq.w	8004cc6 <_printf_i+0x182>
 8004b60:	d822      	bhi.n	8004ba8 <_printf_i+0x64>
 8004b62:	2963      	cmp	r1, #99	; 0x63
 8004b64:	d036      	beq.n	8004bd4 <_printf_i+0x90>
 8004b66:	d80a      	bhi.n	8004b7e <_printf_i+0x3a>
 8004b68:	2900      	cmp	r1, #0
 8004b6a:	f000 80b9 	beq.w	8004ce0 <_printf_i+0x19c>
 8004b6e:	2958      	cmp	r1, #88	; 0x58
 8004b70:	f000 8083 	beq.w	8004c7a <_printf_i+0x136>
 8004b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b7c:	e032      	b.n	8004be4 <_printf_i+0xa0>
 8004b7e:	2964      	cmp	r1, #100	; 0x64
 8004b80:	d001      	beq.n	8004b86 <_printf_i+0x42>
 8004b82:	2969      	cmp	r1, #105	; 0x69
 8004b84:	d1f6      	bne.n	8004b74 <_printf_i+0x30>
 8004b86:	6820      	ldr	r0, [r4, #0]
 8004b88:	6813      	ldr	r3, [r2, #0]
 8004b8a:	0605      	lsls	r5, r0, #24
 8004b8c:	f103 0104 	add.w	r1, r3, #4
 8004b90:	d52a      	bpl.n	8004be8 <_printf_i+0xa4>
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da03      	bge.n	8004ba2 <_printf_i+0x5e>
 8004b9a:	222d      	movs	r2, #45	; 0x2d
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ba2:	486f      	ldr	r0, [pc, #444]	; (8004d60 <_printf_i+0x21c>)
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	e039      	b.n	8004c1c <_printf_i+0xd8>
 8004ba8:	2973      	cmp	r1, #115	; 0x73
 8004baa:	f000 809d 	beq.w	8004ce8 <_printf_i+0x1a4>
 8004bae:	d808      	bhi.n	8004bc2 <_printf_i+0x7e>
 8004bb0:	296f      	cmp	r1, #111	; 0x6f
 8004bb2:	d020      	beq.n	8004bf6 <_printf_i+0xb2>
 8004bb4:	2970      	cmp	r1, #112	; 0x70
 8004bb6:	d1dd      	bne.n	8004b74 <_printf_i+0x30>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	f043 0320 	orr.w	r3, r3, #32
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	e003      	b.n	8004bca <_printf_i+0x86>
 8004bc2:	2975      	cmp	r1, #117	; 0x75
 8004bc4:	d017      	beq.n	8004bf6 <_printf_i+0xb2>
 8004bc6:	2978      	cmp	r1, #120	; 0x78
 8004bc8:	d1d4      	bne.n	8004b74 <_printf_i+0x30>
 8004bca:	2378      	movs	r3, #120	; 0x78
 8004bcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd0:	4864      	ldr	r0, [pc, #400]	; (8004d64 <_printf_i+0x220>)
 8004bd2:	e055      	b.n	8004c80 <_printf_i+0x13c>
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	1d19      	adds	r1, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6011      	str	r1, [r2, #0]
 8004bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e08c      	b.n	8004d02 <_printf_i+0x1be>
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6011      	str	r1, [r2, #0]
 8004bec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf0:	bf18      	it	ne
 8004bf2:	b21b      	sxthne	r3, r3
 8004bf4:	e7cf      	b.n	8004b96 <_printf_i+0x52>
 8004bf6:	6813      	ldr	r3, [r2, #0]
 8004bf8:	6825      	ldr	r5, [r4, #0]
 8004bfa:	1d18      	adds	r0, r3, #4
 8004bfc:	6010      	str	r0, [r2, #0]
 8004bfe:	0628      	lsls	r0, r5, #24
 8004c00:	d501      	bpl.n	8004c06 <_printf_i+0xc2>
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	e002      	b.n	8004c0c <_printf_i+0xc8>
 8004c06:	0668      	lsls	r0, r5, #25
 8004c08:	d5fb      	bpl.n	8004c02 <_printf_i+0xbe>
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	4854      	ldr	r0, [pc, #336]	; (8004d60 <_printf_i+0x21c>)
 8004c0e:	296f      	cmp	r1, #111	; 0x6f
 8004c10:	bf14      	ite	ne
 8004c12:	220a      	movne	r2, #10
 8004c14:	2208      	moveq	r2, #8
 8004c16:	2100      	movs	r1, #0
 8004c18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1c:	6865      	ldr	r5, [r4, #4]
 8004c1e:	60a5      	str	r5, [r4, #8]
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	f2c0 8095 	blt.w	8004d50 <_printf_i+0x20c>
 8004c26:	6821      	ldr	r1, [r4, #0]
 8004c28:	f021 0104 	bic.w	r1, r1, #4
 8004c2c:	6021      	str	r1, [r4, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13d      	bne.n	8004cae <_printf_i+0x16a>
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	f040 808e 	bne.w	8004d54 <_printf_i+0x210>
 8004c38:	4665      	mov	r5, ip
 8004c3a:	2a08      	cmp	r2, #8
 8004c3c:	d10b      	bne.n	8004c56 <_printf_i+0x112>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	07db      	lsls	r3, r3, #31
 8004c42:	d508      	bpl.n	8004c56 <_printf_i+0x112>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	bfde      	ittt	le
 8004c4c:	2330      	movle	r3, #48	; 0x30
 8004c4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c56:	ebac 0305 	sub.w	r3, ip, r5
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	f8cd 8000 	str.w	r8, [sp]
 8004c60:	463b      	mov	r3, r7
 8004c62:	aa03      	add	r2, sp, #12
 8004c64:	4621      	mov	r1, r4
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7ff fef6 	bl	8004a58 <_printf_common>
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d14d      	bne.n	8004d0c <_printf_i+0x1c8>
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	b005      	add	sp, #20
 8004c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	4839      	ldr	r0, [pc, #228]	; (8004d60 <_printf_i+0x21c>)
 8004c7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	6821      	ldr	r1, [r4, #0]
 8004c84:	1d1d      	adds	r5, r3, #4
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6015      	str	r5, [r2, #0]
 8004c8a:	060a      	lsls	r2, r1, #24
 8004c8c:	d50b      	bpl.n	8004ca6 <_printf_i+0x162>
 8004c8e:	07ca      	lsls	r2, r1, #31
 8004c90:	bf44      	itt	mi
 8004c92:	f041 0120 	orrmi.w	r1, r1, #32
 8004c96:	6021      	strmi	r1, [r4, #0]
 8004c98:	b91b      	cbnz	r3, 8004ca2 <_printf_i+0x15e>
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	f022 0220 	bic.w	r2, r2, #32
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	e7b7      	b.n	8004c16 <_printf_i+0xd2>
 8004ca6:	064d      	lsls	r5, r1, #25
 8004ca8:	bf48      	it	mi
 8004caa:	b29b      	uxthmi	r3, r3
 8004cac:	e7ef      	b.n	8004c8e <_printf_i+0x14a>
 8004cae:	4665      	mov	r5, ip
 8004cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cb4:	fb02 3311 	mls	r3, r2, r1, r3
 8004cb8:	5cc3      	ldrb	r3, [r0, r3]
 8004cba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	2900      	cmp	r1, #0
 8004cc2:	d1f5      	bne.n	8004cb0 <_printf_i+0x16c>
 8004cc4:	e7b9      	b.n	8004c3a <_printf_i+0xf6>
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	6825      	ldr	r5, [r4, #0]
 8004cca:	6961      	ldr	r1, [r4, #20]
 8004ccc:	1d18      	adds	r0, r3, #4
 8004cce:	6010      	str	r0, [r2, #0]
 8004cd0:	0628      	lsls	r0, r5, #24
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	d501      	bpl.n	8004cda <_printf_i+0x196>
 8004cd6:	6019      	str	r1, [r3, #0]
 8004cd8:	e002      	b.n	8004ce0 <_printf_i+0x19c>
 8004cda:	066a      	lsls	r2, r5, #25
 8004cdc:	d5fb      	bpl.n	8004cd6 <_printf_i+0x192>
 8004cde:	8019      	strh	r1, [r3, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	6123      	str	r3, [r4, #16]
 8004ce4:	4665      	mov	r5, ip
 8004ce6:	e7b9      	b.n	8004c5c <_printf_i+0x118>
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	1d19      	adds	r1, r3, #4
 8004cec:	6011      	str	r1, [r2, #0]
 8004cee:	681d      	ldr	r5, [r3, #0]
 8004cf0:	6862      	ldr	r2, [r4, #4]
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f7fb fa8b 	bl	8000210 <memchr>
 8004cfa:	b108      	cbz	r0, 8004d00 <_printf_i+0x1bc>
 8004cfc:	1b40      	subs	r0, r0, r5
 8004cfe:	6060      	str	r0, [r4, #4]
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	6123      	str	r3, [r4, #16]
 8004d04:	2300      	movs	r3, #0
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0a:	e7a7      	b.n	8004c5c <_printf_i+0x118>
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	462a      	mov	r2, r5
 8004d10:	4639      	mov	r1, r7
 8004d12:	4630      	mov	r0, r6
 8004d14:	47c0      	blx	r8
 8004d16:	3001      	adds	r0, #1
 8004d18:	d0aa      	beq.n	8004c70 <_printf_i+0x12c>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	079b      	lsls	r3, r3, #30
 8004d1e:	d413      	bmi.n	8004d48 <_printf_i+0x204>
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	4298      	cmp	r0, r3
 8004d26:	bfb8      	it	lt
 8004d28:	4618      	movlt	r0, r3
 8004d2a:	e7a3      	b.n	8004c74 <_printf_i+0x130>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	464a      	mov	r2, r9
 8004d30:	4639      	mov	r1, r7
 8004d32:	4630      	mov	r0, r6
 8004d34:	47c0      	blx	r8
 8004d36:	3001      	adds	r0, #1
 8004d38:	d09a      	beq.n	8004c70 <_printf_i+0x12c>
 8004d3a:	3501      	adds	r5, #1
 8004d3c:	68e3      	ldr	r3, [r4, #12]
 8004d3e:	9a03      	ldr	r2, [sp, #12]
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	42ab      	cmp	r3, r5
 8004d44:	dcf2      	bgt.n	8004d2c <_printf_i+0x1e8>
 8004d46:	e7eb      	b.n	8004d20 <_printf_i+0x1dc>
 8004d48:	2500      	movs	r5, #0
 8004d4a:	f104 0919 	add.w	r9, r4, #25
 8004d4e:	e7f5      	b.n	8004d3c <_printf_i+0x1f8>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1ac      	bne.n	8004cae <_printf_i+0x16a>
 8004d54:	7803      	ldrb	r3, [r0, #0]
 8004d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d5e:	e76c      	b.n	8004c3a <_printf_i+0xf6>
 8004d60:	08005025 	.word	0x08005025
 8004d64:	08005036 	.word	0x08005036

08004d68 <_sbrk_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4c06      	ldr	r4, [pc, #24]	; (8004d84 <_sbrk_r+0x1c>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4605      	mov	r5, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	f7fc f844 	bl	8000e00 <_sbrk>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_sbrk_r+0x1a>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_sbrk_r+0x1a>
 8004d80:	602b      	str	r3, [r5, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	2000047c 	.word	0x2000047c

08004d88 <__sread>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	f000 f896 	bl	8004ec0 <_read_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfab      	itete	ge
 8004d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d9c:	181b      	addge	r3, r3, r0
 8004d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da2:	bfac      	ite	ge
 8004da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004da6:	81a3      	strhlt	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__swrite>:
 8004daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	461f      	mov	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	05db      	lsls	r3, r3, #23
 8004db4:	4605      	mov	r5, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4616      	mov	r6, r2
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	f000 f868 	bl	8004e98 <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	4628      	mov	r0, r5
 8004dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	f000 b817 	b.w	8004e10 <_write_r>

08004de2 <__sseek>:
 8004de2:	b510      	push	{r4, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 f855 	bl	8004e98 <_lseek_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	bf15      	itete	ne
 8004df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dfe:	81a3      	strheq	r3, [r4, #12]
 8004e00:	bf18      	it	ne
 8004e02:	81a3      	strhne	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__sclose>:
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 b813 	b.w	8004e34 <_close_r>
	...

08004e10 <_write_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4c07      	ldr	r4, [pc, #28]	; (8004e30 <_write_r+0x20>)
 8004e14:	4605      	mov	r5, r0
 8004e16:	4608      	mov	r0, r1
 8004e18:	4611      	mov	r1, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6022      	str	r2, [r4, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fb ff9d 	bl	8000d5e <_write>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_write_r+0x1e>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_write_r+0x1e>
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	2000047c 	.word	0x2000047c

08004e34 <_close_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4c06      	ldr	r4, [pc, #24]	; (8004e50 <_close_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4605      	mov	r5, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	f7fb ffa9 	bl	8000d96 <_close>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_close_r+0x1a>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_close_r+0x1a>
 8004e4c:	602b      	str	r3, [r5, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000047c 	.word	0x2000047c

08004e54 <_fstat_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4c07      	ldr	r4, [pc, #28]	; (8004e74 <_fstat_r+0x20>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4611      	mov	r1, r2
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	f7fb ffa4 	bl	8000dae <_fstat>
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	d102      	bne.n	8004e70 <_fstat_r+0x1c>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	b103      	cbz	r3, 8004e70 <_fstat_r+0x1c>
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	bf00      	nop
 8004e74:	2000047c 	.word	0x2000047c

08004e78 <_isatty_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4c06      	ldr	r4, [pc, #24]	; (8004e94 <_isatty_r+0x1c>)
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4605      	mov	r5, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	6023      	str	r3, [r4, #0]
 8004e84:	f7fb ffa3 	bl	8000dce <_isatty>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d102      	bne.n	8004e92 <_isatty_r+0x1a>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	b103      	cbz	r3, 8004e92 <_isatty_r+0x1a>
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
 8004e94:	2000047c 	.word	0x2000047c

08004e98 <_lseek_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4c07      	ldr	r4, [pc, #28]	; (8004eb8 <_lseek_r+0x20>)
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	4608      	mov	r0, r1
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	6022      	str	r2, [r4, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f7fb ff9c 	bl	8000de4 <_lseek>
 8004eac:	1c43      	adds	r3, r0, #1
 8004eae:	d102      	bne.n	8004eb6 <_lseek_r+0x1e>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	b103      	cbz	r3, 8004eb6 <_lseek_r+0x1e>
 8004eb4:	602b      	str	r3, [r5, #0]
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	2000047c 	.word	0x2000047c

08004ebc <__malloc_lock>:
 8004ebc:	4770      	bx	lr

08004ebe <__malloc_unlock>:
 8004ebe:	4770      	bx	lr

08004ec0 <_read_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4c07      	ldr	r4, [pc, #28]	; (8004ee0 <_read_r+0x20>)
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	4611      	mov	r1, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	6022      	str	r2, [r4, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7fb ff28 	bl	8000d24 <_read>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_read_r+0x1e>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_read_r+0x1e>
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	2000047c 	.word	0x2000047c

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
