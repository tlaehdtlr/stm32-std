
2_UART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003abc  08003abc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac4  08003ac4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08003b3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003b3c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad6b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aed  00000000  00000000  0002ae0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000950  00000000  00000000  0002c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a895  00000000  00000000  0002daa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008852  00000000  00000000  00048335  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a140e  00000000  00000000  00050b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1f95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000f2010  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039a0 	.word	0x080039a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080039a0 	.word	0x080039a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_GPIO_Init+0x2c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <MX_GPIO_Init+0x2c>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_GPIO_Init+0x2c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ae:	2201      	movs	r2, #1
 80005b0:	4803      	ldr	r0, [pc, #12]	; (80005c0 <__io_putchar+0x20>)
 80005b2:	f001 fe4f 	bl	8002254 <HAL_UART_Transmit>
  return ch;
 80005b6:	687b      	ldr	r3, [r7, #4]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000118 	.word	0x20000118

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fab3 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f81d 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f7ff ffcd 	bl	8000570 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 f97b 	bl	80008d0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005da:	f000 f9a7 	bl	800092c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cnt_from_start = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
    cnt_from_start++;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	3301      	adds	r3, #1
 80005e6:	71fb      	strb	r3, [r7, #7]
    printf("Hello DongSik!! \r\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <main+0x40>)
 80005ea:	f002 fb05 	bl	8002bf8 <puts>
    printf("time : %d \r\n", cnt_from_start);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x44>)
 80005f4:	f002 fa8c 	bl	8002b10 <iprintf>
    HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f000 fb0e 	bl	8000c1c <HAL_Delay>
    cnt_from_start++;
 8000600:	e7ef      	b.n	80005e2 <main+0x1e>
 8000602:	bf00      	nop
 8000604:	080039b8 	.word	0x080039b8
 8000608:	080039cc 	.word	0x080039cc

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0a4      	sub	sp, #144	; 0x90
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fa70 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2234      	movs	r2, #52	; 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fa62 	bl	8002b00 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000640:	f000 fd74 	bl	800112c <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x42>
  {
    Error_Handler();
 800064a:	f000 f84a 	bl	80006e2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800064e:	2310      	movs	r3, #16
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800065a:	2360      	movs	r3, #96	; 0x60
 800065c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000662:	2301      	movs	r3, #1
 8000664:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 40;
 800066c:	2328      	movs	r3, #40	; 0x28
 800066e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fda8 	bl	80011d8 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800068e:	f000 f828 	bl	80006e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2303      	movs	r3, #3
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006aa:	2104      	movs	r1, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f9f9 	bl	8001aa4 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006b8:	f000 f813 	bl	80006e2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 80006bc:	2321      	movs	r3, #33	; 0x21
 80006be:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fbee 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006d6:	f000 f804 	bl	80006e2 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3790      	adds	r7, #144	; 0x90
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x6>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	; 0x60
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	; 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 fa2c 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00a      	b.n	80007b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800079a:	f3af 8000 	nop.w
 800079e:	4601      	mov	r1, r0
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf0      	blt.n	800079a <_read+0x12>
	}

return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e009      	b.n	80007e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fedf 	bl	80005a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf1      	blt.n	80007d4 <_write+0x12>
	}
	return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_close>:

int _close(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000822:	605a      	str	r2, [r3, #4]
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_isatty>:

int _isatty(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f002 f90a 	bl	8002aac <__errno>
 8000898:	4602      	mov	r2, r0
 800089a:	230c      	movs	r3, #12
 800089c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000a000 	.word	0x2000a000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	200001a0 	.word	0x200001a0

080008d0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_LPUART1_UART_Init+0x58>)
 80008d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008f8:	220c      	movs	r2, #12
 80008fa:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 8000910:	f001 fc52 	bl	80021b8 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_LPUART1_UART_Init+0x4e>
  {
    Error_Handler();
 800091a:	f7ff fee2 	bl	80006e2 <Error_Handler>
  }

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000098 	.word	0x20000098
 8000928:	40008000 	.word	0x40008000

0800092c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART1_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART1_UART_Init+0x58>)
 8000970:	f001 fc22 	bl	80021b8 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f7ff feb2 	bl	80006e2 <Error_Handler>
  }

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000118 	.word	0x20000118
 8000988:	40013800 	.word	0x40013800

0800098c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <HAL_UART_MspInit+0xdc>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d129      	bne.n	8000a02 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009de:	230c      	movs	r3, #12
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80009ee:	2308      	movs	r3, #8
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f000 fa16 	bl	8000e2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a00:	e02e      	b.n	8000a60 <HAL_UART_MspInit+0xd4>
  else if(uartHandle->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <HAL_UART_MspInit+0xe4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d129      	bne.n	8000a60 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6613      	str	r3, [r2, #96]	; 0x60
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_UART_MspInit+0xe0>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 f9e6 	bl	8000e2c <HAL_GPIO_Init>
}
 8000a60:	bf00      	nop
 8000a62:	3730      	adds	r7, #48	; 0x30
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40008000 	.word	0x40008000
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40013800 	.word	0x40013800

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f000 f826 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a88:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
	ldr	r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 f809 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fd8d 	bl	80005c4 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000ab0:	08003acc 	.word	0x08003acc
	ldr	r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ab8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000abc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ac0:	200001a0 	.word	0x200001a0

08000ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_2_IRQHandler>
	...

08000ac8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <SystemInit+0x64>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <SystemInit+0x64>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <SystemInit+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <SystemInit+0x68>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SystemInit+0x68>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <SystemInit+0x68>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <SystemInit+0x68>)
 8000af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <SystemInit+0x68>)
 8000b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <SystemInit+0x68>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <SystemInit+0x68>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <SystemInit+0x68>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SystemInit+0x64>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	40021000 	.word	0x40021000

08000b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f000 f940 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f80d 	bl	8000b64 <HAL_InitTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	e001      	b.n	8000b5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b56:	f7ff fdc9 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d023      	beq.n	8000bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_InitTick+0x70>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f93f 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f917 	bl	8000dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000198 	.word	0x20000198

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000198 	.word	0x20000198

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_Delay+0x40>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff47 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5c 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e14e      	b.n	80010da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8140 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	2b11      	cmp	r3, #17
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 809a 	beq.w	80010d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b55      	ldr	r3, [pc, #340]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	4a54      	ldr	r2, [pc, #336]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6613      	str	r3, [r2, #96]	; 0x60
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x2cc>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb8:	4a50      	ldr	r2, [pc, #320]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe2:	d013      	beq.n	800100c <HAL_GPIO_Init+0x1e0>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a46      	ldr	r2, [pc, #280]	; (8001100 <HAL_GPIO_Init+0x2d4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d00d      	beq.n	8001008 <HAL_GPIO_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d007      	beq.n	8001004 <HAL_GPIO_Init+0x1d8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a44      	ldr	r2, [pc, #272]	; (8001108 <HAL_GPIO_Init+0x2dc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d101      	bne.n	8001000 <HAL_GPIO_Init+0x1d4>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001000:	2307      	movs	r3, #7
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001004:	2302      	movs	r3, #2
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1e2>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2d0>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001050:	4a2e      	ldr	r2, [pc, #184]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107a:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_GPIO_Init+0x2e0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <HAL_GPIO_Init+0x2e0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f aea9 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	48000c00 	.word	0x48000c00
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_PWREx_GetVoltageRange+0x18>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800111c:	4618      	mov	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800113a:	d130      	bne.n	800119e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001148:	d038      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2232      	movs	r2, #50	; 0x32
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	3301      	adds	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001170:	e002      	b.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3b01      	subs	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001184:	d102      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f2      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001198:	d110      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e00f      	b.n	80011be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011aa:	d007      	beq.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f000 bc56 	b.w	8001a98 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f6:	4b9f      	ldr	r3, [pc, #636]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80e6 	beq.w	80013da <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_RCC_OscConfig+0x4c>
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	f040 808d 	bne.w	8001336 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b01      	cmp	r3, #1
 8001220:	f040 8089 	bne.w	8001336 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d006      	beq.n	800123e <HAL_RCC_OscConfig+0x66>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	f000 bc2d 	b.w	8001a98 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <HAL_RCC_OscConfig+0x80>
 800124e:	4b89      	ldr	r3, [pc, #548]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001256:	e005      	b.n	8001264 <HAL_RCC_OscConfig+0x8c>
 8001258:	4b86      	ldr	r3, [pc, #536]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	091b      	lsrs	r3, r3, #4
 8001260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001264:	4293      	cmp	r3, r2
 8001266:	d224      	bcs.n	80012b2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fdbd 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	f000 bc0d 	b.w	8001a98 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800127e:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7c      	ldr	r2, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	4977      	ldr	r1, [pc, #476]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	4972      	ldr	r1, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e025      	b.n	80012fe <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	496a      	ldr	r1, [pc, #424]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d0:	4b68      	ldr	r3, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	4965      	ldr	r1, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fd7c 	bl	8001dec <RCC_SetFlashLatencyFromMSIRange>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e3cc      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012fe:	f000 fcb3 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001302:	4601      	mov	r1, r0
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x2a0>)
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	fa21 f303 	lsr.w	r3, r1, r3
 800131a:	4a58      	ldr	r2, [pc, #352]	; (800147c <HAL_RCC_OscConfig+0x2a4>)
 800131c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800131e:	4b58      	ldr	r3, [pc, #352]	; (8001480 <HAL_RCC_OscConfig+0x2a8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc1e 	bl	8000b64 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d052      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	e3b0      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d032      	beq.n	80013a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134a:	f7ff fc5b 	bl	8000c04 <HAL_GetTick>
 800134e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001352:	f7ff fc57 	bl	8000c04 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e399      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001364:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001370:	4b40      	ldr	r3, [pc, #256]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	493a      	ldr	r1, [pc, #232]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	4935      	ldr	r1, [pc, #212]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
 80013a2:	e01a      	b.n	80013da <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc28 	bl	8000c04 <HAL_GetTick>
 80013b4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc24 	bl	8000c04 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e366      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ca:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x1e0>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d073      	beq.n	80014ce <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d10e      	bne.n	8001410 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d063      	beq.n	80014cc <HAL_RCC_OscConfig+0x2f4>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d15f      	bne.n	80014cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e343      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x250>
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a15      	ldr	r2, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0x28c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x274>
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0x28c>
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x29c>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01b      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146c:	f7ff fbca 	bl	8000c04 <HAL_GetTick>
 8001470:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	e010      	b.n	8001496 <HAL_RCC_OscConfig+0x2be>
 8001474:	40021000 	.word	0x40021000
 8001478:	080039dc 	.word	0x080039dc
 800147c:	20000000 	.word	0x20000000
 8001480:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fbbe 	bl	8000c04 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e300      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	4ba0      	ldr	r3, [pc, #640]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x2ac>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fbae 	bl	8000c04 <HAL_GetTick>
 80014a8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbaa 	bl	8000c04 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e2ec      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014be:	4b96      	ldr	r3, [pc, #600]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d060      	beq.n	800159c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x314>
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d119      	bne.n	800151a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d116      	bne.n	800151a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ec:	4b8a      	ldr	r3, [pc, #552]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x32c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e2c9      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b84      	ldr	r3, [pc, #528]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	4981      	ldr	r1, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	e040      	b.n	800159c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d023      	beq.n	800156a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001522:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7c      	ldr	r2, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fb69 	bl	8000c04 <HAL_GetTick>
 8001532:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fb65 	bl	8000c04 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2a7      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001548:	4b73      	ldr	r3, [pc, #460]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b70      	ldr	r3, [pc, #448]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	496d      	ldr	r1, [pc, #436]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e018      	b.n	800159c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fb45 	bl	8000c04 <HAL_GetTick>
 800157a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fb41 	bl	8000c04 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e283      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001590:	4b61      	ldr	r3, [pc, #388]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d07f      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d05f      	beq.n	8001670 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80015b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d037      	beq.n	8001636 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e25c      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01b      	beq.n	8001620 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80015e8:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015f8:	f7ff fb04 	bl	8000c04 <HAL_GetTick>
 80015fc:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff fb00 	bl	8000c04 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b11      	cmp	r3, #17
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e242      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ef      	bne.n	8001600 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	f023 0210 	bic.w	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	493a      	ldr	r1, [pc, #232]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001630:	4313      	orrs	r3, r2
 8001632:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163c:	4a36      	ldr	r2, [pc, #216]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fadd 	bl	8000c04 <HAL_GetTick>
 800164a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fad9 	bl	8000c04 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b11      	cmp	r3, #17
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e21b      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0ef      	beq.n	800164e <HAL_RCC_OscConfig+0x476>
 800166e:	e01b      	b.n	80016a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	4a28      	ldr	r2, [pc, #160]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fac0 	bl	8000c04 <HAL_GetTick>
 8001684:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fabc 	bl	8000c04 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b11      	cmp	r3, #17
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1fe      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ef      	bne.n	8001688 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80c1 	beq.w	8001838 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10e      	bne.n	80016e6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d2:	6593      	str	r3, [r2, #88]	; 0x58
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_RCC_OscConfig+0x540>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x544>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x544>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x544>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa81 	bl	8000c04 <HAL_GetTick>
 8001702:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001704:	e00c      	b.n	8001720 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fa7d 	bl	8000c04 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d905      	bls.n	8001720 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1bf      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
 8001718:	40021000 	.word	0x40021000
 800171c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4bb1      	ldr	r3, [pc, #708]	; (80019e8 <HAL_RCC_OscConfig+0x810>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ec      	beq.n	8001706 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d02c      	beq.n	8001792 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001738:	4bac      	ldr	r3, [pc, #688]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	49a8      	ldr	r1, [pc, #672]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800174c:	4313      	orrs	r3, r2
 800174e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800175e:	4ba3      	ldr	r3, [pc, #652]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	4aa1      	ldr	r2, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800176e:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	4a9d      	ldr	r2, [pc, #628]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177e:	e018      	b.n	80017b2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001780:	4b9a      	ldr	r3, [pc, #616]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	4a99      	ldr	r2, [pc, #612]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001790:	e00f      	b.n	80017b2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001792:	4b96      	ldr	r3, [pc, #600]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001798:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017a2:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	4a90      	ldr	r2, [pc, #576]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80017aa:	f023 0304 	bic.w	r3, r3, #4
 80017ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa23 	bl	8000c04 <HAL_GetTick>
 80017be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa1f 	bl	8000c04 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e15f      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d8:	4b84      	ldr	r3, [pc, #528]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ed      	beq.n	80017c2 <HAL_RCC_OscConfig+0x5ea>
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa0c 	bl	8000c04 <HAL_GetTick>
 80017ec:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa08 	bl	8000c04 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e148      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001806:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ed      	bne.n	80017f0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a74      	ldr	r2, [pc, #464]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800181c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800184c:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001852:	4a66      	ldr	r2, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f9d2 	bl	8000c04 <HAL_GetTick>
 8001860:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001864:	f7ff f9ce 	bl	8000c04 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e110      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x68c>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f9b5 	bl	8000c04 <HAL_GetTick>
 800189a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189e:	f7ff f9b1 	bl	8000c04 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0f3      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b0:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80e7 	beq.w	8001a96 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	f040 80b7 	bne.w	8001a40 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d2:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0203 	and.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d124      	bne.n	8001930 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	3b01      	subs	r3, #1
 80018f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d11b      	bne.n	8001930 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d113      	bne.n	8001930 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d109      	bne.n	8001930 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d061      	beq.n	80019f4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d056      	beq.n	80019e4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800193c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001940:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001942:	f7ff f95f 	bl	8000c04 <HAL_GetTick>
 8001946:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff f95b 	bl	8000c04 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e09d      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x818>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001978:	3a01      	subs	r2, #1
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	3a01      	subs	r2, #1
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001996:	0852      	lsrs	r2, r2, #1
 8001998:	3a01      	subs	r2, #1
 800199a:	0652      	lsls	r2, r2, #25
 800199c:	430a      	orrs	r2, r1
 800199e:	4913      	ldr	r1, [pc, #76]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019bc:	f7ff f922 	bl	8000c04 <HAL_GetTick>
 80019c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff f91e 	bl	8000c04 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e060      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_OscConfig+0x814>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e2:	e058      	b.n	8001a96 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e057      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
 80019e8:	40007000 	.word	0x40007000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d14a      	bne.n	8001a96 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a18:	f7ff f8f4 	bl	8000c04 <HAL_GetTick>
 8001a1c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f8f0 	bl	8000c04 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e032      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x848>
 8001a3e:	e02a      	b.n	8001a96 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d025      	beq.n	8001a92 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a50:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a58:	f023 0303 	bic.w	r3, r3, #3
 8001a5c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a64:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f8cb 	bl	8000c04 <HAL_GetTick>
 8001a6e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f8c7 	bl	8000c04 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_RCC_OscConfig+0x8c8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <HAL_RCC_OscConfig+0x89a>
 8001a90:	e001      	b.n	8001a96 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0c8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4961      	ldr	r1, [pc, #388]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b0      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d04c      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afc:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d121      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e09e      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e092      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2c:	4b4a      	ldr	r3, [pc, #296]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e086      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e07e      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f023 0203 	bic.w	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	493f      	ldr	r1, [pc, #252]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5e:	f7ff f851 	bl	8000c04 <HAL_GetTick>
 8001b62:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b66:	f7ff f84d 	bl	8000c04 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e066      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 020c 	and.w	r2, r3, #12
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d1eb      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	492c      	ldr	r1, [pc, #176]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d210      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 0207 	bic.w	r2, r3, #7
 8001bc2:	4924      	ldr	r1, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e036      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4918      	ldr	r1, [pc, #96]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4910      	ldr	r1, [pc, #64]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c1a:	f000 f825 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4601      	mov	r1, r0
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x1b4>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	5cd3      	ldrb	r3, [r2, r3]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	fa21 f303 	lsr.w	r3, r1, r3
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe ff90 	bl	8000b64 <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c48:	7afb      	ldrb	r3, [r7, #11]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	080039dc 	.word	0x080039dc
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d121      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d11e      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c9c:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 030f 	and.w	r3, r3, #15
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e005      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ccc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10d      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e004      	b.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d133      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d002      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0xa4>
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d0e:	617b      	str	r3, [r7, #20]
      break;
 8001d10:	e005      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d14:	617b      	str	r3, [r7, #20]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	617b      	str	r3, [r7, #20]
      break;
 8001d1c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	3301      	adds	r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	fb02 f203 	mul.w	r2, r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x104>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0e5b      	lsrs	r3, r3, #25
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d5e:	69bb      	ldr	r3, [r7, #24]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3724      	adds	r7, #36	; 0x24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	080039f4 	.word	0x080039f4
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	080039ec 	.word	0x080039ec

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc4:	f7ff ffda 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001dc8:	4601      	mov	r1, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	080039ec 	.word	0x080039ec

08001dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e04:	f7ff f984 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001e08:	6178      	str	r0, [r7, #20]
 8001e0a:	e014      	b.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a24      	ldr	r2, [pc, #144]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff f974 	bl	8001110 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3c:	d10b      	bne.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d919      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2ba0      	cmp	r3, #160	; 0xa0
 8001e48:	d902      	bls.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e013      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e50:	2301      	movs	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	e010      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d902      	bls.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e00a      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d102      	bne.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e68:	2302      	movs	r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e004      	b.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b70      	cmp	r3, #112	; 0x70
 8001e72:	d101      	bne.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e74:	2301      	movs	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	4909      	ldr	r1, [pc, #36]	; (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40022000 	.word	0x40022000

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 809e 	beq.w	8002006 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b40      	ldr	r3, [pc, #256]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a3f      	ldr	r2, [pc, #252]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fe7a 	bl	8000c04 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f12:	e009      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7fe fe76 	bl	8000c04 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d902      	bls.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	74fb      	strb	r3, [r7, #19]
        break;
 8001f26:	e005      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f28:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15a      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f3a:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01e      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d019      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a1f      	ldr	r2, [pc, #124]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f82:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d016      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fe36 	bl	8000c04 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7fe fe32 	bl	8000c04 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8001fb2:	e006      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ec      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fde:	e009      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
 8001fe4:	e006      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff4:	7c7b      	ldrb	r3, [r7, #17]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d105      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a6d      	ldr	r2, [pc, #436]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002012:	4b68      	ldr	r3, [pc, #416]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002018:	f023 0203 	bic.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4964      	ldr	r1, [pc, #400]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002034:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	f023 020c 	bic.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	495c      	ldr	r1, [pc, #368]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002056:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4953      	ldr	r1, [pc, #332]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002078:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	494b      	ldr	r1, [pc, #300]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800209c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4942      	ldr	r1, [pc, #264]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	493a      	ldr	r1, [pc, #232]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00a      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020de:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	4931      	ldr	r1, [pc, #196]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00a      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4929      	ldr	r1, [pc, #164]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00a      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	4920      	ldr	r1, [pc, #128]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d015      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	490a      	ldr	r1, [pc, #40]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800219a:	d105      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e040      	b.n	800224c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fbd6 	bl	800098c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8c0 	bl	800237c <UART_SetConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e022      	b.n	800224c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 faea 	bl	80027e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb71 	bl	800292c <UART_CheckIdleState>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	2b20      	cmp	r3, #32
 800226a:	f040 8081 	bne.w	8002370 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_UART_Transmit+0x26>
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e079      	b.n	8002372 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit+0x38>
 8002288:	2302      	movs	r3, #2
 800228a:	e072      	b.n	8002372 <HAL_UART_Transmit+0x11e>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80022a0:	f7fe fcb0 	bl	8000c04 <HAL_GetTick>
 80022a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022be:	d108      	bne.n	80022d2 <HAL_UART_Transmit+0x7e>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e003      	b.n	80022da <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80022e2:	e02d      	b.n	8002340 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fb61 	bl	80029b6 <UART_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e039      	b.n	8002372 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002310:	b292      	uxth	r2, r2
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	3302      	adds	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e008      	b.n	800232e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	781a      	ldrb	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b292      	uxth	r2, r2
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1cb      	bne.n	80022e4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	2140      	movs	r1, #64	; 0x40
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fb2d 	bl	80029b6 <UART_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e005      	b.n	8002372 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800237c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4baa      	ldr	r3, [pc, #680]	; (8002654 <UART_SetConfig+0x2d8>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	69f9      	ldr	r1, [r7, #28]
 80023b2:	430b      	orrs	r3, r1
 80023b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4aa0      	ldr	r2, [pc, #640]	; (8002658 <UART_SetConfig+0x2dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a97      	ldr	r2, [pc, #604]	; (800265c <UART_SetConfig+0x2e0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d121      	bne.n	8002448 <UART_SetConfig+0xcc>
 8002404:	4b96      	ldr	r3, [pc, #600]	; (8002660 <UART_SetConfig+0x2e4>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d816      	bhi.n	8002440 <UART_SetConfig+0xc4>
 8002412:	a201      	add	r2, pc, #4	; (adr r2, 8002418 <UART_SetConfig+0x9c>)
 8002414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002418:	08002429 	.word	0x08002429
 800241c:	08002435 	.word	0x08002435
 8002420:	0800242f 	.word	0x0800242f
 8002424:	0800243b 	.word	0x0800243b
 8002428:	2301      	movs	r3, #1
 800242a:	76fb      	strb	r3, [r7, #27]
 800242c:	e098      	b.n	8002560 <UART_SetConfig+0x1e4>
 800242e:	2302      	movs	r3, #2
 8002430:	76fb      	strb	r3, [r7, #27]
 8002432:	e095      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002434:	2304      	movs	r3, #4
 8002436:	76fb      	strb	r3, [r7, #27]
 8002438:	e092      	b.n	8002560 <UART_SetConfig+0x1e4>
 800243a:	2308      	movs	r3, #8
 800243c:	76fb      	strb	r3, [r7, #27]
 800243e:	e08f      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002440:	2310      	movs	r3, #16
 8002442:	76fb      	strb	r3, [r7, #27]
 8002444:	bf00      	nop
 8002446:	e08b      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a85      	ldr	r2, [pc, #532]	; (8002664 <UART_SetConfig+0x2e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d134      	bne.n	80024bc <UART_SetConfig+0x140>
 8002452:	4b83      	ldr	r3, [pc, #524]	; (8002660 <UART_SetConfig+0x2e4>)
 8002454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d829      	bhi.n	80024b4 <UART_SetConfig+0x138>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <UART_SetConfig+0xec>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	0800249d 	.word	0x0800249d
 800246c:	080024b5 	.word	0x080024b5
 8002470:	080024b5 	.word	0x080024b5
 8002474:	080024b5 	.word	0x080024b5
 8002478:	080024a9 	.word	0x080024a9
 800247c:	080024b5 	.word	0x080024b5
 8002480:	080024b5 	.word	0x080024b5
 8002484:	080024b5 	.word	0x080024b5
 8002488:	080024a3 	.word	0x080024a3
 800248c:	080024b5 	.word	0x080024b5
 8002490:	080024b5 	.word	0x080024b5
 8002494:	080024b5 	.word	0x080024b5
 8002498:	080024af 	.word	0x080024af
 800249c:	2300      	movs	r3, #0
 800249e:	76fb      	strb	r3, [r7, #27]
 80024a0:	e05e      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024a2:	2302      	movs	r3, #2
 80024a4:	76fb      	strb	r3, [r7, #27]
 80024a6:	e05b      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024a8:	2304      	movs	r3, #4
 80024aa:	76fb      	strb	r3, [r7, #27]
 80024ac:	e058      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024ae:	2308      	movs	r3, #8
 80024b0:	76fb      	strb	r3, [r7, #27]
 80024b2:	e055      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024b4:	2310      	movs	r3, #16
 80024b6:	76fb      	strb	r3, [r7, #27]
 80024b8:	bf00      	nop
 80024ba:	e051      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a69      	ldr	r2, [pc, #420]	; (8002668 <UART_SetConfig+0x2ec>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d120      	bne.n	8002508 <UART_SetConfig+0x18c>
 80024c6:	4b66      	ldr	r3, [pc, #408]	; (8002660 <UART_SetConfig+0x2e4>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d00f      	beq.n	80024f4 <UART_SetConfig+0x178>
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d802      	bhi.n	80024de <UART_SetConfig+0x162>
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <UART_SetConfig+0x16c>
 80024dc:	e010      	b.n	8002500 <UART_SetConfig+0x184>
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d005      	beq.n	80024ee <UART_SetConfig+0x172>
 80024e2:	2b30      	cmp	r3, #48	; 0x30
 80024e4:	d009      	beq.n	80024fa <UART_SetConfig+0x17e>
 80024e6:	e00b      	b.n	8002500 <UART_SetConfig+0x184>
 80024e8:	2300      	movs	r3, #0
 80024ea:	76fb      	strb	r3, [r7, #27]
 80024ec:	e038      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024ee:	2302      	movs	r3, #2
 80024f0:	76fb      	strb	r3, [r7, #27]
 80024f2:	e035      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024f4:	2304      	movs	r3, #4
 80024f6:	76fb      	strb	r3, [r7, #27]
 80024f8:	e032      	b.n	8002560 <UART_SetConfig+0x1e4>
 80024fa:	2308      	movs	r3, #8
 80024fc:	76fb      	strb	r3, [r7, #27]
 80024fe:	e02f      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002500:	2310      	movs	r3, #16
 8002502:	76fb      	strb	r3, [r7, #27]
 8002504:	bf00      	nop
 8002506:	e02b      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <UART_SetConfig+0x2dc>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d124      	bne.n	800255c <UART_SetConfig+0x1e0>
 8002512:	4b53      	ldr	r3, [pc, #332]	; (8002660 <UART_SetConfig+0x2e4>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d012      	beq.n	8002548 <UART_SetConfig+0x1cc>
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002526:	d802      	bhi.n	800252e <UART_SetConfig+0x1b2>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <UART_SetConfig+0x1c0>
 800252c:	e012      	b.n	8002554 <UART_SetConfig+0x1d8>
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002532:	d006      	beq.n	8002542 <UART_SetConfig+0x1c6>
 8002534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002538:	d009      	beq.n	800254e <UART_SetConfig+0x1d2>
 800253a:	e00b      	b.n	8002554 <UART_SetConfig+0x1d8>
 800253c:	2300      	movs	r3, #0
 800253e:	76fb      	strb	r3, [r7, #27]
 8002540:	e00e      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002542:	2302      	movs	r3, #2
 8002544:	76fb      	strb	r3, [r7, #27]
 8002546:	e00b      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002548:	2304      	movs	r3, #4
 800254a:	76fb      	strb	r3, [r7, #27]
 800254c:	e008      	b.n	8002560 <UART_SetConfig+0x1e4>
 800254e:	2308      	movs	r3, #8
 8002550:	76fb      	strb	r3, [r7, #27]
 8002552:	e005      	b.n	8002560 <UART_SetConfig+0x1e4>
 8002554:	2310      	movs	r3, #16
 8002556:	76fb      	strb	r3, [r7, #27]
 8002558:	bf00      	nop
 800255a:	e001      	b.n	8002560 <UART_SetConfig+0x1e4>
 800255c:	2310      	movs	r3, #16
 800255e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3c      	ldr	r2, [pc, #240]	; (8002658 <UART_SetConfig+0x2dc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	f040 8082 	bne.w	8002670 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800256c:	7efb      	ldrb	r3, [r7, #27]
 800256e:	2b08      	cmp	r3, #8
 8002570:	d823      	bhi.n	80025ba <UART_SetConfig+0x23e>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <UART_SetConfig+0x1fc>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	0800259d 	.word	0x0800259d
 800257c:	080025bb 	.word	0x080025bb
 8002580:	080025a5 	.word	0x080025a5
 8002584:	080025bb 	.word	0x080025bb
 8002588:	080025ab 	.word	0x080025ab
 800258c:	080025bb 	.word	0x080025bb
 8002590:	080025bb 	.word	0x080025bb
 8002594:	080025bb 	.word	0x080025bb
 8002598:	080025b3 	.word	0x080025b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800259c:	f7ff fbfa 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80025a0:	6178      	str	r0, [r7, #20]
        break;
 80025a2:	e00f      	b.n	80025c4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <UART_SetConfig+0x2f0>)
 80025a6:	617b      	str	r3, [r7, #20]
        break;
 80025a8:	e00c      	b.n	80025c4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025aa:	f7ff fb5d 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 80025ae:	6178      	str	r0, [r7, #20]
        break;
 80025b0:	e008      	b.n	80025c4 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025b6:	617b      	str	r3, [r7, #20]
        break;
 80025b8:	e004      	b.n	80025c4 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	76bb      	strb	r3, [r7, #26]
        break;
 80025c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8100 	beq.w	80027cc <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d305      	bcc.n	80025e8 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d902      	bls.n	80025ee <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	76bb      	strb	r3, [r7, #26]
 80025ec:	e0ee      	b.n	80027cc <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0214      	lsls	r4, r2, #8
 8002600:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002604:	020b      	lsls	r3, r1, #8
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6852      	ldr	r2, [r2, #4]
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	4611      	mov	r1, r2
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	eb13 0b01 	adds.w	fp, r3, r1
 8002616:	eb44 0c02 	adc.w	ip, r4, r2
 800261a:	4658      	mov	r0, fp
 800261c:	4661      	mov	r1, ip
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f04f 0400 	mov.w	r4, #0
 8002626:	461a      	mov	r2, r3
 8002628:	4623      	mov	r3, r4
 800262a:	f7fd fe21 	bl	8000270 <__aeabi_uldivmod>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800263a:	d308      	bcc.n	800264e <UART_SetConfig+0x2d2>
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002642:	d204      	bcs.n	800264e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	e0be      	b.n	80027cc <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	76bb      	strb	r3, [r7, #26]
 8002652:	e0bb      	b.n	80027cc <UART_SetConfig+0x450>
 8002654:	efff69f3 	.word	0xefff69f3
 8002658:	40008000 	.word	0x40008000
 800265c:	40013800 	.word	0x40013800
 8002660:	40021000 	.word	0x40021000
 8002664:	40004400 	.word	0x40004400
 8002668:	40004800 	.word	0x40004800
 800266c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d15c      	bne.n	8002734 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 800267a:	7efb      	ldrb	r3, [r7, #27]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d828      	bhi.n	80026d2 <UART_SetConfig+0x356>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <UART_SetConfig+0x30c>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	080026ad 	.word	0x080026ad
 800268c:	080026b5 	.word	0x080026b5
 8002690:	080026bd 	.word	0x080026bd
 8002694:	080026d3 	.word	0x080026d3
 8002698:	080026c3 	.word	0x080026c3
 800269c:	080026d3 	.word	0x080026d3
 80026a0:	080026d3 	.word	0x080026d3
 80026a4:	080026d3 	.word	0x080026d3
 80026a8:	080026cb 	.word	0x080026cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ac:	f7ff fb72 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 80026b0:	6178      	str	r0, [r7, #20]
        break;
 80026b2:	e013      	b.n	80026dc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026b4:	f7ff fb84 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 80026b8:	6178      	str	r0, [r7, #20]
        break;
 80026ba:	e00f      	b.n	80026dc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026bc:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <UART_SetConfig+0x468>)
 80026be:	617b      	str	r3, [r7, #20]
        break;
 80026c0:	e00c      	b.n	80026dc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c2:	f7ff fad1 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 80026c6:	6178      	str	r0, [r7, #20]
        break;
 80026c8:	e008      	b.n	80026dc <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ce:	617b      	str	r3, [r7, #20]
        break;
 80026d0:	e004      	b.n	80026dc <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	76bb      	strb	r3, [r7, #26]
        break;
 80026da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d074      	beq.n	80027cc <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005a      	lsls	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	441a      	add	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d916      	bls.n	800272e <UART_SetConfig+0x3b2>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d212      	bcs.n	800272e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	b29b      	uxth	r3, r3
 800270c:	f023 030f 	bic.w	r3, r3, #15
 8002710:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	b29a      	uxth	r2, r3
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	4313      	orrs	r3, r2
 8002722:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	89fa      	ldrh	r2, [r7, #14]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	e04e      	b.n	80027cc <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	76bb      	strb	r3, [r7, #26]
 8002732:	e04b      	b.n	80027cc <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002734:	7efb      	ldrb	r3, [r7, #27]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d827      	bhi.n	800278a <UART_SetConfig+0x40e>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <UART_SetConfig+0x3c4>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002765 	.word	0x08002765
 8002744:	0800276d 	.word	0x0800276d
 8002748:	08002775 	.word	0x08002775
 800274c:	0800278b 	.word	0x0800278b
 8002750:	0800277b 	.word	0x0800277b
 8002754:	0800278b 	.word	0x0800278b
 8002758:	0800278b 	.word	0x0800278b
 800275c:	0800278b 	.word	0x0800278b
 8002760:	08002783 	.word	0x08002783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff fb16 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002768:	6178      	str	r0, [r7, #20]
        break;
 800276a:	e013      	b.n	8002794 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800276c:	f7ff fb28 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002770:	6178      	str	r0, [r7, #20]
        break;
 8002772:	e00f      	b.n	8002794 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <UART_SetConfig+0x468>)
 8002776:	617b      	str	r3, [r7, #20]
        break;
 8002778:	e00c      	b.n	8002794 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277a:	f7ff fa75 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 800277e:	6178      	str	r0, [r7, #20]
        break;
 8002780:	e008      	b.n	8002794 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002786:	617b      	str	r3, [r7, #20]
        break;
 8002788:	e004      	b.n	8002794 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	76bb      	strb	r3, [r7, #26]
        break;
 8002792:	bf00      	nop
    }

    if (pclk != 0U)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d018      	beq.n	80027cc <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	085a      	lsrs	r2, r3, #1
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	441a      	add	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d908      	bls.n	80027c8 <UART_SetConfig+0x44c>
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d204      	bcs.n	80027c8 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	e001      	b.n	80027cc <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80027d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80027e4:	00f42400 	.word	0x00f42400

080027e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01a      	beq.n	80028fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e6:	d10a      	bne.n	80028fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	605a      	str	r2, [r3, #4]
  }
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800293a:	f7fe f963 	bl	8000c04 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b08      	cmp	r3, #8
 800294c:	d10e      	bne.n	800296c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800294e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f82a 	bl	80029b6 <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e020      	b.n	80029ae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d10e      	bne.n	8002998 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800297a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f814 	bl	80029b6 <UART_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e00a      	b.n	80029ae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c6:	e05d      	b.n	8002a84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d059      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d0:	f7fe f918 	bl	8000c04 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11b      	bne.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029f4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e042      	b.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02b      	beq.n	8002a84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a3a:	d123      	bne.n	8002a84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e00f      	b.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	bf0c      	ite	eq
 8002a94:	2301      	moveq	r3, #1
 8002a96:	2300      	movne	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d092      	beq.n	80029c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <__errno>:
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <__errno+0x8>)
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	4e0d      	ldr	r6, [pc, #52]	; (8002af0 <__libc_init_array+0x38>)
 8002abc:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002abe:	1ba4      	subs	r4, r4, r6
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	2500      	movs	r5, #0
 8002ac4:	42a5      	cmp	r5, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	4e0b      	ldr	r6, [pc, #44]	; (8002af8 <__libc_init_array+0x40>)
 8002aca:	4c0c      	ldr	r4, [pc, #48]	; (8002afc <__libc_init_array+0x44>)
 8002acc:	f000 ff68 	bl	80039a0 <_init>
 8002ad0:	1ba4      	subs	r4, r4, r6
 8002ad2:	10a4      	asrs	r4, r4, #2
 8002ad4:	2500      	movs	r5, #0
 8002ad6:	42a5      	cmp	r5, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae0:	4798      	blx	r3
 8002ae2:	3501      	adds	r5, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002aea:	4798      	blx	r3
 8002aec:	3501      	adds	r5, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08003ac4 	.word	0x08003ac4
 8002af4:	08003ac4 	.word	0x08003ac4
 8002af8:	08003ac4 	.word	0x08003ac4
 8002afc:	08003ac8 	.word	0x08003ac8

08002b00 <memset>:
 8002b00:	4402      	add	r2, r0
 8002b02:	4603      	mov	r3, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <iprintf>:
 8002b10:	b40f      	push	{r0, r1, r2, r3}
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <iprintf+0x2c>)
 8002b14:	b513      	push	{r0, r1, r4, lr}
 8002b16:	681c      	ldr	r4, [r3, #0]
 8002b18:	b124      	cbz	r4, 8002b24 <iprintf+0x14>
 8002b1a:	69a3      	ldr	r3, [r4, #24]
 8002b1c:	b913      	cbnz	r3, 8002b24 <iprintf+0x14>
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f000 fa22 	bl	8002f68 <__sinit>
 8002b24:	ab05      	add	r3, sp, #20
 8002b26:	9a04      	ldr	r2, [sp, #16]
 8002b28:	68a1      	ldr	r1, [r4, #8]
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 fbdb 	bl	80032e8 <_vfiprintf_r>
 8002b32:	b002      	add	sp, #8
 8002b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b38:	b004      	add	sp, #16
 8002b3a:	4770      	bx	lr
 8002b3c:	2000000c 	.word	0x2000000c

08002b40 <_puts_r>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	460e      	mov	r6, r1
 8002b44:	4605      	mov	r5, r0
 8002b46:	b118      	cbz	r0, 8002b50 <_puts_r+0x10>
 8002b48:	6983      	ldr	r3, [r0, #24]
 8002b4a:	b90b      	cbnz	r3, 8002b50 <_puts_r+0x10>
 8002b4c:	f000 fa0c 	bl	8002f68 <__sinit>
 8002b50:	69ab      	ldr	r3, [r5, #24]
 8002b52:	68ac      	ldr	r4, [r5, #8]
 8002b54:	b913      	cbnz	r3, 8002b5c <_puts_r+0x1c>
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 fa06 	bl	8002f68 <__sinit>
 8002b5c:	4b23      	ldr	r3, [pc, #140]	; (8002bec <_puts_r+0xac>)
 8002b5e:	429c      	cmp	r4, r3
 8002b60:	d117      	bne.n	8002b92 <_puts_r+0x52>
 8002b62:	686c      	ldr	r4, [r5, #4]
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	071b      	lsls	r3, r3, #28
 8002b68:	d51d      	bpl.n	8002ba6 <_puts_r+0x66>
 8002b6a:	6923      	ldr	r3, [r4, #16]
 8002b6c:	b1db      	cbz	r3, 8002ba6 <_puts_r+0x66>
 8002b6e:	3e01      	subs	r6, #1
 8002b70:	68a3      	ldr	r3, [r4, #8]
 8002b72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60a3      	str	r3, [r4, #8]
 8002b7a:	b9e9      	cbnz	r1, 8002bb8 <_puts_r+0x78>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da2e      	bge.n	8002bde <_puts_r+0x9e>
 8002b80:	4622      	mov	r2, r4
 8002b82:	210a      	movs	r1, #10
 8002b84:	4628      	mov	r0, r5
 8002b86:	f000 f83f 	bl	8002c08 <__swbuf_r>
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d011      	beq.n	8002bb2 <_puts_r+0x72>
 8002b8e:	200a      	movs	r0, #10
 8002b90:	e011      	b.n	8002bb6 <_puts_r+0x76>
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <_puts_r+0xb0>)
 8002b94:	429c      	cmp	r4, r3
 8002b96:	d101      	bne.n	8002b9c <_puts_r+0x5c>
 8002b98:	68ac      	ldr	r4, [r5, #8]
 8002b9a:	e7e3      	b.n	8002b64 <_puts_r+0x24>
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <_puts_r+0xb4>)
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	bf08      	it	eq
 8002ba2:	68ec      	ldreq	r4, [r5, #12]
 8002ba4:	e7de      	b.n	8002b64 <_puts_r+0x24>
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	4628      	mov	r0, r5
 8002baa:	f000 f87f 	bl	8002cac <__swsetup_r>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d0dd      	beq.n	8002b6e <_puts_r+0x2e>
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da04      	bge.n	8002bc6 <_puts_r+0x86>
 8002bbc:	69a2      	ldr	r2, [r4, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	dc06      	bgt.n	8002bd0 <_puts_r+0x90>
 8002bc2:	290a      	cmp	r1, #10
 8002bc4:	d004      	beq.n	8002bd0 <_puts_r+0x90>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	6022      	str	r2, [r4, #0]
 8002bcc:	7019      	strb	r1, [r3, #0]
 8002bce:	e7cf      	b.n	8002b70 <_puts_r+0x30>
 8002bd0:	4622      	mov	r2, r4
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f000 f818 	bl	8002c08 <__swbuf_r>
 8002bd8:	3001      	adds	r0, #1
 8002bda:	d1c9      	bne.n	8002b70 <_puts_r+0x30>
 8002bdc:	e7e9      	b.n	8002bb2 <_puts_r+0x72>
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	200a      	movs	r0, #10
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	6022      	str	r2, [r4, #0]
 8002be6:	7018      	strb	r0, [r3, #0]
 8002be8:	e7e5      	b.n	8002bb6 <_puts_r+0x76>
 8002bea:	bf00      	nop
 8002bec:	08003a48 	.word	0x08003a48
 8002bf0:	08003a68 	.word	0x08003a68
 8002bf4:	08003a28 	.word	0x08003a28

08002bf8 <puts>:
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <puts+0xc>)
 8002bfa:	4601      	mov	r1, r0
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	f7ff bf9f 	b.w	8002b40 <_puts_r>
 8002c02:	bf00      	nop
 8002c04:	2000000c 	.word	0x2000000c

08002c08 <__swbuf_r>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	460e      	mov	r6, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	4605      	mov	r5, r0
 8002c10:	b118      	cbz	r0, 8002c1a <__swbuf_r+0x12>
 8002c12:	6983      	ldr	r3, [r0, #24]
 8002c14:	b90b      	cbnz	r3, 8002c1a <__swbuf_r+0x12>
 8002c16:	f000 f9a7 	bl	8002f68 <__sinit>
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <__swbuf_r+0x98>)
 8002c1c:	429c      	cmp	r4, r3
 8002c1e:	d12a      	bne.n	8002c76 <__swbuf_r+0x6e>
 8002c20:	686c      	ldr	r4, [r5, #4]
 8002c22:	69a3      	ldr	r3, [r4, #24]
 8002c24:	60a3      	str	r3, [r4, #8]
 8002c26:	89a3      	ldrh	r3, [r4, #12]
 8002c28:	071a      	lsls	r2, r3, #28
 8002c2a:	d52e      	bpl.n	8002c8a <__swbuf_r+0x82>
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	b363      	cbz	r3, 8002c8a <__swbuf_r+0x82>
 8002c30:	6923      	ldr	r3, [r4, #16]
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	6963      	ldr	r3, [r4, #20]
 8002c38:	b2f6      	uxtb	r6, r6
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	4637      	mov	r7, r6
 8002c3e:	dc04      	bgt.n	8002c4a <__swbuf_r+0x42>
 8002c40:	4621      	mov	r1, r4
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 f926 	bl	8002e94 <_fflush_r>
 8002c48:	bb28      	cbnz	r0, 8002c96 <__swbuf_r+0x8e>
 8002c4a:	68a3      	ldr	r3, [r4, #8]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60a3      	str	r3, [r4, #8]
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	6022      	str	r2, [r4, #0]
 8002c56:	701e      	strb	r6, [r3, #0]
 8002c58:	6963      	ldr	r3, [r4, #20]
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	4283      	cmp	r3, r0
 8002c5e:	d004      	beq.n	8002c6a <__swbuf_r+0x62>
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	07db      	lsls	r3, r3, #31
 8002c64:	d519      	bpl.n	8002c9a <__swbuf_r+0x92>
 8002c66:	2e0a      	cmp	r6, #10
 8002c68:	d117      	bne.n	8002c9a <__swbuf_r+0x92>
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 f911 	bl	8002e94 <_fflush_r>
 8002c72:	b190      	cbz	r0, 8002c9a <__swbuf_r+0x92>
 8002c74:	e00f      	b.n	8002c96 <__swbuf_r+0x8e>
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <__swbuf_r+0x9c>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	d101      	bne.n	8002c80 <__swbuf_r+0x78>
 8002c7c:	68ac      	ldr	r4, [r5, #8]
 8002c7e:	e7d0      	b.n	8002c22 <__swbuf_r+0x1a>
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <__swbuf_r+0xa0>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	bf08      	it	eq
 8002c86:	68ec      	ldreq	r4, [r5, #12]
 8002c88:	e7cb      	b.n	8002c22 <__swbuf_r+0x1a>
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f000 f80d 	bl	8002cac <__swsetup_r>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d0cc      	beq.n	8002c30 <__swbuf_r+0x28>
 8002c96:	f04f 37ff 	mov.w	r7, #4294967295
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08003a48 	.word	0x08003a48
 8002ca4:	08003a68 	.word	0x08003a68
 8002ca8:	08003a28 	.word	0x08003a28

08002cac <__swsetup_r>:
 8002cac:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <__swsetup_r+0xcc>)
 8002cae:	b570      	push	{r4, r5, r6, lr}
 8002cb0:	681d      	ldr	r5, [r3, #0]
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	b125      	cbz	r5, 8002cc2 <__swsetup_r+0x16>
 8002cb8:	69ab      	ldr	r3, [r5, #24]
 8002cba:	b913      	cbnz	r3, 8002cc2 <__swsetup_r+0x16>
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 f953 	bl	8002f68 <__sinit>
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <__swsetup_r+0xd0>)
 8002cc4:	429c      	cmp	r4, r3
 8002cc6:	d10f      	bne.n	8002ce8 <__swsetup_r+0x3c>
 8002cc8:	686c      	ldr	r4, [r5, #4]
 8002cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	0715      	lsls	r5, r2, #28
 8002cd2:	d42c      	bmi.n	8002d2e <__swsetup_r+0x82>
 8002cd4:	06d0      	lsls	r0, r2, #27
 8002cd6:	d411      	bmi.n	8002cfc <__swsetup_r+0x50>
 8002cd8:	2209      	movs	r2, #9
 8002cda:	6032      	str	r2, [r6, #0]
 8002cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce0:	81a3      	strh	r3, [r4, #12]
 8002ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce6:	e03e      	b.n	8002d66 <__swsetup_r+0xba>
 8002ce8:	4b25      	ldr	r3, [pc, #148]	; (8002d80 <__swsetup_r+0xd4>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	d101      	bne.n	8002cf2 <__swsetup_r+0x46>
 8002cee:	68ac      	ldr	r4, [r5, #8]
 8002cf0:	e7eb      	b.n	8002cca <__swsetup_r+0x1e>
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <__swsetup_r+0xd8>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	bf08      	it	eq
 8002cf8:	68ec      	ldreq	r4, [r5, #12]
 8002cfa:	e7e6      	b.n	8002cca <__swsetup_r+0x1e>
 8002cfc:	0751      	lsls	r1, r2, #29
 8002cfe:	d512      	bpl.n	8002d26 <__swsetup_r+0x7a>
 8002d00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d02:	b141      	cbz	r1, 8002d16 <__swsetup_r+0x6a>
 8002d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d08:	4299      	cmp	r1, r3
 8002d0a:	d002      	beq.n	8002d12 <__swsetup_r+0x66>
 8002d0c:	4630      	mov	r0, r6
 8002d0e:	f000 fa19 	bl	8003144 <_free_r>
 8002d12:	2300      	movs	r3, #0
 8002d14:	6363      	str	r3, [r4, #52]	; 0x34
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d1c:	81a3      	strh	r3, [r4, #12]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6063      	str	r3, [r4, #4]
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	89a3      	ldrh	r3, [r4, #12]
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	b94b      	cbnz	r3, 8002d46 <__swsetup_r+0x9a>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3c:	d003      	beq.n	8002d46 <__swsetup_r+0x9a>
 8002d3e:	4621      	mov	r1, r4
 8002d40:	4630      	mov	r0, r6
 8002d42:	f000 f9bf 	bl	80030c4 <__smakebuf_r>
 8002d46:	89a2      	ldrh	r2, [r4, #12]
 8002d48:	f012 0301 	ands.w	r3, r2, #1
 8002d4c:	d00c      	beq.n	8002d68 <__swsetup_r+0xbc>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60a3      	str	r3, [r4, #8]
 8002d52:	6963      	ldr	r3, [r4, #20]
 8002d54:	425b      	negs	r3, r3
 8002d56:	61a3      	str	r3, [r4, #24]
 8002d58:	6923      	ldr	r3, [r4, #16]
 8002d5a:	b953      	cbnz	r3, 8002d72 <__swsetup_r+0xc6>
 8002d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d60:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002d64:	d1ba      	bne.n	8002cdc <__swsetup_r+0x30>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	0792      	lsls	r2, r2, #30
 8002d6a:	bf58      	it	pl
 8002d6c:	6963      	ldrpl	r3, [r4, #20]
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	e7f2      	b.n	8002d58 <__swsetup_r+0xac>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e7f7      	b.n	8002d66 <__swsetup_r+0xba>
 8002d76:	bf00      	nop
 8002d78:	2000000c 	.word	0x2000000c
 8002d7c:	08003a48 	.word	0x08003a48
 8002d80:	08003a68 	.word	0x08003a68
 8002d84:	08003a28 	.word	0x08003a28

08002d88 <__sflush_r>:
 8002d88:	898a      	ldrh	r2, [r1, #12]
 8002d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8e:	4605      	mov	r5, r0
 8002d90:	0710      	lsls	r0, r2, #28
 8002d92:	460c      	mov	r4, r1
 8002d94:	d458      	bmi.n	8002e48 <__sflush_r+0xc0>
 8002d96:	684b      	ldr	r3, [r1, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	dc05      	bgt.n	8002da8 <__sflush_r+0x20>
 8002d9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	dc02      	bgt.n	8002da8 <__sflush_r+0x20>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002daa:	2e00      	cmp	r6, #0
 8002dac:	d0f9      	beq.n	8002da2 <__sflush_r+0x1a>
 8002dae:	2300      	movs	r3, #0
 8002db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002db4:	682f      	ldr	r7, [r5, #0]
 8002db6:	6a21      	ldr	r1, [r4, #32]
 8002db8:	602b      	str	r3, [r5, #0]
 8002dba:	d032      	beq.n	8002e22 <__sflush_r+0x9a>
 8002dbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	075a      	lsls	r2, r3, #29
 8002dc2:	d505      	bpl.n	8002dd0 <__sflush_r+0x48>
 8002dc4:	6863      	ldr	r3, [r4, #4]
 8002dc6:	1ac0      	subs	r0, r0, r3
 8002dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dca:	b10b      	cbz	r3, 8002dd0 <__sflush_r+0x48>
 8002dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dce:	1ac0      	subs	r0, r0, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dd6:	6a21      	ldr	r1, [r4, #32]
 8002dd8:	4628      	mov	r0, r5
 8002dda:	47b0      	blx	r6
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	d106      	bne.n	8002df0 <__sflush_r+0x68>
 8002de2:	6829      	ldr	r1, [r5, #0]
 8002de4:	291d      	cmp	r1, #29
 8002de6:	d848      	bhi.n	8002e7a <__sflush_r+0xf2>
 8002de8:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <__sflush_r+0x108>)
 8002dea:	40ca      	lsrs	r2, r1
 8002dec:	07d6      	lsls	r6, r2, #31
 8002dee:	d544      	bpl.n	8002e7a <__sflush_r+0xf2>
 8002df0:	2200      	movs	r2, #0
 8002df2:	6062      	str	r2, [r4, #4]
 8002df4:	04d9      	lsls	r1, r3, #19
 8002df6:	6922      	ldr	r2, [r4, #16]
 8002df8:	6022      	str	r2, [r4, #0]
 8002dfa:	d504      	bpl.n	8002e06 <__sflush_r+0x7e>
 8002dfc:	1c42      	adds	r2, r0, #1
 8002dfe:	d101      	bne.n	8002e04 <__sflush_r+0x7c>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b903      	cbnz	r3, 8002e06 <__sflush_r+0x7e>
 8002e04:	6560      	str	r0, [r4, #84]	; 0x54
 8002e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e08:	602f      	str	r7, [r5, #0]
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d0c9      	beq.n	8002da2 <__sflush_r+0x1a>
 8002e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e12:	4299      	cmp	r1, r3
 8002e14:	d002      	beq.n	8002e1c <__sflush_r+0x94>
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f994 	bl	8003144 <_free_r>
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	6360      	str	r0, [r4, #52]	; 0x34
 8002e20:	e7c0      	b.n	8002da4 <__sflush_r+0x1c>
 8002e22:	2301      	movs	r3, #1
 8002e24:	4628      	mov	r0, r5
 8002e26:	47b0      	blx	r6
 8002e28:	1c41      	adds	r1, r0, #1
 8002e2a:	d1c8      	bne.n	8002dbe <__sflush_r+0x36>
 8002e2c:	682b      	ldr	r3, [r5, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0c5      	beq.n	8002dbe <__sflush_r+0x36>
 8002e32:	2b1d      	cmp	r3, #29
 8002e34:	d001      	beq.n	8002e3a <__sflush_r+0xb2>
 8002e36:	2b16      	cmp	r3, #22
 8002e38:	d101      	bne.n	8002e3e <__sflush_r+0xb6>
 8002e3a:	602f      	str	r7, [r5, #0]
 8002e3c:	e7b1      	b.n	8002da2 <__sflush_r+0x1a>
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e44:	81a3      	strh	r3, [r4, #12]
 8002e46:	e7ad      	b.n	8002da4 <__sflush_r+0x1c>
 8002e48:	690f      	ldr	r7, [r1, #16]
 8002e4a:	2f00      	cmp	r7, #0
 8002e4c:	d0a9      	beq.n	8002da2 <__sflush_r+0x1a>
 8002e4e:	0793      	lsls	r3, r2, #30
 8002e50:	680e      	ldr	r6, [r1, #0]
 8002e52:	bf08      	it	eq
 8002e54:	694b      	ldreq	r3, [r1, #20]
 8002e56:	600f      	str	r7, [r1, #0]
 8002e58:	bf18      	it	ne
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	eba6 0807 	sub.w	r8, r6, r7
 8002e60:	608b      	str	r3, [r1, #8]
 8002e62:	f1b8 0f00 	cmp.w	r8, #0
 8002e66:	dd9c      	ble.n	8002da2 <__sflush_r+0x1a>
 8002e68:	4643      	mov	r3, r8
 8002e6a:	463a      	mov	r2, r7
 8002e6c:	6a21      	ldr	r1, [r4, #32]
 8002e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e70:	4628      	mov	r0, r5
 8002e72:	47b0      	blx	r6
 8002e74:	2800      	cmp	r0, #0
 8002e76:	dc06      	bgt.n	8002e86 <__sflush_r+0xfe>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	e78e      	b.n	8002da4 <__sflush_r+0x1c>
 8002e86:	4407      	add	r7, r0
 8002e88:	eba8 0800 	sub.w	r8, r8, r0
 8002e8c:	e7e9      	b.n	8002e62 <__sflush_r+0xda>
 8002e8e:	bf00      	nop
 8002e90:	20400001 	.word	0x20400001

08002e94 <_fflush_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	690b      	ldr	r3, [r1, #16]
 8002e98:	4605      	mov	r5, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	b1db      	cbz	r3, 8002ed6 <_fflush_r+0x42>
 8002e9e:	b118      	cbz	r0, 8002ea8 <_fflush_r+0x14>
 8002ea0:	6983      	ldr	r3, [r0, #24]
 8002ea2:	b90b      	cbnz	r3, 8002ea8 <_fflush_r+0x14>
 8002ea4:	f000 f860 	bl	8002f68 <__sinit>
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <_fflush_r+0x48>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d109      	bne.n	8002ec2 <_fflush_r+0x2e>
 8002eae:	686c      	ldr	r4, [r5, #4]
 8002eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb4:	b17b      	cbz	r3, 8002ed6 <_fflush_r+0x42>
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	4628      	mov	r0, r5
 8002eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ebe:	f7ff bf63 	b.w	8002d88 <__sflush_r>
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <_fflush_r+0x4c>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d101      	bne.n	8002ecc <_fflush_r+0x38>
 8002ec8:	68ac      	ldr	r4, [r5, #8]
 8002eca:	e7f1      	b.n	8002eb0 <_fflush_r+0x1c>
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <_fflush_r+0x50>)
 8002ece:	429c      	cmp	r4, r3
 8002ed0:	bf08      	it	eq
 8002ed2:	68ec      	ldreq	r4, [r5, #12]
 8002ed4:	e7ec      	b.n	8002eb0 <_fflush_r+0x1c>
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop
 8002edc:	08003a48 	.word	0x08003a48
 8002ee0:	08003a68 	.word	0x08003a68
 8002ee4:	08003a28 	.word	0x08003a28

08002ee8 <std>:
 8002ee8:	2300      	movs	r3, #0
 8002eea:	b510      	push	{r4, lr}
 8002eec:	4604      	mov	r4, r0
 8002eee:	e9c0 3300 	strd	r3, r3, [r0]
 8002ef2:	6083      	str	r3, [r0, #8]
 8002ef4:	8181      	strh	r1, [r0, #12]
 8002ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ef8:	81c2      	strh	r2, [r0, #14]
 8002efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002efe:	6183      	str	r3, [r0, #24]
 8002f00:	4619      	mov	r1, r3
 8002f02:	2208      	movs	r2, #8
 8002f04:	305c      	adds	r0, #92	; 0x5c
 8002f06:	f7ff fdfb 	bl	8002b00 <memset>
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <std+0x38>)
 8002f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <std+0x3c>)
 8002f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <std+0x40>)
 8002f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <std+0x44>)
 8002f18:	6224      	str	r4, [r4, #32]
 8002f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	bf00      	nop
 8002f20:	08003845 	.word	0x08003845
 8002f24:	08003867 	.word	0x08003867
 8002f28:	0800389f 	.word	0x0800389f
 8002f2c:	080038c3 	.word	0x080038c3

08002f30 <_cleanup_r>:
 8002f30:	4901      	ldr	r1, [pc, #4]	; (8002f38 <_cleanup_r+0x8>)
 8002f32:	f000 b885 	b.w	8003040 <_fwalk_reent>
 8002f36:	bf00      	nop
 8002f38:	08002e95 	.word	0x08002e95

08002f3c <__sfmoreglue>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	1e4a      	subs	r2, r1, #1
 8002f40:	2568      	movs	r5, #104	; 0x68
 8002f42:	4355      	muls	r5, r2
 8002f44:	460e      	mov	r6, r1
 8002f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f4a:	f000 f949 	bl	80031e0 <_malloc_r>
 8002f4e:	4604      	mov	r4, r0
 8002f50:	b140      	cbz	r0, 8002f64 <__sfmoreglue+0x28>
 8002f52:	2100      	movs	r1, #0
 8002f54:	e9c0 1600 	strd	r1, r6, [r0]
 8002f58:	300c      	adds	r0, #12
 8002f5a:	60a0      	str	r0, [r4, #8]
 8002f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f60:	f7ff fdce 	bl	8002b00 <memset>
 8002f64:	4620      	mov	r0, r4
 8002f66:	bd70      	pop	{r4, r5, r6, pc}

08002f68 <__sinit>:
 8002f68:	6983      	ldr	r3, [r0, #24]
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	bb33      	cbnz	r3, 8002fbe <__sinit+0x56>
 8002f70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002f74:	6503      	str	r3, [r0, #80]	; 0x50
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <__sinit+0x58>)
 8002f78:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <__sinit+0x5c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6282      	str	r2, [r0, #40]	; 0x28
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	bf04      	itt	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	6183      	streq	r3, [r0, #24]
 8002f86:	f000 f81f 	bl	8002fc8 <__sfp>
 8002f8a:	6060      	str	r0, [r4, #4]
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 f81b 	bl	8002fc8 <__sfp>
 8002f92:	60a0      	str	r0, [r4, #8]
 8002f94:	4620      	mov	r0, r4
 8002f96:	f000 f817 	bl	8002fc8 <__sfp>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60e0      	str	r0, [r4, #12]
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	6860      	ldr	r0, [r4, #4]
 8002fa2:	f7ff ffa1 	bl	8002ee8 <std>
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2109      	movs	r1, #9
 8002faa:	68a0      	ldr	r0, [r4, #8]
 8002fac:	f7ff ff9c 	bl	8002ee8 <std>
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	2112      	movs	r1, #18
 8002fb4:	68e0      	ldr	r0, [r4, #12]
 8002fb6:	f7ff ff97 	bl	8002ee8 <std>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61a3      	str	r3, [r4, #24]
 8002fbe:	bd10      	pop	{r4, pc}
 8002fc0:	08003a24 	.word	0x08003a24
 8002fc4:	08002f31 	.word	0x08002f31

08002fc8 <__sfp>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <__sfp+0x70>)
 8002fcc:	681e      	ldr	r6, [r3, #0]
 8002fce:	69b3      	ldr	r3, [r6, #24]
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	b913      	cbnz	r3, 8002fda <__sfp+0x12>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f7ff ffc7 	bl	8002f68 <__sinit>
 8002fda:	3648      	adds	r6, #72	; 0x48
 8002fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	d503      	bpl.n	8002fec <__sfp+0x24>
 8002fe4:	6833      	ldr	r3, [r6, #0]
 8002fe6:	b133      	cbz	r3, 8002ff6 <__sfp+0x2e>
 8002fe8:	6836      	ldr	r6, [r6, #0]
 8002fea:	e7f7      	b.n	8002fdc <__sfp+0x14>
 8002fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ff0:	b16d      	cbz	r5, 800300e <__sfp+0x46>
 8002ff2:	3468      	adds	r4, #104	; 0x68
 8002ff4:	e7f4      	b.n	8002fe0 <__sfp+0x18>
 8002ff6:	2104      	movs	r1, #4
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	f7ff ff9f 	bl	8002f3c <__sfmoreglue>
 8002ffe:	6030      	str	r0, [r6, #0]
 8003000:	2800      	cmp	r0, #0
 8003002:	d1f1      	bne.n	8002fe8 <__sfp+0x20>
 8003004:	230c      	movs	r3, #12
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	4604      	mov	r4, r0
 800300a:	4620      	mov	r0, r4
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <__sfp+0x74>)
 8003010:	6665      	str	r5, [r4, #100]	; 0x64
 8003012:	e9c4 5500 	strd	r5, r5, [r4]
 8003016:	60a5      	str	r5, [r4, #8]
 8003018:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800301c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003020:	2208      	movs	r2, #8
 8003022:	4629      	mov	r1, r5
 8003024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003028:	f7ff fd6a 	bl	8002b00 <memset>
 800302c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003034:	e7e9      	b.n	800300a <__sfp+0x42>
 8003036:	bf00      	nop
 8003038:	08003a24 	.word	0x08003a24
 800303c:	ffff0001 	.word	0xffff0001

08003040 <_fwalk_reent>:
 8003040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003044:	4680      	mov	r8, r0
 8003046:	4689      	mov	r9, r1
 8003048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800304c:	2600      	movs	r6, #0
 800304e:	b914      	cbnz	r4, 8003056 <_fwalk_reent+0x16>
 8003050:	4630      	mov	r0, r6
 8003052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003056:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800305a:	3f01      	subs	r7, #1
 800305c:	d501      	bpl.n	8003062 <_fwalk_reent+0x22>
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	e7f5      	b.n	800304e <_fwalk_reent+0xe>
 8003062:	89ab      	ldrh	r3, [r5, #12]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d907      	bls.n	8003078 <_fwalk_reent+0x38>
 8003068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800306c:	3301      	adds	r3, #1
 800306e:	d003      	beq.n	8003078 <_fwalk_reent+0x38>
 8003070:	4629      	mov	r1, r5
 8003072:	4640      	mov	r0, r8
 8003074:	47c8      	blx	r9
 8003076:	4306      	orrs	r6, r0
 8003078:	3568      	adds	r5, #104	; 0x68
 800307a:	e7ee      	b.n	800305a <_fwalk_reent+0x1a>

0800307c <__swhatbuf_r>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	460e      	mov	r6, r1
 8003080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003084:	2900      	cmp	r1, #0
 8003086:	b096      	sub	sp, #88	; 0x58
 8003088:	4614      	mov	r4, r2
 800308a:	461d      	mov	r5, r3
 800308c:	da07      	bge.n	800309e <__swhatbuf_r+0x22>
 800308e:	2300      	movs	r3, #0
 8003090:	602b      	str	r3, [r5, #0]
 8003092:	89b3      	ldrh	r3, [r6, #12]
 8003094:	061a      	lsls	r2, r3, #24
 8003096:	d410      	bmi.n	80030ba <__swhatbuf_r+0x3e>
 8003098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309c:	e00e      	b.n	80030bc <__swhatbuf_r+0x40>
 800309e:	466a      	mov	r2, sp
 80030a0:	f000 fc36 	bl	8003910 <_fstat_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	dbf2      	blt.n	800308e <__swhatbuf_r+0x12>
 80030a8:	9a01      	ldr	r2, [sp, #4]
 80030aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030b2:	425a      	negs	r2, r3
 80030b4:	415a      	adcs	r2, r3
 80030b6:	602a      	str	r2, [r5, #0]
 80030b8:	e7ee      	b.n	8003098 <__swhatbuf_r+0x1c>
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	2000      	movs	r0, #0
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	b016      	add	sp, #88	; 0x58
 80030c2:	bd70      	pop	{r4, r5, r6, pc}

080030c4 <__smakebuf_r>:
 80030c4:	898b      	ldrh	r3, [r1, #12]
 80030c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030c8:	079d      	lsls	r5, r3, #30
 80030ca:	4606      	mov	r6, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	d507      	bpl.n	80030e0 <__smakebuf_r+0x1c>
 80030d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	6123      	str	r3, [r4, #16]
 80030d8:	2301      	movs	r3, #1
 80030da:	6163      	str	r3, [r4, #20]
 80030dc:	b002      	add	sp, #8
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	ab01      	add	r3, sp, #4
 80030e2:	466a      	mov	r2, sp
 80030e4:	f7ff ffca 	bl	800307c <__swhatbuf_r>
 80030e8:	9900      	ldr	r1, [sp, #0]
 80030ea:	4605      	mov	r5, r0
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f877 	bl	80031e0 <_malloc_r>
 80030f2:	b948      	cbnz	r0, 8003108 <__smakebuf_r+0x44>
 80030f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030f8:	059a      	lsls	r2, r3, #22
 80030fa:	d4ef      	bmi.n	80030dc <__smakebuf_r+0x18>
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	e7e3      	b.n	80030d0 <__smakebuf_r+0xc>
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <__smakebuf_r+0x7c>)
 800310a:	62b3      	str	r3, [r6, #40]	; 0x28
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	6020      	str	r0, [r4, #0]
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	9b00      	ldr	r3, [sp, #0]
 8003118:	6163      	str	r3, [r4, #20]
 800311a:	9b01      	ldr	r3, [sp, #4]
 800311c:	6120      	str	r0, [r4, #16]
 800311e:	b15b      	cbz	r3, 8003138 <__smakebuf_r+0x74>
 8003120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003124:	4630      	mov	r0, r6
 8003126:	f000 fc05 	bl	8003934 <_isatty_r>
 800312a:	b128      	cbz	r0, 8003138 <__smakebuf_r+0x74>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	431d      	orrs	r5, r3
 800313c:	81a5      	strh	r5, [r4, #12]
 800313e:	e7cd      	b.n	80030dc <__smakebuf_r+0x18>
 8003140:	08002f31 	.word	0x08002f31

08003144 <_free_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4605      	mov	r5, r0
 8003148:	2900      	cmp	r1, #0
 800314a:	d045      	beq.n	80031d8 <_free_r+0x94>
 800314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003150:	1f0c      	subs	r4, r1, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfb8      	it	lt
 8003156:	18e4      	addlt	r4, r4, r3
 8003158:	f000 fc0e 	bl	8003978 <__malloc_lock>
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <_free_r+0x98>)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	4610      	mov	r0, r2
 8003162:	b933      	cbnz	r3, 8003172 <_free_r+0x2e>
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	6014      	str	r4, [r2, #0]
 8003168:	4628      	mov	r0, r5
 800316a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800316e:	f000 bc04 	b.w	800397a <__malloc_unlock>
 8003172:	42a3      	cmp	r3, r4
 8003174:	d90c      	bls.n	8003190 <_free_r+0x4c>
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1862      	adds	r2, r4, r1
 800317a:	4293      	cmp	r3, r2
 800317c:	bf04      	itt	eq
 800317e:	681a      	ldreq	r2, [r3, #0]
 8003180:	685b      	ldreq	r3, [r3, #4]
 8003182:	6063      	str	r3, [r4, #4]
 8003184:	bf04      	itt	eq
 8003186:	1852      	addeq	r2, r2, r1
 8003188:	6022      	streq	r2, [r4, #0]
 800318a:	6004      	str	r4, [r0, #0]
 800318c:	e7ec      	b.n	8003168 <_free_r+0x24>
 800318e:	4613      	mov	r3, r2
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	b10a      	cbz	r2, 8003198 <_free_r+0x54>
 8003194:	42a2      	cmp	r2, r4
 8003196:	d9fa      	bls.n	800318e <_free_r+0x4a>
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	1858      	adds	r0, r3, r1
 800319c:	42a0      	cmp	r0, r4
 800319e:	d10b      	bne.n	80031b8 <_free_r+0x74>
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	4401      	add	r1, r0
 80031a4:	1858      	adds	r0, r3, r1
 80031a6:	4282      	cmp	r2, r0
 80031a8:	6019      	str	r1, [r3, #0]
 80031aa:	d1dd      	bne.n	8003168 <_free_r+0x24>
 80031ac:	6810      	ldr	r0, [r2, #0]
 80031ae:	6852      	ldr	r2, [r2, #4]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	4401      	add	r1, r0
 80031b4:	6019      	str	r1, [r3, #0]
 80031b6:	e7d7      	b.n	8003168 <_free_r+0x24>
 80031b8:	d902      	bls.n	80031c0 <_free_r+0x7c>
 80031ba:	230c      	movs	r3, #12
 80031bc:	602b      	str	r3, [r5, #0]
 80031be:	e7d3      	b.n	8003168 <_free_r+0x24>
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	1821      	adds	r1, r4, r0
 80031c4:	428a      	cmp	r2, r1
 80031c6:	bf04      	itt	eq
 80031c8:	6811      	ldreq	r1, [r2, #0]
 80031ca:	6852      	ldreq	r2, [r2, #4]
 80031cc:	6062      	str	r2, [r4, #4]
 80031ce:	bf04      	itt	eq
 80031d0:	1809      	addeq	r1, r1, r0
 80031d2:	6021      	streq	r1, [r4, #0]
 80031d4:	605c      	str	r4, [r3, #4]
 80031d6:	e7c7      	b.n	8003168 <_free_r+0x24>
 80031d8:	bd38      	pop	{r3, r4, r5, pc}
 80031da:	bf00      	nop
 80031dc:	20000090 	.word	0x20000090

080031e0 <_malloc_r>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	1ccd      	adds	r5, r1, #3
 80031e4:	f025 0503 	bic.w	r5, r5, #3
 80031e8:	3508      	adds	r5, #8
 80031ea:	2d0c      	cmp	r5, #12
 80031ec:	bf38      	it	cc
 80031ee:	250c      	movcc	r5, #12
 80031f0:	2d00      	cmp	r5, #0
 80031f2:	4606      	mov	r6, r0
 80031f4:	db01      	blt.n	80031fa <_malloc_r+0x1a>
 80031f6:	42a9      	cmp	r1, r5
 80031f8:	d903      	bls.n	8003202 <_malloc_r+0x22>
 80031fa:	230c      	movs	r3, #12
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	2000      	movs	r0, #0
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	f000 fbb9 	bl	8003978 <__malloc_lock>
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <_malloc_r+0xac>)
 8003208:	6814      	ldr	r4, [r2, #0]
 800320a:	4621      	mov	r1, r4
 800320c:	b991      	cbnz	r1, 8003234 <_malloc_r+0x54>
 800320e:	4c20      	ldr	r4, [pc, #128]	; (8003290 <_malloc_r+0xb0>)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	b91b      	cbnz	r3, 800321c <_malloc_r+0x3c>
 8003214:	4630      	mov	r0, r6
 8003216:	f000 fb05 	bl	8003824 <_sbrk_r>
 800321a:	6020      	str	r0, [r4, #0]
 800321c:	4629      	mov	r1, r5
 800321e:	4630      	mov	r0, r6
 8003220:	f000 fb00 	bl	8003824 <_sbrk_r>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d124      	bne.n	8003272 <_malloc_r+0x92>
 8003228:	230c      	movs	r3, #12
 800322a:	6033      	str	r3, [r6, #0]
 800322c:	4630      	mov	r0, r6
 800322e:	f000 fba4 	bl	800397a <__malloc_unlock>
 8003232:	e7e4      	b.n	80031fe <_malloc_r+0x1e>
 8003234:	680b      	ldr	r3, [r1, #0]
 8003236:	1b5b      	subs	r3, r3, r5
 8003238:	d418      	bmi.n	800326c <_malloc_r+0x8c>
 800323a:	2b0b      	cmp	r3, #11
 800323c:	d90f      	bls.n	800325e <_malloc_r+0x7e>
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	50cd      	str	r5, [r1, r3]
 8003242:	18cc      	adds	r4, r1, r3
 8003244:	4630      	mov	r0, r6
 8003246:	f000 fb98 	bl	800397a <__malloc_unlock>
 800324a:	f104 000b 	add.w	r0, r4, #11
 800324e:	1d23      	adds	r3, r4, #4
 8003250:	f020 0007 	bic.w	r0, r0, #7
 8003254:	1ac3      	subs	r3, r0, r3
 8003256:	d0d3      	beq.n	8003200 <_malloc_r+0x20>
 8003258:	425a      	negs	r2, r3
 800325a:	50e2      	str	r2, [r4, r3]
 800325c:	e7d0      	b.n	8003200 <_malloc_r+0x20>
 800325e:	428c      	cmp	r4, r1
 8003260:	684b      	ldr	r3, [r1, #4]
 8003262:	bf16      	itet	ne
 8003264:	6063      	strne	r3, [r4, #4]
 8003266:	6013      	streq	r3, [r2, #0]
 8003268:	460c      	movne	r4, r1
 800326a:	e7eb      	b.n	8003244 <_malloc_r+0x64>
 800326c:	460c      	mov	r4, r1
 800326e:	6849      	ldr	r1, [r1, #4]
 8003270:	e7cc      	b.n	800320c <_malloc_r+0x2c>
 8003272:	1cc4      	adds	r4, r0, #3
 8003274:	f024 0403 	bic.w	r4, r4, #3
 8003278:	42a0      	cmp	r0, r4
 800327a:	d005      	beq.n	8003288 <_malloc_r+0xa8>
 800327c:	1a21      	subs	r1, r4, r0
 800327e:	4630      	mov	r0, r6
 8003280:	f000 fad0 	bl	8003824 <_sbrk_r>
 8003284:	3001      	adds	r0, #1
 8003286:	d0cf      	beq.n	8003228 <_malloc_r+0x48>
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	e7db      	b.n	8003244 <_malloc_r+0x64>
 800328c:	20000090 	.word	0x20000090
 8003290:	20000094 	.word	0x20000094

08003294 <__sfputc_r>:
 8003294:	6893      	ldr	r3, [r2, #8]
 8003296:	3b01      	subs	r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	b410      	push	{r4}
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	da08      	bge.n	80032b2 <__sfputc_r+0x1e>
 80032a0:	6994      	ldr	r4, [r2, #24]
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	db01      	blt.n	80032aa <__sfputc_r+0x16>
 80032a6:	290a      	cmp	r1, #10
 80032a8:	d103      	bne.n	80032b2 <__sfputc_r+0x1e>
 80032aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ae:	f7ff bcab 	b.w	8002c08 <__swbuf_r>
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	1c58      	adds	r0, r3, #1
 80032b6:	6010      	str	r0, [r2, #0]
 80032b8:	7019      	strb	r1, [r3, #0]
 80032ba:	4608      	mov	r0, r1
 80032bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <__sfputs_r>:
 80032c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c4:	4606      	mov	r6, r0
 80032c6:	460f      	mov	r7, r1
 80032c8:	4614      	mov	r4, r2
 80032ca:	18d5      	adds	r5, r2, r3
 80032cc:	42ac      	cmp	r4, r5
 80032ce:	d101      	bne.n	80032d4 <__sfputs_r+0x12>
 80032d0:	2000      	movs	r0, #0
 80032d2:	e007      	b.n	80032e4 <__sfputs_r+0x22>
 80032d4:	463a      	mov	r2, r7
 80032d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032da:	4630      	mov	r0, r6
 80032dc:	f7ff ffda 	bl	8003294 <__sfputc_r>
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	d1f3      	bne.n	80032cc <__sfputs_r+0xa>
 80032e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032e8 <_vfiprintf_r>:
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	460c      	mov	r4, r1
 80032ee:	b09d      	sub	sp, #116	; 0x74
 80032f0:	4617      	mov	r7, r2
 80032f2:	461d      	mov	r5, r3
 80032f4:	4606      	mov	r6, r0
 80032f6:	b118      	cbz	r0, 8003300 <_vfiprintf_r+0x18>
 80032f8:	6983      	ldr	r3, [r0, #24]
 80032fa:	b90b      	cbnz	r3, 8003300 <_vfiprintf_r+0x18>
 80032fc:	f7ff fe34 	bl	8002f68 <__sinit>
 8003300:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <_vfiprintf_r+0x20c>)
 8003302:	429c      	cmp	r4, r3
 8003304:	d158      	bne.n	80033b8 <_vfiprintf_r+0xd0>
 8003306:	6874      	ldr	r4, [r6, #4]
 8003308:	89a3      	ldrh	r3, [r4, #12]
 800330a:	0718      	lsls	r0, r3, #28
 800330c:	d55e      	bpl.n	80033cc <_vfiprintf_r+0xe4>
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05b      	beq.n	80033cc <_vfiprintf_r+0xe4>
 8003314:	2300      	movs	r3, #0
 8003316:	9309      	str	r3, [sp, #36]	; 0x24
 8003318:	2320      	movs	r3, #32
 800331a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800331e:	2330      	movs	r3, #48	; 0x30
 8003320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003324:	9503      	str	r5, [sp, #12]
 8003326:	f04f 0b01 	mov.w	fp, #1
 800332a:	46b8      	mov	r8, r7
 800332c:	4645      	mov	r5, r8
 800332e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003332:	b10b      	cbz	r3, 8003338 <_vfiprintf_r+0x50>
 8003334:	2b25      	cmp	r3, #37	; 0x25
 8003336:	d154      	bne.n	80033e2 <_vfiprintf_r+0xfa>
 8003338:	ebb8 0a07 	subs.w	sl, r8, r7
 800333c:	d00b      	beq.n	8003356 <_vfiprintf_r+0x6e>
 800333e:	4653      	mov	r3, sl
 8003340:	463a      	mov	r2, r7
 8003342:	4621      	mov	r1, r4
 8003344:	4630      	mov	r0, r6
 8003346:	f7ff ffbc 	bl	80032c2 <__sfputs_r>
 800334a:	3001      	adds	r0, #1
 800334c:	f000 80c2 	beq.w	80034d4 <_vfiprintf_r+0x1ec>
 8003350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003352:	4453      	add	r3, sl
 8003354:	9309      	str	r3, [sp, #36]	; 0x24
 8003356:	f898 3000 	ldrb.w	r3, [r8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80ba 	beq.w	80034d4 <_vfiprintf_r+0x1ec>
 8003360:	2300      	movs	r3, #0
 8003362:	f04f 32ff 	mov.w	r2, #4294967295
 8003366:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	9307      	str	r3, [sp, #28]
 800336e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003372:	931a      	str	r3, [sp, #104]	; 0x68
 8003374:	46a8      	mov	r8, r5
 8003376:	2205      	movs	r2, #5
 8003378:	f818 1b01 	ldrb.w	r1, [r8], #1
 800337c:	485e      	ldr	r0, [pc, #376]	; (80034f8 <_vfiprintf_r+0x210>)
 800337e:	f7fc ff27 	bl	80001d0 <memchr>
 8003382:	9b04      	ldr	r3, [sp, #16]
 8003384:	bb78      	cbnz	r0, 80033e6 <_vfiprintf_r+0xfe>
 8003386:	06d9      	lsls	r1, r3, #27
 8003388:	bf44      	itt	mi
 800338a:	2220      	movmi	r2, #32
 800338c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003390:	071a      	lsls	r2, r3, #28
 8003392:	bf44      	itt	mi
 8003394:	222b      	movmi	r2, #43	; 0x2b
 8003396:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800339a:	782a      	ldrb	r2, [r5, #0]
 800339c:	2a2a      	cmp	r2, #42	; 0x2a
 800339e:	d02a      	beq.n	80033f6 <_vfiprintf_r+0x10e>
 80033a0:	9a07      	ldr	r2, [sp, #28]
 80033a2:	46a8      	mov	r8, r5
 80033a4:	2000      	movs	r0, #0
 80033a6:	250a      	movs	r5, #10
 80033a8:	4641      	mov	r1, r8
 80033aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ae:	3b30      	subs	r3, #48	; 0x30
 80033b0:	2b09      	cmp	r3, #9
 80033b2:	d969      	bls.n	8003488 <_vfiprintf_r+0x1a0>
 80033b4:	b360      	cbz	r0, 8003410 <_vfiprintf_r+0x128>
 80033b6:	e024      	b.n	8003402 <_vfiprintf_r+0x11a>
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <_vfiprintf_r+0x214>)
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d101      	bne.n	80033c2 <_vfiprintf_r+0xda>
 80033be:	68b4      	ldr	r4, [r6, #8]
 80033c0:	e7a2      	b.n	8003308 <_vfiprintf_r+0x20>
 80033c2:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <_vfiprintf_r+0x218>)
 80033c4:	429c      	cmp	r4, r3
 80033c6:	bf08      	it	eq
 80033c8:	68f4      	ldreq	r4, [r6, #12]
 80033ca:	e79d      	b.n	8003308 <_vfiprintf_r+0x20>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4630      	mov	r0, r6
 80033d0:	f7ff fc6c 	bl	8002cac <__swsetup_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d09d      	beq.n	8003314 <_vfiprintf_r+0x2c>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	b01d      	add	sp, #116	; 0x74
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e2:	46a8      	mov	r8, r5
 80033e4:	e7a2      	b.n	800332c <_vfiprintf_r+0x44>
 80033e6:	4a44      	ldr	r2, [pc, #272]	; (80034f8 <_vfiprintf_r+0x210>)
 80033e8:	1a80      	subs	r0, r0, r2
 80033ea:	fa0b f000 	lsl.w	r0, fp, r0
 80033ee:	4318      	orrs	r0, r3
 80033f0:	9004      	str	r0, [sp, #16]
 80033f2:	4645      	mov	r5, r8
 80033f4:	e7be      	b.n	8003374 <_vfiprintf_r+0x8c>
 80033f6:	9a03      	ldr	r2, [sp, #12]
 80033f8:	1d11      	adds	r1, r2, #4
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	9103      	str	r1, [sp, #12]
 80033fe:	2a00      	cmp	r2, #0
 8003400:	db01      	blt.n	8003406 <_vfiprintf_r+0x11e>
 8003402:	9207      	str	r2, [sp, #28]
 8003404:	e004      	b.n	8003410 <_vfiprintf_r+0x128>
 8003406:	4252      	negs	r2, r2
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	9207      	str	r2, [sp, #28]
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	f898 3000 	ldrb.w	r3, [r8]
 8003414:	2b2e      	cmp	r3, #46	; 0x2e
 8003416:	d10e      	bne.n	8003436 <_vfiprintf_r+0x14e>
 8003418:	f898 3001 	ldrb.w	r3, [r8, #1]
 800341c:	2b2a      	cmp	r3, #42	; 0x2a
 800341e:	d138      	bne.n	8003492 <_vfiprintf_r+0x1aa>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	1d1a      	adds	r2, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	9203      	str	r2, [sp, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfb8      	it	lt
 800342c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003430:	f108 0802 	add.w	r8, r8, #2
 8003434:	9305      	str	r3, [sp, #20]
 8003436:	4d33      	ldr	r5, [pc, #204]	; (8003504 <_vfiprintf_r+0x21c>)
 8003438:	f898 1000 	ldrb.w	r1, [r8]
 800343c:	2203      	movs	r2, #3
 800343e:	4628      	mov	r0, r5
 8003440:	f7fc fec6 	bl	80001d0 <memchr>
 8003444:	b140      	cbz	r0, 8003458 <_vfiprintf_r+0x170>
 8003446:	2340      	movs	r3, #64	; 0x40
 8003448:	1b40      	subs	r0, r0, r5
 800344a:	fa03 f000 	lsl.w	r0, r3, r0
 800344e:	9b04      	ldr	r3, [sp, #16]
 8003450:	4303      	orrs	r3, r0
 8003452:	f108 0801 	add.w	r8, r8, #1
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	f898 1000 	ldrb.w	r1, [r8]
 800345c:	482a      	ldr	r0, [pc, #168]	; (8003508 <_vfiprintf_r+0x220>)
 800345e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003462:	2206      	movs	r2, #6
 8003464:	f108 0701 	add.w	r7, r8, #1
 8003468:	f7fc feb2 	bl	80001d0 <memchr>
 800346c:	2800      	cmp	r0, #0
 800346e:	d037      	beq.n	80034e0 <_vfiprintf_r+0x1f8>
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <_vfiprintf_r+0x224>)
 8003472:	bb1b      	cbnz	r3, 80034bc <_vfiprintf_r+0x1d4>
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	3307      	adds	r3, #7
 8003478:	f023 0307 	bic.w	r3, r3, #7
 800347c:	3308      	adds	r3, #8
 800347e:	9303      	str	r3, [sp, #12]
 8003480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003482:	444b      	add	r3, r9
 8003484:	9309      	str	r3, [sp, #36]	; 0x24
 8003486:	e750      	b.n	800332a <_vfiprintf_r+0x42>
 8003488:	fb05 3202 	mla	r2, r5, r2, r3
 800348c:	2001      	movs	r0, #1
 800348e:	4688      	mov	r8, r1
 8003490:	e78a      	b.n	80033a8 <_vfiprintf_r+0xc0>
 8003492:	2300      	movs	r3, #0
 8003494:	f108 0801 	add.w	r8, r8, #1
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	4619      	mov	r1, r3
 800349c:	250a      	movs	r5, #10
 800349e:	4640      	mov	r0, r8
 80034a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a4:	3a30      	subs	r2, #48	; 0x30
 80034a6:	2a09      	cmp	r2, #9
 80034a8:	d903      	bls.n	80034b2 <_vfiprintf_r+0x1ca>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0c3      	beq.n	8003436 <_vfiprintf_r+0x14e>
 80034ae:	9105      	str	r1, [sp, #20]
 80034b0:	e7c1      	b.n	8003436 <_vfiprintf_r+0x14e>
 80034b2:	fb05 2101 	mla	r1, r5, r1, r2
 80034b6:	2301      	movs	r3, #1
 80034b8:	4680      	mov	r8, r0
 80034ba:	e7f0      	b.n	800349e <_vfiprintf_r+0x1b6>
 80034bc:	ab03      	add	r3, sp, #12
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4622      	mov	r2, r4
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <_vfiprintf_r+0x228>)
 80034c4:	a904      	add	r1, sp, #16
 80034c6:	4630      	mov	r0, r6
 80034c8:	f3af 8000 	nop.w
 80034cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034d0:	4681      	mov	r9, r0
 80034d2:	d1d5      	bne.n	8003480 <_vfiprintf_r+0x198>
 80034d4:	89a3      	ldrh	r3, [r4, #12]
 80034d6:	065b      	lsls	r3, r3, #25
 80034d8:	f53f af7e 	bmi.w	80033d8 <_vfiprintf_r+0xf0>
 80034dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034de:	e77d      	b.n	80033dc <_vfiprintf_r+0xf4>
 80034e0:	ab03      	add	r3, sp, #12
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4622      	mov	r2, r4
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <_vfiprintf_r+0x228>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	4630      	mov	r0, r6
 80034ec:	f000 f888 	bl	8003600 <_printf_i>
 80034f0:	e7ec      	b.n	80034cc <_vfiprintf_r+0x1e4>
 80034f2:	bf00      	nop
 80034f4:	08003a48 	.word	0x08003a48
 80034f8:	08003a88 	.word	0x08003a88
 80034fc:	08003a68 	.word	0x08003a68
 8003500:	08003a28 	.word	0x08003a28
 8003504:	08003a8e 	.word	0x08003a8e
 8003508:	08003a92 	.word	0x08003a92
 800350c:	00000000 	.word	0x00000000
 8003510:	080032c3 	.word	0x080032c3

08003514 <_printf_common>:
 8003514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	4691      	mov	r9, r2
 800351a:	461f      	mov	r7, r3
 800351c:	688a      	ldr	r2, [r1, #8]
 800351e:	690b      	ldr	r3, [r1, #16]
 8003520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003524:	4293      	cmp	r3, r2
 8003526:	bfb8      	it	lt
 8003528:	4613      	movlt	r3, r2
 800352a:	f8c9 3000 	str.w	r3, [r9]
 800352e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003532:	4606      	mov	r6, r0
 8003534:	460c      	mov	r4, r1
 8003536:	b112      	cbz	r2, 800353e <_printf_common+0x2a>
 8003538:	3301      	adds	r3, #1
 800353a:	f8c9 3000 	str.w	r3, [r9]
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	0699      	lsls	r1, r3, #26
 8003542:	bf42      	ittt	mi
 8003544:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003548:	3302      	addmi	r3, #2
 800354a:	f8c9 3000 	strmi.w	r3, [r9]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	f015 0506 	ands.w	r5, r5, #6
 8003554:	d107      	bne.n	8003566 <_printf_common+0x52>
 8003556:	f104 0a19 	add.w	sl, r4, #25
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	f8d9 2000 	ldr.w	r2, [r9]
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	42ab      	cmp	r3, r5
 8003564:	dc28      	bgt.n	80035b8 <_printf_common+0xa4>
 8003566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	3300      	adds	r3, #0
 800356e:	bf18      	it	ne
 8003570:	2301      	movne	r3, #1
 8003572:	0692      	lsls	r2, r2, #26
 8003574:	d42d      	bmi.n	80035d2 <_printf_common+0xbe>
 8003576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357a:	4639      	mov	r1, r7
 800357c:	4630      	mov	r0, r6
 800357e:	47c0      	blx	r8
 8003580:	3001      	adds	r0, #1
 8003582:	d020      	beq.n	80035c6 <_printf_common+0xb2>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	68e5      	ldr	r5, [r4, #12]
 8003588:	f8d9 2000 	ldr.w	r2, [r9]
 800358c:	f003 0306 	and.w	r3, r3, #6
 8003590:	2b04      	cmp	r3, #4
 8003592:	bf08      	it	eq
 8003594:	1aad      	subeq	r5, r5, r2
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	bf0c      	ite	eq
 800359c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a0:	2500      	movne	r5, #0
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bfc4      	itt	gt
 80035a6:	1a9b      	subgt	r3, r3, r2
 80035a8:	18ed      	addgt	r5, r5, r3
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	341a      	adds	r4, #26
 80035b0:	454d      	cmp	r5, r9
 80035b2:	d11a      	bne.n	80035ea <_printf_common+0xd6>
 80035b4:	2000      	movs	r0, #0
 80035b6:	e008      	b.n	80035ca <_printf_common+0xb6>
 80035b8:	2301      	movs	r3, #1
 80035ba:	4652      	mov	r2, sl
 80035bc:	4639      	mov	r1, r7
 80035be:	4630      	mov	r0, r6
 80035c0:	47c0      	blx	r8
 80035c2:	3001      	adds	r0, #1
 80035c4:	d103      	bne.n	80035ce <_printf_common+0xba>
 80035c6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ce:	3501      	adds	r5, #1
 80035d0:	e7c3      	b.n	800355a <_printf_common+0x46>
 80035d2:	18e1      	adds	r1, r4, r3
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	2030      	movs	r0, #48	; 0x30
 80035d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035dc:	4422      	add	r2, r4
 80035de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e6:	3302      	adds	r3, #2
 80035e8:	e7c5      	b.n	8003576 <_printf_common+0x62>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4622      	mov	r2, r4
 80035ee:	4639      	mov	r1, r7
 80035f0:	4630      	mov	r0, r6
 80035f2:	47c0      	blx	r8
 80035f4:	3001      	adds	r0, #1
 80035f6:	d0e6      	beq.n	80035c6 <_printf_common+0xb2>
 80035f8:	f109 0901 	add.w	r9, r9, #1
 80035fc:	e7d8      	b.n	80035b0 <_printf_common+0x9c>
	...

08003600 <_printf_i>:
 8003600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003608:	460c      	mov	r4, r1
 800360a:	7e09      	ldrb	r1, [r1, #24]
 800360c:	b085      	sub	sp, #20
 800360e:	296e      	cmp	r1, #110	; 0x6e
 8003610:	4617      	mov	r7, r2
 8003612:	4606      	mov	r6, r0
 8003614:	4698      	mov	r8, r3
 8003616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003618:	f000 80b3 	beq.w	8003782 <_printf_i+0x182>
 800361c:	d822      	bhi.n	8003664 <_printf_i+0x64>
 800361e:	2963      	cmp	r1, #99	; 0x63
 8003620:	d036      	beq.n	8003690 <_printf_i+0x90>
 8003622:	d80a      	bhi.n	800363a <_printf_i+0x3a>
 8003624:	2900      	cmp	r1, #0
 8003626:	f000 80b9 	beq.w	800379c <_printf_i+0x19c>
 800362a:	2958      	cmp	r1, #88	; 0x58
 800362c:	f000 8083 	beq.w	8003736 <_printf_i+0x136>
 8003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003638:	e032      	b.n	80036a0 <_printf_i+0xa0>
 800363a:	2964      	cmp	r1, #100	; 0x64
 800363c:	d001      	beq.n	8003642 <_printf_i+0x42>
 800363e:	2969      	cmp	r1, #105	; 0x69
 8003640:	d1f6      	bne.n	8003630 <_printf_i+0x30>
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	6813      	ldr	r3, [r2, #0]
 8003646:	0605      	lsls	r5, r0, #24
 8003648:	f103 0104 	add.w	r1, r3, #4
 800364c:	d52a      	bpl.n	80036a4 <_printf_i+0xa4>
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da03      	bge.n	800365e <_printf_i+0x5e>
 8003656:	222d      	movs	r2, #45	; 0x2d
 8003658:	425b      	negs	r3, r3
 800365a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800365e:	486f      	ldr	r0, [pc, #444]	; (800381c <_printf_i+0x21c>)
 8003660:	220a      	movs	r2, #10
 8003662:	e039      	b.n	80036d8 <_printf_i+0xd8>
 8003664:	2973      	cmp	r1, #115	; 0x73
 8003666:	f000 809d 	beq.w	80037a4 <_printf_i+0x1a4>
 800366a:	d808      	bhi.n	800367e <_printf_i+0x7e>
 800366c:	296f      	cmp	r1, #111	; 0x6f
 800366e:	d020      	beq.n	80036b2 <_printf_i+0xb2>
 8003670:	2970      	cmp	r1, #112	; 0x70
 8003672:	d1dd      	bne.n	8003630 <_printf_i+0x30>
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	e003      	b.n	8003686 <_printf_i+0x86>
 800367e:	2975      	cmp	r1, #117	; 0x75
 8003680:	d017      	beq.n	80036b2 <_printf_i+0xb2>
 8003682:	2978      	cmp	r1, #120	; 0x78
 8003684:	d1d4      	bne.n	8003630 <_printf_i+0x30>
 8003686:	2378      	movs	r3, #120	; 0x78
 8003688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800368c:	4864      	ldr	r0, [pc, #400]	; (8003820 <_printf_i+0x220>)
 800368e:	e055      	b.n	800373c <_printf_i+0x13c>
 8003690:	6813      	ldr	r3, [r2, #0]
 8003692:	1d19      	adds	r1, r3, #4
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6011      	str	r1, [r2, #0]
 8003698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a0:	2301      	movs	r3, #1
 80036a2:	e08c      	b.n	80037be <_printf_i+0x1be>
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6011      	str	r1, [r2, #0]
 80036a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ac:	bf18      	it	ne
 80036ae:	b21b      	sxthne	r3, r3
 80036b0:	e7cf      	b.n	8003652 <_printf_i+0x52>
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	6825      	ldr	r5, [r4, #0]
 80036b6:	1d18      	adds	r0, r3, #4
 80036b8:	6010      	str	r0, [r2, #0]
 80036ba:	0628      	lsls	r0, r5, #24
 80036bc:	d501      	bpl.n	80036c2 <_printf_i+0xc2>
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e002      	b.n	80036c8 <_printf_i+0xc8>
 80036c2:	0668      	lsls	r0, r5, #25
 80036c4:	d5fb      	bpl.n	80036be <_printf_i+0xbe>
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	4854      	ldr	r0, [pc, #336]	; (800381c <_printf_i+0x21c>)
 80036ca:	296f      	cmp	r1, #111	; 0x6f
 80036cc:	bf14      	ite	ne
 80036ce:	220a      	movne	r2, #10
 80036d0:	2208      	moveq	r2, #8
 80036d2:	2100      	movs	r1, #0
 80036d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d8:	6865      	ldr	r5, [r4, #4]
 80036da:	60a5      	str	r5, [r4, #8]
 80036dc:	2d00      	cmp	r5, #0
 80036de:	f2c0 8095 	blt.w	800380c <_printf_i+0x20c>
 80036e2:	6821      	ldr	r1, [r4, #0]
 80036e4:	f021 0104 	bic.w	r1, r1, #4
 80036e8:	6021      	str	r1, [r4, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d13d      	bne.n	800376a <_printf_i+0x16a>
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	f040 808e 	bne.w	8003810 <_printf_i+0x210>
 80036f4:	4665      	mov	r5, ip
 80036f6:	2a08      	cmp	r2, #8
 80036f8:	d10b      	bne.n	8003712 <_printf_i+0x112>
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	07db      	lsls	r3, r3, #31
 80036fe:	d508      	bpl.n	8003712 <_printf_i+0x112>
 8003700:	6923      	ldr	r3, [r4, #16]
 8003702:	6862      	ldr	r2, [r4, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	bfde      	ittt	le
 8003708:	2330      	movle	r3, #48	; 0x30
 800370a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800370e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003712:	ebac 0305 	sub.w	r3, ip, r5
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	f8cd 8000 	str.w	r8, [sp]
 800371c:	463b      	mov	r3, r7
 800371e:	aa03      	add	r2, sp, #12
 8003720:	4621      	mov	r1, r4
 8003722:	4630      	mov	r0, r6
 8003724:	f7ff fef6 	bl	8003514 <_printf_common>
 8003728:	3001      	adds	r0, #1
 800372a:	d14d      	bne.n	80037c8 <_printf_i+0x1c8>
 800372c:	f04f 30ff 	mov.w	r0, #4294967295
 8003730:	b005      	add	sp, #20
 8003732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003736:	4839      	ldr	r0, [pc, #228]	; (800381c <_printf_i+0x21c>)
 8003738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800373c:	6813      	ldr	r3, [r2, #0]
 800373e:	6821      	ldr	r1, [r4, #0]
 8003740:	1d1d      	adds	r5, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6015      	str	r5, [r2, #0]
 8003746:	060a      	lsls	r2, r1, #24
 8003748:	d50b      	bpl.n	8003762 <_printf_i+0x162>
 800374a:	07ca      	lsls	r2, r1, #31
 800374c:	bf44      	itt	mi
 800374e:	f041 0120 	orrmi.w	r1, r1, #32
 8003752:	6021      	strmi	r1, [r4, #0]
 8003754:	b91b      	cbnz	r3, 800375e <_printf_i+0x15e>
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	f022 0220 	bic.w	r2, r2, #32
 800375c:	6022      	str	r2, [r4, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	e7b7      	b.n	80036d2 <_printf_i+0xd2>
 8003762:	064d      	lsls	r5, r1, #25
 8003764:	bf48      	it	mi
 8003766:	b29b      	uxthmi	r3, r3
 8003768:	e7ef      	b.n	800374a <_printf_i+0x14a>
 800376a:	4665      	mov	r5, ip
 800376c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003770:	fb02 3311 	mls	r3, r2, r1, r3
 8003774:	5cc3      	ldrb	r3, [r0, r3]
 8003776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800377a:	460b      	mov	r3, r1
 800377c:	2900      	cmp	r1, #0
 800377e:	d1f5      	bne.n	800376c <_printf_i+0x16c>
 8003780:	e7b9      	b.n	80036f6 <_printf_i+0xf6>
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	6825      	ldr	r5, [r4, #0]
 8003786:	6961      	ldr	r1, [r4, #20]
 8003788:	1d18      	adds	r0, r3, #4
 800378a:	6010      	str	r0, [r2, #0]
 800378c:	0628      	lsls	r0, r5, #24
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	d501      	bpl.n	8003796 <_printf_i+0x196>
 8003792:	6019      	str	r1, [r3, #0]
 8003794:	e002      	b.n	800379c <_printf_i+0x19c>
 8003796:	066a      	lsls	r2, r5, #25
 8003798:	d5fb      	bpl.n	8003792 <_printf_i+0x192>
 800379a:	8019      	strh	r1, [r3, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	4665      	mov	r5, ip
 80037a2:	e7b9      	b.n	8003718 <_printf_i+0x118>
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	1d19      	adds	r1, r3, #4
 80037a8:	6011      	str	r1, [r2, #0]
 80037aa:	681d      	ldr	r5, [r3, #0]
 80037ac:	6862      	ldr	r2, [r4, #4]
 80037ae:	2100      	movs	r1, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	f7fc fd0d 	bl	80001d0 <memchr>
 80037b6:	b108      	cbz	r0, 80037bc <_printf_i+0x1bc>
 80037b8:	1b40      	subs	r0, r0, r5
 80037ba:	6060      	str	r0, [r4, #4]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	2300      	movs	r3, #0
 80037c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037c6:	e7a7      	b.n	8003718 <_printf_i+0x118>
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	462a      	mov	r2, r5
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d0aa      	beq.n	800372c <_printf_i+0x12c>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	079b      	lsls	r3, r3, #30
 80037da:	d413      	bmi.n	8003804 <_printf_i+0x204>
 80037dc:	68e0      	ldr	r0, [r4, #12]
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	4298      	cmp	r0, r3
 80037e2:	bfb8      	it	lt
 80037e4:	4618      	movlt	r0, r3
 80037e6:	e7a3      	b.n	8003730 <_printf_i+0x130>
 80037e8:	2301      	movs	r3, #1
 80037ea:	464a      	mov	r2, r9
 80037ec:	4639      	mov	r1, r7
 80037ee:	4630      	mov	r0, r6
 80037f0:	47c0      	blx	r8
 80037f2:	3001      	adds	r0, #1
 80037f4:	d09a      	beq.n	800372c <_printf_i+0x12c>
 80037f6:	3501      	adds	r5, #1
 80037f8:	68e3      	ldr	r3, [r4, #12]
 80037fa:	9a03      	ldr	r2, [sp, #12]
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	42ab      	cmp	r3, r5
 8003800:	dcf2      	bgt.n	80037e8 <_printf_i+0x1e8>
 8003802:	e7eb      	b.n	80037dc <_printf_i+0x1dc>
 8003804:	2500      	movs	r5, #0
 8003806:	f104 0919 	add.w	r9, r4, #25
 800380a:	e7f5      	b.n	80037f8 <_printf_i+0x1f8>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ac      	bne.n	800376a <_printf_i+0x16a>
 8003810:	7803      	ldrb	r3, [r0, #0]
 8003812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800381a:	e76c      	b.n	80036f6 <_printf_i+0xf6>
 800381c:	08003a99 	.word	0x08003a99
 8003820:	08003aaa 	.word	0x08003aaa

08003824 <_sbrk_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4c06      	ldr	r4, [pc, #24]	; (8003840 <_sbrk_r+0x1c>)
 8003828:	2300      	movs	r3, #0
 800382a:	4605      	mov	r5, r0
 800382c:	4608      	mov	r0, r1
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	f7fd f818 	bl	8000864 <_sbrk>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	d102      	bne.n	800383e <_sbrk_r+0x1a>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	b103      	cbz	r3, 800383e <_sbrk_r+0x1a>
 800383c:	602b      	str	r3, [r5, #0]
 800383e:	bd38      	pop	{r3, r4, r5, pc}
 8003840:	2000019c 	.word	0x2000019c

08003844 <__sread>:
 8003844:	b510      	push	{r4, lr}
 8003846:	460c      	mov	r4, r1
 8003848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800384c:	f000 f896 	bl	800397c <_read_r>
 8003850:	2800      	cmp	r0, #0
 8003852:	bfab      	itete	ge
 8003854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003856:	89a3      	ldrhlt	r3, [r4, #12]
 8003858:	181b      	addge	r3, r3, r0
 800385a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800385e:	bfac      	ite	ge
 8003860:	6563      	strge	r3, [r4, #84]	; 0x54
 8003862:	81a3      	strhlt	r3, [r4, #12]
 8003864:	bd10      	pop	{r4, pc}

08003866 <__swrite>:
 8003866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800386a:	461f      	mov	r7, r3
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	05db      	lsls	r3, r3, #23
 8003870:	4605      	mov	r5, r0
 8003872:	460c      	mov	r4, r1
 8003874:	4616      	mov	r6, r2
 8003876:	d505      	bpl.n	8003884 <__swrite+0x1e>
 8003878:	2302      	movs	r3, #2
 800387a:	2200      	movs	r2, #0
 800387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003880:	f000 f868 	bl	8003954 <_lseek_r>
 8003884:	89a3      	ldrh	r3, [r4, #12]
 8003886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800388e:	81a3      	strh	r3, [r4, #12]
 8003890:	4632      	mov	r2, r6
 8003892:	463b      	mov	r3, r7
 8003894:	4628      	mov	r0, r5
 8003896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389a:	f000 b817 	b.w	80038cc <_write_r>

0800389e <__sseek>:
 800389e:	b510      	push	{r4, lr}
 80038a0:	460c      	mov	r4, r1
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 f855 	bl	8003954 <_lseek_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	bf15      	itete	ne
 80038b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80038b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038ba:	81a3      	strheq	r3, [r4, #12]
 80038bc:	bf18      	it	ne
 80038be:	81a3      	strhne	r3, [r4, #12]
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <__sclose>:
 80038c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c6:	f000 b813 	b.w	80038f0 <_close_r>
	...

080038cc <_write_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4c07      	ldr	r4, [pc, #28]	; (80038ec <_write_r+0x20>)
 80038d0:	4605      	mov	r5, r0
 80038d2:	4608      	mov	r0, r1
 80038d4:	4611      	mov	r1, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	6022      	str	r2, [r4, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fc ff71 	bl	80007c2 <_write>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_write_r+0x1e>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_write_r+0x1e>
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	2000019c 	.word	0x2000019c

080038f0 <_close_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4c06      	ldr	r4, [pc, #24]	; (800390c <_close_r+0x1c>)
 80038f4:	2300      	movs	r3, #0
 80038f6:	4605      	mov	r5, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	f7fc ff7d 	bl	80007fa <_close>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_close_r+0x1a>
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	b103      	cbz	r3, 800390a <_close_r+0x1a>
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	2000019c 	.word	0x2000019c

08003910 <_fstat_r>:
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4c07      	ldr	r4, [pc, #28]	; (8003930 <_fstat_r+0x20>)
 8003914:	2300      	movs	r3, #0
 8003916:	4605      	mov	r5, r0
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	f7fc ff78 	bl	8000812 <_fstat>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d102      	bne.n	800392c <_fstat_r+0x1c>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	b103      	cbz	r3, 800392c <_fstat_r+0x1c>
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	2000019c 	.word	0x2000019c

08003934 <_isatty_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4c06      	ldr	r4, [pc, #24]	; (8003950 <_isatty_r+0x1c>)
 8003938:	2300      	movs	r3, #0
 800393a:	4605      	mov	r5, r0
 800393c:	4608      	mov	r0, r1
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	f7fc ff77 	bl	8000832 <_isatty>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_isatty_r+0x1a>
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	b103      	cbz	r3, 800394e <_isatty_r+0x1a>
 800394c:	602b      	str	r3, [r5, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	2000019c 	.word	0x2000019c

08003954 <_lseek_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4c07      	ldr	r4, [pc, #28]	; (8003974 <_lseek_r+0x20>)
 8003958:	4605      	mov	r5, r0
 800395a:	4608      	mov	r0, r1
 800395c:	4611      	mov	r1, r2
 800395e:	2200      	movs	r2, #0
 8003960:	6022      	str	r2, [r4, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f7fc ff70 	bl	8000848 <_lseek>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_lseek_r+0x1e>
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	b103      	cbz	r3, 8003972 <_lseek_r+0x1e>
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000019c 	.word	0x2000019c

08003978 <__malloc_lock>:
 8003978:	4770      	bx	lr

0800397a <__malloc_unlock>:
 800397a:	4770      	bx	lr

0800397c <_read_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4c07      	ldr	r4, [pc, #28]	; (800399c <_read_r+0x20>)
 8003980:	4605      	mov	r5, r0
 8003982:	4608      	mov	r0, r1
 8003984:	4611      	mov	r1, r2
 8003986:	2200      	movs	r2, #0
 8003988:	6022      	str	r2, [r4, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	f7fc fefc 	bl	8000788 <_read>
 8003990:	1c43      	adds	r3, r0, #1
 8003992:	d102      	bne.n	800399a <_read_r+0x1e>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	b103      	cbz	r3, 800399a <_read_r+0x1e>
 8003998:	602b      	str	r3, [r5, #0]
 800399a:	bd38      	pop	{r3, r4, r5, pc}
 800399c:	2000019c 	.word	0x2000019c

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
