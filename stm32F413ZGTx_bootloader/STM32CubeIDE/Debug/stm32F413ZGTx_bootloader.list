
stm32F413ZGTx_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a278  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800a458  0800a458  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8cc  0800a8cc  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d4  0800a8d4  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d4  0800a8d4  0001a8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d8  0800a8d8  0001a8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a8dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  20000160  0800aa3c  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20000c54  0800aa3c  00020c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6cc  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000440b  00000000  00000000  0003d85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  00041c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  00043258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264e0  00000000  00000000  00044640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015610  00000000  00000000  0006ab20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2fa3  00000000  00000000  00080130  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001530d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006100  00000000  00000000  00153150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000160 	.word	0x20000160
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a440 	.word	0x0800a440

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000164 	.word	0x20000164
 800021c:	0800a440 	.word	0x0800a440

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <bootloader_error_handler>:

char g_private_key[32] = "1234567890abcdefghij1234567890!";

/* display something depending on error type, soft reset */
void bootloader_error_handler(dfu_status_t dfu_status)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
    printf("bootloader error handler \r\n");
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <bootloader_error_handler+0x64>)
 80005ec:	f009 f8fc 	bl	80097e8 <puts>
    switch (dfu_status)
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	d81a      	bhi.n	800062c <bootloader_error_handler+0x4c>
 80005f6:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <bootloader_error_handler+0x1c>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	08000615 	.word	0x08000615
 8000604:	0800061d 	.word	0x0800061d
 8000608:	08000625 	.word	0x08000625
    {
        case DFU_IDLE:
        {
            printf("DFU_IDLE \r\n");
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <bootloader_error_handler+0x68>)
 800060e:	f009 f8eb 	bl	80097e8 <puts>
            return;
 8000612:	e013      	b.n	800063c <bootloader_error_handler+0x5c>
            // break;
        }
        case DFU_ERR_VERIFY:
        {
            printf("DFU_ERR_VERIFY \r\n");
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <bootloader_error_handler+0x6c>)
 8000616:	f009 f8e7 	bl	80097e8 <puts>
            break;
 800061a:	e00b      	b.n	8000634 <bootloader_error_handler+0x54>
        }
        case DFU_ERR_KEY:
        {
            printf("DFU_ERR_KEY \r\n");
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <bootloader_error_handler+0x70>)
 800061e:	f009 f8e3 	bl	80097e8 <puts>
            break;
 8000622:	e007      	b.n	8000634 <bootloader_error_handler+0x54>
        }
        case DFU_ERR_VERSION:
        {
            printf("DFU_ERR_VERSION \r\n");
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <bootloader_error_handler+0x74>)
 8000626:	f009 f8df 	bl	80097e8 <puts>
            break;
 800062a:	e003      	b.n	8000634 <bootloader_error_handler+0x54>
        }
        default:
        {
            printf("dfu error \r\n");
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <bootloader_error_handler+0x78>)
 800062e:	f009 f8db 	bl	80097e8 <puts>
            break;
 8000632:	bf00      	nop
        }
    }
    MX_USB_DEVICE_stop();
 8000634:	f001 f89a 	bl	800176c <MX_USB_DEVICE_stop>
    HAL_NVIC_SystemReset();
 8000638:	f001 ff99 	bl	800256e <HAL_NVIC_SystemReset>
}
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	0800a458 	.word	0x0800a458
 8000648:	0800a474 	.word	0x0800a474
 800064c:	0800a480 	.word	0x0800a480
 8000650:	0800a494 	.word	0x0800a494
 8000654:	0800a4a4 	.word	0x0800a4a4
 8000658:	0800a4b8 	.word	0x0800a4b8

0800065c <bootloader_check_secure>:

/* check key, version  */
dfu_status_t bootloader_check_secure(uint8_t* src)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    printf("check secure \r\n");
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <bootloader_check_secure+0x98>)
 8000666:	f009 f8bf 	bl	80097e8 <puts>
    dfu_status_t dfu_status = DFU_IDLE;
 800066a:	2300      	movs	r3, #0
 800066c:	75fb      	strb	r3, [r7, #23]

    /*  check key   */
    dfu_secure_t* p_secure_info = (dfu_secure_t*)(src);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	613b      	str	r3, [r7, #16]
    printf("new key : %s , version : %d \r\n", p_secure_info->dfu_key, p_secure_info->dfu_version);
 8000672:	6939      	ldr	r1, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	8c1b      	ldrh	r3, [r3, #32]
 8000678:	461a      	mov	r2, r3
 800067a:	481f      	ldr	r0, [pc, #124]	; (80006f8 <bootloader_check_secure+0x9c>)
 800067c:	f009 f840 	bl	8009700 <iprintf>

    if (strcmp((char*)p_secure_info->dfu_key, g_private_key))
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	491e      	ldr	r1, [pc, #120]	; (80006fc <bootloader_check_secure+0xa0>)
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fdcb 	bl	8000220 <strcmp>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d006      	beq.n	800069e <bootloader_check_secure+0x42>
    {
        dfu_status = DFU_ERR_KEY;
 8000690:	2302      	movs	r3, #2
 8000692:	75fb      	strb	r3, [r7, #23]
        printf("private key error \r\n");
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <bootloader_check_secure+0xa4>)
 8000696:	f009 f8a7 	bl	80097e8 <puts>
        return dfu_status;
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	e026      	b.n	80006ec <bootloader_check_secure+0x90>
    }
    else
    {
        printf("private key pass \r\n");
 800069e:	4819      	ldr	r0, [pc, #100]	; (8000704 <bootloader_check_secure+0xa8>)
 80006a0:	f009 f8a2 	bl	80097e8 <puts>
    }

    /* check version */
    if (*(__IO uint32_t *)(ADDR_PREV_FW_INFO) == 0xFFFFFFFF)
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <bootloader_check_secure+0xac>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d104      	bne.n	80006b8 <bootloader_check_secure+0x5c>
    {
        printf("first dfu, don't need to compare \r\n");
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <bootloader_check_secure+0xb0>)
 80006b0:	f009 f89a 	bl	80097e8 <puts>
        return dfu_status;
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	e019      	b.n	80006ec <bootloader_check_secure+0x90>
    }

    dfu_secure_t* p_prev_secure_info = (dfu_secure_t*)(ADDR_PREV_FW_INFO);
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <bootloader_check_secure+0xac>)
 80006ba:	60fb      	str	r3, [r7, #12]
    printf("previous key : %s , version : %d \r\n", p_prev_secure_info->dfu_key, p_prev_secure_info->dfu_version);
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	8c1b      	ldrh	r3, [r3, #32]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4812      	ldr	r0, [pc, #72]	; (8000710 <bootloader_check_secure+0xb4>)
 80006c6:	f009 f81b 	bl	8009700 <iprintf>

    if (p_secure_info->dfu_version >= p_prev_secure_info->dfu_version)
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	8c1a      	ldrh	r2, [r3, #32]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	8c1b      	ldrh	r3, [r3, #32]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d304      	bcc.n	80006e0 <bootloader_check_secure+0x84>
    {
        printf("version check pass \r\n");
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <bootloader_check_secure+0xb8>)
 80006d8:	f009 f886 	bl	80097e8 <puts>
        dfu_status = DFU_ERR_VERSION;
        printf("version check error \r\n");
        return dfu_status;
    }

    return dfu_status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	e005      	b.n	80006ec <bootloader_check_secure+0x90>
        dfu_status = DFU_ERR_VERSION;
 80006e0:	2303      	movs	r3, #3
 80006e2:	75fb      	strb	r3, [r7, #23]
        printf("version check error \r\n");
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <bootloader_check_secure+0xbc>)
 80006e6:	f009 f87f 	bl	80097e8 <puts>
        return dfu_status;
 80006ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	0800a4c4 	.word	0x0800a4c4
 80006f8:	0800a4d4 	.word	0x0800a4d4
 80006fc:	20000000 	.word	0x20000000
 8000700:	0800a4f4 	.word	0x0800a4f4
 8000704:	0800a508 	.word	0x0800a508
 8000708:	080e0400 	.word	0x080e0400
 800070c:	0800a51c 	.word	0x0800a51c
 8000710:	0800a540 	.word	0x0800a540
 8000714:	0800a564 	.word	0x0800a564
 8000718:	0800a57c 	.word	0x0800a57c

0800071c <bootloader_copy_image>:


/*  flash copy  */
void bootloader_copy_image(uint32_t src, uint32_t dest, uint8_t nums_sec)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4613      	mov	r3, r2
 8000728:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    status = flash_init();
 800072a:	f000 f863 	bl	80007f4 <flash_init>
 800072e:	4603      	mov	r3, r0
 8000730:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <bootloader_copy_image+0x24>
    {
        /*  todo    */
        printf("flash err \r\n");
 8000738:	4814      	ldr	r0, [pc, #80]	; (800078c <bootloader_copy_image+0x70>)
 800073a:	f009 f855 	bl	80097e8 <puts>
        return ;
 800073e:	e021      	b.n	8000784 <bootloader_copy_image+0x68>
    }

    uint8_t startsector = flash_get_sector(dest);
 8000740:	68b8      	ldr	r0, [r7, #8]
 8000742:	f000 f8e3 	bl	800090c <flash_get_sector>
 8000746:	4603      	mov	r3, r0
 8000748:	75bb      	strb	r3, [r7, #22]
    flash_erase(startsector, nums_sec);
 800074a:	7dbb      	ldrb	r3, [r7, #22]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f86d 	bl	8000830 <flash_erase>
    HAL_Delay(50);
 8000756:	2032      	movs	r0, #50	; 0x32
 8000758:	f001 fdc0 	bl	80022dc <HAL_Delay>

    flash_copy(src, dest, nums_sec);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	461a      	mov	r2, r3
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 f892 	bl	800088c <flash_copy>
    HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f001 fdb7 	bl	80022dc <HAL_Delay>

    status = flash_deinit();
 800076e:	f000 f853 	bl	8000818 <flash_deinit>
 8000772:	4603      	mov	r3, r0
 8000774:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8000776:	7dfb      	ldrb	r3, [r7, #23]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <bootloader_copy_image+0x68>
    {
        /*  todo    */
        printf("flash err \r\n");
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <bootloader_copy_image+0x70>)
 800077e:	f009 f833 	bl	80097e8 <puts>
        return ;
 8000782:	bf00      	nop
    }
}
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800a594 	.word	0x0800a594

08000790 <bootloader_rollback_version>:
    }
}

/*  roll back to previos version */
void bootloader_rollback_version(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    printf("rollback version \r\n");
 8000794:	4808      	ldr	r0, [pc, #32]	; (80007b8 <bootloader_rollback_version+0x28>)
 8000796:	f009 f827 	bl	80097e8 <puts>
    bootloader_copy_image(ADDR_FLASH_COPY, USBD_DFU_APP_DEFAULT_ADD, APP_NUMS_SECTOR);
 800079a:	2205      	movs	r2, #5
 800079c:	4907      	ldr	r1, [pc, #28]	; (80007bc <bootloader_rollback_version+0x2c>)
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <bootloader_rollback_version+0x30>)
 80007a0:	f7ff ffbc 	bl	800071c <bootloader_copy_image>
    printf("roll back success \r\n");
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <bootloader_rollback_version+0x34>)
 80007a6:	f009 f81f 	bl	80097e8 <puts>
    HAL_Delay(50);
 80007aa:	2032      	movs	r0, #50	; 0x32
 80007ac:	f001 fd96 	bl	80022dc <HAL_Delay>
    HAL_NVIC_SystemReset();
 80007b0:	f001 fedd 	bl	800256e <HAL_NVIC_SystemReset>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800a5b4 	.word	0x0800a5b4
 80007bc:	08040000 	.word	0x08040000
 80007c0:	080e0000 	.word	0x080e0000
 80007c4:	0800a5c8 	.word	0x0800a5c8

080007c8 <bootloader_check_DFU>:


/* check if occur error during DFU */
void bootloader_check_DFU(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
    dfu_integity_t* dfu_integrity = (dfu_integity_t *)(ADDR_DFU_INTEGRITY);
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <bootloader_check_DFU+0x24>)
 80007d0:	607b      	str	r3, [r7, #4]
    if (dfu_integrity->dfu_complete != DFU_COMPLETE)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b99      	cmp	r3, #153	; 0x99
 80007d8:	d004      	beq.n	80007e4 <bootloader_check_DFU+0x1c>
    {
      printf("DFU fail \r\n");
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <bootloader_check_DFU+0x28>)
 80007dc:	f009 f804 	bl	80097e8 <puts>
      bootloader_rollback_version();
 80007e0:	f7ff ffd6 	bl	8000790 <bootloader_rollback_version>
    }
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	080dfc00 	.word	0x080dfc00
 80007f0:	0800a5dc 	.word	0x0800a5dc

080007f4 <flash_init>:



/* flash initialize */
HAL_StatusTypeDef flash_init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  status = HAL_FLASH_Unlock();
 80007fa:	f001 ff11 	bl	8002620 <HAL_FLASH_Unlock>
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <flash_init+0x20>)
 8000804:	22f3      	movs	r2, #243	; 0xf3
 8000806:	60da      	str	r2, [r3, #12]
  return status;
 8000808:	79fb      	ldrb	r3, [r7, #7]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <flash_deinit>:

HAL_StatusTypeDef flash_deinit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  status = HAL_FLASH_Lock();
 800081e:	f001 ff21 	bl	8002664 <HAL_FLASH_Lock>
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  return status;
 8000826:	79fb      	ldrb	r3, [r7, #7]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <flash_erase>:

void flash_erase(uint32_t startsector, uint8_t nums_sec)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
  uint32_t sectorerror = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  /* Variable contains Flash operation status */
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef eraseinitstruct;

  /* Get the number of sector */
  eraseinitstruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  eraseinitstruct.Banks = FLASH_BANK_1;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  eraseinitstruct.Sector = startsector;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
  eraseinitstruct.NbSectors = nums_sec;
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	61bb      	str	r3, [r7, #24]
  eraseinitstruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &sectorerror);
 8000854:	f107 0220 	add.w	r2, r7, #32
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f85a 	bl	8002918 <HAL_FLASHEx_Erase>
 8000864:	4603      	mov	r3, r0
 8000866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status != HAL_OK)
 800086a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <flash_erase+0x4e>
  {
    printf("erase error %ld sector \r\n", sectorerror);
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <flash_erase+0x58>)
 8000878:	f008 ff42 	bl	8009700 <iprintf>
  }
  return ;
 800087c:	bf00      	nop
 800087e:	bf00      	nop
}
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800a5e8 	.word	0x0800a5e8

0800088c <flash_copy>:

void flash_copy(uint32_t addr_src, uint32_t addr_dest, uint8_t nums_sec)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	4613      	mov	r3, r2
 8000898:	71fb      	strb	r3, [r7, #7]
  /*  128kb*sectors */
  uint32_t i = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  uint32_t Len = 1024*128*nums_sec;
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	045b      	lsls	r3, r3, #17
 80008a2:	613b      	str	r3, [r7, #16]
  for (i = 0; i < Len; i += 4)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e025      	b.n	80008f6 <flash_copy+0x6a>
  {
    if (HAL_FLASH_Program
        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (addr_dest + i),
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	18d1      	adds	r1, r2, r3
         *(uint32_t *) (addr_src + i)) == HAL_OK)
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	681b      	ldr	r3, [r3, #0]
    if (HAL_FLASH_Program
 80008b8:	f04f 0400 	mov.w	r4, #0
 80008bc:	461a      	mov	r2, r3
 80008be:	4623      	mov	r3, r4
 80008c0:	2002      	movs	r0, #2
 80008c2:	f001 fe59 	bl	8002578 <HAL_FLASH_Program>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d10d      	bne.n	80008e8 <flash_copy+0x5c>
    {
      /* Check the written value */
      if (*(uint32_t *) (addr_src + i) != *(uint32_t *) (addr_dest + i))
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	4413      	add	r3, r2
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	440b      	add	r3, r1
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d007      	beq.n	80008f0 <flash_copy+0x64>
      {
        /* Flash content doesn't match SRAM content */
        printf("flash verified fail \r\n");
 80008e0:	4808      	ldr	r0, [pc, #32]	; (8000904 <flash_copy+0x78>)
 80008e2:	f008 ff81 	bl	80097e8 <puts>
        return ;
 80008e6:	e00a      	b.n	80008fe <flash_copy+0x72>
      }
    }
    else
    {
      printf("Fail write flash \r\n");
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <flash_copy+0x7c>)
 80008ea:	f008 ff7d 	bl	80097e8 <puts>
      /* Error occurred while writing data in Flash memory */
      return ;
 80008ee:	e006      	b.n	80008fe <flash_copy+0x72>
  for (i = 0; i < Len; i += 4)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3304      	adds	r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3d5      	bcc.n	80008aa <flash_copy+0x1e>
    }
  }
}
 80008fe:	371c      	adds	r7, #28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	0800a604 	.word	0x0800a604
 8000908:	0800a61c 	.word	0x0800a61c

0800090c <flash_get_sector>:


uint32_t flash_get_sector(uint32_t Address)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a5c      	ldr	r2, [pc, #368]	; (8000a8c <flash_get_sector+0x180>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d806      	bhi.n	800092e <flash_get_sector+0x22>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000926:	d302      	bcc.n	800092e <flash_get_sector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e0a6      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a57      	ldr	r2, [pc, #348]	; (8000a90 <flash_get_sector+0x184>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d806      	bhi.n	8000944 <flash_get_sector+0x38>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a54      	ldr	r2, [pc, #336]	; (8000a8c <flash_get_sector+0x180>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d902      	bls.n	8000944 <flash_get_sector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e09b      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a53      	ldr	r2, [pc, #332]	; (8000a94 <flash_get_sector+0x188>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d806      	bhi.n	800095a <flash_get_sector+0x4e>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a50      	ldr	r2, [pc, #320]	; (8000a90 <flash_get_sector+0x184>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d902      	bls.n	800095a <flash_get_sector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8000954:	2302      	movs	r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e090      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <flash_get_sector+0x18c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d806      	bhi.n	8000970 <flash_get_sector+0x64>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4b      	ldr	r2, [pc, #300]	; (8000a94 <flash_get_sector+0x188>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d902      	bls.n	8000970 <flash_get_sector+0x64>
  {
    sector = FLASH_SECTOR_3;
 800096a:	2303      	movs	r3, #3
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e085      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a4a      	ldr	r2, [pc, #296]	; (8000a9c <flash_get_sector+0x190>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d806      	bhi.n	8000986 <flash_get_sector+0x7a>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a47      	ldr	r2, [pc, #284]	; (8000a98 <flash_get_sector+0x18c>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d902      	bls.n	8000986 <flash_get_sector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8000980:	2304      	movs	r3, #4
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	e07a      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a45      	ldr	r2, [pc, #276]	; (8000aa0 <flash_get_sector+0x194>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d806      	bhi.n	800099c <flash_get_sector+0x90>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a42      	ldr	r2, [pc, #264]	; (8000a9c <flash_get_sector+0x190>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d902      	bls.n	800099c <flash_get_sector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8000996:	2305      	movs	r3, #5
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e06f      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a41      	ldr	r2, [pc, #260]	; (8000aa4 <flash_get_sector+0x198>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d806      	bhi.n	80009b2 <flash_get_sector+0xa6>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a3e      	ldr	r2, [pc, #248]	; (8000aa0 <flash_get_sector+0x194>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d902      	bls.n	80009b2 <flash_get_sector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80009ac:	2306      	movs	r3, #6
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e064      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a3c      	ldr	r2, [pc, #240]	; (8000aa8 <flash_get_sector+0x19c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d806      	bhi.n	80009c8 <flash_get_sector+0xbc>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <flash_get_sector+0x198>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d902      	bls.n	80009c8 <flash_get_sector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e059      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a38      	ldr	r2, [pc, #224]	; (8000aac <flash_get_sector+0x1a0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d806      	bhi.n	80009de <flash_get_sector+0xd2>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <flash_get_sector+0x19c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d902      	bls.n	80009de <flash_get_sector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 80009d8:	2308      	movs	r3, #8
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	e04e      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <flash_get_sector+0x1a4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d806      	bhi.n	80009f4 <flash_get_sector+0xe8>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a30      	ldr	r2, [pc, #192]	; (8000aac <flash_get_sector+0x1a0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d902      	bls.n	80009f4 <flash_get_sector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 80009ee:	2309      	movs	r3, #9
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e043      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a2f      	ldr	r2, [pc, #188]	; (8000ab4 <flash_get_sector+0x1a8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d806      	bhi.n	8000a0a <flash_get_sector+0xfe>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <flash_get_sector+0x1a4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d902      	bls.n	8000a0a <flash_get_sector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8000a04:	230a      	movs	r3, #10
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e038      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_12) && (Address >= ADDR_FLASH_SECTOR_11))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000a10:	d206      	bcs.n	8000a20 <flash_get_sector+0x114>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <flash_get_sector+0x1a8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d902      	bls.n	8000a20 <flash_get_sector+0x114>
  {
    sector = FLASH_SECTOR_11;
 8000a1a:	230b      	movs	r3, #11
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e02d      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_13) && (Address >= ADDR_FLASH_SECTOR_12))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <flash_get_sector+0x1ac>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d806      	bhi.n	8000a36 <flash_get_sector+0x12a>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000a2e:	d302      	bcc.n	8000a36 <flash_get_sector+0x12a>
  {
    sector = FLASH_SECTOR_12;
 8000a30:	230c      	movs	r3, #12
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e022      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_14) && (Address >= ADDR_FLASH_SECTOR_13))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <flash_get_sector+0x1b0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d806      	bhi.n	8000a4c <flash_get_sector+0x140>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <flash_get_sector+0x1ac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d902      	bls.n	8000a4c <flash_get_sector+0x140>
  {
    sector = FLASH_SECTOR_13;
 8000a46:	230d      	movs	r3, #13
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e017      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_SECTOR_15) && (Address >= ADDR_FLASH_SECTOR_14))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <flash_get_sector+0x1b4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d806      	bhi.n	8000a62 <flash_get_sector+0x156>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <flash_get_sector+0x1b0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d902      	bls.n	8000a62 <flash_get_sector+0x156>
  {
    sector = FLASH_SECTOR_14;
 8000a5c:	230e      	movs	r3, #14
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e00c      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else if ((Address < ADDR_FLASH_END) && (Address >= ADDR_FLASH_SECTOR_15))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <flash_get_sector+0x1b8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d806      	bhi.n	8000a78 <flash_get_sector+0x16c>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a14      	ldr	r2, [pc, #80]	; (8000ac0 <flash_get_sector+0x1b4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d902      	bls.n	8000a78 <flash_get_sector+0x16c>
  {
    sector = FLASH_SECTOR_15;
 8000a72:	230f      	movs	r3, #15
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e001      	b.n	8000a7c <flash_get_sector+0x170>
  }
  else
  {
    sector = FLASH_SECTOR_15;
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	08003fff 	.word	0x08003fff
 8000a90:	08007fff 	.word	0x08007fff
 8000a94:	0800bfff 	.word	0x0800bfff
 8000a98:	0800ffff 	.word	0x0800ffff
 8000a9c:	0801ffff 	.word	0x0801ffff
 8000aa0:	0803ffff 	.word	0x0803ffff
 8000aa4:	0805ffff 	.word	0x0805ffff
 8000aa8:	0807ffff 	.word	0x0807ffff
 8000aac:	0809ffff 	.word	0x0809ffff
 8000ab0:	080bffff 	.word	0x080bffff
 8000ab4:	080dffff 	.word	0x080dffff
 8000ab8:	0811ffff 	.word	0x0811ffff
 8000abc:	0813ffff 	.word	0x0813ffff
 8000ac0:	0815ffff 	.word	0x0815ffff
 8000ac4:	0817fffe 	.word	0x0817fffe

08000ac8 <flash_read_int_value>:
  int16_t us[2];
  float f;
} flash_value;

int16_t flash_read_int_value(uint8_t info_index)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  flash_value value = {0};
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	f04f 0400 	mov.w	r4, #0
 8000ada:	e9c7 3402 	strd	r3, r4, [r7, #8]
  uint8_t buf_index = info_index / FLASH_PACKING_SIZE;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	75fb      	strb	r3, [r7, #23]

  /* read flash value by 8 bytes */
  flash_read(FLASH_USER_START_ADDR + buf_index * sizeof(uint64_t), 0, &value.ul, 1);
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8000aea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8000aee:	00d8      	lsls	r0, r3, #3
 8000af0:	f107 0208 	add.w	r2, r7, #8
 8000af4:	2301      	movs	r3, #1
 8000af6:	2100      	movs	r1, #0
 8000af8:	f000 f8d0 	bl	8000c9c <flash_read>

  return value.us[info_index % FLASH_PACKING_SIZE];
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	f107 0218 	add.w	r2, r7, #24
 8000b08:	4413      	add	r3, r2
 8000b0a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
	...

08000b18 <flash_write_int_value>:

int16_t flash_write_int_value(uint8_t info_index, int16_t info_value)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4602      	mov	r2, r0
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	701a      	strb	r2, [r3, #0]
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	460a      	mov	r2, r1
 8000b2a:	801a      	strh	r2, [r3, #0]
  uint64_t buffer[64] = { 0, }; /// memory warning
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f008 fd31 	bl	80095a0 <memset>

  /* read flash value by 8 bytes */
  flash_read(FLASH_USER_START_ADDR, 0, buffer, 64);
 8000b3e:	f107 0208 	add.w	r2, r7, #8
 8000b42:	2340      	movs	r3, #64	; 0x40
 8000b44:	2100      	movs	r1, #0
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <flash_write_int_value+0x84>)
 8000b48:	f000 f8a8 	bl	8000c9c <flash_read>

  /* write value into flash buffer */
  flash_memory_write_value(buffer, info_index, info_value);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	7819      	ldrb	r1, [r3, #0]
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f820 	bl	8000ba0 <flash_memory_write_value>

  /* erase */
  flash_init();
 8000b60:	f7ff fe48 	bl	80007f4 <flash_init>
  uint8_t startsector = flash_get_sector(FLASH_USER_START_ADDR);
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <flash_write_int_value+0x84>)
 8000b66:	f7ff fed1 	bl	800090c <flash_get_sector>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
  flash_erase(startsector, 1);
 8000b70:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe5a 	bl	8000830 <flash_erase>
  flash_deinit();
 8000b7c:	f7ff fe4c 	bl	8000818 <flash_deinit>

  /* write memory buffer into flash */
  return flash_write(FLASH_USER_START_ADDR, 0, buffer, 64);
 8000b80:	f107 0208 	add.w	r2, r7, #8
 8000b84:	2340      	movs	r3, #64	; 0x40
 8000b86:	2100      	movs	r1, #0
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <flash_write_int_value+0x84>)
 8000b8a:	f000 f83b 	bl	8000c04 <flash_write>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b21b      	sxth	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08020000 	.word	0x08020000

08000ba0 <flash_memory_write_value>:

static HAL_StatusTypeDef flash_memory_write_value(uint64_t* buffer, uint8_t info_index, int16_t info_value)
{
 8000ba0:	b490      	push	{r4, r7}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
 8000bac:	4613      	mov	r3, r2
 8000bae:	803b      	strh	r3, [r7, #0]
  flash_value value = {0};
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	f04f 0400 	mov.w	r4, #0
 8000bb8:	e9c7 3402 	strd	r3, r4, [r7, #8]
  uint8_t buf_index = info_index / FLASH_PACKING_SIZE;
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	75fb      	strb	r3, [r7, #23]

  /* read from buffer and change value */
  value.ul = buffer[buf_index];
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bce:	e9c7 3402 	strd	r3, r4, [r7, #8]

  value.us[info_index % FLASH_PACKING_SIZE] = info_value;
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	f107 0218 	add.w	r2, r7, #24
 8000bde:	4413      	add	r3, r2
 8000be0:	883a      	ldrh	r2, [r7, #0]
 8000be2:	f823 2c10 	strh.w	r2, [r3, #-16]
  /* write changed value into memory */
  buffer[buf_index] = value.ul;
 8000be6:	7dfb      	ldrb	r3, [r7, #23]
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	441a      	add	r2, r3
 8000bee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000bf2:	e9c2 3400 	strd	r3, r4, [r2]

  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc90      	pop	{r4, r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <flash_write>:

static HAL_StatusTypeDef flash_write(uint32_t base_address, uint8_t offset, uint64_t *buf, uint8_t buf_size)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	460b      	mov	r3, r1
 8000c12:	72fb      	strb	r3, [r7, #11]
 8000c14:	4613      	mov	r3, r2
 8000c16:	72bb      	strb	r3, [r7, #10]
  uint8_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	77fb      	strb	r3, [r7, #31]

  uint32_t flash_address = base_address + (sizeof(uint64_t) * offset);
 8000c1c:	7afb      	ldrb	r3, [r7, #11]
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]

  HAL_StatusTypeDef flash_status;

  /* Unlock the FLASH control register access */
  HAL_FLASH_Unlock();
 8000c26:	f001 fcfb 	bl	8002620 <HAL_FLASH_Unlock>

  /* Clear the FLASH's all pending flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <flash_write+0x8c>)
 8000c2c:	22f3      	movs	r2, #243	; 0xf3
 8000c2e:	60da      	str	r2, [r3, #12]

  for (i = 0; i < buf_size; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
 8000c34:	e020      	b.n	8000c78 <flash_write+0x74>
  {
    flash_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
                                      flash_address + (sizeof(uint64_t) * i), buf[i]);
 8000c36:	7ffb      	ldrb	r3, [r7, #31]
 8000c38:	00da      	lsls	r2, r3, #3
    flash_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	18d1      	adds	r1, r2, r3
                                      flash_address + (sizeof(uint64_t) * i), buf[i]);
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4413      	add	r3, r2
    flash_status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000c46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f001 fc92 	bl	8002578 <HAL_FLASH_Program>
 8000c54:	4603      	mov	r3, r0
 8000c56:	75fb      	strb	r3, [r7, #23]
    if(flash_status != HAL_OK)
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <flash_write+0x6e>
    {
      printf("\r\n%s : flash error code = %lu", __FUNCTION__ , HAL_FLASH_GetError());
 8000c5e:	f001 fd11 	bl	8002684 <HAL_FLASH_GetError>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	490b      	ldr	r1, [pc, #44]	; (8000c94 <flash_write+0x90>)
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <flash_write+0x94>)
 8000c6a:	f008 fd49 	bl	8009700 <iprintf>
      return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e009      	b.n	8000c86 <flash_write+0x82>
  for (i = 0; i < buf_size; i++)
 8000c72:	7ffb      	ldrb	r3, [r7, #31]
 8000c74:	3301      	adds	r3, #1
 8000c76:	77fb      	strb	r3, [r7, #31]
 8000c78:	7ffa      	ldrb	r2, [r7, #31]
 8000c7a:	7abb      	ldrb	r3, [r7, #10]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3da      	bcc.n	8000c36 <flash_write+0x32>
    }
  }

  /* Lock the FLASH control register access */
  HAL_FLASH_Lock();
 8000c80:	f001 fcf0 	bl	8002664 <HAL_FLASH_Lock>

  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00
 8000c94:	0800a810 	.word	0x0800a810
 8000c98:	0800a630 	.word	0x0800a630

08000c9c <flash_read>:

static HAL_StatusTypeDef flash_read(uint32_t base_address, uint8_t offset, uint64_t *buf, uint8_t buf_size)
{
 8000c9c:	b490      	push	{r4, r7}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	460b      	mov	r3, r1
 8000caa:	72fb      	strb	r3, [r7, #11]
 8000cac:	4613      	mov	r3, r2
 8000cae:	72bb      	strb	r3, [r7, #10]
  uint32_t flash_address = base_address + (sizeof(uint64_t) * offset);
 8000cb0:	7afb      	ldrb	r3, [r7, #11]
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
  uint8_t i = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]

  for (i = 0 ; i < buf_size ; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	75fb      	strb	r3, [r7, #23]
 8000cc2:	e00f      	b.n	8000ce4 <flash_read+0x48>
    buf[i] = (*(__IO uint32_t*)(flash_address + (sizeof(uint64_t) * i)));
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	00da      	lsls	r2, r3, #3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4413      	add	r3, r2
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	7dfa      	ldrb	r2, [r7, #23]
 8000cd0:	00d2      	lsls	r2, r2, #3
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	440a      	add	r2, r1
 8000cd6:	f04f 0400 	mov.w	r4, #0
 8000cda:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0 ; i < buf_size ; i++)
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
 8000ce4:	7dfa      	ldrb	r2, [r7, #23]
 8000ce6:	7abb      	ldrb	r3, [r7, #10]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3eb      	bcc.n	8000cc4 <flash_read+0x28>

  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc90      	pop	{r4, r7}
 8000cf6:	4770      	bx	lr

08000cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4b54      	ldr	r3, [pc, #336]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a45      	ldr	r2, [pc, #276]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a37      	ldr	r2, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a30      	ldr	r2, [pc, #192]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd8:	482a      	ldr	r0, [pc, #168]	; (8000e84 <MX_GPIO_Init+0x18c>)
 8000dda:	f002 f943 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000de4:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_GPIO_Init+0x190>)
 8000de6:	f002 f93d 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BOOT1_Pin|BLE_RF_RESET_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x194>)
 8000df2:	f002 f937 	bl	8003064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <MX_GPIO_Init+0x198>)
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4820      	ldr	r0, [pc, #128]	; (8000e8c <MX_GPIO_Init+0x194>)
 8000e0a:	f001 fea7 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <MX_GPIO_Init+0x18c>)
 8000e28:	f001 fe98 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_RED_Pin;
 8000e2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <MX_GPIO_Init+0x190>)
 8000e46:	f001 fe89 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BOOT1_Pin|BLE_RF_RESET_Pin;
 8000e4a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <MX_GPIO_Init+0x194>)
 8000e64:	f001 fe7a 	bl	8002b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2007      	movs	r0, #7
 8000e6e:	f001 fb46 	bl	80024fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e72:	2007      	movs	r0, #7
 8000e74:	f001 fb5f 	bl	8002536 <HAL_NVIC_EnableIRQ>

}
 8000e78:	bf00      	nop
 8000e7a:	3730      	adds	r7, #48	; 0x30
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40021800 	.word	0x40021800
 8000e90:	10310000 	.word	0x10310000

08000e94 <MX_GPIO_DeInit>:

/* USER CODE BEGIN 2 */
void MX_GPIO_DeInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8000e98:	2007      	movs	r0, #7
 8000e9a:	f001 fb5a 	bl	8002552 <HAL_NVIC_DisableIRQ>

  HAL_GPIO_DeInit(GPIOG, BOOT1_Pin|BLE_RF_RESET_Pin);
 8000e9e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_GPIO_DeInit+0x5c>)
 8000ea4:	f001 ffec 	bl	8002e80 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, LED_BLUE_Pin|LED_RED_Pin);
 8000ea8:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_GPIO_DeInit+0x60>)
 8000eae:	f001 ffe7 	bl	8002e80 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb6:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <MX_GPIO_DeInit+0x64>)
 8000eb8:	f001 ffe2 	bl	8002e80 <HAL_GPIO_DeInit>

  __HAL_RCC_GPIOC_CLK_DISABLE();
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ec2:	f023 0304 	bic.w	r3, r3, #4
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000eda:	f023 0301 	bic.w	r3, r3, #1
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <MX_GPIO_DeInit+0x68>)
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40020400 	.word	0x40020400
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40023800 	.word	0x40023800

08000f00 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 1);
 8000f08:	1d39      	adds	r1, r7, #4
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <__io_putchar+0x20>)
 8000f10:	f004 fce1 	bl	80058d6 <HAL_UART_Transmit>
	return ch;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000314 	.word	0x20000314

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2a:	f001 f961 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2e:	f000 f8d5 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f32:	f7ff fee1 	bl	8000cf8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000f36:	f000 fadb 	bl	80014f0 <MX_UART4_Init>
  MX_UART7_Init();
 8000f3a:	f000 fb03 	bl	8001544 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  printf("bootloader start... \r\n");
 8000f3e:	4855      	ldr	r0, [pc, #340]	; (8001094 <main+0x170>)
 8000f40:	f008 fc52 	bl	80097e8 <puts>
  /* USER CODE BEGIN WHILE */
/*
    check valid application
    if not, DFU mode
  */
  if (((*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD-1) & 0x2FFB0000) == 0x20000000)
 8000f44:	4b54      	ldr	r3, [pc, #336]	; (8001098 <main+0x174>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	4b54      	ldr	r3, [pc, #336]	; (800109c <main+0x178>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f52:	d156      	bne.n	8001002 <main+0xde>
  {
    printf("valid app \r\n");
 8000f54:	4852      	ldr	r0, [pc, #328]	; (80010a0 <main+0x17c>)
 8000f56:	f008 fc47 	bl	80097e8 <puts>

    /*  roll back when DFU fail caused by version, key etc.  */
    bootloader_check_DFU();
 8000f5a:	f7ff fc35 	bl	80007c8 <bootloader_check_DFU>

    /* check user flash. if disable, jump to application */
    if (flash_read_int_value(FLASH_IDX_DFU_ENABLE) != FLASH_DFU_ENABLE)
 8000f5e:	2050      	movs	r0, #80	; 0x50
 8000f60:	f7ff fdb2 	bl	8000ac8 <flash_read_int_value>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d032      	beq.n	8000fd0 <main+0xac>
    {
      printf("jump to application \r\n");
 8000f6a:	484e      	ldr	r0, [pc, #312]	; (80010a4 <main+0x180>)
 8000f6c:	f008 fc3c 	bl	80097e8 <puts>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	484c      	ldr	r0, [pc, #304]	; (80010a8 <main+0x184>)
 8000f76:	f002 f875 	bl	8003064 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f001 f9ae 	bl	80022dc <HAL_Delay>

      /* Jump to user application */
      JumpAddress = *(__IO uint32_t *) (USBD_DFU_APP_DEFAULT_ADD + 4);
 8000f80:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <main+0x188>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <main+0x18c>)
 8000f86:	6013      	str	r3, [r2, #0]
      JumpToApplication = (pFunction) JumpAddress;
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <main+0x18c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <main+0x190>)
 8000f90:	601a      	str	r2, [r3, #0]

      /* initialize peripheral, clock, hal etc. */
      HAL_UART_MspDeInit(&huart4);
 8000f92:	4849      	ldr	r0, [pc, #292]	; (80010b8 <main+0x194>)
 8000f94:	f000 fb8e 	bl	80016b4 <HAL_UART_MspDeInit>
      HAL_UART_MspDeInit(&huart7);
 8000f98:	4848      	ldr	r0, [pc, #288]	; (80010bc <main+0x198>)
 8000f9a:	f000 fb8b 	bl	80016b4 <HAL_UART_MspDeInit>
      MX_GPIO_DeInit();
 8000f9e:	f7ff ff79 	bl	8000e94 <MX_GPIO_DeInit>
      HAL_RCC_DeInit();
 8000fa2:	f003 feff 	bl	8004da4 <HAL_RCC_DeInit>
      HAL_DeInit();
 8000fa6:	f001 f945 	bl	8002234 <HAL_DeInit>

	    SysTick->CTRL = 0;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <main+0x19c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	    SysTick->LOAD = 0;
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <main+0x19c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	605a      	str	r2, [r3, #4]
	    SysTick->VAL  = 0;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <main+0x19c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]

      /* Initialize user application's Stack Pointer */
      __set_MSP(*(__IO uint32_t *) USBD_DFU_APP_DEFAULT_ADD);
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <main+0x174>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f383 8808 	msr	MSP, r3

      JumpToApplication();
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <main+0x190>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4798      	blx	r3
 8000fce:	e028      	b.n	8001022 <main+0xfe>
    }
    else if (flash_read_int_value(FLASH_IDX_DFU_ENABLE) == FLASH_DFU_ENABLE)
 8000fd0:	2050      	movs	r0, #80	; 0x50
 8000fd2:	f7ff fd79 	bl	8000ac8 <flash_read_int_value>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d122      	bne.n	8001022 <main+0xfe>
    {
      flash_write_int_value(FLASH_IDX_DFU_ENABLE, FLASH_DFU_DISABLE);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2050      	movs	r0, #80	; 0x50
 8000fe0:	f7ff fd9a 	bl	8000b18 <flash_write_int_value>
      HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f001 f979 	bl	80022dc <HAL_Delay>

      /* back up code */
      printf("ready to dfu \r\n");
 8000fea:	4836      	ldr	r0, [pc, #216]	; (80010c4 <main+0x1a0>)
 8000fec:	f008 fbfc 	bl	80097e8 <puts>
      bootloader_copy_image(USBD_DFU_APP_DEFAULT_ADD, ADDR_FLASH_COPY, APP_NUMS_SECTOR);
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	4935      	ldr	r1, [pc, #212]	; (80010c8 <main+0x1a4>)
 8000ff4:	4828      	ldr	r0, [pc, #160]	; (8001098 <main+0x174>)
 8000ff6:	f7ff fb91 	bl	800071c <bootloader_copy_image>
      HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f001 f96e 	bl	80022dc <HAL_Delay>
 8001000:	e00f      	b.n	8001022 <main+0xfe>
    }
  }
  else
  {
    /*  whether there is a code at back up region  */
    if (((*(__IO uint32_t *) ADDR_FLASH_COPY - 1) & 0x2FFB0000) == 0x20000000)
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <main+0x1a4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1e5a      	subs	r2, r3, #1
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x178>)
 800100a:	4013      	ands	r3, r2
 800100c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001010:	d104      	bne.n	800101c <main+0xf8>
    {
      printf("DFU fail during erase , roll back \r\n");
 8001012:	482e      	ldr	r0, [pc, #184]	; (80010cc <main+0x1a8>)
 8001014:	f008 fbe8 	bl	80097e8 <puts>
      bootloader_rollback_version();
 8001018:	f7ff fbba 	bl	8000790 <bootloader_rollback_version>
    }
    printf("invalid app \r\n");
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <main+0x1ac>)
 800101e:	f008 fbe3 	bl	80097e8 <puts>
  }

  MX_USB_DEVICE_Init();
 8001022:	f000 fbb1 	bl	8001788 <MX_USB_DEVICE_Init>
  printf("DFU mode \r\n");
 8001026:	482b      	ldr	r0, [pc, #172]	; (80010d4 <main+0x1b0>)
 8001028:	f008 fbde 	bl	80097e8 <puts>

  uint8_t led = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    switch(led++)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	71fa      	strb	r2, [r7, #7]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d00a      	beq.n	8001050 <main+0x12c>
 800103a:	2b02      	cmp	r3, #2
 800103c:	d00f      	beq.n	800105e <main+0x13a>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <main+0x14c>
    {
      case 0:
      {
        HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	4817      	ldr	r0, [pc, #92]	; (80010a8 <main+0x184>)
 800104a:	f002 f80b 	bl	8003064 <HAL_GPIO_WritePin>
        break;
 800104e:	e00f      	b.n	8001070 <main+0x14c>
      }
      case 1:
      {
        HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	4820      	ldr	r0, [pc, #128]	; (80010d8 <main+0x1b4>)
 8001058:	f002 f804 	bl	8003064 <HAL_GPIO_WritePin>
        break;
 800105c:	e008      	b.n	8001070 <main+0x14c>
      }
      case 2:
      {
        HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <main+0x184>)
 8001066:	f001 fffd 	bl	8003064 <HAL_GPIO_WritePin>
        led = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
        break;
 800106e:	bf00      	nop
      }
    }
    HAL_Delay(1000);
 8001070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001074:	f001 f932 	bl	80022dc <HAL_Delay>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107e:	4816      	ldr	r0, [pc, #88]	; (80010d8 <main+0x1b4>)
 8001080:	f001 fff0 	bl	8003064 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_BLUE_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <main+0x184>)
 800108c:	f001 ffea 	bl	8003064 <HAL_GPIO_WritePin>
    switch(led++)
 8001090:	e7ce      	b.n	8001030 <main+0x10c>
 8001092:	bf00      	nop
 8001094:	0800a650 	.word	0x0800a650
 8001098:	08040000 	.word	0x08040000
 800109c:	2ffb0000 	.word	0x2ffb0000
 80010a0:	0800a668 	.word	0x0800a668
 80010a4:	0800a674 	.word	0x0800a674
 80010a8:	40020400 	.word	0x40020400
 80010ac:	08040004 	.word	0x08040004
 80010b0:	2000028c 	.word	0x2000028c
 80010b4:	20000290 	.word	0x20000290
 80010b8:	20000314 	.word	0x20000314
 80010bc:	200002d4 	.word	0x200002d4
 80010c0:	e000e010 	.word	0xe000e010
 80010c4:	0800a68c 	.word	0x0800a68c
 80010c8:	080e0000 	.word	0x080e0000
 80010cc:	0800a69c 	.word	0x0800a69c
 80010d0:	0800a6c0 	.word	0x0800a6c0
 80010d4:	0800a6d0 	.word	0x0800a6d0
 80010d8:	40021000 	.word	0x40021000

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0aa      	sub	sp, #168	; 0xa8
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e6:	2234      	movs	r2, #52	; 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f008 fa58 	bl	80095a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	2258      	movs	r2, #88	; 0x58
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f008 fa49 	bl	80095a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b34      	ldr	r3, [pc, #208]	; (80011e4 <SystemClock_Config+0x108>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <SystemClock_Config+0x108>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	6413      	str	r3, [r2, #64]	; 0x40
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <SystemClock_Config+0x108>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <SystemClock_Config+0x10c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a2d      	ldr	r2, [pc, #180]	; (80011e8 <SystemClock_Config+0x10c>)
 8001134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <SystemClock_Config+0x10c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001146:	2301      	movs	r3, #1
 8001148:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800114a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001156:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800115a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 4;
 800115e:	2304      	movs	r3, #4
 8001160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001164:	23a8      	movs	r3, #168	; 0xa8
 8001166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001170:	2307      	movs	r3, #7
 8001172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fedb 	bl	8004f3c <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800118c:	f000 f840 	bl	8001210 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ac:	2103      	movs	r1, #3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 f948 	bl	8004444 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80011ba:	f000 f829 	bl	8001210 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011be:	2320      	movs	r3, #32
 80011c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80011c2:	2300      	movs	r3, #0
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fb5e 	bl	800488c <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80011d6:	f000 f81b 	bl	8001210 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	37a8      	adds	r7, #168	; 0xa8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fe:	f001 f84d 	bl	800229c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40001000 	.word	0x40001000

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x6>

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2036      	movs	r0, #54	; 0x36
 800127e:	f001 f93e 	bl	80024fe <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001282:	2036      	movs	r0, #54	; 0x36
 8001284:	f001 f957 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_InitTick+0xa4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_InitTick+0xa4>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_InitTick+0xa4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 faba 	bl	8004828 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012b4:	f003 fa90 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80012b8:	4603      	mov	r3, r0
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_InitTick+0xa8>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9b      	lsrs	r3, r3, #18
 80012c8:	3b01      	subs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_InitTick+0xac>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_InitTick+0xb0>)
 80012d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_InitTick+0xac>)
 80012d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_InitTick+0xac>)
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_InitTick+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_InitTick+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <HAL_InitTick+0xac>)
 80012ee:	f004 f867 	bl	80053c0 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d104      	bne.n	8001302 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <HAL_InitTick+0xac>)
 80012fa:	f004 f896 	bl	800542a <HAL_TIM_Base_Start_IT>
 80012fe:	4603      	mov	r3, r0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	431bde83 	.word	0x431bde83
 8001314:	20000294 	.word	0x20000294
 8001318:	40001000 	.word	0x40001000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <NMI_Handler+0x4>

08001322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <MemManage_Handler+0x4>

0800132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <UsageFault_Handler+0x4>

0800133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001376:	2002      	movs	r0, #2
 8001378:	f001 fe8e 	bl	8003098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}

08001380 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM6_DAC_IRQHandler+0x10>)
 8001386:	f004 f874 	bl	8005472 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000294 	.word	0x20000294

08001394 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <OTG_FS_IRQHandler+0x10>)
 800139a:	f002 f830 	bl	80033fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000824 	.word	0x20000824

080013a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
	}

return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd7f 	bl	8000f00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
	}
	return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
	return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f008 f83a 	bl	800952c <__errno>
 80014b8:	4602      	mov	r2, r0
 80014ba:	230c      	movs	r3, #12
 80014bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20050000 	.word	0x20050000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	2000017c 	.word	0x2000017c
 80014ec:	20000c58 	.word	0x20000c58

080014f0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart7;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_UART4_Init+0x4c>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_UART4_Init+0x50>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_UART4_Init+0x4c>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_UART4_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_UART4_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_UART4_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_UART4_Init+0x4c>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_UART4_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_UART4_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_UART4_Init+0x4c>)
 8001528:	f004 f988 	bl	800583c <HAL_UART_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001532:	f7ff fe6d 	bl	8001210 <Error_Handler>
  }

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000314 	.word	0x20000314
 8001540:	40004c00 	.word	0x40004c00

08001544 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_UART7_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_UART7_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_UART7_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_UART7_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_UART7_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_UART7_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_UART7_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_UART7_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_UART7_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_UART7_Init+0x4c>)
 800157c:	f004 f95e 	bl	800583c <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001586:	f7ff fe43 	bl	8001210 <Error_Handler>
  }

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002d4 	.word	0x200002d4
 8001594:	40007800 	.word	0x40007800

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a3a      	ldr	r2, [pc, #232]	; (80016a0 <HAL_UART_MspInit+0x108>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d13d      	bne.n	8001636 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b2f      	ldr	r3, [pc, #188]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PD10     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MPU_UART4_TX_DEBUG_Pin;
 80015f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001604:	2308      	movs	r3, #8
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MPU_UART4_TX_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	4619      	mov	r1, r3
 800160e:	4826      	ldr	r0, [pc, #152]	; (80016a8 <HAL_UART_MspInit+0x110>)
 8001610:	f001 faa4 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MPU_UART4_RX_DEBUG_Pin;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 8001624:	230b      	movs	r3, #11
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MPU_UART4_RX_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <HAL_UART_MspInit+0x110>)
 8001630:	f001 fa94 	bl	8002b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001634:	e030      	b.n	8001698 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==UART7)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_UART_MspInit+0x114>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d12b      	bne.n	8001698 <HAL_UART_MspInit+0x100>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 800164a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 8001666:	f043 0320 	orr.w	r3, r3, #32
 800166a:	6313      	str	r3, [r2, #48]	; 0x30
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_UART_MspInit+0x10c>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLE_UART_RX_Pin|BLE_UART_TX_Pin;
 8001678:	23c0      	movs	r3, #192	; 0xc0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001688:	2308      	movs	r3, #8
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	; (80016b0 <HAL_UART_MspInit+0x118>)
 8001694:	f001 fa62 	bl	8002b5c <HAL_GPIO_Init>
}
 8001698:	bf00      	nop
 800169a:	3730      	adds	r7, #48	; 0x30
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40004c00 	.word	0x40004c00
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	40007800 	.word	0x40007800
 80016b0:	40021400 	.word	0x40021400

080016b4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <HAL_UART_MspDeInit+0x50>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_UART_MspDeInit+0x54>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_UART_MspDeInit+0x54>)
 80016cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PD10     ------> UART4_TX
    PD0     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOD, MPU_UART4_TX_DEBUG_Pin|MPU_UART4_RX_DEBUG_Pin);
 80016d2:	f240 4101 	movw	r1, #1025	; 0x401
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <HAL_UART_MspDeInit+0x58>)
 80016d8:	f001 fbd2 	bl	8002e80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
}
 80016dc:	e00e      	b.n	80016fc <HAL_UART_MspDeInit+0x48>
  else if(uartHandle->Instance==UART7)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_UART_MspDeInit+0x5c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d109      	bne.n	80016fc <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_UART7_CLK_DISABLE();
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_UART_MspDeInit+0x54>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_UART_MspDeInit+0x54>)
 80016ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016f2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, BLE_UART_RX_Pin|BLE_UART_TX_Pin);
 80016f4:	21c0      	movs	r1, #192	; 0xc0
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <HAL_UART_MspDeInit+0x60>)
 80016f8:	f001 fbc2 	bl	8002e80 <HAL_GPIO_DeInit>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004c00 	.word	0x40004c00
 8001708:	40023800 	.word	0x40023800
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40007800 	.word	0x40007800
 8001714:	40021400 	.word	0x40021400

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800171c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171e:	e003      	b.n	8001728 <LoopCopyDataInit>

08001720 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001722:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001724:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001726:	3104      	adds	r1, #4

08001728 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800172c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001730:	d3f6      	bcc.n	8001720 <CopyDataInit>
  ldr  r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001734:	e002      	b.n	800173c <LoopFillZerobss>

08001736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001736:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001738:	f842 3b04 	str.w	r3, [r2], #4

0800173c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001740:	d3f9      	bcc.n	8001736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001742:	f000 fd3f 	bl	80021c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f007 fef7 	bl	8009538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fbeb 	bl	8000f24 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001750:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001754:	0800a8dc 	.word	0x0800a8dc
  ldr  r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800175c:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 8001760:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 8001764:	20000c54 	.word	0x20000c54

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <MX_USB_DEVICE_stop>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void MX_USB_DEVICE_stop(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  if (USBD_Stop(&hUsbDeviceFS) != USBD_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_USB_DEVICE_stop+0x18>)
 8001772:	f005 ffd2 	bl	800771a <USBD_Stop>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USB_DEVICE_stop+0x14>
  {
    Error_Handler();
 800177c:	f7ff fd48 	bl	8001210 <Error_Handler>
  }
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000354 	.word	0x20000354

08001788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800178c:	2200      	movs	r2, #0
 800178e:	4912      	ldr	r1, [pc, #72]	; (80017d8 <MX_USB_DEVICE_Init+0x50>)
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <MX_USB_DEVICE_Init+0x54>)
 8001792:	f005 ff5f 	bl	8007654 <USBD_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800179c:	f7ff fd38 	bl	8001210 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 80017a0:	490f      	ldr	r1, [pc, #60]	; (80017e0 <MX_USB_DEVICE_Init+0x58>)
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <MX_USB_DEVICE_Init+0x54>)
 80017a4:	f005 ff8c 	bl	80076c0 <USBD_RegisterClass>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80017ae:	f7ff fd2f 	bl	8001210 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80017b2:	490c      	ldr	r1, [pc, #48]	; (80017e4 <MX_USB_DEVICE_Init+0x5c>)
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <MX_USB_DEVICE_Init+0x54>)
 80017b6:	f007 fad3 	bl	8008d60 <USBD_DFU_RegisterMedia>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80017c0:	f7ff fd26 	bl	8001210 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_USB_DEVICE_Init+0x54>)
 80017c6:	f005 ff9c 	bl	8007702 <USBD_Start>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f7ff fd1e 	bl	8001210 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000020 	.word	0x20000020
 80017dc:	20000354 	.word	0x20000354
 80017e0:	20000098 	.word	0x20000098
 80017e4:	20000070 	.word	0x20000070

080017e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	2212      	movs	r2, #18
 80017f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80017fa:	4b03      	ldr	r3, [pc, #12]	; (8001808 <USBD_FS_DeviceDescriptor+0x20>)
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	2000003c 	.word	0x2000003c

0800180c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2204      	movs	r2, #4
 800181c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000050 	.word	0x20000050

08001830 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <USBD_FS_ProductStrDescriptor+0x34>)
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <USBD_FS_ProductStrDescriptor+0x38>)
 8001848:	f006 ff61 	bl	800870e <USBD_GetString>
 800184c:	e004      	b.n	8001858 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	4904      	ldr	r1, [pc, #16]	; (8001864 <USBD_FS_ProductStrDescriptor+0x34>)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <USBD_FS_ProductStrDescriptor+0x38>)
 8001854:	f006 ff5b 	bl	800870e <USBD_GetString>
  }
  return USBD_StrDesc;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000624 	.word	0x20000624
 8001868:	0800a6dc 	.word	0x0800a6dc

0800186c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4904      	ldr	r1, [pc, #16]	; (800188c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800187e:	f006 ff46 	bl	800870e <USBD_GetString>
  return USBD_StrDesc;
 8001882:	4b02      	ldr	r3, [pc, #8]	; (800188c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000624 	.word	0x20000624
 8001890:	0800a6fc 	.word	0x0800a6fc

08001894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	221a      	movs	r2, #26
 80018a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80018a6:	f000 f843 	bl	8001930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80018aa:	4b02      	ldr	r3, [pc, #8]	; (80018b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000054 	.word	0x20000054

080018b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80018d0:	f006 ff1d 	bl	800870e <USBD_GetString>
 80018d4:	e004      	b.n	80018e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80018dc:	f006 ff17 	bl	800870e <USBD_GetString>
  }
  return USBD_StrDesc;
 80018e0:	4b02      	ldr	r3, [pc, #8]	; (80018ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000624 	.word	0x20000624
 80018f0:	0800a710 	.word	0x0800a710

080018f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4907      	ldr	r1, [pc, #28]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800190c:	f006 feff 	bl	800870e <USBD_GetString>
 8001910:	e004      	b.n	800191c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001918:	f006 fef9 	bl	800870e <USBD_GetString>
  }
  return USBD_StrDesc;
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000624 	.word	0x20000624
 800192c:	0800a71c 	.word	0x0800a71c

08001930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <Get_SerialNum+0x44>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <Get_SerialNum+0x48>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <Get_SerialNum+0x4c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001956:	2208      	movs	r2, #8
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <Get_SerialNum+0x50>)
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f814 	bl	8001988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001960:	2204      	movs	r2, #4
 8001962:	4908      	ldr	r1, [pc, #32]	; (8001984 <Get_SerialNum+0x54>)
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f000 f80f 	bl	8001988 <IntToUnicode>
  }
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	1fff7a10 	.word	0x1fff7a10
 8001978:	1fff7a14 	.word	0x1fff7a14
 800197c:	1fff7a18 	.word	0x1fff7a18
 8001980:	20000056 	.word	0x20000056
 8001984:	20000066 	.word	0x20000066

08001988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800199a:	2300      	movs	r3, #0
 800199c:	75fb      	strb	r3, [r7, #23]
 800199e:	e027      	b.n	80019f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0f1b      	lsrs	r3, r3, #28
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d80b      	bhi.n	80019c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0f1b      	lsrs	r3, r3, #28
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	440b      	add	r3, r1
 80019b8:	3230      	adds	r2, #48	; 0x30
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]
 80019be:	e00a      	b.n	80019d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	0f1b      	lsrs	r3, r3, #28
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	440b      	add	r3, r1
 80019d0:	3237      	adds	r2, #55	; 0x37
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	3301      	adds	r3, #1
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4413      	add	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	3301      	adds	r3, #1
 80019ee:	75fb      	strb	r3, [r7, #23]
 80019f0:	7dfa      	ldrb	r2, [r7, #23]
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3d3      	bcc.n	80019a0 <IntToUnicode+0x18>
  }
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  if (flash_init())
 8001a08:	f7fe fef4 	bl	80007f4 <flash_init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MEM_If_Init_FS+0x12>
  {
    return (USBD_FAIL);
 8001a12:	2303      	movs	r3, #3
 8001a14:	e000      	b.n	8001a18 <MEM_If_Init_FS+0x14>
  }
  return (USBD_OK);
 8001a16:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  if (flash_deinit())
 8001a20:	f7fe fefa 	bl	8000818 <flash_deinit>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MEM_If_DeInit_FS+0x12>
  {
    return (USBD_FAIL);
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e000      	b.n	8001a30 <MEM_If_DeInit_FS+0x14>
  }
  return (USBD_OK);
 8001a2e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  uint32_t startsector = flash_get_sector(Add);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7fe ff65 	bl	800090c <flash_get_sector>
 8001a42:	60f8      	str	r0, [r7, #12]
  printf("Erase address : %08x, sector : %d  \r\n", Add, (uint8_t)startsector);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	480d      	ldr	r0, [pc, #52]	; (8001a84 <MEM_If_Erase_FS+0x50>)
 8001a4e:	f007 fe57 	bl	8009700 <iprintf>
  if (startsector < flash_get_sector(USBD_DFU_APP_DEFAULT_ADD))
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <MEM_If_Erase_FS+0x54>)
 8001a54:	f7fe ff5a 	bl	800090c <flash_get_sector>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d207      	bcs.n	8001a70 <MEM_If_Erase_FS+0x3c>
  {
    printf("Add : %08x , sector %d is an inappropriate region \r\n", Add, (uint8_t)startsector);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	461a      	mov	r2, r3
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <MEM_If_Erase_FS+0x58>)
 8001a6a:	f007 fe49 	bl	8009700 <iprintf>
 8001a6e:	e003      	b.n	8001a78 <MEM_If_Erase_FS+0x44>
    // return (USBD_FAIL);
  }
  else
  {
    /* cube progammer call erase every sector  */
    flash_erase(startsector, 1);
 8001a70:	2101      	movs	r1, #1
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7fe fedc 	bl	8000830 <flash_erase>
  }

  return (USBD_OK);
 8001a78:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	0800a768 	.word	0x0800a768
 8001a88:	08040000 	.word	0x08040000
 8001a8c:	0800a790 	.word	0x0800a790

08001a90 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  // printf("address : %08x , len : %ld \r\n", dest, Len);

  dfu_status_t dfu_status;
  if ((uint32_t)dest == ADDR_FW_INFO)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <MEM_If_Write_FS+0xc4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d113      	bne.n	8001acc <MEM_If_Write_FS+0x3c>
  {
    printf("ADDR_FW_INFO \r\n");
 8001aa4:	482c      	ldr	r0, [pc, #176]	; (8001b58 <MEM_If_Write_FS+0xc8>)
 8001aa6:	f007 fe9f 	bl	80097e8 <puts>
    dfu_status = bootloader_check_secure(src);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7fe fdd6 	bl	800065c <bootloader_check_secure>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	74fb      	strb	r3, [r7, #19]
    if (dfu_status)
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <MEM_If_Write_FS+0x3c>
    {
      printf("dfu secure error \r\n");
 8001aba:	4828      	ldr	r0, [pc, #160]	; (8001b5c <MEM_If_Write_FS+0xcc>)
 8001abc:	f007 fe94 	bl	80097e8 <puts>
      bootloader_error_handler(dfu_status);
 8001ac0:	7cfb      	ldrb	r3, [r7, #19]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fd8c 	bl	80005e0 <bootloader_error_handler>
      return USBD_FAIL;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e03e      	b.n	8001b4a <MEM_If_Write_FS+0xba>
    }
  }

  uint32_t i = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  for (i = 0; i < Len; i += 4)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e034      	b.n	8001b40 <MEM_If_Write_FS+0xb0>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     * be done by byte */
    if (HAL_FLASH_Program
        (FLASH_TYPEPROGRAM_WORD, (uint32_t) (dest + i),
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4413      	add	r3, r2
    if (HAL_FLASH_Program
 8001adc:	4619      	mov	r1, r3
         *(uint32_t *) (src + i)) == HAL_OK)
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681b      	ldr	r3, [r3, #0]
    if (HAL_FLASH_Program
 8001ae6:	f04f 0400 	mov.w	r4, #0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4623      	mov	r3, r4
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 fd42 	bl	8002578 <HAL_FLASH_Program>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d114      	bne.n	8001b24 <MEM_If_Write_FS+0x94>
    {
      /* Check the written value */
      if (*(uint32_t *) (src + i) != *(uint32_t *) (dest + i))
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	4413      	add	r3, r2
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	440b      	add	r3, r1
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d015      	beq.n	8001b3a <MEM_If_Write_FS+0xaa>
      {
        /* Flash content doesn't match SRAM content */
        printf("verified fail \r\n");
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <MEM_If_Write_FS+0xd0>)
 8001b10:	f007 fe6a 	bl	80097e8 <puts>
        // dfu_status = DFU_verified_err;
        dfu_status = DFU_ERR_VERIFY;
 8001b14:	2301      	movs	r3, #1
 8001b16:	74fb      	strb	r3, [r7, #19]
        bootloader_error_handler(dfu_status);
 8001b18:	7cfb      	ldrb	r3, [r7, #19]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd60 	bl	80005e0 <bootloader_error_handler>
        return 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	e012      	b.n	8001b4a <MEM_If_Write_FS+0xba>
      }
    }
    else
    {
      printf("Fail write flash \r\n");
 8001b24:	480f      	ldr	r0, [pc, #60]	; (8001b64 <MEM_If_Write_FS+0xd4>)
 8001b26:	f007 fe5f 	bl	80097e8 <puts>
      /* Error occurred while writing data in Flash memory */
      dfu_status = DFU_UNKNOWN;
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	74fb      	strb	r3, [r7, #19]
      bootloader_error_handler(dfu_status);
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd55 	bl	80005e0 <bootloader_error_handler>
      return 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e007      	b.n	8001b4a <MEM_If_Write_FS+0xba>
  for (i = 0; i < Len; i += 4)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d3c6      	bcc.n	8001ad6 <MEM_If_Write_FS+0x46>
    }
  }

  return (USBD_OK);
 8001b48:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	08040400 	.word	0x08040400
 8001b58:	0800a7c8 	.word	0x0800a7c8
 8001b5c:	0800a7d8 	.word	0x0800a7d8
 8001b60:	0800a7ec 	.word	0x0800a7ec
 8001b64:	0800a7fc 	.word	0x0800a7fc

08001b68 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  // printf("Read  src : %08x , %08x \r\n", *src, src);
  uint32_t i = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  uint8_t *psrc = src;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	613b      	str	r3, [r7, #16]

  for (i = 0; i < Len; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <MEM_If_Read_FS+0x30>
  {
    dest[i] = *psrc++;
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	613a      	str	r2, [r7, #16]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	440a      	add	r2, r1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < Len; i++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3f0      	bcc.n	8001b82 <MEM_If_Read_FS+0x1a>
  }
  return dest;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END 4 */
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10c      	bne.n	8001bdc <MEM_If_GetStatus_FS+0x2e>
  {
    case DFU_MEDIA_PROGRAM:
      {
        buffer[1] = (uint8_t) FLASH_PROGRAM_TIME;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	2232      	movs	r2, #50	; 0x32
 8001bc8:	701a      	strb	r2, [r3, #0]
        buffer[2] = (uint8_t) (FLASH_PROGRAM_TIME << 8);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3302      	adds	r3, #2
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
        buffer[3] = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
        break;
 8001bda:	e00c      	b.n	8001bf6 <MEM_If_GetStatus_FS+0x48>
      }
    case DFU_MEDIA_ERASE:
    default:
      {
        buffer[1] = (uint8_t) FLASH_ERASE_TIME;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	2232      	movs	r2, #50	; 0x32
 8001be2:	701a      	strb	r2, [r3, #0]
        buffer[2] = (uint8_t) (FLASH_ERASE_TIME << 8);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3302      	adds	r3, #2
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
        buffer[3] = 0;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3303      	adds	r3, #3
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
        break;
 8001bf4:	bf00      	nop
      }
  }
  return (USBD_OK);
 8001bf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c24:	d13a      	bne.n	8001c9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c54:	230a      	movs	r3, #10
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <HAL_PCD_MspInit+0xa4>)
 8001c60:	f000 ff7c 	bl	8002b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_PCD_MspInit+0xa0>)
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2043      	movs	r0, #67	; 0x43
 8001c92:	f000 fc34 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001c96:	2043      	movs	r0, #67	; 0x43
 8001c98:	f000 fc4d 	bl	8002536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3728      	adds	r7, #40	; 0x28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000

08001cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f005 fd8e 	bl	80077e4 <USBD_LL_SetupStage>
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001ce2:	78fa      	ldrb	r2, [r7, #3]
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f005 fdc6 	bl	800788a <USBD_LL_DataOutStage>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3348      	adds	r3, #72	; 0x48
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f005 fe0f 	bl	8007950 <USBD_LL_DataInStage>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 ff13 	bl	8007b74 <USBD_LL_SOF>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d001      	beq.n	8001d6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8001d6a:	f7ff fa51 	bl	8001210 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fec0 	bl	8007afe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 fe79 	bl	8007a7c <USBD_LL_Reset>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 febb 	bl	8007b1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_PCD_SuspendCallback+0x48>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_PCD_SuspendCallback+0x48>)
 8001dce:	f043 0306 	orr.w	r3, r3, #6
 8001dd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 feaa 	bl	8007b48 <USBD_LL_Resume>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f005 fed5 	bl	8007bc2 <USBD_LL_IsoOUTIncomplete>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 feb6 	bl	8007ba8 <USBD_LL_IsoINIncomplete>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e52:	4618      	mov	r0, r3
 8001e54:	f005 fec2 	bl	8007bdc <USBD_LL_DevConnected>
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 febf 	bl	8007bf2 <USBD_LL_DevDisconnected>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d13f      	bne.n	8001f0c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a20      	ldr	r2, [pc, #128]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001e98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001e9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001ea2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ea6:	2206      	movs	r2, #6
 8001ea8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ee2:	f001 f8fc 	bl	80030de <HAL_PCD_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8001eec:	f7ff f990 	bl	8001210 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001ef4:	f002 fa65 	bl	80043c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	2100      	movs	r1, #0
 8001efc:	4806      	ldr	r0, [pc, #24]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001efe:	f002 fa19 	bl	8004334 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	2101      	movs	r1, #1
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <USBD_LL_Init+0x9c>)
 8001f08:	f002 fa14 	bl	8004334 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000824 	.word	0x20000824

08001f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 f9f7 	bl	8003326 <HAL_PCD_Start>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f914 	bl	800216c <USBD_Get_USB_Status>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 fa0f 	bl	800338c <HAL_PCD_Stop>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f8f9 	bl	800216c <USBD_Get_USB_Status>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	4608      	mov	r0, r1
 8001f92:	4611      	mov	r1, r2
 8001f94:	461a      	mov	r2, r3
 8001f96:	4603      	mov	r3, r0
 8001f98:	70fb      	strb	r3, [r7, #3]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70bb      	strb	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001fb0:	78bb      	ldrb	r3, [r7, #2]
 8001fb2:	883a      	ldrh	r2, [r7, #0]
 8001fb4:	78f9      	ldrb	r1, [r7, #3]
 8001fb6:	f001 fe26 	bl	8003c06 <HAL_PCD_EP_Open>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f8d3 	bl	800216c <USBD_Get_USB_Status>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001fee:	78fa      	ldrb	r2, [r7, #3]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 ff04 	bl	8003e00 <HAL_PCD_EP_SetStall>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f8b4 	bl	800216c <USBD_Get_USB_Status>
 8002004:	4603      	mov	r3, r0
 8002006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002008:	7bbb      	ldrb	r3, [r7, #14]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800202c:	78fa      	ldrb	r2, [r7, #3]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f001 ff49 	bl	8003ec8 <HAL_PCD_EP_ClrStall>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 f895 	bl	800216c <USBD_Get_USB_Status>
 8002042:	4603      	mov	r3, r0
 8002044:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002046:	7bbb      	ldrb	r3, [r7, #14]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002062:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da0b      	bge.n	8002084 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	333e      	adds	r3, #62	; 0x3e
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	e00b      	b.n	800209c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800208a:	68f9      	ldr	r1, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800209a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 fd78 	bl	8003bbc <HAL_PCD_SetAddress>
 80020cc:	4603      	mov	r3, r0
 80020ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f84a 	bl	800216c <USBD_Get_USB_Status>
 80020d8:	4603      	mov	r3, r0
 80020da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	460b      	mov	r3, r1
 80020f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8002104:	7af9      	ldrb	r1, [r7, #11]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	f001 fe2f 	bl	8003d6c <HAL_PCD_EP_Transmit>
 800210e:	4603      	mov	r3, r0
 8002110:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f829 	bl	800216c <USBD_Get_USB_Status>
 800211a:	4603      	mov	r3, r0
 800211c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800211e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8002146:	7af9      	ldrb	r1, [r7, #11]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	f001 fdc3 	bl	8003cd6 <HAL_PCD_EP_Receive>
 8002150:	4603      	mov	r3, r0
 8002152:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f808 	bl	800216c <USBD_Get_USB_Status>
 800215c:	4603      	mov	r3, r0
 800215e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8002160:	7dbb      	ldrb	r3, [r7, #22]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d817      	bhi.n	80021b0 <USBD_Get_USB_Status+0x44>
 8002180:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <USBD_Get_USB_Status+0x1c>)
 8002182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002186:	bf00      	nop
 8002188:	08002199 	.word	0x08002199
 800218c:	0800219f 	.word	0x0800219f
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021ab 	.word	0x080021ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
    break;
 800219c:	e00b      	b.n	80021b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800219e:	2303      	movs	r3, #3
 80021a0:	73fb      	strb	r3, [r7, #15]
    break;
 80021a2:	e008      	b.n	80021b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
    break;
 80021a8:	e005      	b.n	80021b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80021aa:	2303      	movs	r3, #3
 80021ac:	73fb      	strb	r3, [r7, #15]
    break;
 80021ae:	e002      	b.n	80021b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80021b0:	2303      	movs	r3, #3
 80021b2:	73fb      	strb	r3, [r7, #15]
    break;
 80021b4:	bf00      	nop
  }
  return usb_status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <SystemInit+0x28>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <SystemInit+0x28>)
 80021d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SystemInit+0x28>)
 80021da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021de:	609a      	str	r2, [r3, #8]
#endif
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <HAL_Init+0x40>)
 80021fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_Init+0x40>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_Init+0x40>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 f965 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff f822 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7fe fff8 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_DeInit+0x54>)
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_DeInit+0x54>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_DeInit+0x54>)
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_DeInit+0x54>)
 8002250:	2200      	movs	r2, #0
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_DeInit+0x54>)
 8002256:	f04f 32ff 	mov.w	r2, #4294967295
 800225a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_DeInit+0x54>)
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_DeInit+0x54>)
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <HAL_DeInit+0x54>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_DeInit+0x54>)
 8002272:	f04f 32ff 	mov.w	r2, #4294967295
 8002276:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_DeInit+0x54>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800227e:	f000 f805 	bl	800228c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000094 	.word	0x20000094
 80022c0:	20000c2c 	.word	0x20000c2c

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000c2c 	.word	0x20000c2c

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_Delay+0x40>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000094 	.word	0x20000094

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db10      	blt.n	80023f4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4909      	ldr	r1, [pc, #36]	; (8002400 <__NVIC_DisableIRQ+0x40>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	3320      	adds	r3, #32
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	490c      	ldr	r1, [pc, #48]	; (8002450 <__NVIC_SetPriority+0x4c>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	0112      	lsls	r2, r2, #4
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	440b      	add	r3, r1
 8002428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800242c:	e00a      	b.n	8002444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4908      	ldr	r1, [pc, #32]	; (8002454 <__NVIC_SetPriority+0x50>)
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3b04      	subs	r3, #4
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	440b      	add	r3, r1
 8002442:	761a      	strb	r2, [r3, #24]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e100 	.word	0xe000e100
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f1c3 0307 	rsb	r3, r3, #7
 8002472:	2b04      	cmp	r3, #4
 8002474:	bf28      	it	cs
 8002476:	2304      	movcs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3304      	adds	r3, #4
 800247e:	2b06      	cmp	r3, #6
 8002480:	d902      	bls.n	8002488 <NVIC_EncodePriority+0x30>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3b03      	subs	r3, #3
 8002486:	e000      	b.n	800248a <NVIC_EncodePriority+0x32>
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	f04f 32ff 	mov.w	r2, #4294967295
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	401a      	ands	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a0:	f04f 31ff 	mov.w	r1, #4294967295
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b0:	4313      	orrs	r3, r2
         );
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80024c4:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <__NVIC_SystemReset+0x20>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <__NVIC_SystemReset+0x20>)
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_SystemReset+0x24>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <__NVIC_SystemReset+0x1c>
 80024e0:	e000ed00 	.word	0xe000ed00
 80024e4:	05fa0004 	.word	0x05fa0004

080024e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff15 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002510:	f7ff ff2a 	bl	8002368 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff9c 	bl	8002458 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff6b 	bl	8002404 <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff1d 	bl	8002384 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff2d 	bl	80023c0 <__NVIC_DisableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002572:	f7ff ffa5 	bl	80024c0 <__NVIC_SystemReset>
	...

08002578 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_FLASH_Program+0xa0>)
 800258c:	7e1b      	ldrb	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_FLASH_Program+0x1e>
 8002592:	2302      	movs	r3, #2
 8002594:	e03b      	b.n	800260e <HAL_FLASH_Program+0x96>
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_FLASH_Program+0xa0>)
 8002598:	2201      	movs	r2, #1
 800259a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800259c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025a0:	f000 f87c 	bl	800269c <FLASH_WaitForLastOperation>
 80025a4:	4603      	mov	r3, r0
 80025a6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80025a8:	7dfb      	ldrb	r3, [r7, #23]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12b      	bne.n	8002606 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80025b4:	783b      	ldrb	r3, [r7, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	68b8      	ldr	r0, [r7, #8]
 80025ba:	f000 f925 	bl	8002808 <FLASH_Program_Byte>
 80025be:	e016      	b.n	80025ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80025c6:	883b      	ldrh	r3, [r7, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	68b8      	ldr	r0, [r7, #8]
 80025cc:	f000 f8f8 	bl	80027c0 <FLASH_Program_HalfWord>
 80025d0:	e00d      	b.n	80025ee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d105      	bne.n	80025e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	68b8      	ldr	r0, [r7, #8]
 80025de:	f000 f8cd 	bl	800277c <FLASH_Program_Word>
 80025e2:	e004      	b.n	80025ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80025e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e8:	68b8      	ldr	r0, [r7, #8]
 80025ea:	f000 f897 	bl	800271c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025f2:	f000 f853 	bl	800269c <FLASH_WaitForLastOperation>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_FLASH_Program+0xa4>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_FLASH_Program+0xa4>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_FLASH_Program+0xa0>)
 8002608:	2200      	movs	r2, #0
 800260a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000c30 	.word	0x20000c30
 800261c:	40023c00 	.word	0x40023c00

08002620 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_FLASH_Unlock+0x38>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	da0b      	bge.n	800264a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_FLASH_Unlock+0x38>)
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <HAL_FLASH_Unlock+0x3c>)
 8002636:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_FLASH_Unlock+0x38>)
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_FLASH_Unlock+0x40>)
 800263c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_FLASH_Unlock+0x38>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	da01      	bge.n	800264a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800264a:	79fb      	ldrb	r3, [r7, #7]
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40023c00 	.word	0x40023c00
 800265c:	45670123 	.word	0x45670123
 8002660:	cdef89ab 	.word	0xcdef89ab

08002664 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_FLASH_Lock+0x1c>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_FLASH_Lock+0x1c>)
 800266e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002672:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_FLASH_GetError+0x14>)
 800268a:	69db      	ldr	r3, [r3, #28]
}  
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000c30 	.word	0x20000c30

0800269c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <FLASH_WaitForLastOperation+0x78>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80026ae:	f7ff fe09 	bl	80022c4 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026b4:	e010      	b.n	80026d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d00c      	beq.n	80026d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d007      	beq.n	80026d4 <FLASH_WaitForLastOperation+0x38>
 80026c4:	f7ff fdfe 	bl	80022c4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d201      	bcs.n	80026d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e019      	b.n	800270c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <FLASH_WaitForLastOperation+0x7c>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e8      	bne.n	80026b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <FLASH_WaitForLastOperation+0x7c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <FLASH_WaitForLastOperation+0x7c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <FLASH_WaitForLastOperation+0x7c>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002702:	f000 f8a3 	bl	800284c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
  
}  
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000c30 	.word	0x20000c30
 8002718:	40023c00 	.word	0x40023c00

0800271c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800271c:	b490      	push	{r4, r7}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 800272e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 800273a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800273e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	4a0c      	ldr	r2, [pc, #48]	; (8002778 <FLASH_Program_DoubleWord+0x5c>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002752:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002756:	e9d7 1200 	ldrd	r1, r2, [r7]
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f04f 0400 	mov.w	r4, #0
 8002762:	0013      	movs	r3, r2
 8002764:	2400      	movs	r4, #0
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	3204      	adds	r2, #4
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bc90      	pop	{r4, r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <FLASH_Program_Word+0x40>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <FLASH_Program_Word+0x40>)
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <FLASH_Program_Word+0x40>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <FLASH_Program_Word+0x40>)
 8002798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800279c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <FLASH_Program_Word+0x40>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	4a06      	ldr	r2, [pc, #24]	; (80027bc <FLASH_Program_Word+0x40>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80027d8:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <FLASH_Program_HalfWord+0x44>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	801a      	strh	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00

08002808 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <FLASH_Program_Byte+0x40>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <FLASH_Program_Byte+0x40>)
 800281a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <FLASH_Program_Byte+0x40>)
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <FLASH_Program_Byte+0x40>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <FLASH_Program_Byte+0x40>)
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <FLASH_Program_Byte+0x40>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	78fa      	ldrb	r2, [r7, #3]
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00

0800284c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f043 0310 	orr.w	r3, r3, #16
 8002864:	4a2b      	ldr	r2, [pc, #172]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 8002866:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 800286a:	2210      	movs	r2, #16
 800286c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 8002884:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 8002888:	2220      	movs	r2, #32
 800288a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	4a1c      	ldr	r2, [pc, #112]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	4a05      	ldr	r2, [pc, #20]	; (8002914 <FLASH_SetErrorCode+0xc8>)
 80028fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <FLASH_SetErrorCode+0xc4>)
 8002902:	2202      	movs	r2, #2
 8002904:	60da      	str	r2, [r3, #12]
  }
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40023c00 	.word	0x40023c00
 8002914:	20000c30 	.word	0x20000c30

08002918 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_FLASHEx_Erase+0xd8>)
 800292c:	7e1b      	ldrb	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_FLASHEx_Erase+0x1e>
 8002932:	2302      	movs	r3, #2
 8002934:	e058      	b.n	80029e8 <HAL_FLASHEx_Erase+0xd0>
 8002936:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <HAL_FLASHEx_Erase+0xd8>)
 8002938:	2201      	movs	r2, #1
 800293a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800293c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002940:	f7ff feac 	bl	800269c <FLASH_WaitForLastOperation>
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d148      	bne.n	80029e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d115      	bne.n	800298a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f000 f844 	bl	80029f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002970:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002974:	f7ff fe92 	bl	800269c <FLASH_WaitForLastOperation>
 8002978:	4603      	mov	r3, r0
 800297a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_FLASHEx_Erase+0xdc>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a1c      	ldr	r2, [pc, #112]	; (80029f4 <HAL_FLASHEx_Erase+0xdc>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6113      	str	r3, [r2, #16]
 8002988:	e028      	b.n	80029dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	e01c      	b.n	80029cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	68b8      	ldr	r0, [r7, #8]
 800299c:	f000 f850 	bl	8002a40 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029a4:	f7ff fe7a 	bl	800269c <FLASH_WaitForLastOperation>
 80029a8:	4603      	mov	r3, r0
 80029aa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_FLASHEx_Erase+0xdc>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_FLASHEx_Erase+0xdc>)
 80029b2:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 80029b6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	601a      	str	r2, [r3, #0]
          break;
 80029c4:	e00a      	b.n	80029dc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3301      	adds	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4413      	add	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3da      	bcc.n	8002992 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80029dc:	f000 f878 	bl	8002ad0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_FLASHEx_Erase+0xd8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]

  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000c30 	.word	0x20000c30
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a04:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4313      	orrs	r3, r2
 8002a26:	4a05      	ldr	r2, [pc, #20]	; (8002a3c <FLASH_MassErase+0x44>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6113      	str	r3, [r2, #16]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023c00 	.word	0x40023c00

08002a40 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e010      	b.n	8002a7e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d103      	bne.n	8002a6a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e009      	b.n	8002a7e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d103      	bne.n	8002a78 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e002      	b.n	8002a7e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002a78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	490f      	ldr	r1, [pc, #60]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002a9c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8002aa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <FLASH_Erase_Sector+0x8c>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6113      	str	r3, [r2, #16]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40023c00 	.word	0x40023c00

08002ad0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002ad4:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d017      	beq.n	8002b10 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b02:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a13      	ldr	r2, [pc, #76]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b3e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <FLASH_FlushCaches+0x88>)
 8002b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4a:	6013      	str	r3, [r2, #0]
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e165      	b.n	8002e44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8154 	bne.w	8002e3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_GPIO_Init+0x5a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002baa:	2b11      	cmp	r3, #17
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0xfc>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ae 	beq.w	8002e3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b5c      	ldr	r3, [pc, #368]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_GPIO_Init+0x2fc>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfe:	4a57      	ldr	r2, [pc, #348]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4e      	ldr	r2, [pc, #312]	; (8002e60 <HAL_GPIO_Init+0x304>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d025      	beq.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4d      	ldr	r2, [pc, #308]	; (8002e64 <HAL_GPIO_Init+0x308>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01f      	beq.n	8002d72 <HAL_GPIO_Init+0x216>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4c      	ldr	r2, [pc, #304]	; (8002e68 <HAL_GPIO_Init+0x30c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d019      	beq.n	8002d6e <HAL_GPIO_Init+0x212>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4b      	ldr	r2, [pc, #300]	; (8002e6c <HAL_GPIO_Init+0x310>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <HAL_GPIO_Init+0x20e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	; (8002e70 <HAL_GPIO_Init+0x314>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00d      	beq.n	8002d66 <HAL_GPIO_Init+0x20a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a49      	ldr	r2, [pc, #292]	; (8002e74 <HAL_GPIO_Init+0x318>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d007      	beq.n	8002d62 <HAL_GPIO_Init+0x206>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a48      	ldr	r2, [pc, #288]	; (8002e78 <HAL_GPIO_Init+0x31c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_GPIO_Init+0x202>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d5e:	2307      	movs	r3, #7
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x21c>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4934      	ldr	r1, [pc, #208]	; (8002e5c <HAL_GPIO_Init+0x300>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dba:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc0:	4b2e      	ldr	r3, [pc, #184]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de4:	4a25      	ldr	r2, [pc, #148]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <HAL_GPIO_Init+0x320>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae96 	bls.w	8002b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3724      	adds	r7, #36	; 0x24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40021400 	.word	0x40021400
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e0c7      	b.n	800302c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f040 80b7 	bne.w	8003026 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002eb8:	4a61      	ldr	r2, [pc, #388]	; (8003040 <HAL_GPIO_DeInit+0x1c0>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	220f      	movs	r2, #15
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a59      	ldr	r2, [pc, #356]	; (8003044 <HAL_GPIO_DeInit+0x1c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d025      	beq.n	8002f2e <HAL_GPIO_DeInit+0xae>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a58      	ldr	r2, [pc, #352]	; (8003048 <HAL_GPIO_DeInit+0x1c8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <HAL_GPIO_DeInit+0xaa>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a57      	ldr	r2, [pc, #348]	; (800304c <HAL_GPIO_DeInit+0x1cc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_DeInit+0xa6>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a56      	ldr	r2, [pc, #344]	; (8003050 <HAL_GPIO_DeInit+0x1d0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_DeInit+0xa2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a55      	ldr	r2, [pc, #340]	; (8003054 <HAL_GPIO_DeInit+0x1d4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_DeInit+0x9e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_GPIO_DeInit+0x1d8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_DeInit+0x9a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a53      	ldr	r2, [pc, #332]	; (800305c <HAL_GPIO_DeInit+0x1dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_DeInit+0x96>
 8002f12:	2306      	movs	r3, #6
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_DeInit+0xb0>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d132      	bne.n	8002fa6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f40:	4b47      	ldr	r3, [pc, #284]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4945      	ldr	r1, [pc, #276]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002f4e:	4b44      	ldr	r3, [pc, #272]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	4942      	ldr	r1, [pc, #264]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	493e      	ldr	r1, [pc, #248]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	493b      	ldr	r1, [pc, #236]	; (8003060 <HAL_GPIO_DeInit+0x1e0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f88:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_GPIO_DeInit+0x1c0>)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	4829      	ldr	r0, [pc, #164]	; (8003040 <HAL_GPIO_DeInit+0x1c0>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	2103      	movs	r1, #3
 8002fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	08d2      	lsrs	r2, r2, #3
 8002fdc:	4019      	ands	r1, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2103      	movs	r1, #3
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	2101      	movs	r1, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2103      	movs	r1, #3
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f af34 	bls.w	8002e9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40013800 	.word	0x40013800
 8003044:	40020000 	.word	0x40020000
 8003048:	40020400 	.word	0x40020400
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00
 8003054:	40021000 	.word	0x40021000
 8003058:	40021400 	.word	0x40021400
 800305c:	40021800 	.word	0x40021800
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
 8003070:	4613      	mov	r3, r2
 8003072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003074:	787b      	ldrb	r3, [r7, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003080:	e003      	b.n	800308a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003082:	887b      	ldrh	r3, [r7, #2]
 8003084:	041a      	lsls	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ae:	4a05      	ldr	r2, [pc, #20]	; (80030c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f806 	bl	80030c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e0:	b08f      	sub	sp, #60	; 0x3c
 80030e2:	af0a      	add	r7, sp, #40	; 0x28
 80030e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e116      	b.n	800331e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fd7a 	bl	8001c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f961 	bl	80063f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	687e      	ldr	r6, [r7, #4]
 800313c:	466d      	mov	r5, sp
 800313e:	f106 0410 	add.w	r4, r6, #16
 8003142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800314a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003152:	1d33      	adds	r3, r6, #4
 8003154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003156:	6838      	ldr	r0, [r7, #0]
 8003158:	f003 f838 	bl	80061cc <USB_CoreInit>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0d7      	b.n	800331e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f003 f94f 	bl	8006418 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	e04a      	b.n	8003216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	333d      	adds	r3, #61	; 0x3d
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	333c      	adds	r3, #60	; 0x3c
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	b298      	uxth	r0, r3
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3342      	adds	r3, #66	; 0x42
 80031bc:	4602      	mov	r2, r0
 80031be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031c0:	7bfa      	ldrb	r2, [r7, #15]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	333f      	adds	r3, #63	; 0x3f
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3344      	adds	r3, #68	; 0x44
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3348      	adds	r3, #72	; 0x48
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3350      	adds	r3, #80	; 0x50
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	3301      	adds	r3, #1
 8003214:	73fb      	strb	r3, [r7, #15]
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d3af      	bcc.n	8003180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e044      	b.n	80032b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3301      	adds	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d3b5      	bcc.n	8003226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	687e      	ldr	r6, [r7, #4]
 80032c2:	466d      	mov	r5, sp
 80032c4:	f106 0410 	add.w	r4, r6, #16
 80032c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032d8:	1d33      	adds	r3, r6, #4
 80032da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	f003 f8c5 	bl	800646c <USB_DevInit>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e014      	b.n	800331e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f001 f869 	bl	80043e4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f004 f824 	bl	8007364 <USB_DevDisconnect>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003326 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_PCD_Start+0x1c>
 800333e:	2302      	movs	r3, #2
 8003340:	e020      	b.n	8003384 <HAL_PCD_Start+0x5e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b01      	cmp	r3, #1
 8003350:	d109      	bne.n	8003366 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003356:	2b01      	cmp	r3, #1
 8003358:	d005      	beq.n	8003366 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 f832 	bl	80063d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 ffd4 	bl	8007322 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PCD_Stop+0x1c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e026      	b.n	80033f6 <HAL_PCD_Stop+0x6a>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 f81e 	bl	80063f6 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 ffd0 	bl	8007364 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2110      	movs	r1, #16
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 f9ac 	bl	8006728 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d005      	beq.n	80033ec <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033fe:	b590      	push	{r4, r7, lr}
 8003400:	b08d      	sub	sp, #52	; 0x34
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f004 f859 	bl	80074cc <USB_GetMode>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 83ca 	bne.w	8003bb6 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 ffbd 	bl	80073a6 <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 83c0 	beq.w	8003bb4 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f003 ffb4 	bl	80073a6 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d107      	bne.n	8003458 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f002 0202 	and.w	r2, r2, #2
 8003456:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f003 ffa2 	bl	80073a6 <USB_ReadInterrupts>
 8003462:	4603      	mov	r3, r0
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b10      	cmp	r3, #16
 800346a:	d161      	bne.n	8003530 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0210 	bic.w	r2, r2, #16
 800347a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	3304      	adds	r3, #4
 800349a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	0c5b      	lsrs	r3, r3, #17
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d124      	bne.n	80034f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d035      	beq.n	8003520 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6a38      	ldr	r0, [r7, #32]
 80034c8:	f003 fe08 	bl	80070dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d8:	441a      	add	r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ea:	441a      	add	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	619a      	str	r2, [r3, #24]
 80034f0:	e016      	b.n	8003520 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	0c5b      	lsrs	r3, r3, #17
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d110      	bne.n	8003520 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003504:	2208      	movs	r2, #8
 8003506:	4619      	mov	r1, r3
 8003508:	6a38      	ldr	r0, [r7, #32]
 800350a:	f003 fde7 	bl	80070dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800351a:	441a      	add	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0210 	orr.w	r2, r2, #16
 800352e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 ff36 	bl	80073a6 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003540:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003544:	d16e      	bne.n	8003624 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f003 ff3c 	bl	80073cc <USB_ReadDevAllOutEpInterrupt>
 8003554:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003556:	e062      	b.n	800361e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d057      	beq.n	8003612 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f003 ff61 	bl	8007434 <USB_ReadDevOutEPInterrupt>
 8003572:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358a:	461a      	mov	r2, r3
 800358c:	2301      	movs	r3, #1
 800358e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fd7c 	bl	8004090 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00c      	beq.n	80035bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ae:	461a      	mov	r2, r3
 80035b0:	2308      	movs	r3, #8
 80035b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fe76 	bl	80042a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	2310      	movs	r3, #16
 80035d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	461a      	mov	r2, r3
 80035f0:	2320      	movs	r3, #32
 80035f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003610:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	3301      	adds	r3, #1
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d199      	bne.n	8003558 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f003 febc 	bl	80073a6 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003634:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003638:	f040 80c0 	bne.w	80037bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f003 fedd 	bl	8007400 <USB_ReadDevAllInEpInterrupt>
 8003646:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800364c:	e0b2      	b.n	80037b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80a7 	beq.w	80037a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f003 ff03 	bl	8007470 <USB_ReadDevInEPInterrupt>
 800366a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d057      	beq.n	8003726 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	43db      	mvns	r3, r3
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003696:	4013      	ands	r3, r2
 8003698:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a6:	461a      	mov	r2, r3
 80036a8:	2301      	movs	r3, #1
 80036aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d132      	bne.n	800371a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3348      	adds	r3, #72	; 0x48
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4403      	add	r3, r0
 80036d4:	3344      	adds	r3, #68	; 0x44
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4419      	add	r1, r3
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4403      	add	r3, r0
 80036e8:	3348      	adds	r3, #72	; 0x48
 80036ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_PCD_IRQHandler+0x31c>
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3350      	adds	r3, #80	; 0x50
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003712:	461a      	mov	r2, r3
 8003714:	2101      	movs	r1, #1
 8003716:	f003 ff0b 	bl	8007530 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe faf0 	bl	8001d06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	461a      	mov	r2, r3
 800373e:	2308      	movs	r3, #8
 8003740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	461a      	mov	r2, r3
 800375a:	2310      	movs	r3, #16
 800375c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	461a      	mov	r2, r3
 8003776:	2340      	movs	r3, #64	; 0x40
 8003778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	461a      	mov	r2, r3
 8003792:	2302      	movs	r3, #2
 8003794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fbe6 	bl	8003f74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f af49 	bne.w	800364e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 fdf0 	bl	80073a6 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037d0:	d122      	bne.n	8003818 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d108      	bne.n	8003802 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037f8:	2100      	movs	r1, #0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fe16 	bl	800442c <HAL_PCDEx_LPM_Callback>
 8003800:	e002      	b.n	8003808 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe faec 	bl	8001de0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fdc2 	bl	80073a6 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d112      	bne.n	8003854 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe faa8 	bl	8001d94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003852:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fda4 	bl	80073a6 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d121      	bne.n	80038ae <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003878:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800389e:	2101      	movs	r1, #1
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fdc3 	bl	800442c <HAL_PCDEx_LPM_Callback>
 80038a6:	e002      	b.n	80038ae <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fe fa73 	bl	8001d94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fd77 	bl	80073a6 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c2:	f040 80c7 	bne.w	8003a54 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2110      	movs	r1, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f002 ff21 	bl	8006728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ea:	e056      	b.n	800399a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800391a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800391e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800393e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003952:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003972:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003992:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	3301      	adds	r3, #1
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d3a3      	bcc.n	80038ec <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039d0:	f043 030b 	orr.w	r3, r3, #11
 80039d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039e6:	f043 030b 	orr.w	r3, r3, #11
 80039ea:	6453      	str	r3, [r2, #68]	; 0x44
 80039ec:	e015      	b.n	8003a1a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a00:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a04:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a14:	f043 030b 	orr.w	r3, r3, #11
 8003a18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f003 fd76 	bl	8007530 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fca4 	bl	80073a6 <USB_ReadInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d124      	bne.n	8003ab4 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 fd3a 	bl	80074e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 feb6 	bl	80067ea <USB_GetDevSpeed>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681c      	ldr	r4, [r3, #0]
 8003a8a:	f000 fe99 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8003a8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f002 fbf9 	bl	8006290 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe f959 	bl	8001d56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fc74 	bl	80073a6 <USB_ReadInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d10a      	bne.n	8003ade <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fe f936 	bl	8001d3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f002 0208 	and.w	r2, r2, #8
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 fc5f 	bl	80073a6 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af2:	d10f      	bne.n	8003b14 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fe f98e 	bl	8001e20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f003 fc44 	bl	80073a6 <USB_ReadInterrupts>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b28:	d10f      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fe f961 	bl	8001dfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f003 fc29 	bl	80073a6 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d10a      	bne.n	8003b76 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fe f96f 	bl	8001e44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fc13 	bl	80073a6 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d115      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fe f95f 	bl	8001e60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e000      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003bb4:	bf00      	nop
    }
  }
}
 8003bb6:	3734      	adds	r7, #52	; 0x34
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd90      	pop	{r4, r7, pc}

08003bbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_PCD_SetAddress+0x1a>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e013      	b.n	8003bfe <HAL_PCD_SetAddress+0x42>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 fb71 	bl	80072d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	4608      	mov	r0, r1
 8003c10:	4611      	mov	r1, r2
 8003c12:	461a      	mov	r2, r3
 8003c14:	4603      	mov	r3, r0
 8003c16:	70fb      	strb	r3, [r7, #3]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	803b      	strh	r3, [r7, #0]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da0f      	bge.n	8003c4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	f003 020f 	and.w	r2, r3, #15
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3338      	adds	r3, #56	; 0x38
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	3304      	adds	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	705a      	strb	r2, [r3, #1]
 8003c4a:	e00f      	b.n	8003c6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c78:	883a      	ldrh	r2, [r7, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	78ba      	ldrb	r2, [r7, #2]
 8003c82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d004      	beq.n	8003c96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c96:	78bb      	ldrb	r3, [r7, #2]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d102      	bne.n	8003ca2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_PCD_EP_Open+0xaa>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e00e      	b.n	8003cce <HAL_PCD_EP_Open+0xc8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f002 fdb8 	bl	8006834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	f003 f83f 	bl	8006dcc <USB_EP0StartXfer>
 8003d4e:	e008      	b.n	8003d62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6979      	ldr	r1, [r7, #20]
 8003d5e:	f002 fdf1 	bl	8006944 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	3338      	adds	r3, #56	; 0x38
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2201      	movs	r2, #1
 8003daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d102      	bne.n	8003dc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	f002 fff5 	bl	8006dcc <USB_EP0StartXfer>
 8003de2:	e008      	b.n	8003df6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6979      	ldr	r1, [r7, #20]
 8003df2:	f002 fda7 	bl	8006944 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d901      	bls.n	8003e1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e050      	b.n	8003ec0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da0f      	bge.n	8003e46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3338      	adds	r3, #56	; 0x38
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	705a      	strb	r2, [r3, #1]
 8003e44:	e00d      	b.n	8003e62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_PCD_EP_SetStall+0x82>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e01e      	b.n	8003ec0 <HAL_PCD_EP_SetStall+0xc0>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68f9      	ldr	r1, [r7, #12]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f003 f94c 	bl	800712e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f003 fb3d 	bl	8007530 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d901      	bls.n	8003ee6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e042      	b.n	8003f6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	da0f      	bge.n	8003f0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	3338      	adds	r3, #56	; 0x38
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	705a      	strb	r2, [r3, #1]
 8003f0c:	e00f      	b.n	8003f2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	f003 020f 	and.w	r2, r3, #15
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	3304      	adds	r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_PCD_EP_ClrStall+0x86>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e00e      	b.n	8003f6c <HAL_PCD_EP_ClrStall+0xa4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f003 f954 	bl	800720a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	; 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	3338      	adds	r3, #56	; 0x38
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699a      	ldr	r2, [r3, #24]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d901      	bls.n	8003fac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e06c      	b.n	8004086 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3303      	adds	r3, #3
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd0:	e02b      	b.n	800402a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d902      	bls.n	8003fee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004006:	b2db      	uxtb	r3, r3
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4603      	mov	r3, r0
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f003 f830 	bl	8007072 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	441a      	add	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	b29b      	uxth	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	429a      	cmp	r2, r3
 800403e:	d809      	bhi.n	8004054 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004048:	429a      	cmp	r2, r3
 800404a:	d203      	bcs.n	8004054 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1be      	bne.n	8003fd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	695a      	ldr	r2, [r3, #20]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d811      	bhi.n	8004084 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	2201      	movs	r2, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	43db      	mvns	r3, r3
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004080:	4013      	ands	r3, r2
 8004082:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3720      	adds	r7, #32
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	333c      	adds	r3, #60	; 0x3c
 80040a8:	3304      	adds	r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	f040 80a0 	bne.w	8004208 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a72      	ldr	r2, [pc, #456]	; (80042a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	f240 80dd 	bls.w	8004296 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80d7 	beq.w	8004296 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	e0cb      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	461a      	mov	r2, r3
 8004116:	2320      	movs	r3, #32
 8004118:	6093      	str	r3, [r2, #8]
 800411a:	e0bc      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 80b7 	bne.w	8004296 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a5d      	ldr	r2, [pc, #372]	; (80042a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d90f      	bls.n	8004150 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	e0a2      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	1a9b      	subs	r3, r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004162:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	440b      	add	r3, r1
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004176:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4403      	add	r3, r0
 8004186:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800418a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	4613      	mov	r3, r2
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	1a9b      	subs	r3, r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4403      	add	r3, r0
 80041ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4419      	add	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4403      	add	r3, r0
 80041c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d114      	bne.n	80041fa <PCD_EP_OutXfrComplete_int+0x16a>
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d108      	bne.n	80041fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041f2:	461a      	mov	r2, r3
 80041f4:	2101      	movs	r1, #1
 80041f6:	f003 f99b 	bl	8007530 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fd fd65 	bl	8001cd0 <HAL_PCD_DataOutStageCallback>
 8004206:	e046      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d124      	bne.n	800425a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	e032      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2320      	movs	r3, #32
 800424a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd fd3c 	bl	8001cd0 <HAL_PCD_DataOutStageCallback>
 8004258:	e01d      	b.n	8004296 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d114      	bne.n	800428a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d108      	bne.n	800428a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004282:	461a      	mov	r2, r3
 8004284:	2100      	movs	r1, #0
 8004286:	f003 f953 	bl	8007530 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fd fd1d 	bl	8001cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	4f54300a 	.word	0x4f54300a
 80042a4:	4f54310a 	.word	0x4f54310a

080042a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	333c      	adds	r3, #60	; 0x3c
 80042c0:	3304      	adds	r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a15      	ldr	r2, [pc, #84]	; (8004330 <PCD_EP_OutSetupPacket_int+0x88>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d90e      	bls.n	80042fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7fd fcd5 	bl	8001cac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <PCD_EP_OutSetupPacket_int+0x88>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d90c      	bls.n	8004324 <PCD_EP_OutSetupPacket_int+0x7c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d108      	bne.n	8004324 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800431c:	461a      	mov	r2, r3
 800431e:	2101      	movs	r1, #1
 8004320:	f003 f906 	bl	8007530 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	4f54300a 	.word	0x4f54300a

08004334 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
 8004340:	4613      	mov	r3, r2
 8004342:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004352:	883b      	ldrh	r3, [r7, #0]
 8004354:	0419      	lsls	r1, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	430a      	orrs	r2, r1
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
 8004360:	e028      	b.n	80043b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e00d      	b.n	8004392 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3340      	adds	r3, #64	; 0x40
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4413      	add	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	3301      	adds	r3, #1
 8004390:	73fb      	strb	r3, [r7, #15]
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	3b01      	subs	r3, #1
 8004398:	429a      	cmp	r2, r3
 800439a:	d3ec      	bcc.n	8004376 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800439c:	883b      	ldrh	r3, [r7, #0]
 800439e:	0418      	lsls	r0, r3, #16
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	4302      	orrs	r2, r0
 80043ac:	3340      	adds	r3, #64	; 0x40
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	887a      	ldrh	r2, [r7, #2]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004416:	f043 0303 	orr.w	r3, r3, #3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fd fec6 	bl	80022c4 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fec2 	bl	80022c4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4601      	mov	r1, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5cd3      	ldrb	r3, [r2, r3]
 80045de:	fa21 f303 	lsr.w	r3, r1, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fe3c 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	0800a81c 	.word	0x0800a81c
 8004608:	2000008c 	.word	0x2000008c
 800460c:	20000090 	.word	0x20000090

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	2300      	movs	r3, #0
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004626:	4b63      	ldr	r3, [pc, #396]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
 800462e:	2b04      	cmp	r3, #4
 8004630:	d007      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0x32>
 8004632:	2b08      	cmp	r3, #8
 8004634:	d008      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x38>
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 80b4 	bne.w	80047a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800463e:	60bb      	str	r3, [r7, #8]
       break;
 8004640:	e0b3      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004642:	4b5e      	ldr	r3, [pc, #376]	; (80047bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004644:	60bb      	str	r3, [r7, #8]
      break;
 8004646:	e0b0      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004648:	4b5a      	ldr	r3, [pc, #360]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004650:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004652:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04a      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465e:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	f04f 0400 	mov.w	r4, #0
 8004668:	f240 11ff 	movw	r1, #511	; 0x1ff
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	ea03 0501 	and.w	r5, r3, r1
 8004674:	ea04 0602 	and.w	r6, r4, r2
 8004678:	4629      	mov	r1, r5
 800467a:	4632      	mov	r2, r6
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	0154      	lsls	r4, r2, #5
 8004686:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800468a:	014b      	lsls	r3, r1, #5
 800468c:	4619      	mov	r1, r3
 800468e:	4622      	mov	r2, r4
 8004690:	1b49      	subs	r1, r1, r5
 8004692:	eb62 0206 	sbc.w	r2, r2, r6
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	f04f 0400 	mov.w	r4, #0
 800469e:	0194      	lsls	r4, r2, #6
 80046a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046a4:	018b      	lsls	r3, r1, #6
 80046a6:	1a5b      	subs	r3, r3, r1
 80046a8:	eb64 0402 	sbc.w	r4, r4, r2
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	00e2      	lsls	r2, r4, #3
 80046b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046ba:	00d9      	lsls	r1, r3, #3
 80046bc:	460b      	mov	r3, r1
 80046be:	4614      	mov	r4, r2
 80046c0:	195b      	adds	r3, r3, r5
 80046c2:	eb44 0406 	adc.w	r4, r4, r6
 80046c6:	f04f 0100 	mov.w	r1, #0
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	0262      	lsls	r2, r4, #9
 80046d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80046d4:	0259      	lsls	r1, r3, #9
 80046d6:	460b      	mov	r3, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	4621      	mov	r1, r4
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f04f 0400 	mov.w	r4, #0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4623      	mov	r3, r4
 80046e8:	f7fb fdfa 	bl	80002e0 <__aeabi_uldivmod>
 80046ec:	4603      	mov	r3, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e049      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f4:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	f04f 0400 	mov.w	r4, #0
 80046fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	ea03 0501 	and.w	r5, r3, r1
 800470a:	ea04 0602 	and.w	r6, r4, r2
 800470e:	4629      	mov	r1, r5
 8004710:	4632      	mov	r2, r6
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	0154      	lsls	r4, r2, #5
 800471c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004720:	014b      	lsls	r3, r1, #5
 8004722:	4619      	mov	r1, r3
 8004724:	4622      	mov	r2, r4
 8004726:	1b49      	subs	r1, r1, r5
 8004728:	eb62 0206 	sbc.w	r2, r2, r6
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	0194      	lsls	r4, r2, #6
 8004736:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800473a:	018b      	lsls	r3, r1, #6
 800473c:	1a5b      	subs	r3, r3, r1
 800473e:	eb64 0402 	sbc.w	r4, r4, r2
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	00e2      	lsls	r2, r4, #3
 800474c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004750:	00d9      	lsls	r1, r3, #3
 8004752:	460b      	mov	r3, r1
 8004754:	4614      	mov	r4, r2
 8004756:	195b      	adds	r3, r3, r5
 8004758:	eb44 0406 	adc.w	r4, r4, r6
 800475c:	f04f 0100 	mov.w	r1, #0
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	02a2      	lsls	r2, r4, #10
 8004766:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800476a:	0299      	lsls	r1, r3, #10
 800476c:	460b      	mov	r3, r1
 800476e:	4614      	mov	r4, r2
 8004770:	4618      	mov	r0, r3
 8004772:	4621      	mov	r1, r4
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f04f 0400 	mov.w	r4, #0
 800477a:	461a      	mov	r2, r3
 800477c:	4623      	mov	r3, r4
 800477e:	f7fb fdaf 	bl	80002e0 <__aeabi_uldivmod>
 8004782:	4603      	mov	r3, r0
 8004784:	460c      	mov	r4, r1
 8004786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	3301      	adds	r3, #1
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a0:	60bb      	str	r3, [r7, #8]
      break;
 80047a2:	e002      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047a6:	60bb      	str	r3, [r7, #8]
      break;
 80047a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047aa:	68bb      	ldr	r3, [r7, #8]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	007a1200 	.word	0x007a1200

080047c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000008c 	.word	0x2000008c

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4601      	mov	r1, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a9b      	lsrs	r3, r3, #10
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4a03      	ldr	r2, [pc, #12]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ee:	5cd3      	ldrb	r3, [r2, r3]
 80047f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800a82c 	.word	0x0800a82c

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004804:	f7ff ffdc 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8004808:	4601      	mov	r1, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0b5b      	lsrs	r3, r3, #13
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4a03      	ldr	r2, [pc, #12]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	0800a82c 	.word	0x0800a82c

08004828 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	220f      	movs	r2, #15
 8004836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0203 	and.w	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004844:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800486a:	4b07      	ldr	r3, [pc, #28]	; (8004888 <HAL_RCC_GetClockConfig+0x60>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 020f 	and.w	r2, r3, #15
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40023c00 	.word	0x40023c00

0800488c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80048b0:	4b7a      	ldr	r3, [pc, #488]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048b6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4977      	ldr	r1, [pc, #476]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d010      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80048de:	4b6f      	ldr	r3, [pc, #444]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	496b      	ldr	r1, [pc, #428]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80048fc:	2301      	movs	r3, #1
 80048fe:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d022      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 800490c:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800490e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004912:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	4960      	ldr	r1, [pc, #384]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800492a:	2301      	movs	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004936:	d10c      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004938:	4b58      	ldr	r3, [pc, #352]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800493a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	4954      	ldr	r1, [pc, #336]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d022      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800495e:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	494b      	ldr	r1, [pc, #300]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800498a:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	3b01      	subs	r3, #1
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	493f      	ldr	r1, [pc, #252]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 808a 	beq.w	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b39      	ldr	r3, [pc, #228]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a38      	ldr	r2, [pc, #224]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049ce:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049da:	f7fd fc73 	bl	80022c4 <HAL_GetTick>
 80049de:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fd fc6f 	bl	80022c4 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1d1      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049f4:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a00:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a08:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02f      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d028      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a26:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2e:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a34:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d114      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fd fc3d 	bl	80022c4 <HAL_GetTick>
 8004a4a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd fc39 	bl	80022c4 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e199      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ee      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7c:	d114      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a92:	4902      	ldr	r1, [pc, #8]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]
 8004a98:	e00c      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	40007000 	.word	0x40007000
 8004aa4:	42470e40 	.word	0x42470e40
 8004aa8:	4b89      	ldr	r3, [pc, #548]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a88      	ldr	r2, [pc, #544]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004aae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ab2:	6093      	str	r3, [r2, #8]
 8004ab4:	4b86      	ldr	r3, [pc, #536]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ab6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	4983      	ldr	r1, [pc, #524]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004ad8:	4b7e      	ldr	r3, [pc, #504]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004ada:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004ae8:	4b79      	ldr	r3, [pc, #484]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	4976      	ldr	r1, [pc, #472]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d011      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b0a:	4b71      	ldr	r3, [pc, #452]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	496d      	ldr	r1, [pc, #436]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	4961      	ldr	r1, [pc, #388]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d004      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b80      	cmp	r3, #128	; 0x80
 8004b5c:	f040 80c6 	bne.w	8004cec <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b60:	4b5d      	ldr	r3, [pc, #372]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b66:	f7fd fbad 	bl	80022c4 <HAL_GetTick>
 8004b6a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6e:	f7fd fba9 	bl	80022c4 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e10b      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004b8c:	4a53      	ldr	r2, [pc, #332]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b92:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d019      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d019      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d115      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bee:	d110      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	4931      	ldr	r1, [pc, #196]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d026      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d122      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c3a:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	019b      	lsls	r3, r3, #6
 8004c52:	431a      	orrs	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	061b      	lsls	r3, r3, #24
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	071b      	lsls	r3, r3, #28
 8004c60:	491b      	ldr	r1, [pc, #108]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004c68:	4b19      	ldr	r3, [pc, #100]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6e:	f023 021f 	bic.w	r2, r3, #31
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4915      	ldr	r1, [pc, #84]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	071b      	lsls	r3, r3, #28
 8004ca6:	490a      	ldr	r1, [pc, #40]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fd fb06 	bl	80022c4 <HAL_GetTick>
 8004cb8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cba:	e011      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cbc:	f7fd fb02 	bl	80022c4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d90a      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e064      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	424711e0 	.word	0x424711e0
 8004cd8:	42470068 	.word	0x42470068
 8004cdc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce0:	4b2f      	ldr	r3, [pc, #188]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0e7      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d06:	4926      	ldr	r1, [pc, #152]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d20:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	491d      	ldr	r1, [pc, #116]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	4915      	ldr	r1, [pc, #84]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	490c      	ldr	r1, [pc, #48]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d80:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	4904      	ldr	r1, [pc, #16]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800

08004da4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004daa:	f7fd fa8b 	bl	80022c4 <HAL_GetTick>
 8004dae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004db0:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5c      	ldr	r2, [pc, #368]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dbe:	f7fd fa81 	bl	80022c4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0a7      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004dd0:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8004ddc:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004de8:	f7fd fa6c 	bl	80022c4 <HAL_GetTick>
 8004dec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004dee:	4b4e      	ldr	r3, [pc, #312]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df6:	f7fd fa65 	bl	80022c4 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e089      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1ee      	bne.n	8004df6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004e18:	f7fd fa54 	bl	80022c4 <HAL_GetTick>
 8004e1c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8004e1e:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a41      	ldr	r2, [pc, #260]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e24:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8004e28:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7fd fa4a 	bl	80022c4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	; 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e070      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004e4a:	f7fd fa3b 	bl	80022c4 <HAL_GetTick>
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e50:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a34      	ldr	r2, [pc, #208]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fd fa31 	bl	80022c4 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e057      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004e7c:	f7fd fa22 	bl	80022c4 <HAL_GetTick>
 8004e80:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a28      	ldr	r2, [pc, #160]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004e88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e90:	f7fd fa18 	bl	80022c4 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e03e      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8004ea2:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_DeInit+0xec>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_RCC_DeInit+0x188>)
 8004eb2:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8004eb4:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_RCC_DeInit+0x188>)
 8004eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ec2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004ec6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a16      	ldr	r2, [pc, #88]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004eda:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8004ede:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eea:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004eec:	4b0e      	ldr	r3, [pc, #56]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efc:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <HAL_RCC_DeInit+0x184>)
 8004efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f02:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_DeInit+0x18c>)
 8004f06:	4a0b      	ldr	r2, [pc, #44]	; (8004f34 <HAL_RCC_DeInit+0x190>)
 8004f08:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCC_DeInit+0x194>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fc f9aa 	bl	8001268 <HAL_InitTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	24003010 	.word	0x24003010
 8004f30:	2000008c 	.word	0x2000008c
 8004f34:	00f42400 	.word	0x00f42400
 8004f38:	20000090 	.word	0x20000090

08004f3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d075      	beq.n	8005040 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f54:	4ba2      	ldr	r3, [pc, #648]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d00c      	beq.n	8004f7a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f60:	4b9f      	ldr	r3, [pc, #636]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d112      	bne.n	8004f92 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6c:	4b9c      	ldr	r3, [pc, #624]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7a:	4b99      	ldr	r3, [pc, #612]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d05b      	beq.n	800503e <HAL_RCC_OscConfig+0x102>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d157      	bne.n	800503e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e20b      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x6e>
 8004f9c:	4b90      	ldr	r3, [pc, #576]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a8f      	ldr	r2, [pc, #572]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e01d      	b.n	8004fe6 <HAL_RCC_OscConfig+0xaa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb2:	d10c      	bne.n	8004fce <HAL_RCC_OscConfig+0x92>
 8004fb4:	4b8a      	ldr	r3, [pc, #552]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a89      	ldr	r2, [pc, #548]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b87      	ldr	r3, [pc, #540]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a86      	ldr	r2, [pc, #536]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e00b      	b.n	8004fe6 <HAL_RCC_OscConfig+0xaa>
 8004fce:	4b84      	ldr	r3, [pc, #528]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a83      	ldr	r2, [pc, #524]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8004fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fd f969 	bl	80022c4 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff6:	f7fd f965 	bl	80022c4 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b64      	cmp	r3, #100	; 0x64
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e1d0      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005008:	4b75      	ldr	r3, [pc, #468]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0xba>
 8005014:	e014      	b.n	8005040 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fd f955 	bl	80022c4 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501e:	f7fd f951 	bl	80022c4 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e1bc      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005030:	4b6b      	ldr	r3, [pc, #428]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0xe2>
 800503c:	e000      	b.n	8005040 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d063      	beq.n	8005114 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800504c:	4b64      	ldr	r3, [pc, #400]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 030c 	and.w	r3, r3, #12
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005058:	4b61      	ldr	r3, [pc, #388]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005060:	2b08      	cmp	r3, #8
 8005062:	d11c      	bne.n	800509e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005064:	4b5e      	ldr	r3, [pc, #376]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d116      	bne.n	800509e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005070:	4b5b      	ldr	r3, [pc, #364]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x14c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d001      	beq.n	8005088 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e190      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b55      	ldr	r3, [pc, #340]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4952      	ldr	r1, [pc, #328]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509c:	e03a      	b.n	8005114 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a6:	4b4f      	ldr	r3, [pc, #316]	; (80051e4 <HAL_RCC_OscConfig+0x2a8>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fd f90a 	bl	80022c4 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b4:	f7fd f906 	bl	80022c4 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e171      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c6:	4b46      	ldr	r3, [pc, #280]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	493f      	ldr	r1, [pc, #252]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
 80050e6:	e015      	b.n	8005114 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e8:	4b3e      	ldr	r3, [pc, #248]	; (80051e4 <HAL_RCC_OscConfig+0x2a8>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ee:	f7fd f8e9 	bl	80022c4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f6:	f7fd f8e5 	bl	80022c4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e150      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005108:	4b35      	ldr	r3, [pc, #212]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d030      	beq.n	8005182 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d016      	beq.n	8005156 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005128:	4b2f      	ldr	r3, [pc, #188]	; (80051e8 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fd f8c9 	bl	80022c4 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005136:	f7fd f8c5 	bl	80022c4 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e130      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005148:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 800514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x1fa>
 8005154:	e015      	b.n	8005182 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005156:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fd f8b2 	bl	80022c4 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005164:	f7fd f8ae 	bl	80022c4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e119      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 809f 	beq.w	80052ce <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10f      	bne.n	80051c0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80051aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ae:	6413      	str	r3, [r2, #64]	; 0x40
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_RCC_OscConfig+0x2a4>)
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <HAL_RCC_OscConfig+0x2b0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d120      	bne.n	800520e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCC_OscConfig+0x2b0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <HAL_RCC_OscConfig+0x2b0>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d8:	f7fd f874 	bl	80022c4 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051de:	e010      	b.n	8005202 <HAL_RCC_OscConfig+0x2c6>
 80051e0:	40023800 	.word	0x40023800
 80051e4:	42470000 	.word	0x42470000
 80051e8:	42470e80 	.word	0x42470e80
 80051ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f0:	f7fd f868 	bl	80022c4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0d3      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005202:	4b6c      	ldr	r3, [pc, #432]	; (80053b4 <HAL_RCC_OscConfig+0x478>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d106      	bne.n	8005224 <HAL_RCC_OscConfig+0x2e8>
 8005216:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a67      	ldr	r2, [pc, #412]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
 8005222:	e01c      	b.n	800525e <HAL_RCC_OscConfig+0x322>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d10c      	bne.n	8005246 <HAL_RCC_OscConfig+0x30a>
 800522c:	4b62      	ldr	r3, [pc, #392]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a5e      	ldr	r2, [pc, #376]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	e00b      	b.n	800525e <HAL_RCC_OscConfig+0x322>
 8005246:	4b5c      	ldr	r3, [pc, #368]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a5b      	ldr	r2, [pc, #364]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
 8005252:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005258:	f023 0304 	bic.w	r3, r3, #4
 800525c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d015      	beq.n	8005292 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005266:	f7fd f82d 	bl	80022c4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526c:	e00a      	b.n	8005284 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800526e:	f7fd f829 	bl	80022c4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	f241 3288 	movw	r2, #5000	; 0x1388
 800527c:	4293      	cmp	r3, r2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e092      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ee      	beq.n	800526e <HAL_RCC_OscConfig+0x332>
 8005290:	e014      	b.n	80052bc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005292:	f7fd f817 	bl	80022c4 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd f813 	bl	80022c4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e07c      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c2:	4b3d      	ldr	r3, [pc, #244]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 80052c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c6:	4a3c      	ldr	r2, [pc, #240]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 80052c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d068      	beq.n	80053a8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d6:	4b38      	ldr	r3, [pc, #224]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d060      	beq.n	80053a4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d145      	bne.n	8005376 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	4b34      	ldr	r3, [pc, #208]	; (80053bc <HAL_RCC_OscConfig+0x480>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fc ffe8 	bl	80022c4 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f8:	f7fc ffe4 	bl	80022c4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e04f      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	019b      	lsls	r3, r3, #6
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	085b      	lsrs	r3, r3, #1
 800532e:	3b01      	subs	r3, #1
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	071b      	lsls	r3, r3, #28
 8005342:	491d      	ldr	r1, [pc, #116]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b1c      	ldr	r3, [pc, #112]	; (80053bc <HAL_RCC_OscConfig+0x480>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fc ffb9 	bl	80022c4 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fc ffb5 	bl	80022c4 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e020      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005368:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x41a>
 8005374:	e018      	b.n	80053a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCC_OscConfig+0x480>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fc ffa2 	bl	80022c4 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fc ff9e 	bl	80022c4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e009      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <HAL_RCC_OscConfig+0x47c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x448>
 80053a2:	e001      	b.n	80053a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40007000 	.word	0x40007000
 80053b8:	40023800 	.word	0x40023800
 80053bc:	42470060 	.word	0x42470060

080053c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e01d      	b.n	800540e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f815 	bl	8005416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 f968 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b085      	sub	sp, #20
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d007      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d122      	bne.n	80054ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d11b      	bne.n	80054ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0202 	mvn.w	r2, #2
 800549e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8ee 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 80054ba:	e005      	b.n	80054c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8e0 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8f1 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d122      	bne.n	8005522 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d11b      	bne.n	8005522 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f06f 0204 	mvn.w	r2, #4
 80054f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8c4 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 800550e:	e005      	b.n	800551c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8b6 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f8c7 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b08      	cmp	r3, #8
 800552e:	d122      	bne.n	8005576 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b08      	cmp	r3, #8
 800553c:	d11b      	bne.n	8005576 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0208 	mvn.w	r2, #8
 8005546:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f89a 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 8005562:	e005      	b.n	8005570 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f88c 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f89d 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b10      	cmp	r3, #16
 8005582:	d122      	bne.n	80055ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b10      	cmp	r3, #16
 8005590:	d11b      	bne.n	80055ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f06f 0210 	mvn.w	r2, #16
 800559a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2208      	movs	r2, #8
 80055a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f870 	bl	8005696 <HAL_TIM_IC_CaptureCallback>
 80055b6:	e005      	b.n	80055c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f862 	bl	8005682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f873 	bl	80056aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10e      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0201 	mvn.w	r2, #1
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7fb fdfb 	bl	80011ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b80      	cmp	r3, #128	; 0x80
 8005602:	d10e      	bne.n	8005622 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b80      	cmp	r3, #128	; 0x80
 8005610:	d107      	bne.n	8005622 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f903 	bl	8005828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d10e      	bne.n	800564e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d107      	bne.n	800564e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f838 	bl	80056be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b20      	cmp	r3, #32
 800565a:	d10e      	bne.n	800567a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d107      	bne.n	800567a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0220 	mvn.w	r2, #32
 8005672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8cd 	bl	8005814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <TIM_Base_SetConfig+0x114>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d00f      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <TIM_Base_SetConfig+0x118>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3c      	ldr	r2, [pc, #240]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <TIM_Base_SetConfig+0x120>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3a      	ldr	r2, [pc, #232]	; (80057f8 <TIM_Base_SetConfig+0x124>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d108      	bne.n	8005726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2f      	ldr	r2, [pc, #188]	; (80057e8 <TIM_Base_SetConfig+0x114>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d02b      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005734:	d027      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <TIM_Base_SetConfig+0x118>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d023      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2b      	ldr	r2, [pc, #172]	; (80057f0 <TIM_Base_SetConfig+0x11c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01f      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2a      	ldr	r2, [pc, #168]	; (80057f4 <TIM_Base_SetConfig+0x120>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01b      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a29      	ldr	r2, [pc, #164]	; (80057f8 <TIM_Base_SetConfig+0x124>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d017      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a28      	ldr	r2, [pc, #160]	; (80057fc <TIM_Base_SetConfig+0x128>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a27      	ldr	r2, [pc, #156]	; (8005800 <TIM_Base_SetConfig+0x12c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00f      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <TIM_Base_SetConfig+0x130>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <TIM_Base_SetConfig+0x134>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a24      	ldr	r2, [pc, #144]	; (800580c <TIM_Base_SetConfig+0x138>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a23      	ldr	r2, [pc, #140]	; (8005810 <TIM_Base_SetConfig+0x13c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d108      	bne.n	8005798 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <TIM_Base_SetConfig+0x114>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d003      	beq.n	80057cc <TIM_Base_SetConfig+0xf8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <TIM_Base_SetConfig+0x124>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d103      	bne.n	80057d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	615a      	str	r2, [r3, #20]
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800
 8005808:	40001800 	.word	0x40001800
 800580c:	40001c00 	.word	0x40001c00
 8005810:	40002000 	.word	0x40002000

08005814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e03f      	b.n	80058ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7fb fe98 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	; 0x24
 800586c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800587e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f90b 	bl	8005a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b088      	sub	sp, #32
 80058da:	af02      	add	r7, sp, #8
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	f040 8083 	bne.w	80059fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Transmit+0x2e>
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e07b      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_UART_Transmit+0x40>
 8005912:	2302      	movs	r3, #2
 8005914:	e074      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2221      	movs	r2, #33	; 0x21
 8005928:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800592c:	f7fc fcca 	bl	80022c4 <HAL_GetTick>
 8005930:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005946:	e042      	b.n	80059ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595e:	d122      	bne.n	80059a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2200      	movs	r2, #0
 8005968:	2180      	movs	r1, #128	; 0x80
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f84c 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e042      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800598c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3302      	adds	r3, #2
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	e017      	b.n	80059ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	e013      	b.n	80059ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f829 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e01f      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	60ba      	str	r2, [r7, #8]
 80059c6:	781a      	ldrb	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1b7      	bne.n	8005948 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	2140      	movs	r1, #64	; 0x40
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f810 	bl	8005a08 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e006      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	e000      	b.n	8005a00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80059fe:	2302      	movs	r3, #2
  }
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a18:	e02c      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d028      	beq.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d007      	beq.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a28:	f7fc fc4c 	bl	80022c4 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d21d      	bcs.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e00f      	b.n	8005a94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d0c3      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ade:	f023 030c 	bic.w	r3, r3, #12
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	6812      	ldr	r2, [r2, #0]
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0a:	f040 8199 	bne.w	8005e40 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4ac6      	ldr	r2, [pc, #792]	; (8005e2c <UART_SetConfig+0x390>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00f      	beq.n	8005b38 <UART_SetConfig+0x9c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4ac4      	ldr	r2, [pc, #784]	; (8005e30 <UART_SetConfig+0x394>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00a      	beq.n	8005b38 <UART_SetConfig+0x9c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4ac3      	ldr	r2, [pc, #780]	; (8005e34 <UART_SetConfig+0x398>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d005      	beq.n	8005b38 <UART_SetConfig+0x9c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4ac1      	ldr	r2, [pc, #772]	; (8005e38 <UART_SetConfig+0x39c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	f040 80bd 	bne.w	8005cb2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fe fe62 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	461d      	mov	r5, r3
 8005b42:	f04f 0600 	mov.w	r6, #0
 8005b46:	46a8      	mov	r8, r5
 8005b48:	46b1      	mov	r9, r6
 8005b4a:	eb18 0308 	adds.w	r3, r8, r8
 8005b4e:	eb49 0409 	adc.w	r4, r9, r9
 8005b52:	4698      	mov	r8, r3
 8005b54:	46a1      	mov	r9, r4
 8005b56:	eb18 0805 	adds.w	r8, r8, r5
 8005b5a:	eb49 0906 	adc.w	r9, r9, r6
 8005b5e:	f04f 0100 	mov.w	r1, #0
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b72:	4688      	mov	r8, r1
 8005b74:	4691      	mov	r9, r2
 8005b76:	eb18 0005 	adds.w	r0, r8, r5
 8005b7a:	eb49 0106 	adc.w	r1, r9, r6
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	461d      	mov	r5, r3
 8005b84:	f04f 0600 	mov.w	r6, #0
 8005b88:	196b      	adds	r3, r5, r5
 8005b8a:	eb46 0406 	adc.w	r4, r6, r6
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4623      	mov	r3, r4
 8005b92:	f7fa fba5 	bl	80002e0 <__aeabi_uldivmod>
 8005b96:	4603      	mov	r3, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4ba7      	ldr	r3, [pc, #668]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	461d      	mov	r5, r3
 8005bac:	f04f 0600 	mov.w	r6, #0
 8005bb0:	46a9      	mov	r9, r5
 8005bb2:	46b2      	mov	sl, r6
 8005bb4:	eb19 0309 	adds.w	r3, r9, r9
 8005bb8:	eb4a 040a 	adc.w	r4, sl, sl
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	46a2      	mov	sl, r4
 8005bc0:	eb19 0905 	adds.w	r9, r9, r5
 8005bc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005bc8:	f04f 0100 	mov.w	r1, #0
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bdc:	4689      	mov	r9, r1
 8005bde:	4692      	mov	sl, r2
 8005be0:	eb19 0005 	adds.w	r0, r9, r5
 8005be4:	eb4a 0106 	adc.w	r1, sl, r6
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	461d      	mov	r5, r3
 8005bee:	f04f 0600 	mov.w	r6, #0
 8005bf2:	196b      	adds	r3, r5, r5
 8005bf4:	eb46 0406 	adc.w	r4, r6, r6
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	f7fa fb70 	bl	80002e0 <__aeabi_uldivmod>
 8005c00:	4603      	mov	r3, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	461a      	mov	r2, r3
 8005c06:	4b8d      	ldr	r3, [pc, #564]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005c08:	fba3 1302 	umull	r1, r3, r3, r2
 8005c0c:	095b      	lsrs	r3, r3, #5
 8005c0e:	2164      	movs	r1, #100	; 0x64
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	3332      	adds	r3, #50	; 0x32
 8005c1a:	4a88      	ldr	r2, [pc, #544]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c28:	4498      	add	r8, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	461d      	mov	r5, r3
 8005c2e:	f04f 0600 	mov.w	r6, #0
 8005c32:	46a9      	mov	r9, r5
 8005c34:	46b2      	mov	sl, r6
 8005c36:	eb19 0309 	adds.w	r3, r9, r9
 8005c3a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c3e:	4699      	mov	r9, r3
 8005c40:	46a2      	mov	sl, r4
 8005c42:	eb19 0905 	adds.w	r9, r9, r5
 8005c46:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c4a:	f04f 0100 	mov.w	r1, #0
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c5e:	4689      	mov	r9, r1
 8005c60:	4692      	mov	sl, r2
 8005c62:	eb19 0005 	adds.w	r0, r9, r5
 8005c66:	eb4a 0106 	adc.w	r1, sl, r6
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	461d      	mov	r5, r3
 8005c70:	f04f 0600 	mov.w	r6, #0
 8005c74:	196b      	adds	r3, r5, r5
 8005c76:	eb46 0406 	adc.w	r4, r6, r6
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4623      	mov	r3, r4
 8005c7e:	f7fa fb2f 	bl	80002e0 <__aeabi_uldivmod>
 8005c82:	4603      	mov	r3, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	461a      	mov	r2, r3
 8005c88:	4b6c      	ldr	r3, [pc, #432]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	2164      	movs	r1, #100	; 0x64
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	3332      	adds	r3, #50	; 0x32
 8005c9c:	4a67      	ldr	r2, [pc, #412]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f003 0207 	and.w	r2, r3, #7
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4442      	add	r2, r8
 8005cae:	609a      	str	r2, [r3, #8]
 8005cb0:	e27d      	b.n	80061ae <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cb2:	f7fe fd91 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8005cb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	461d      	mov	r5, r3
 8005cbc:	f04f 0600 	mov.w	r6, #0
 8005cc0:	46a8      	mov	r8, r5
 8005cc2:	46b1      	mov	r9, r6
 8005cc4:	eb18 0308 	adds.w	r3, r8, r8
 8005cc8:	eb49 0409 	adc.w	r4, r9, r9
 8005ccc:	4698      	mov	r8, r3
 8005cce:	46a1      	mov	r9, r4
 8005cd0:	eb18 0805 	adds.w	r8, r8, r5
 8005cd4:	eb49 0906 	adc.w	r9, r9, r6
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ce4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ce8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cec:	4688      	mov	r8, r1
 8005cee:	4691      	mov	r9, r2
 8005cf0:	eb18 0005 	adds.w	r0, r8, r5
 8005cf4:	eb49 0106 	adc.w	r1, r9, r6
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	f04f 0600 	mov.w	r6, #0
 8005d02:	196b      	adds	r3, r5, r5
 8005d04:	eb46 0406 	adc.w	r4, r6, r6
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	f7fa fae8 	bl	80002e0 <__aeabi_uldivmod>
 8005d10:	4603      	mov	r3, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b49      	ldr	r3, [pc, #292]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005d18:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1c:	095b      	lsrs	r3, r3, #5
 8005d1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	461d      	mov	r5, r3
 8005d26:	f04f 0600 	mov.w	r6, #0
 8005d2a:	46a9      	mov	r9, r5
 8005d2c:	46b2      	mov	sl, r6
 8005d2e:	eb19 0309 	adds.w	r3, r9, r9
 8005d32:	eb4a 040a 	adc.w	r4, sl, sl
 8005d36:	4699      	mov	r9, r3
 8005d38:	46a2      	mov	sl, r4
 8005d3a:	eb19 0905 	adds.w	r9, r9, r5
 8005d3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d42:	f04f 0100 	mov.w	r1, #0
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d56:	4689      	mov	r9, r1
 8005d58:	4692      	mov	sl, r2
 8005d5a:	eb19 0005 	adds.w	r0, r9, r5
 8005d5e:	eb4a 0106 	adc.w	r1, sl, r6
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	461d      	mov	r5, r3
 8005d68:	f04f 0600 	mov.w	r6, #0
 8005d6c:	196b      	adds	r3, r5, r5
 8005d6e:	eb46 0406 	adc.w	r4, r6, r6
 8005d72:	461a      	mov	r2, r3
 8005d74:	4623      	mov	r3, r4
 8005d76:	f7fa fab3 	bl	80002e0 <__aeabi_uldivmod>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4b2e      	ldr	r3, [pc, #184]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005d82:	fba3 1302 	umull	r1, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2164      	movs	r1, #100	; 0x64
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	3332      	adds	r3, #50	; 0x32
 8005d94:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005da2:	4498      	add	r8, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	461d      	mov	r5, r3
 8005da8:	f04f 0600 	mov.w	r6, #0
 8005dac:	46a9      	mov	r9, r5
 8005dae:	46b2      	mov	sl, r6
 8005db0:	eb19 0309 	adds.w	r3, r9, r9
 8005db4:	eb4a 040a 	adc.w	r4, sl, sl
 8005db8:	4699      	mov	r9, r3
 8005dba:	46a2      	mov	sl, r4
 8005dbc:	eb19 0905 	adds.w	r9, r9, r5
 8005dc0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dc4:	f04f 0100 	mov.w	r1, #0
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd8:	4689      	mov	r9, r1
 8005dda:	4692      	mov	sl, r2
 8005ddc:	eb19 0005 	adds.w	r0, r9, r5
 8005de0:	eb4a 0106 	adc.w	r1, sl, r6
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	461d      	mov	r5, r3
 8005dea:	f04f 0600 	mov.w	r6, #0
 8005dee:	196b      	adds	r3, r5, r5
 8005df0:	eb46 0406 	adc.w	r4, r6, r6
 8005df4:	461a      	mov	r2, r3
 8005df6:	4623      	mov	r3, r4
 8005df8:	f7fa fa72 	bl	80002e0 <__aeabi_uldivmod>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	461a      	mov	r2, r3
 8005e02:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005e04:	fba3 1302 	umull	r1, r3, r3, r2
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	2164      	movs	r1, #100	; 0x64
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	3332      	adds	r3, #50	; 0x32
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <UART_SetConfig+0x3a0>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	f003 0207 	and.w	r2, r3, #7
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4442      	add	r2, r8
 8005e28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e2a:	e1c0      	b.n	80061ae <UART_SetConfig+0x712>
 8005e2c:	40011000 	.word	0x40011000
 8005e30:	40011400 	.word	0x40011400
 8005e34:	40011800 	.word	0x40011800
 8005e38:	40011c00 	.word	0x40011c00
 8005e3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4adc      	ldr	r2, [pc, #880]	; (80061b8 <UART_SetConfig+0x71c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00f      	beq.n	8005e6a <UART_SetConfig+0x3ce>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4adb      	ldr	r2, [pc, #876]	; (80061bc <UART_SetConfig+0x720>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00a      	beq.n	8005e6a <UART_SetConfig+0x3ce>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4ad9      	ldr	r2, [pc, #868]	; (80061c0 <UART_SetConfig+0x724>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d005      	beq.n	8005e6a <UART_SetConfig+0x3ce>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4ad8      	ldr	r2, [pc, #864]	; (80061c4 <UART_SetConfig+0x728>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	f040 80d1 	bne.w	800600c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e6a:	f7fe fcc9 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 8005e6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	469a      	mov	sl, r3
 8005e74:	f04f 0b00 	mov.w	fp, #0
 8005e78:	46d0      	mov	r8, sl
 8005e7a:	46d9      	mov	r9, fp
 8005e7c:	eb18 0308 	adds.w	r3, r8, r8
 8005e80:	eb49 0409 	adc.w	r4, r9, r9
 8005e84:	4698      	mov	r8, r3
 8005e86:	46a1      	mov	r9, r4
 8005e88:	eb18 080a 	adds.w	r8, r8, sl
 8005e8c:	eb49 090b 	adc.w	r9, r9, fp
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ea0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ea4:	4688      	mov	r8, r1
 8005ea6:	4691      	mov	r9, r2
 8005ea8:	eb1a 0508 	adds.w	r5, sl, r8
 8005eac:	eb4b 0609 	adc.w	r6, fp, r9
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	f04f 0400 	mov.w	r4, #0
 8005ec2:	0094      	lsls	r4, r2, #2
 8005ec4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ec8:	008b      	lsls	r3, r1, #2
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4623      	mov	r3, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	f7fa fa05 	bl	80002e0 <__aeabi_uldivmod>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	460c      	mov	r4, r1
 8005eda:	461a      	mov	r2, r3
 8005edc:	4bba      	ldr	r3, [pc, #744]	; (80061c8 <UART_SetConfig+0x72c>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	469b      	mov	fp, r3
 8005eec:	f04f 0c00 	mov.w	ip, #0
 8005ef0:	46d9      	mov	r9, fp
 8005ef2:	46e2      	mov	sl, ip
 8005ef4:	eb19 0309 	adds.w	r3, r9, r9
 8005ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8005efc:	4699      	mov	r9, r3
 8005efe:	46a2      	mov	sl, r4
 8005f00:	eb19 090b 	adds.w	r9, r9, fp
 8005f04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f1c:	4689      	mov	r9, r1
 8005f1e:	4692      	mov	sl, r2
 8005f20:	eb1b 0509 	adds.w	r5, fp, r9
 8005f24:	eb4c 060a 	adc.w	r6, ip, sl
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f04f 0300 	mov.w	r3, #0
 8005f36:	f04f 0400 	mov.w	r4, #0
 8005f3a:	0094      	lsls	r4, r2, #2
 8005f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f40:	008b      	lsls	r3, r1, #2
 8005f42:	461a      	mov	r2, r3
 8005f44:	4623      	mov	r3, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	4631      	mov	r1, r6
 8005f4a:	f7fa f9c9 	bl	80002e0 <__aeabi_uldivmod>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	460c      	mov	r4, r1
 8005f52:	461a      	mov	r2, r3
 8005f54:	4b9c      	ldr	r3, [pc, #624]	; (80061c8 <UART_SetConfig+0x72c>)
 8005f56:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	2164      	movs	r1, #100	; 0x64
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	3332      	adds	r3, #50	; 0x32
 8005f68:	4a97      	ldr	r2, [pc, #604]	; (80061c8 <UART_SetConfig+0x72c>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	095b      	lsrs	r3, r3, #5
 8005f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f74:	4498      	add	r8, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	469b      	mov	fp, r3
 8005f7a:	f04f 0c00 	mov.w	ip, #0
 8005f7e:	46d9      	mov	r9, fp
 8005f80:	46e2      	mov	sl, ip
 8005f82:	eb19 0309 	adds.w	r3, r9, r9
 8005f86:	eb4a 040a 	adc.w	r4, sl, sl
 8005f8a:	4699      	mov	r9, r3
 8005f8c:	46a2      	mov	sl, r4
 8005f8e:	eb19 090b 	adds.w	r9, r9, fp
 8005f92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005faa:	4689      	mov	r9, r1
 8005fac:	4692      	mov	sl, r2
 8005fae:	eb1b 0509 	adds.w	r5, fp, r9
 8005fb2:	eb4c 060a 	adc.w	r6, ip, sl
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	f04f 0400 	mov.w	r4, #0
 8005fc8:	0094      	lsls	r4, r2, #2
 8005fca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fce:	008b      	lsls	r3, r1, #2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	f7fa f982 	bl	80002e0 <__aeabi_uldivmod>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b79      	ldr	r3, [pc, #484]	; (80061c8 <UART_SetConfig+0x72c>)
 8005fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	2164      	movs	r1, #100	; 0x64
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	3332      	adds	r3, #50	; 0x32
 8005ff6:	4a74      	ldr	r2, [pc, #464]	; (80061c8 <UART_SetConfig+0x72c>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4442      	add	r2, r8
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	e0d0      	b.n	80061ae <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800600c:	f7fe fbe4 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8006010:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	469a      	mov	sl, r3
 8006016:	f04f 0b00 	mov.w	fp, #0
 800601a:	46d0      	mov	r8, sl
 800601c:	46d9      	mov	r9, fp
 800601e:	eb18 0308 	adds.w	r3, r8, r8
 8006022:	eb49 0409 	adc.w	r4, r9, r9
 8006026:	4698      	mov	r8, r3
 8006028:	46a1      	mov	r9, r4
 800602a:	eb18 080a 	adds.w	r8, r8, sl
 800602e:	eb49 090b 	adc.w	r9, r9, fp
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800603e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006042:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006046:	4688      	mov	r8, r1
 8006048:	4691      	mov	r9, r2
 800604a:	eb1a 0508 	adds.w	r5, sl, r8
 800604e:	eb4b 0609 	adc.w	r6, fp, r9
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4619      	mov	r1, r3
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	f04f 0400 	mov.w	r4, #0
 8006064:	0094      	lsls	r4, r2, #2
 8006066:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800606a:	008b      	lsls	r3, r1, #2
 800606c:	461a      	mov	r2, r3
 800606e:	4623      	mov	r3, r4
 8006070:	4628      	mov	r0, r5
 8006072:	4631      	mov	r1, r6
 8006074:	f7fa f934 	bl	80002e0 <__aeabi_uldivmod>
 8006078:	4603      	mov	r3, r0
 800607a:	460c      	mov	r4, r1
 800607c:	461a      	mov	r2, r3
 800607e:	4b52      	ldr	r3, [pc, #328]	; (80061c8 <UART_SetConfig+0x72c>)
 8006080:	fba3 2302 	umull	r2, r3, r3, r2
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	469b      	mov	fp, r3
 800608e:	f04f 0c00 	mov.w	ip, #0
 8006092:	46d9      	mov	r9, fp
 8006094:	46e2      	mov	sl, ip
 8006096:	eb19 0309 	adds.w	r3, r9, r9
 800609a:	eb4a 040a 	adc.w	r4, sl, sl
 800609e:	4699      	mov	r9, r3
 80060a0:	46a2      	mov	sl, r4
 80060a2:	eb19 090b 	adds.w	r9, r9, fp
 80060a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060aa:	f04f 0100 	mov.w	r1, #0
 80060ae:	f04f 0200 	mov.w	r2, #0
 80060b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060be:	4689      	mov	r9, r1
 80060c0:	4692      	mov	sl, r2
 80060c2:	eb1b 0509 	adds.w	r5, fp, r9
 80060c6:	eb4c 060a 	adc.w	r6, ip, sl
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	0094      	lsls	r4, r2, #2
 80060de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060e2:	008b      	lsls	r3, r1, #2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4623      	mov	r3, r4
 80060e8:	4628      	mov	r0, r5
 80060ea:	4631      	mov	r1, r6
 80060ec:	f7fa f8f8 	bl	80002e0 <__aeabi_uldivmod>
 80060f0:	4603      	mov	r3, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b34      	ldr	r3, [pc, #208]	; (80061c8 <UART_SetConfig+0x72c>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <UART_SetConfig+0x72c>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006116:	4498      	add	r8, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	469b      	mov	fp, r3
 800611c:	f04f 0c00 	mov.w	ip, #0
 8006120:	46d9      	mov	r9, fp
 8006122:	46e2      	mov	sl, ip
 8006124:	eb19 0309 	adds.w	r3, r9, r9
 8006128:	eb4a 040a 	adc.w	r4, sl, sl
 800612c:	4699      	mov	r9, r3
 800612e:	46a2      	mov	sl, r4
 8006130:	eb19 090b 	adds.w	r9, r9, fp
 8006134:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006138:	f04f 0100 	mov.w	r1, #0
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006144:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006148:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800614c:	4689      	mov	r9, r1
 800614e:	4692      	mov	sl, r2
 8006150:	eb1b 0509 	adds.w	r5, fp, r9
 8006154:	eb4c 060a 	adc.w	r6, ip, sl
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	4619      	mov	r1, r3
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	f04f 0400 	mov.w	r4, #0
 800616a:	0094      	lsls	r4, r2, #2
 800616c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006170:	008b      	lsls	r3, r1, #2
 8006172:	461a      	mov	r2, r3
 8006174:	4623      	mov	r3, r4
 8006176:	4628      	mov	r0, r5
 8006178:	4631      	mov	r1, r6
 800617a:	f7fa f8b1 	bl	80002e0 <__aeabi_uldivmod>
 800617e:	4603      	mov	r3, r0
 8006180:	460c      	mov	r4, r1
 8006182:	461a      	mov	r2, r3
 8006184:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <UART_SetConfig+0x72c>)
 8006186:	fba3 1302 	umull	r1, r3, r3, r2
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	2164      	movs	r1, #100	; 0x64
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	3332      	adds	r3, #50	; 0x32
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <UART_SetConfig+0x72c>)
 800619a:	fba2 2303 	umull	r2, r3, r2, r3
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4442      	add	r2, r8
 80061aa:	609a      	str	r2, [r3, #8]
}
 80061ac:	e7ff      	b.n	80061ae <UART_SetConfig+0x712>
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	40011000 	.word	0x40011000
 80061bc:	40011400 	.word	0x40011400
 80061c0:	40011800 	.word	0x40011800
 80061c4:	40011c00 	.word	0x40011c00
 80061c8:	51eb851f 	.word	0x51eb851f

080061cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061cc:	b084      	sub	sp, #16
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	f107 001c 	add.w	r0, r7, #28
 80061da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d122      	bne.n	800622a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d105      	bne.n	800621e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 f9e4 	bl	80075ec <USB_CoreReset>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	e01a      	b.n	8006260 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 f9d8 	bl	80075ec <USB_CoreReset>
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
 8006252:	e005      	b.n	8006260 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b01      	cmp	r3, #1
 8006264:	d10b      	bne.n	800627e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f043 0206 	orr.w	r2, r3, #6
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800627e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800628a:	b004      	add	sp, #16
 800628c:	4770      	bx	lr
	...

08006290 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d165      	bne.n	8006370 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4a41      	ldr	r2, [pc, #260]	; (80063ac <USB_SetTurnaroundTime+0x11c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d906      	bls.n	80062ba <USB_SetTurnaroundTime+0x2a>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a40      	ldr	r2, [pc, #256]	; (80063b0 <USB_SetTurnaroundTime+0x120>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d802      	bhi.n	80062ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062b4:	230f      	movs	r3, #15
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e062      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a3c      	ldr	r2, [pc, #240]	; (80063b0 <USB_SetTurnaroundTime+0x120>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d906      	bls.n	80062d0 <USB_SetTurnaroundTime+0x40>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a3b      	ldr	r2, [pc, #236]	; (80063b4 <USB_SetTurnaroundTime+0x124>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d802      	bhi.n	80062d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062ca:	230e      	movs	r3, #14
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e057      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4a38      	ldr	r2, [pc, #224]	; (80063b4 <USB_SetTurnaroundTime+0x124>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d906      	bls.n	80062e6 <USB_SetTurnaroundTime+0x56>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a37      	ldr	r2, [pc, #220]	; (80063b8 <USB_SetTurnaroundTime+0x128>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d802      	bhi.n	80062e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80062e0:	230d      	movs	r3, #13
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e04c      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4a33      	ldr	r2, [pc, #204]	; (80063b8 <USB_SetTurnaroundTime+0x128>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d906      	bls.n	80062fc <USB_SetTurnaroundTime+0x6c>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a32      	ldr	r2, [pc, #200]	; (80063bc <USB_SetTurnaroundTime+0x12c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d802      	bhi.n	80062fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062f6:	230c      	movs	r3, #12
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e041      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4a2f      	ldr	r2, [pc, #188]	; (80063bc <USB_SetTurnaroundTime+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d906      	bls.n	8006312 <USB_SetTurnaroundTime+0x82>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <USB_SetTurnaroundTime+0x130>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d802      	bhi.n	8006312 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800630c:	230b      	movs	r3, #11
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e036      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <USB_SetTurnaroundTime+0x130>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d906      	bls.n	8006328 <USB_SetTurnaroundTime+0x98>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <USB_SetTurnaroundTime+0x134>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d802      	bhi.n	8006328 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006322:	230a      	movs	r3, #10
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e02b      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a26      	ldr	r2, [pc, #152]	; (80063c4 <USB_SetTurnaroundTime+0x134>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d906      	bls.n	800633e <USB_SetTurnaroundTime+0xae>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <USB_SetTurnaroundTime+0x138>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d802      	bhi.n	800633e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006338:	2309      	movs	r3, #9
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e020      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <USB_SetTurnaroundTime+0x138>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d906      	bls.n	8006354 <USB_SetTurnaroundTime+0xc4>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	4a20      	ldr	r2, [pc, #128]	; (80063cc <USB_SetTurnaroundTime+0x13c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d802      	bhi.n	8006354 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800634e:	2308      	movs	r3, #8
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e015      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <USB_SetTurnaroundTime+0x13c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d906      	bls.n	800636a <USB_SetTurnaroundTime+0xda>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <USB_SetTurnaroundTime+0x140>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d802      	bhi.n	800636a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006364:	2307      	movs	r3, #7
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e00a      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800636a:	2306      	movs	r3, #6
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	e007      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006376:	2309      	movs	r3, #9
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e001      	b.n	8006380 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800637c:	2309      	movs	r3, #9
 800637e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	00d8acbf 	.word	0x00d8acbf
 80063b0:	00e4e1bf 	.word	0x00e4e1bf
 80063b4:	00f423ff 	.word	0x00f423ff
 80063b8:	0106737f 	.word	0x0106737f
 80063bc:	011a499f 	.word	0x011a499f
 80063c0:	01312cff 	.word	0x01312cff
 80063c4:	014ca43f 	.word	0x014ca43f
 80063c8:	016e35ff 	.word	0x016e35ff
 80063cc:	01a6ab1f 	.word	0x01a6ab1f
 80063d0:	01e847ff 	.word	0x01e847ff

080063d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f043 0201 	orr.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 0201 	bic.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d106      	bne.n	8006444 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60da      	str	r2, [r3, #12]
 8006442:	e00b      	b.n	800645c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e001      	b.n	800645c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e003      	b.n	8006464 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800645c:	2032      	movs	r0, #50	; 0x32
 800645e:	f7fb ff3d 	bl	80022dc <HAL_Delay>

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800646c:	b084      	sub	sp, #16
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800647a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006486:	2300      	movs	r3, #0
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	e009      	b.n	80064a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3340      	adds	r3, #64	; 0x40
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	2200      	movs	r2, #0
 8006498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	3301      	adds	r3, #1
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b0e      	cmp	r3, #14
 80064a4:	d9f2      	bls.n	800648c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80064a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11c      	bne.n	80064e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ba:	f043 0302 	orr.w	r3, r3, #2
 80064be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e005      	b.n	80064f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006504:	4619      	mov	r1, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650c:	461a      	mov	r2, r3
 800650e:	680b      	ldr	r3, [r1, #0]
 8006510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	2b01      	cmp	r3, #1
 8006516:	d10c      	bne.n	8006532 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800651e:	2100      	movs	r1, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f949 	bl	80067b8 <USB_SetDevSpeed>
 8006526:	e008      	b.n	800653a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006528:	2101      	movs	r1, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f944 	bl	80067b8 <USB_SetDevSpeed>
 8006530:	e003      	b.n	800653a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006532:	2103      	movs	r1, #3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f93f 	bl	80067b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800653a:	2110      	movs	r1, #16
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8f3 	bl	8006728 <USB_FlushTxFifo>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f911 	bl	8006774 <USB_FlushRxFifo>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	461a      	mov	r2, r3
 8006564:	2300      	movs	r3, #0
 8006566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	461a      	mov	r2, r3
 8006570:	2300      	movs	r3, #0
 8006572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006580:	2300      	movs	r3, #0
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e043      	b.n	800660e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659c:	d118      	bne.n	80065d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10a      	bne.n	80065ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b0:	461a      	mov	r2, r3
 80065b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	e013      	b.n	80065e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c6:	461a      	mov	r2, r3
 80065c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e008      	b.n	80065e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065dc:	461a      	mov	r2, r3
 80065de:	2300      	movs	r3, #0
 80065e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ee:	461a      	mov	r2, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	461a      	mov	r2, r3
 8006602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	3301      	adds	r3, #1
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	429a      	cmp	r2, r3
 8006614:	d3b7      	bcc.n	8006586 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006616:	2300      	movs	r3, #0
 8006618:	613b      	str	r3, [r7, #16]
 800661a:	e043      	b.n	80066a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006632:	d118      	bne.n	8006666 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006646:	461a      	mov	r2, r3
 8006648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800664c:	6013      	str	r3, [r2, #0]
 800664e:	e013      	b.n	8006678 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e008      	b.n	8006678 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	461a      	mov	r2, r3
 8006674:	2300      	movs	r3, #0
 8006676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006684:	461a      	mov	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	461a      	mov	r2, r3
 8006698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800669c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d3b7      	bcc.n	800661c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80066cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	f043 0210 	orr.w	r2, r3, #16
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699a      	ldr	r2, [r3, #24]
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <USB_DevInit+0x2b8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f043 0208 	orr.w	r2, r3, #8
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800670c:	f043 0304 	orr.w	r3, r3, #4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006720:	b004      	add	sp, #16
 8006722:	4770      	bx	lr
 8006724:	803c3800 	.word	0x803c3800

08006728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <USB_FlushTxFifo+0x48>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e006      	b.n	8006762 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d0f0      	beq.n	8006742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	00030d40 	.word	0x00030d40

08006774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2210      	movs	r2, #16
 8006784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <USB_FlushRxFifo+0x40>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e006      	b.n	80067a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d0f0      	beq.n	8006786 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b087      	sub	sp, #28
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0306 	and.w	r3, r3, #6
 8006802:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800680a:	2300      	movs	r3, #0
 800680c:	75fb      	strb	r3, [r7, #23]
 800680e:	e00a      	b.n	8006826 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d002      	beq.n	800681c <USB_GetDevSpeed+0x32>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b06      	cmp	r3, #6
 800681a:	d102      	bne.n	8006822 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800681c:	2302      	movs	r3, #2
 800681e:	75fb      	strb	r3, [r7, #23]
 8006820:	e001      	b.n	8006826 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006822:	230f      	movs	r3, #15
 8006824:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d13a      	bne.n	80068c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	2101      	movs	r1, #1
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	b29b      	uxth	r3, r3
 8006868:	68f9      	ldr	r1, [r7, #12]
 800686a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686e:	4313      	orrs	r3, r2
 8006870:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d155      	bne.n	8006934 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4413      	add	r3, r2
 8006890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068ac:	4313      	orrs	r3, r2
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e036      	b.n	8006934 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	2101      	movs	r1, #1
 80068d8:	fa01 f303 	lsl.w	r3, r1, r3
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	68f9      	ldr	r1, [r7, #12]
 80068e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11a      	bne.n	8006934 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800691a:	430b      	orrs	r3, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	440a      	add	r2, r1
 8006926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006932:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4613      	mov	r3, r2
 8006950:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b01      	cmp	r3, #1
 8006962:	f040 815c 	bne.w	8006c1e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d132      	bne.n	80069d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	0151      	lsls	r1, r2, #5
 8006980:	69fa      	ldr	r2, [r7, #28]
 8006982:	440a      	add	r2, r1
 8006984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800698c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006990:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	0151      	lsls	r1, r2, #5
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	440a      	add	r2, r1
 80069a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	0cdb      	lsrs	r3, r3, #19
 80069ce:	04db      	lsls	r3, r3, #19
 80069d0:	6113      	str	r3, [r2, #16]
 80069d2:	e074      	b.n	8006abe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ee:	0cdb      	lsrs	r3, r3, #19
 80069f0:	04db      	lsls	r3, r3, #19
 80069f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a24:	691a      	ldr	r2, [r3, #16]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6959      	ldr	r1, [r3, #20]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	440b      	add	r3, r1
 8006a30:	1e59      	subs	r1, r3, #1
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a3a:	04d9      	lsls	r1, r3, #19
 8006a3c:	4b9d      	ldr	r3, [pc, #628]	; (8006cb4 <USB_EPStartXfer+0x370>)
 8006a3e:	400b      	ands	r3, r1
 8006a40:	69b9      	ldr	r1, [r7, #24]
 8006a42:	0148      	lsls	r0, r1, #5
 8006a44:	69f9      	ldr	r1, [r7, #28]
 8006a46:	4401      	add	r1, r0
 8006a48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a66:	69b9      	ldr	r1, [r7, #24]
 8006a68:	0148      	lsls	r0, r1, #5
 8006a6a:	69f9      	ldr	r1, [r7, #28]
 8006a6c:	4401      	add	r1, r0
 8006a6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a72:	4313      	orrs	r3, r2
 8006a74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	78db      	ldrb	r3, [r3, #3]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d11f      	bne.n	8006abe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	0151      	lsls	r1, r2, #5
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	440a      	add	r2, r1
 8006a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006a9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006abc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d14b      	bne.n	8006b5c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	78db      	ldrb	r3, [r3, #3]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d128      	bne.n	8006b3a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e00f      	b.n	8006b3a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e12f      	b.n	8006dbc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	78db      	ldrb	r3, [r3, #3]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d015      	beq.n	8006bb0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8117 	beq.w	8006dbc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006baa:	4313      	orrs	r3, r2
 8006bac:	634b      	str	r3, [r1, #52]	; 0x34
 8006bae:	e105      	b.n	8006dbc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d110      	bne.n	8006be2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	e00f      	b.n	8006c02 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c00:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	68d9      	ldr	r1, [r3, #12]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	b298      	uxth	r0, r3
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	4603      	mov	r3, r0
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa2b 	bl	8007072 <USB_WritePacket>
 8006c1c:	e0ce      	b.n	8006dbc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c38:	0cdb      	lsrs	r3, r3, #19
 8006c3a:	04db      	lsls	r3, r3, #19
 8006c3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c60:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d126      	bne.n	8006cb8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	691a      	ldr	r2, [r3, #16]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c80:	69b9      	ldr	r1, [r7, #24]
 8006c82:	0148      	lsls	r0, r1, #5
 8006c84:	69f9      	ldr	r1, [r7, #28]
 8006c86:	4401      	add	r1, r0
 8006c88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	0151      	lsls	r1, r2, #5
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cae:	6113      	str	r3, [r2, #16]
 8006cb0:	e036      	b.n	8006d20 <USB_EPStartXfer+0x3dc>
 8006cb2:	bf00      	nop
 8006cb4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	695a      	ldr	r2, [r3, #20]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	1e5a      	subs	r2, r3, #1
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	8afb      	ldrh	r3, [r7, #22]
 8006cde:	04d9      	lsls	r1, r3, #19
 8006ce0:	4b39      	ldr	r3, [pc, #228]	; (8006dc8 <USB_EPStartXfer+0x484>)
 8006ce2:	400b      	ands	r3, r1
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	0148      	lsls	r0, r1, #5
 8006ce8:	69f9      	ldr	r1, [r7, #28]
 8006cea:	4401      	add	r1, r0
 8006cec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	8af9      	ldrh	r1, [r7, #22]
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	0148      	lsls	r0, r1, #5
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	4401      	add	r1, r0
 8006d18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d10d      	bne.n	8006d42 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	460a      	mov	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	78db      	ldrb	r3, [r3, #3]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d128      	bne.n	8006d9c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d110      	bne.n	8006d7c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e00f      	b.n	8006d9c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	1ff80000 	.word	0x1ff80000

08006dcc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f040 80cd 	bne.w	8006f88 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d132      	bne.n	8006e5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	0cdb      	lsrs	r3, r3, #19
 8006e56:	04db      	lsls	r3, r3, #19
 8006e58:	6113      	str	r3, [r2, #16]
 8006e5a:	e04e      	b.n	8006efa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	0cdb      	lsrs	r3, r3, #19
 8006e78:	04db      	lsls	r3, r3, #19
 8006e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d903      	bls.n	8006eb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eea:	6939      	ldr	r1, [r7, #16]
 8006eec:	0148      	lsls	r0, r1, #5
 8006eee:	6979      	ldr	r1, [r7, #20]
 8006ef0:	4401      	add	r1, r0
 8006ef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006efa:	79fb      	ldrb	r3, [r7, #7]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d11e      	bne.n	8006f3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d009      	beq.n	8006f1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	e092      	b.n	8007064 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d07e      	beq.n	8007064 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	2101      	movs	r1, #1
 8006f78:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7c:	6979      	ldr	r1, [r7, #20]
 8006f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f82:	4313      	orrs	r3, r2
 8006f84:	634b      	str	r3, [r1, #52]	; 0x34
 8006f86:	e06d      	b.n	8007064 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa2:	0cdb      	lsrs	r3, r3, #19
 8006fa4:	04db      	lsls	r3, r3, #19
 8006fa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007012:	6939      	ldr	r1, [r7, #16]
 8007014:	0148      	lsls	r0, r1, #5
 8007016:	6979      	ldr	r1, [r7, #20]
 8007018:	4401      	add	r1, r0
 800701a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800701e:	4313      	orrs	r3, r2
 8007020:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10d      	bne.n	8007044 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	68d9      	ldr	r1, [r3, #12]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007040:	460a      	mov	r2, r1
 8007042:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	693a      	ldr	r2, [r7, #16]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	440a      	add	r2, r1
 800705a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007062:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007072:	b480      	push	{r7}
 8007074:	b089      	sub	sp, #36	; 0x24
 8007076:	af00      	add	r7, sp, #0
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	4611      	mov	r1, r2
 800707e:	461a      	mov	r2, r3
 8007080:	460b      	mov	r3, r1
 8007082:	71fb      	strb	r3, [r7, #7]
 8007084:	4613      	mov	r3, r2
 8007086:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007090:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007094:	2b00      	cmp	r3, #0
 8007096:	d11a      	bne.n	80070ce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007098:	88bb      	ldrh	r3, [r7, #4]
 800709a:	3303      	adds	r3, #3
 800709c:	089b      	lsrs	r3, r3, #2
 800709e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	e00f      	b.n	80070c6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	031a      	lsls	r2, r3, #12
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	461a      	mov	r2, r3
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	3304      	adds	r3, #4
 80070be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d3eb      	bcc.n	80070a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3724      	adds	r7, #36	; 0x24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80070dc:	b480      	push	{r7}
 80070de:	b089      	sub	sp, #36	; 0x24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	3303      	adds	r3, #3
 80070f6:	089b      	lsrs	r3, r3, #2
 80070f8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	e00b      	b.n	8007118 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	601a      	str	r2, [r3, #0]
    pDest++;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	3304      	adds	r3, #4
 8007110:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3301      	adds	r3, #1
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	d3ef      	bcc.n	8007100 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007120:	69fb      	ldr	r3, [r7, #28]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3724      	adds	r7, #36	; 0x24
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800712e:	b480      	push	{r7}
 8007130:	b085      	sub	sp, #20
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d12c      	bne.n	80071a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	db12      	blt.n	8007182 <USB_EPSetStall+0x54>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00f      	beq.n	8007182 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007180:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e02b      	b.n	80071fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	db12      	blt.n	80071dc <USB_EPSetStall+0xae>
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00f      	beq.n	80071dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d128      	bne.n	8007278 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007244:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	78db      	ldrb	r3, [r3, #3]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d003      	beq.n	8007256 <USB_EPClearStall+0x4c>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	78db      	ldrb	r3, [r3, #3]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d138      	bne.n	80072c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	0151      	lsls	r1, r2, #5
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	440a      	add	r2, r1
 800726c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	e027      	b.n	80072c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007292:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007296:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	78db      	ldrb	r3, [r3, #3]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d003      	beq.n	80072a8 <USB_EPClearStall+0x9e>
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	78db      	ldrb	r3, [r3, #3]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d10f      	bne.n	80072c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	0151      	lsls	r1, r2, #5
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	440a      	add	r2, r1
 80072be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007310:	4313      	orrs	r3, r2
 8007312:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800733c:	f023 0303 	bic.w	r3, r3, #3
 8007340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007350:	f023 0302 	bic.w	r3, r3, #2
 8007354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007392:	f043 0302 	orr.w	r3, r3, #2
 8007396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4013      	ands	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4013      	ands	r3, r2
 80073ee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	0c1b      	lsrs	r3, r3, #16
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4013      	ands	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	b29b      	uxth	r3, r3
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	4013      	ands	r3, r2
 8007460:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007462:	68bb      	ldr	r3, [r7, #8]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007492:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
 80074a0:	01db      	lsls	r3, r3, #7
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4013      	ands	r3, r2
 80074bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074be:	68bb      	ldr	r3, [r7, #8]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	f003 0301 	and.w	r3, r3, #1
}
 80074dc:	4618      	mov	r0, r3
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007502:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800751a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800751e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	460b      	mov	r3, r1
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	333c      	adds	r3, #60	; 0x3c
 8007546:	3304      	adds	r3, #4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4a26      	ldr	r2, [pc, #152]	; (80075e8 <USB_EP0_OutStart+0xb8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d90a      	bls.n	800756a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007564:	d101      	bne.n	800756a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	e037      	b.n	80075da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007570:	461a      	mov	r2, r3
 8007572:	2300      	movs	r3, #0
 8007574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007598:	f043 0318 	orr.w	r3, r3, #24
 800759c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80075b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075b2:	7afb      	ldrb	r3, [r7, #11]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10f      	bne.n	80075d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075be:	461a      	mov	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80075d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	4f54300a 	.word	0x4f54300a

080075ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <USB_CoreReset+0x64>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d901      	bls.n	800760a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e01b      	b.n	8007642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	daf2      	bge.n	80075f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f043 0201 	orr.w	r2, r3, #1
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3301      	adds	r3, #1
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a09      	ldr	r2, [pc, #36]	; (8007650 <USB_CoreReset+0x64>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d901      	bls.n	8007634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e006      	b.n	8007642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	2b01      	cmp	r3, #1
 800763e:	d0f0      	beq.n	8007622 <USB_CoreReset+0x36>

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	00030d40 	.word	0x00030d40

08007654 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e025      	b.n	80076b8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	79fa      	ldrb	r2, [r7, #7]
 80076aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7fa fbe5 	bl	8001e7c <USBD_LL_Init>
 80076b2:	4603      	mov	r3, r0
 80076b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e010      	b.n	80076fa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f107 020e 	add.w	r2, r7, #14
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	4602      	mov	r2, r0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa fc06 	bl	8001f1c <USBD_LL_Start>
 8007710:	4603      	mov	r3, r0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d009      	beq.n	8007740 <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6852      	ldr	r2, [r2, #4]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	4611      	mov	r1, r2
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7fa fbfd 	bl	8001f52 <USBD_LL_Stop>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]

  return ret;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	78fa      	ldrb	r2, [r7, #3]
 80077a0:	4611      	mov	r1, r2
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	4611      	mov	r1, r2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
  }

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 ff3e 	bl	8008678 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2b01      	cmp	r3, #1
 800781e:	d00e      	beq.n	800783e <USBD_LL_SetupStage+0x5a>
 8007820:	2b01      	cmp	r3, #1
 8007822:	d302      	bcc.n	800782a <USBD_LL_SetupStage+0x46>
 8007824:	2b02      	cmp	r3, #2
 8007826:	d014      	beq.n	8007852 <USBD_LL_SetupStage+0x6e>
 8007828:	e01d      	b.n	8007866 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa18 	bl	8007c68 <USBD_StdDevReq>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
      break;
 800783c:	e020      	b.n	8007880 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa7c 	bl	8007d44 <USBD_StdItfReq>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
      break;
 8007850:	e016      	b.n	8007880 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fab8 	bl	8007dd0 <USBD_StdEPReq>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e00c      	b.n	8007880 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800786c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fa fbad 	bl	8001fd4 <USBD_LL_StallEP>
 800787a:	4603      	mov	r3, r0
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	bf00      	nop
  }

  return ret;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b086      	sub	sp, #24
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	460b      	mov	r3, r1
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d137      	bne.n	800790e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d14a      	bne.n	8007946 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d913      	bls.n	80078e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	4293      	cmp	r3, r2
 80078d4:	bf28      	it	cs
 80078d6:	4613      	movcs	r3, r2
 80078d8:	461a      	mov	r2, r3
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f001 fdee 	bl	80094be <USBD_CtlContinueRx>
 80078e2:	e030      	b.n	8007946 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d105      	bne.n	8007906 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f001 fdea 	bl	80094e0 <USBD_CtlSendStatus>
 800790c:	e01b      	b.n	8007946 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d013      	beq.n	8007942 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007920:	2b03      	cmp	r3, #3
 8007922:	d10e      	bne.n	8007942 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	7afa      	ldrb	r2, [r7, #11]
 800792e:	4611      	mov	r1, r2
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	e002      	b.n	8007948 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	e000      	b.n	8007948 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	460b      	mov	r3, r1
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d16a      	bne.n	8007a3a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3314      	adds	r3, #20
 8007968:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007970:	2b02      	cmp	r3, #2
 8007972:	d155      	bne.n	8007a20 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	429a      	cmp	r2, r3
 800797e:	d914      	bls.n	80079aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	1ad2      	subs	r2, r2, r3
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	461a      	mov	r2, r3
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f001 fd63 	bl	8009462 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7fa fbc0 	bl	8002128 <USBD_LL_PrepareReceive>
 80079a8:	e03a      	b.n	8007a20 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d11c      	bne.n	80079f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80079be:	429a      	cmp	r2, r3
 80079c0:	d316      	bcc.n	80079f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d20f      	bcs.n	80079f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079d0:	2200      	movs	r2, #0
 80079d2:	2100      	movs	r1, #0
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f001 fd44 	bl	8009462 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079e2:	2300      	movs	r3, #0
 80079e4:	2200      	movs	r2, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f7fa fb9d 	bl	8002128 <USBD_LL_PrepareReceive>
 80079ee:	e017      	b.n	8007a20 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d105      	bne.n	8007a12 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a12:	2180      	movs	r1, #128	; 0x80
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7fa fadd 	bl	8001fd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f001 fd73 	bl	8009506 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d123      	bne.n	8007a72 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7ff fe9b 	bl	8007766 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a38:	e01b      	b.n	8007a72 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d013      	beq.n	8007a6e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d10e      	bne.n	8007a6e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	7afa      	ldrb	r2, [r7, #11]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	4798      	blx	r3
 8007a60:	4603      	mov	r3, r0
 8007a62:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	e002      	b.n	8007a74 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e000      	b.n	8007a74 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6852      	ldr	r2, [r2, #4]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	4611      	mov	r1, r2
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fa fa5e 	bl	8001f88 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2240      	movs	r2, #64	; 0x40
 8007ad8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007adc:	2340      	movs	r3, #64	; 0x40
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2180      	movs	r1, #128	; 0x80
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fa fa50 	bl	8001f88 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2240      	movs	r2, #64	; 0x40
 8007af2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2204      	movs	r2, #4
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d105      	bne.n	8007b66 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d10b      	bne.n	8007b9e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b083      	sub	sp, #12
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6852      	ldr	r2, [r2, #4]
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
  }

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b087      	sub	sp, #28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c48:	8a3b      	ldrh	r3, [r7, #16]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	b21a      	sxth	r2, r3
 8007c4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b21b      	sxth	r3, r3
 8007c56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c58:	89fb      	ldrh	r3, [r7, #14]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d004      	beq.n	8007c8c <USBD_StdDevReq+0x24>
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d002      	beq.n	8007c8c <USBD_StdDevReq+0x24>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <USBD_StdDevReq+0x38>
 8007c8a:	e050      	b.n	8007d2e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9e:	e04b      	b.n	8007d38 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b09      	cmp	r3, #9
 8007ca6:	d83c      	bhi.n	8007d22 <USBD_StdDevReq+0xba>
 8007ca8:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <USBD_StdDevReq+0x48>)
 8007caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cae:	bf00      	nop
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d19 	.word	0x08007d19
 8007cb8:	08007d23 	.word	0x08007d23
 8007cbc:	08007d0f 	.word	0x08007d0f
 8007cc0:	08007d23 	.word	0x08007d23
 8007cc4:	08007ce3 	.word	0x08007ce3
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007d23 	.word	0x08007d23
 8007cd0:	08007cfb 	.word	0x08007cfb
 8007cd4:	08007ced 	.word	0x08007ced
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9ce 	bl	800807c <USBD_GetDescriptor>
      break;
 8007ce0:	e024      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fb45 	bl	8008374 <USBD_SetAddress>
      break;
 8007cea:	e01f      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007cec:	6839      	ldr	r1, [r7, #0]
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fb82 	bl	80083f8 <USBD_SetConfig>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf8:	e018      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fc1f 	bl	8008540 <USBD_GetConfig>
      break;
 8007d02:	e013      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fc4e 	bl	80085a8 <USBD_GetStatus>
      break;
 8007d0c:	e00e      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fc7c 	bl	800860e <USBD_SetFeature>
      break;
 8007d16:	e009      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc8b 	bl	8008636 <USBD_ClrFeature>
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fce1 	bl	80086ec <USBD_CtlError>
      break;
 8007d2a:	bf00      	nop
    }
    break;
 8007d2c:	e004      	b.n	8007d38 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fcdb 	bl	80086ec <USBD_CtlError>
    break;
 8007d36:	bf00      	nop
  }

  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop

08007d44 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	d003      	beq.n	8007d66 <USBD_StdItfReq+0x22>
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d001      	beq.n	8007d66 <USBD_StdItfReq+0x22>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d12a      	bne.n	8007dbc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d81d      	bhi.n	8007dae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	889b      	ldrh	r3, [r3, #4]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d813      	bhi.n	8007da4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d110      	bne.n	8007db8 <USBD_StdItfReq+0x74>
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fb9f 	bl	80094e0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007da2:	e009      	b.n	8007db8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fca0 	bl	80086ec <USBD_CtlError>
      break;
 8007dac:	e004      	b.n	8007db8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fc9b 	bl	80086ec <USBD_CtlError>
      break;
 8007db6:	e000      	b.n	8007dba <USBD_StdItfReq+0x76>
      break;
 8007db8:	bf00      	nop
    }
    break;
 8007dba:	e004      	b.n	8007dc6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fc94 	bl	80086ec <USBD_CtlError>
    break;
 8007dc4:	bf00      	nop
  }

  return ret;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	889b      	ldrh	r3, [r3, #4]
 8007de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d004      	beq.n	8007dfa <USBD_StdEPReq+0x2a>
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d002      	beq.n	8007dfa <USBD_StdEPReq+0x2a>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <USBD_StdEPReq+0x3e>
 8007df8:	e135      	b.n	8008066 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e0c:	e130      	b.n	8008070 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d03e      	beq.n	8007e94 <USBD_StdEPReq+0xc4>
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d002      	beq.n	8007e20 <USBD_StdEPReq+0x50>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d077      	beq.n	8007f0e <USBD_StdEPReq+0x13e>
 8007e1e:	e11c      	b.n	800805a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d002      	beq.n	8007e30 <USBD_StdEPReq+0x60>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d015      	beq.n	8007e5a <USBD_StdEPReq+0x8a>
 8007e2e:	e02b      	b.n	8007e88 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e30:	7bbb      	ldrb	r3, [r7, #14]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <USBD_StdEPReq+0x80>
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	2b80      	cmp	r3, #128	; 0x80
 8007e3a:	d009      	beq.n	8007e50 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fa f8c7 	bl	8001fd4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fa f8c3 	bl	8001fd4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e4e:	e020      	b.n	8007e92 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fc4a 	bl	80086ec <USBD_CtlError>
        break;
 8007e58:	e01b      	b.n	8007e92 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	885b      	ldrh	r3, [r3, #2]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10e      	bne.n	8007e80 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_StdEPReq+0xb0>
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b80      	cmp	r3, #128	; 0x80
 8007e6c:	d008      	beq.n	8007e80 <USBD_StdEPReq+0xb0>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fa f8aa 	bl	8001fd4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fb2d 	bl	80094e0 <USBD_CtlSendStatus>

        break;
 8007e86:	e004      	b.n	8007e92 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fc2e 	bl	80086ec <USBD_CtlError>
        break;
 8007e90:	bf00      	nop
      }
      break;
 8007e92:	e0e7      	b.n	8008064 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d002      	beq.n	8007ea4 <USBD_StdEPReq+0xd4>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d015      	beq.n	8007ece <USBD_StdEPReq+0xfe>
 8007ea2:	e02d      	b.n	8007f00 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00c      	beq.n	8007ec4 <USBD_StdEPReq+0xf4>
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	2b80      	cmp	r3, #128	; 0x80
 8007eae:	d009      	beq.n	8007ec4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7fa f88d 	bl	8001fd4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eba:	2180      	movs	r1, #128	; 0x80
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fa f889 	bl	8001fd4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007ec2:	e023      	b.n	8007f0c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fc10 	bl	80086ec <USBD_CtlError>
        break;
 8007ecc:	e01e      	b.n	8007f0c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	885b      	ldrh	r3, [r3, #2]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d119      	bne.n	8007f0a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ee0:	7bbb      	ldrb	r3, [r7, #14]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fa f894 	bl	8002012 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 faf8 	bl	80094e0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
        }
        break;
 8007efe:	e004      	b.n	8007f0a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbf2 	bl	80086ec <USBD_CtlError>
        break;
 8007f08:	e000      	b.n	8007f0c <USBD_StdEPReq+0x13c>
        break;
 8007f0a:	bf00      	nop
      }
      break;
 8007f0c:	e0aa      	b.n	8008064 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d002      	beq.n	8007f1e <USBD_StdEPReq+0x14e>
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d032      	beq.n	8007f82 <USBD_StdEPReq+0x1b2>
 8007f1c:	e097      	b.n	800804e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <USBD_StdEPReq+0x164>
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d004      	beq.n	8007f34 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fbdd 	bl	80086ec <USBD_CtlError>
          break;
 8007f32:	e091      	b.n	8008058 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	da0b      	bge.n	8007f54 <USBD_StdEPReq+0x184>
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	3310      	adds	r3, #16
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	3304      	adds	r3, #4
 8007f52:	e00b      	b.n	8007f6c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2202      	movs	r2, #2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fa56 	bl	800942c <USBD_CtlSendData>
        break;
 8007f80:	e06a      	b.n	8008058 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007f82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	da11      	bge.n	8007fae <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3324      	adds	r3, #36	; 0x24
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d117      	bne.n	8007fd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fba0 	bl	80086ec <USBD_CtlError>
            break;
 8007fac:	e054      	b.n	8008058 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb8d 	bl	80086ec <USBD_CtlError>
            break;
 8007fd2:	e041      	b.n	8008058 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	da0b      	bge.n	8007ff4 <USBD_StdEPReq+0x224>
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	3310      	adds	r3, #16
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	e00b      	b.n	800800c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4413      	add	r3, r2
 800800a:	3304      	adds	r3, #4
 800800c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <USBD_StdEPReq+0x24a>
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b80      	cmp	r3, #128	; 0x80
 8008018:	d103      	bne.n	8008022 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e00e      	b.n	8008040 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fa f812 	bl	8002050 <USBD_LL_IsStallEP>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2201      	movs	r2, #1
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e002      	b.n	8008040 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2202      	movs	r2, #2
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f001 f9f0 	bl	800942c <USBD_CtlSendData>
          break;
 800804c:	e004      	b.n	8008058 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fb4b 	bl	80086ec <USBD_CtlError>
        break;
 8008056:	bf00      	nop
      }
      break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb45 	bl	80086ec <USBD_CtlError>
      break;
 8008062:	bf00      	nop
    }
    break;
 8008064:	e004      	b.n	8008070 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fb3f 	bl	80086ec <USBD_CtlError>
    break;
 800806e:	bf00      	nop
  }

  return ret;
 8008070:	7bfb      	ldrb	r3, [r7, #15]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	885b      	ldrh	r3, [r3, #2]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	2b06      	cmp	r3, #6
 800809e:	f200 813b 	bhi.w	8008318 <USBD_GetDescriptor+0x29c>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <USBD_GetDescriptor+0x2c>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	0800811d 	.word	0x0800811d
 80080b4:	08008319 	.word	0x08008319
 80080b8:	08008319 	.word	0x08008319
 80080bc:	080082b9 	.word	0x080082b9
 80080c0:	080082e5 	.word	0x080082e5
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	7c12      	ldrb	r2, [r2, #16]
 80080d0:	f107 0108 	add.w	r1, r7, #8
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
 80080d8:	60f8      	str	r0, [r7, #12]
    break;
 80080da:	e125      	b.n	8008328 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7c1b      	ldrb	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	f107 0208 	add.w	r2, r7, #8
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	3301      	adds	r3, #1
 80080fa:	2202      	movs	r2, #2
 80080fc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80080fe:	e113      	b.n	8008328 <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	f107 0208 	add.w	r2, r7, #8
 800810c:	4610      	mov	r0, r2
 800810e:	4798      	blx	r3
 8008110:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3301      	adds	r3, #1
 8008116:	2202      	movs	r2, #2
 8008118:	701a      	strb	r2, [r3, #0]
    break;
 800811a:	e105      	b.n	8008328 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	885b      	ldrh	r3, [r3, #2]
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b05      	cmp	r3, #5
 8008124:	f200 80ac 	bhi.w	8008280 <USBD_GetDescriptor+0x204>
 8008128:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <USBD_GetDescriptor+0xb4>)
 800812a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812e:	bf00      	nop
 8008130:	08008149 	.word	0x08008149
 8008134:	0800817d 	.word	0x0800817d
 8008138:	080081b1 	.word	0x080081b1
 800813c:	080081e5 	.word	0x080081e5
 8008140:	08008219 	.word	0x08008219
 8008144:	0800824d 	.word	0x0800824d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	f107 0108 	add.w	r1, r7, #8
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
 8008168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800816a:	e0a4      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fabc 	bl	80086ec <USBD_CtlError>
        err++;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	3301      	adds	r3, #1
 8008178:	72fb      	strb	r3, [r7, #11]
      break;
 800817a:	e09c      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00b      	beq.n	80081a0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7c12      	ldrb	r2, [r2, #16]
 8008194:	f107 0108 	add.w	r1, r7, #8
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800819e:	e08a      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 faa2 	bl	80086ec <USBD_CtlError>
        err++;
 80081a8:	7afb      	ldrb	r3, [r7, #11]
 80081aa:	3301      	adds	r3, #1
 80081ac:	72fb      	strb	r3, [r7, #11]
      break;
 80081ae:	e082      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	7c12      	ldrb	r2, [r2, #16]
 80081c8:	f107 0108 	add.w	r1, r7, #8
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081d2:	e070      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa88 	bl	80086ec <USBD_CtlError>
        err++;
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	3301      	adds	r3, #1
 80081e0:	72fb      	strb	r3, [r7, #11]
      break;
 80081e2:	e068      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7c12      	ldrb	r2, [r2, #16]
 80081fc:	f107 0108 	add.w	r1, r7, #8
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
 8008204:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008206:	e056      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa6e 	bl	80086ec <USBD_CtlError>
        err++;
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	3301      	adds	r3, #1
 8008214:	72fb      	strb	r3, [r7, #11]
      break;
 8008216:	e04e      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00b      	beq.n	800823c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800823a:	e03c      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fa54 	bl	80086ec <USBD_CtlError>
        err++;
 8008244:	7afb      	ldrb	r3, [r7, #11]
 8008246:	3301      	adds	r3, #1
 8008248:	72fb      	strb	r3, [r7, #11]
      break;
 800824a:	e034      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	7c12      	ldrb	r2, [r2, #16]
 8008264:	f107 0108 	add.w	r1, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800826e:	e022      	b.n	80082b6 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa3a 	bl	80086ec <USBD_CtlError>
        err++;
 8008278:	7afb      	ldrb	r3, [r7, #11]
 800827a:	3301      	adds	r3, #1
 800827c:	72fb      	strb	r3, [r7, #11]
      break;
 800827e:	e01a      	b.n	80082b6 <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00c      	beq.n	80082a6 <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	8852      	ldrh	r2, [r2, #2]
 8008298:	b2d1      	uxtb	r1, r2
 800829a:	f107 0208 	add.w	r2, r7, #8
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
 80082a2:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 80082a4:	e006      	b.n	80082b4 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fa1f 	bl	80086ec <USBD_CtlError>
        err++;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	3301      	adds	r3, #1
 80082b2:	72fb      	strb	r3, [r7, #11]
      break;
 80082b4:	bf00      	nop
    }
    break;
 80082b6:	e037      	b.n	8008328 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c1b      	ldrb	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	f107 0208 	add.w	r2, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80082d2:	e029      	b.n	8008328 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa08 	bl	80086ec <USBD_CtlError>
      err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
    break;
 80082e2:	e021      	b.n	8008328 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	7c1b      	ldrb	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10d      	bne.n	8008308 <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	f107 0208 	add.w	r2, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	2207      	movs	r2, #7
 8008304:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008306:	e00f      	b.n	8008328 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f9ee 	bl	80086ec <USBD_CtlError>
      err++;
 8008310:	7afb      	ldrb	r3, [r7, #11]
 8008312:	3301      	adds	r3, #1
 8008314:	72fb      	strb	r3, [r7, #11]
    break;
 8008316:	e007      	b.n	8008328 <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f9e6 	bl	80086ec <USBD_CtlError>
    err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
    break;
 8008326:	bf00      	nop
  }

  if (err != 0U)
 8008328:	7afb      	ldrb	r3, [r7, #11]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d11e      	bne.n	800836c <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	88db      	ldrh	r3, [r3, #6]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 8008336:	893b      	ldrh	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	88da      	ldrh	r2, [r3, #6]
 8008340:	893b      	ldrh	r3, [r7, #8]
 8008342:	4293      	cmp	r3, r2
 8008344:	bf28      	it	cs
 8008346:	4613      	movcs	r3, r2
 8008348:	b29b      	uxth	r3, r3
 800834a:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800834c:	893b      	ldrh	r3, [r7, #8]
 800834e:	461a      	mov	r2, r3
 8008350:	68f9      	ldr	r1, [r7, #12]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f86a 	bl	800942c <USBD_CtlSendData>
 8008358:	e009      	b.n	800836e <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f9c5 	bl	80086ec <USBD_CtlError>
 8008362:	e004      	b.n	800836e <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f8bb 	bl	80094e0 <USBD_CtlSendStatus>
 800836a:	e000      	b.n	800836e <USBD_GetDescriptor+0x2f2>
    return;
 800836c:	bf00      	nop
    }
  }
}
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	889b      	ldrh	r3, [r3, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d130      	bne.n	80083e8 <USBD_SetAddress+0x74>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	88db      	ldrh	r3, [r3, #6]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d12c      	bne.n	80083e8 <USBD_SetAddress+0x74>
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	885b      	ldrh	r3, [r3, #2]
 8008392:	2b7f      	cmp	r3, #127	; 0x7f
 8008394:	d828      	bhi.n	80083e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	885b      	ldrh	r3, [r3, #2]
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d104      	bne.n	80083b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f99c 	bl	80086ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	e01c      	b.n	80083f0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	7bfa      	ldrb	r2, [r7, #15]
 80083ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7f9 fe70 	bl	80020a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f001 f889 	bl	80094e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083dc:	e008      	b.n	80083f0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	e003      	b.n	80083f0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f97e 	bl	80086ec <USBD_CtlError>
  }
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	885b      	ldrh	r3, [r3, #2]
 800840a:	b2da      	uxtb	r2, r3
 800840c:	4b4b      	ldr	r3, [pc, #300]	; (800853c <USBD_SetConfig+0x144>)
 800840e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008410:	4b4a      	ldr	r3, [pc, #296]	; (800853c <USBD_SetConfig+0x144>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d905      	bls.n	8008424 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f966 	bl	80086ec <USBD_CtlError>
    return USBD_FAIL;
 8008420:	2303      	movs	r3, #3
 8008422:	e087      	b.n	8008534 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842a:	2b02      	cmp	r3, #2
 800842c:	d002      	beq.n	8008434 <USBD_SetConfig+0x3c>
 800842e:	2b03      	cmp	r3, #3
 8008430:	d025      	beq.n	800847e <USBD_SetConfig+0x86>
 8008432:	e071      	b.n	8008518 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008434:	4b41      	ldr	r3, [pc, #260]	; (800853c <USBD_SetConfig+0x144>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01c      	beq.n	8008476 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800843c:	4b3f      	ldr	r3, [pc, #252]	; (800853c <USBD_SetConfig+0x144>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008446:	4b3d      	ldr	r3, [pc, #244]	; (800853c <USBD_SetConfig+0x144>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff f995 	bl	800777c <USBD_SetClassConfig>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008456:	7bfb      	ldrb	r3, [r7, #15]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f944 	bl	80086ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008464:	e065      	b.n	8008532 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 f83a 	bl	80094e0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2203      	movs	r2, #3
 8008470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008474:	e05d      	b.n	8008532 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 f832 	bl	80094e0 <USBD_CtlSendStatus>
    break;
 800847c:	e059      	b.n	8008532 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800847e:	4b2f      	ldr	r3, [pc, #188]	; (800853c <USBD_SetConfig+0x144>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d112      	bne.n	80084ac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800848e:	4b2b      	ldr	r3, [pc, #172]	; (800853c <USBD_SetConfig+0x144>)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008498:	4b28      	ldr	r3, [pc, #160]	; (800853c <USBD_SetConfig+0x144>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff f988 	bl	80077b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f81b 	bl	80094e0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80084aa:	e042      	b.n	8008532 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80084ac:	4b23      	ldr	r3, [pc, #140]	; (800853c <USBD_SetConfig+0x144>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d02a      	beq.n	8008510 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff f976 	bl	80077b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80084c8:	4b1c      	ldr	r3, [pc, #112]	; (800853c <USBD_SetConfig+0x144>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80084d2:	4b1a      	ldr	r3, [pc, #104]	; (800853c <USBD_SetConfig+0x144>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff f94f 	bl	800777c <USBD_SetClassConfig>
 80084de:	4603      	mov	r3, r0
 80084e0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00f      	beq.n	8008508 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f8fe 	bl	80086ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff f95b 	bl	80077b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008506:	e014      	b.n	8008532 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ffe9 	bl	80094e0 <USBD_CtlSendStatus>
    break;
 800850e:	e010      	b.n	8008532 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 ffe5 	bl	80094e0 <USBD_CtlSendStatus>
    break;
 8008516:	e00c      	b.n	8008532 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f8e6 	bl	80086ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008520:	4b06      	ldr	r3, [pc, #24]	; (800853c <USBD_SetConfig+0x144>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff f944 	bl	80077b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800852c:	2303      	movs	r3, #3
 800852e:	73fb      	strb	r3, [r7, #15]
    break;
 8008530:	bf00      	nop
  }

  return ret;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000180 	.word	0x20000180

08008540 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d004      	beq.n	800855c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f8c9 	bl	80086ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800855a:	e021      	b.n	80085a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008562:	2b01      	cmp	r3, #1
 8008564:	db17      	blt.n	8008596 <USBD_GetConfig+0x56>
 8008566:	2b02      	cmp	r3, #2
 8008568:	dd02      	ble.n	8008570 <USBD_GetConfig+0x30>
 800856a:	2b03      	cmp	r3, #3
 800856c:	d00b      	beq.n	8008586 <USBD_GetConfig+0x46>
 800856e:	e012      	b.n	8008596 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3308      	adds	r3, #8
 800857a:	2201      	movs	r2, #1
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 ff54 	bl	800942c <USBD_CtlSendData>
      break;
 8008584:	e00c      	b.n	80085a0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3304      	adds	r3, #4
 800858a:	2201      	movs	r2, #1
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 ff4c 	bl	800942c <USBD_CtlSendData>
      break;
 8008594:	e004      	b.n	80085a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8a7 	bl	80086ec <USBD_CtlError>
      break;
 800859e:	bf00      	nop
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d81e      	bhi.n	80085fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	88db      	ldrh	r3, [r3, #6]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d004      	beq.n	80085d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f88f 	bl	80086ec <USBD_CtlError>
      break;
 80085ce:	e01a      	b.n	8008606 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f043 0202 	orr.w	r2, r3, #2
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	330c      	adds	r3, #12
 80085f0:	2202      	movs	r2, #2
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 ff19 	bl	800942c <USBD_CtlSendData>
    break;
 80085fa:	e004      	b.n	8008606 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f874 	bl	80086ec <USBD_CtlError>
    break;
 8008604:	bf00      	nop
  }
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	885b      	ldrh	r3, [r3, #2]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d106      	bne.n	800862e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 ff59 	bl	80094e0 <USBD_CtlSendStatus>
  }
}
 800862e:	bf00      	nop
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	3b01      	subs	r3, #1
 8008648:	2b02      	cmp	r3, #2
 800864a:	d80b      	bhi.n	8008664 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	885b      	ldrh	r3, [r3, #2]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d10c      	bne.n	800866e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 ff3f 	bl	80094e0 <USBD_CtlSendStatus>
      }
      break;
 8008662:	e004      	b.n	800866e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f840 	bl	80086ec <USBD_CtlError>
      break;
 800866c:	e000      	b.n	8008670 <USBD_ClrFeature+0x3a>
      break;
 800866e:	bf00      	nop
  }
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	781a      	ldrb	r2, [r3, #0]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff fac1 	bl	8007c2a <SWAPBYTE>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3301      	adds	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff fab4 	bl	8007c2a <SWAPBYTE>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3301      	adds	r3, #1
 80086ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff faa7 	bl	8007c2a <SWAPBYTE>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	80da      	strh	r2, [r3, #6]
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7f9 fc6b 	bl	8001fd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086fe:	2100      	movs	r1, #0
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7f9 fc67 	bl	8001fd4 <USBD_LL_StallEP>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d036      	beq.n	8008792 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008728:	6938      	ldr	r0, [r7, #16]
 800872a:	f000 f836 	bl	800879a <USBD_GetLen>
 800872e:	4603      	mov	r3, r0
 8008730:	3301      	adds	r3, #1
 8008732:	b29b      	uxth	r3, r3
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	701a      	strb	r2, [r3, #0]
  idx++;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	3301      	adds	r3, #1
 800874c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	4413      	add	r3, r2
 8008754:	2203      	movs	r2, #3
 8008756:	701a      	strb	r2, [r3, #0]
  idx++;
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	3301      	adds	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800875e:	e013      	b.n	8008788 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4413      	add	r3, r2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	7812      	ldrb	r2, [r2, #0]
 800876a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	3301      	adds	r3, #1
 8008770:	613b      	str	r3, [r7, #16]
    idx++;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	3301      	adds	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
    idx++;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3301      	adds	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e7      	bne.n	8008760 <USBD_GetString+0x52>
 8008790:	e000      	b.n	8008794 <USBD_GetString+0x86>
    return;
 8008792:	bf00      	nop
  }
}
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087aa:	e005      	b.n	80087b8 <USBD_GetLen+0x1e>
  {
    len++;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	3301      	adds	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	3301      	adds	r3, #1
 80087b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f5      	bne.n	80087ac <USBD_GetLen+0x12>
  }

  return len;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <__NVIC_SystemReset>:
{
 80087d0:	b480      	push	{r7}
 80087d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80087d4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <__NVIC_SystemReset+0x20>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80087e0:	4903      	ldr	r1, [pc, #12]	; (80087f0 <__NVIC_SystemReset+0x20>)
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <__NVIC_SystemReset+0x24>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60cb      	str	r3, [r1, #12]
 80087e8:	f3bf 8f4f 	dsb	sy
    __NOP();
 80087ec:	bf00      	nop
 80087ee:	e7fd      	b.n	80087ec <__NVIC_SystemReset+0x1c>
 80087f0:	e000ed00 	.word	0xe000ed00
 80087f4:	05fa0004 	.word	0x05fa0004

080087f8 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8008804:	f240 401c 	movw	r0, #1052	; 0x41c
 8008808:	f000 feba 	bl	8009580 <malloc>
 800880c:	4603      	mov	r3, r0
 800880e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800881e:	2302      	movs	r3, #2
 8008820:	e03e      	b.n	80088a0 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4a1c      	ldr	r2, [pc, #112]	; (80088a8 <USBD_DFU_Init+0xb0>)
 8008836:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2200      	movs	r2, #0
 800883e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2202      	movs	r2, #2
 8008856:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4798      	blx	r3
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800889a:	2303      	movs	r3, #3
 800889c:	e000      	b.n	80088a0 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	08040000 	.word	0x08040000

080088ac <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80088c2:	2302      	movs	r3, #2
 80088c4:	e027      	b.n	8008916 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088cc:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2202      	movs	r2, #2
 80088e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fe42 	bl	8009590 <free>
  pdev->pClassData = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008930:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800894a:	2b00      	cmp	r3, #0
 800894c:	d03f      	beq.n	80089ce <USBD_DFU_Setup+0xae>
 800894e:	2b20      	cmp	r3, #32
 8008950:	f040 80c3 	bne.w	8008ada <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	2b06      	cmp	r3, #6
 800895a:	d830      	bhi.n	80089be <USBD_DFU_Setup+0x9e>
 800895c:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <USBD_DFU_Setup+0x44>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	080089b5 	.word	0x080089b5
 8008968:	08008981 	.word	0x08008981
 800896c:	0800898b 	.word	0x0800898b
 8008970:	08008995 	.word	0x08008995
 8008974:	0800899d 	.word	0x0800899d
 8008978:	080089a5 	.word	0x080089a5
 800897c:	080089ad 	.word	0x080089ad
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fa62 	bl	8008e4c <DFU_Download>
      break;
 8008988:	e020      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 800898a:	6839      	ldr	r1, [r7, #0]
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fac7 	bl	8008f20 <DFU_Upload>
      break;
 8008992:	e01b      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb9b 	bl	80090d0 <DFU_GetStatus>
      break;
 800899a:	e017      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fc49 	bl	8009234 <DFU_ClearStatus>
      break;
 80089a2:	e013      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fc95 	bl	80092d4 <DFU_GetState>
      break;
 80089aa:	e00f      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fca5 	bl	80092fc <DFU_Abort>
      break;
 80089b2:	e00b      	b.n	80089cc <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f9e8 	bl	8008d8c <DFU_Detach>
      break;
 80089bc:	e006      	b.n	80089cc <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff fe93 	bl	80086ec <USBD_CtlError>
      ret = USBD_FAIL;
 80089c6:	2303      	movs	r3, #3
 80089c8:	77fb      	strb	r3, [r7, #31]
      break;
 80089ca:	bf00      	nop
    }
    break;
 80089cc:	e08c      	b.n	8008ae8 <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	2b0b      	cmp	r3, #11
 80089d4:	d878      	bhi.n	8008ac8 <USBD_DFU_Setup+0x1a8>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <USBD_DFU_Setup+0xbc>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	08008ad7 	.word	0x08008ad7
 80089e4:	08008ac9 	.word	0x08008ac9
 80089e8:	08008ac9 	.word	0x08008ac9
 80089ec:	08008ac9 	.word	0x08008ac9
 80089f0:	08008ac9 	.word	0x08008ac9
 80089f4:	08008a35 	.word	0x08008a35
 80089f8:	08008ac9 	.word	0x08008ac9
 80089fc:	08008ac9 	.word	0x08008ac9
 8008a00:	08008ac9 	.word	0x08008ac9
 8008a04:	08008a5f 	.word	0x08008a5f
 8008a08:	08008a89 	.word	0x08008a89
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d107      	bne.n	8008a26 <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a16:	f107 030e 	add.w	r3, r7, #14
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fd04 	bl	800942c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008a24:	e058      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fe5f 	bl	80086ec <USBD_CtlError>
        ret = USBD_FAIL;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	77fb      	strb	r3, [r7, #31]
      break;
 8008a32:	e051      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	885b      	ldrh	r3, [r3, #2]
 8008a38:	0a1b      	lsrs	r3, r3, #8
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	2b21      	cmp	r3, #33	; 0x21
 8008a3e:	d107      	bne.n	8008a50 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8008a40:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <USBD_DFU_Setup+0x1d4>)
 8008a42:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	2b09      	cmp	r3, #9
 8008a4a:	bf28      	it	cs
 8008a4c:	2309      	movcs	r3, #9
 8008a4e:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a50:	8afb      	ldrh	r3, [r7, #22]
 8008a52:	461a      	mov	r2, r3
 8008a54:	69b9      	ldr	r1, [r7, #24]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fce8 	bl	800942c <USBD_CtlSendData>
      break;
 8008a5c:	e03c      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d108      	bne.n	8008a7a <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008a6e:	2201      	movs	r2, #1
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fcda 	bl	800942c <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008a78:	e02e      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fe35 	bl	80086ec <USBD_CtlError>
        ret = USBD_FAIL;
 8008a82:	2303      	movs	r3, #3
 8008a84:	77fb      	strb	r3, [r7, #31]
      break;
 8008a86:	e027      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	885b      	ldrh	r3, [r3, #2]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d113      	bne.n	8008aba <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	d107      	bne.n	8008aac <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	885b      	ldrh	r3, [r3, #2]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008aaa:	e015      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff fe1c 	bl	80086ec <USBD_CtlError>
          ret = USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	77fb      	strb	r3, [r7, #31]
      break;
 8008ab8:	e00e      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fe15 	bl	80086ec <USBD_CtlError>
        ret = USBD_FAIL;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	77fb      	strb	r3, [r7, #31]
      break;
 8008ac6:	e007      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff fe0e 	bl	80086ec <USBD_CtlError>
      ret = USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	77fb      	strb	r3, [r7, #31]
      break;
 8008ad4:	e000      	b.n	8008ad8 <USBD_DFU_Setup+0x1b8>
      break;
 8008ad6:	bf00      	nop
    }
    break;
 8008ad8:	e006      	b.n	8008ae8 <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff fe05 	bl	80086ec <USBD_CtlError>
    ret = USBD_FAIL;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	77fb      	strb	r3, [r7, #31]
    break;
 8008ae6:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200000e6 	.word	0x200000e6

08008af8 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	221b      	movs	r2, #27
 8008b04:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8008b06:	4b03      	ldr	r3, [pc, #12]	; (8008b14 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	200000d4 	.word	0x200000d4

08008b18 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b3e:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b46:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	f040 80bc 	bne.w	8008ccc <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d17a      	bne.n	8008c54 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f000 8092 	beq.w	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b70:	2b05      	cmp	r3, #5
 8008b72:	d15c      	bne.n	8008c2e <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b21      	cmp	r3, #33	; 0x21
 8008b7a:	d124      	bne.n	8008bc6 <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	461a      	mov	r2, r3
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	789b      	ldrb	r3, [r3, #2]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	441a      	add	r2, r3
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	441a      	add	r2, r3
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	791b      	ldrb	r3, [r3, #4]
 8008bba:	061b      	lsls	r3, r3, #24
 8008bbc:	441a      	add	r2, r3
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8008bc4:	e063      	b.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b41      	cmp	r3, #65	; 0x41
 8008bcc:	d15f      	bne.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	785b      	ldrb	r3, [r3, #1]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	789b      	ldrb	r3, [r3, #2]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	441a      	add	r2, r3
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	78db      	ldrb	r3, [r3, #3]
 8008bf8:	041b      	lsls	r3, r3, #16
 8008bfa:	441a      	add	r2, r3
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	791b      	ldrb	r3, [r3, #4]
 8008c0c:	061b      	lsls	r3, r3, #24
 8008c0e:	441a      	add	r2, r3
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d031      	beq.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e057      	b.n	8008cde <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8008c42:	2301      	movs	r3, #1
 8008c44:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8008c46:	f107 030c 	add.w	r3, r7, #12
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fd4d 	bl	80086ec <USBD_CtlError>
 8008c52:	e01c      	b.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d917      	bls.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8008c64:	4b20      	ldr	r3, [pc, #128]	; (8008ce8 <USBD_DFU_EP0_TxReady+0x1b8>)
 8008c66:	4413      	add	r3, r2
 8008c68:	029a      	lsls	r2, r3, #10
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8008c70:	4413      	add	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	69f8      	ldr	r0, [r7, #28]
 8008c7a:	6979      	ldr	r1, [r7, #20]
 8008c7c:	69fa      	ldr	r2, [r7, #28]
 8008c7e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8008c82:	4798      	blx	r3
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e027      	b.n	8008cde <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008cca:	e007      	b.n	8008cdc <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008cd2:	2b07      	cmp	r3, #7
 8008cd4:	d102      	bne.n	8008cdc <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb5e 	bl	8009398 <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	003ffffe 	.word	0x003ffffe

08008cec <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
	...

08008d04 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	220a      	movs	r2, #10
 8008d10:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	200000f0 	.word	0x200000f0

08008d24 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d38:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	d808      	bhi.n	8008d52 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	4905      	ldr	r1, [pc, #20]	; (8008d5c <USBD_DFU_GetUsrStringDesc+0x38>)
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fce0 	bl	800870e <USBD_GetString>
    return USBD_StrDesc;
 8008d4e:	4b03      	ldr	r3, [pc, #12]	; (8008d5c <USBD_DFU_GetUsrStringDesc+0x38>)
 8008d50:	e000      	b.n	8008d54 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008d52:	2300      	movs	r3, #0
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000184 	.word	0x20000184

08008d60 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e004      	b.n	8008d7e <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
	...

08008d8c <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9c:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d013      	beq.n	8008dd0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d00e      	beq.n	8008dd0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008db8:	2b05      	cmp	r3, #5
 8008dba:	d009      	beq.n	8008dd0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d004      	beq.n	8008dd0 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d125      	bne.n	8008e1c <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008e1c:	4b0a      	ldr	r3, [pc, #40]	; (8008e48 <DFU_Detach+0xbc>)
 8008e1e:	7d5b      	ldrb	r3, [r3, #21]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7fe fc76 	bl	800771a <USBD_Stop>
    (void)USBD_Start(pdev);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fe fc67 	bl	8007702 <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 8008e34:	e004      	b.n	8008e40 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7f9 fa4e 	bl	80022dc <HAL_Delay>
}
 8008e40:	bf00      	nop
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	200000d4 	.word	0x200000d4

08008e4c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e5c:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	88db      	ldrh	r3, [r3, #6]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d02d      	beq.n	8008ec2 <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d004      	beq.n	8008e7a <DFU_Download+0x2e>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d11e      	bne.n	8008eb8 <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	885b      	ldrh	r3, [r3, #2]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2203      	movs	r2, #3
 8008e96:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008ea6:	68f9      	ldr	r1, [r7, #12]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fae7 	bl	8009484 <USBD_CtlPrepareRx>
 8008eb6:	e02e      	b.n	8008f16 <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff fc16 	bl	80086ec <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8008ec0:	e029      	b.n	8008f16 <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	d004      	beq.n	8008ed6 <DFU_Download+0x8a>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d11a      	bne.n	8008f0c <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8008f0a:	e004      	b.n	8008f16 <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fbec 	bl	80086ec <USBD_CtlError>
}
 8008f14:	e7ff      	b.n	8008f16 <DFU_Download+0xca>
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f30:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f38:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	88db      	ldrh	r3, [r3, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80a9 	beq.w	8009096 <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d005      	beq.n	8008f5a <DFU_Upload+0x3a>
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8008f54:	2b09      	cmp	r3, #9
 8008f56:	f040 8091 	bne.w	800907c <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	885b      	ldrh	r3, [r3, #2]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88db      	ldrh	r3, [r3, #6]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d12c      	bne.n	8008fd6 <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d901      	bls.n	8008f8a <DFU_Upload+0x6a>
 8008f86:	2202      	movs	r2, #2
 8008f88:	e000      	b.n	8008f8c <DFU_Upload+0x6c>
 8008f8a:	2209      	movs	r2, #9
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	2221      	movs	r2, #33	; 0x21
 8008fc0:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2241      	movs	r2, #65	; 0x41
 8008fc6:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa2c 	bl	800942c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008fd4:	e076      	b.n	80090c4 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d932      	bls.n	8009046 <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2209      	movs	r2, #9
 8008fe4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8009012:	4b2e      	ldr	r3, [pc, #184]	; (80090cc <DFU_Upload+0x1ac>)
 8009014:	4413      	add	r3, r2
 8009016:	029a      	lsls	r2, r3, #10
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800901e:	4413      	add	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	6979      	ldr	r1, [r7, #20]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8009030:	4798      	blx	r3
 8009032:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800903a:	461a      	mov	r2, r3
 800903c:	68b9      	ldr	r1, [r7, #8]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9f4 	bl	800942c <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8009044:	e03e      	b.n	80090c4 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	220f      	movs	r2, #15
 800904a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff fb39 	bl	80086ec <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800907a:	e023      	b.n	80090c4 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7ff fb2c 	bl	80086ec <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8009094:	e016      	b.n	80090c4 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2202      	movs	r2, #2
 800909a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 80090c2:	e7ff      	b.n	80090c4 <DFU_Upload+0x1a4>
 80090c4:	bf00      	nop
 80090c6:	3718      	adds	r7, #24
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	003ffffe 	.word	0x003ffffe

080090d0 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090de:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e6:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d002      	beq.n	80090f8 <DFU_GetStatus+0x28>
 80090f2:	2b06      	cmp	r3, #6
 80090f4:	d051      	beq.n	800919a <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 80090f6:	e08e      	b.n	8009216 <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d034      	beq.n	800916c <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2204      	movs	r2, #4
 8009106:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10e      	bne.n	8009156 <DFU_GetStatus+0x86>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b41      	cmp	r3, #65	; 0x41
 800913e:	d10a      	bne.n	8009156 <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009150:	2100      	movs	r1, #0
 8009152:	4798      	blx	r3
    break;
 8009154:	e05f      	b.n	8009216 <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8009166:	2101      	movs	r1, #1
 8009168:	4798      	blx	r3
    break;
 800916a:	e054      	b.n	8009216 <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2205      	movs	r2, #5
 8009170:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8009198:	e03d      	b.n	8009216 <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d116      	bne.n	80091d2 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2207      	movs	r2, #7
 80091a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 80091d0:	e020      	b.n	8009214 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d11b      	bne.n	8009214 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80091dc:	4b14      	ldr	r3, [pc, #80]	; (8009230 <DFU_GetStatus+0x160>)
 80091de:	7d1b      	ldrb	r3, [r3, #20]
 80091e0:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d015      	beq.n	8009214 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8009214:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800921c:	2206      	movs	r2, #6
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f903 	bl	800942c <USBD_CtlSendData>
}
 8009226:	bf00      	nop
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	200000d4 	.word	0x200000d4

08009234 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009242:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800924a:	2b0a      	cmp	r3, #10
 800924c:	d11e      	bne.n	800928c <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 800928a:	e01d      	b.n	80092c8 <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	220a      	movs	r2, #10
 8009290:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	220e      	movs	r2, #14
 8009298:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 80092c8:	bf00      	nop
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80092ea:	2201      	movs	r2, #1
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f89c 	bl	800942c <USBD_CtlSendData>
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800930a:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009312:	2b02      	cmp	r3, #2
 8009314:	d013      	beq.n	800933e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800931c:	2b03      	cmp	r3, #3
 800931e:	d00e      	beq.n	800933e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009326:	2b05      	cmp	r3, #5
 8009328:	d009      	beq.n	800933e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009330:	2b06      	cmp	r3, #6
 8009332:	d004      	beq.n	800933e <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800933a:	2b09      	cmp	r3, #9
 800933c:	d125      	bne.n	800938a <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
	...

08009398 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a6:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80093b0:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <DFU_Leave+0x90>)
 80093b2:	7d1b      	ldrb	r3, [r3, #20]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d016      	beq.n	80093ea <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2206      	movs	r2, #6
 80093c0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80093e8:	e01a      	b.n	8009420 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2208      	movs	r2, #8
 80093ee:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7fe f97f 	bl	800771a <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800941c:	f7ff f9d8 	bl	80087d0 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	200000d4 	.word	0x200000d4

0800942c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2202      	movs	r2, #2
 800943c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	2100      	movs	r1, #0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7f8 fe47 	bl	80020e6 <USBD_LL_Transmit>

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	2100      	movs	r1, #0
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7f8 fe36 	bl	80020e6 <USBD_LL_Transmit>

  return USBD_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2203      	movs	r2, #3
 8009494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f7f8 fe3a 	bl	8002128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	2100      	movs	r1, #0
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7f8 fe29 	bl	8002128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094f0:	2300      	movs	r3, #0
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7f8 fdf5 	bl	80020e6 <USBD_LL_Transmit>

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2205      	movs	r2, #5
 8009512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7f8 fe03 	bl	8002128 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <__errno>:
 800952c:	4b01      	ldr	r3, [pc, #4]	; (8009534 <__errno+0x8>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	200000fc 	.word	0x200000fc

08009538 <__libc_init_array>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4e0d      	ldr	r6, [pc, #52]	; (8009570 <__libc_init_array+0x38>)
 800953c:	4c0d      	ldr	r4, [pc, #52]	; (8009574 <__libc_init_array+0x3c>)
 800953e:	1ba4      	subs	r4, r4, r6
 8009540:	10a4      	asrs	r4, r4, #2
 8009542:	2500      	movs	r5, #0
 8009544:	42a5      	cmp	r5, r4
 8009546:	d109      	bne.n	800955c <__libc_init_array+0x24>
 8009548:	4e0b      	ldr	r6, [pc, #44]	; (8009578 <__libc_init_array+0x40>)
 800954a:	4c0c      	ldr	r4, [pc, #48]	; (800957c <__libc_init_array+0x44>)
 800954c:	f000 ff78 	bl	800a440 <_init>
 8009550:	1ba4      	subs	r4, r4, r6
 8009552:	10a4      	asrs	r4, r4, #2
 8009554:	2500      	movs	r5, #0
 8009556:	42a5      	cmp	r5, r4
 8009558:	d105      	bne.n	8009566 <__libc_init_array+0x2e>
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009560:	4798      	blx	r3
 8009562:	3501      	adds	r5, #1
 8009564:	e7ee      	b.n	8009544 <__libc_init_array+0xc>
 8009566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800956a:	4798      	blx	r3
 800956c:	3501      	adds	r5, #1
 800956e:	e7f2      	b.n	8009556 <__libc_init_array+0x1e>
 8009570:	0800a8d4 	.word	0x0800a8d4
 8009574:	0800a8d4 	.word	0x0800a8d4
 8009578:	0800a8d4 	.word	0x0800a8d4
 800957c:	0800a8d8 	.word	0x0800a8d8

08009580 <malloc>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <malloc+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f000 b861 	b.w	800964c <_malloc_r>
 800958a:	bf00      	nop
 800958c:	200000fc 	.word	0x200000fc

08009590 <free>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <free+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f000 b80b 	b.w	80095b0 <_free_r>
 800959a:	bf00      	nop
 800959c:	200000fc 	.word	0x200000fc

080095a0 <memset>:
 80095a0:	4402      	add	r2, r0
 80095a2:	4603      	mov	r3, r0
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d100      	bne.n	80095aa <memset+0xa>
 80095a8:	4770      	bx	lr
 80095aa:	f803 1b01 	strb.w	r1, [r3], #1
 80095ae:	e7f9      	b.n	80095a4 <memset+0x4>

080095b0 <_free_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4605      	mov	r5, r0
 80095b4:	2900      	cmp	r1, #0
 80095b6:	d045      	beq.n	8009644 <_free_r+0x94>
 80095b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095bc:	1f0c      	subs	r4, r1, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bfb8      	it	lt
 80095c2:	18e4      	addlt	r4, r4, r3
 80095c4:	f000 fbc6 	bl	8009d54 <__malloc_lock>
 80095c8:	4a1f      	ldr	r2, [pc, #124]	; (8009648 <_free_r+0x98>)
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	4610      	mov	r0, r2
 80095ce:	b933      	cbnz	r3, 80095de <_free_r+0x2e>
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	6014      	str	r4, [r2, #0]
 80095d4:	4628      	mov	r0, r5
 80095d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095da:	f000 bbbc 	b.w	8009d56 <__malloc_unlock>
 80095de:	42a3      	cmp	r3, r4
 80095e0:	d90c      	bls.n	80095fc <_free_r+0x4c>
 80095e2:	6821      	ldr	r1, [r4, #0]
 80095e4:	1862      	adds	r2, r4, r1
 80095e6:	4293      	cmp	r3, r2
 80095e8:	bf04      	itt	eq
 80095ea:	681a      	ldreq	r2, [r3, #0]
 80095ec:	685b      	ldreq	r3, [r3, #4]
 80095ee:	6063      	str	r3, [r4, #4]
 80095f0:	bf04      	itt	eq
 80095f2:	1852      	addeq	r2, r2, r1
 80095f4:	6022      	streq	r2, [r4, #0]
 80095f6:	6004      	str	r4, [r0, #0]
 80095f8:	e7ec      	b.n	80095d4 <_free_r+0x24>
 80095fa:	4613      	mov	r3, r2
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	b10a      	cbz	r2, 8009604 <_free_r+0x54>
 8009600:	42a2      	cmp	r2, r4
 8009602:	d9fa      	bls.n	80095fa <_free_r+0x4a>
 8009604:	6819      	ldr	r1, [r3, #0]
 8009606:	1858      	adds	r0, r3, r1
 8009608:	42a0      	cmp	r0, r4
 800960a:	d10b      	bne.n	8009624 <_free_r+0x74>
 800960c:	6820      	ldr	r0, [r4, #0]
 800960e:	4401      	add	r1, r0
 8009610:	1858      	adds	r0, r3, r1
 8009612:	4282      	cmp	r2, r0
 8009614:	6019      	str	r1, [r3, #0]
 8009616:	d1dd      	bne.n	80095d4 <_free_r+0x24>
 8009618:	6810      	ldr	r0, [r2, #0]
 800961a:	6852      	ldr	r2, [r2, #4]
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	4401      	add	r1, r0
 8009620:	6019      	str	r1, [r3, #0]
 8009622:	e7d7      	b.n	80095d4 <_free_r+0x24>
 8009624:	d902      	bls.n	800962c <_free_r+0x7c>
 8009626:	230c      	movs	r3, #12
 8009628:	602b      	str	r3, [r5, #0]
 800962a:	e7d3      	b.n	80095d4 <_free_r+0x24>
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	1821      	adds	r1, r4, r0
 8009630:	428a      	cmp	r2, r1
 8009632:	bf04      	itt	eq
 8009634:	6811      	ldreq	r1, [r2, #0]
 8009636:	6852      	ldreq	r2, [r2, #4]
 8009638:	6062      	str	r2, [r4, #4]
 800963a:	bf04      	itt	eq
 800963c:	1809      	addeq	r1, r1, r0
 800963e:	6021      	streq	r1, [r4, #0]
 8009640:	605c      	str	r4, [r3, #4]
 8009642:	e7c7      	b.n	80095d4 <_free_r+0x24>
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	20000284 	.word	0x20000284

0800964c <_malloc_r>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	1ccd      	adds	r5, r1, #3
 8009650:	f025 0503 	bic.w	r5, r5, #3
 8009654:	3508      	adds	r5, #8
 8009656:	2d0c      	cmp	r5, #12
 8009658:	bf38      	it	cc
 800965a:	250c      	movcc	r5, #12
 800965c:	2d00      	cmp	r5, #0
 800965e:	4606      	mov	r6, r0
 8009660:	db01      	blt.n	8009666 <_malloc_r+0x1a>
 8009662:	42a9      	cmp	r1, r5
 8009664:	d903      	bls.n	800966e <_malloc_r+0x22>
 8009666:	230c      	movs	r3, #12
 8009668:	6033      	str	r3, [r6, #0]
 800966a:	2000      	movs	r0, #0
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	f000 fb71 	bl	8009d54 <__malloc_lock>
 8009672:	4a21      	ldr	r2, [pc, #132]	; (80096f8 <_malloc_r+0xac>)
 8009674:	6814      	ldr	r4, [r2, #0]
 8009676:	4621      	mov	r1, r4
 8009678:	b991      	cbnz	r1, 80096a0 <_malloc_r+0x54>
 800967a:	4c20      	ldr	r4, [pc, #128]	; (80096fc <_malloc_r+0xb0>)
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	b91b      	cbnz	r3, 8009688 <_malloc_r+0x3c>
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f8b9 	bl	80097f8 <_sbrk_r>
 8009686:	6020      	str	r0, [r4, #0]
 8009688:	4629      	mov	r1, r5
 800968a:	4630      	mov	r0, r6
 800968c:	f000 f8b4 	bl	80097f8 <_sbrk_r>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d124      	bne.n	80096de <_malloc_r+0x92>
 8009694:	230c      	movs	r3, #12
 8009696:	6033      	str	r3, [r6, #0]
 8009698:	4630      	mov	r0, r6
 800969a:	f000 fb5c 	bl	8009d56 <__malloc_unlock>
 800969e:	e7e4      	b.n	800966a <_malloc_r+0x1e>
 80096a0:	680b      	ldr	r3, [r1, #0]
 80096a2:	1b5b      	subs	r3, r3, r5
 80096a4:	d418      	bmi.n	80096d8 <_malloc_r+0x8c>
 80096a6:	2b0b      	cmp	r3, #11
 80096a8:	d90f      	bls.n	80096ca <_malloc_r+0x7e>
 80096aa:	600b      	str	r3, [r1, #0]
 80096ac:	50cd      	str	r5, [r1, r3]
 80096ae:	18cc      	adds	r4, r1, r3
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 fb50 	bl	8009d56 <__malloc_unlock>
 80096b6:	f104 000b 	add.w	r0, r4, #11
 80096ba:	1d23      	adds	r3, r4, #4
 80096bc:	f020 0007 	bic.w	r0, r0, #7
 80096c0:	1ac3      	subs	r3, r0, r3
 80096c2:	d0d3      	beq.n	800966c <_malloc_r+0x20>
 80096c4:	425a      	negs	r2, r3
 80096c6:	50e2      	str	r2, [r4, r3]
 80096c8:	e7d0      	b.n	800966c <_malloc_r+0x20>
 80096ca:	428c      	cmp	r4, r1
 80096cc:	684b      	ldr	r3, [r1, #4]
 80096ce:	bf16      	itet	ne
 80096d0:	6063      	strne	r3, [r4, #4]
 80096d2:	6013      	streq	r3, [r2, #0]
 80096d4:	460c      	movne	r4, r1
 80096d6:	e7eb      	b.n	80096b0 <_malloc_r+0x64>
 80096d8:	460c      	mov	r4, r1
 80096da:	6849      	ldr	r1, [r1, #4]
 80096dc:	e7cc      	b.n	8009678 <_malloc_r+0x2c>
 80096de:	1cc4      	adds	r4, r0, #3
 80096e0:	f024 0403 	bic.w	r4, r4, #3
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	d005      	beq.n	80096f4 <_malloc_r+0xa8>
 80096e8:	1a21      	subs	r1, r4, r0
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 f884 	bl	80097f8 <_sbrk_r>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d0cf      	beq.n	8009694 <_malloc_r+0x48>
 80096f4:	6025      	str	r5, [r4, #0]
 80096f6:	e7db      	b.n	80096b0 <_malloc_r+0x64>
 80096f8:	20000284 	.word	0x20000284
 80096fc:	20000288 	.word	0x20000288

08009700 <iprintf>:
 8009700:	b40f      	push	{r0, r1, r2, r3}
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <iprintf+0x2c>)
 8009704:	b513      	push	{r0, r1, r4, lr}
 8009706:	681c      	ldr	r4, [r3, #0]
 8009708:	b124      	cbz	r4, 8009714 <iprintf+0x14>
 800970a:	69a3      	ldr	r3, [r4, #24]
 800970c:	b913      	cbnz	r3, 8009714 <iprintf+0x14>
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fa32 	bl	8009b78 <__sinit>
 8009714:	ab05      	add	r3, sp, #20
 8009716:	9a04      	ldr	r2, [sp, #16]
 8009718:	68a1      	ldr	r1, [r4, #8]
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	4620      	mov	r0, r4
 800971e:	f000 fb45 	bl	8009dac <_vfiprintf_r>
 8009722:	b002      	add	sp, #8
 8009724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009728:	b004      	add	sp, #16
 800972a:	4770      	bx	lr
 800972c:	200000fc 	.word	0x200000fc

08009730 <_puts_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	460e      	mov	r6, r1
 8009734:	4605      	mov	r5, r0
 8009736:	b118      	cbz	r0, 8009740 <_puts_r+0x10>
 8009738:	6983      	ldr	r3, [r0, #24]
 800973a:	b90b      	cbnz	r3, 8009740 <_puts_r+0x10>
 800973c:	f000 fa1c 	bl	8009b78 <__sinit>
 8009740:	69ab      	ldr	r3, [r5, #24]
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	b913      	cbnz	r3, 800974c <_puts_r+0x1c>
 8009746:	4628      	mov	r0, r5
 8009748:	f000 fa16 	bl	8009b78 <__sinit>
 800974c:	4b23      	ldr	r3, [pc, #140]	; (80097dc <_puts_r+0xac>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d117      	bne.n	8009782 <_puts_r+0x52>
 8009752:	686c      	ldr	r4, [r5, #4]
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	071b      	lsls	r3, r3, #28
 8009758:	d51d      	bpl.n	8009796 <_puts_r+0x66>
 800975a:	6923      	ldr	r3, [r4, #16]
 800975c:	b1db      	cbz	r3, 8009796 <_puts_r+0x66>
 800975e:	3e01      	subs	r6, #1
 8009760:	68a3      	ldr	r3, [r4, #8]
 8009762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009766:	3b01      	subs	r3, #1
 8009768:	60a3      	str	r3, [r4, #8]
 800976a:	b9e9      	cbnz	r1, 80097a8 <_puts_r+0x78>
 800976c:	2b00      	cmp	r3, #0
 800976e:	da2e      	bge.n	80097ce <_puts_r+0x9e>
 8009770:	4622      	mov	r2, r4
 8009772:	210a      	movs	r1, #10
 8009774:	4628      	mov	r0, r5
 8009776:	f000 f84f 	bl	8009818 <__swbuf_r>
 800977a:	3001      	adds	r0, #1
 800977c:	d011      	beq.n	80097a2 <_puts_r+0x72>
 800977e:	200a      	movs	r0, #10
 8009780:	e011      	b.n	80097a6 <_puts_r+0x76>
 8009782:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <_puts_r+0xb0>)
 8009784:	429c      	cmp	r4, r3
 8009786:	d101      	bne.n	800978c <_puts_r+0x5c>
 8009788:	68ac      	ldr	r4, [r5, #8]
 800978a:	e7e3      	b.n	8009754 <_puts_r+0x24>
 800978c:	4b15      	ldr	r3, [pc, #84]	; (80097e4 <_puts_r+0xb4>)
 800978e:	429c      	cmp	r4, r3
 8009790:	bf08      	it	eq
 8009792:	68ec      	ldreq	r4, [r5, #12]
 8009794:	e7de      	b.n	8009754 <_puts_r+0x24>
 8009796:	4621      	mov	r1, r4
 8009798:	4628      	mov	r0, r5
 800979a:	f000 f88f 	bl	80098bc <__swsetup_r>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0dd      	beq.n	800975e <_puts_r+0x2e>
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da04      	bge.n	80097b6 <_puts_r+0x86>
 80097ac:	69a2      	ldr	r2, [r4, #24]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	dc06      	bgt.n	80097c0 <_puts_r+0x90>
 80097b2:	290a      	cmp	r1, #10
 80097b4:	d004      	beq.n	80097c0 <_puts_r+0x90>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	1c5a      	adds	r2, r3, #1
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	7019      	strb	r1, [r3, #0]
 80097be:	e7cf      	b.n	8009760 <_puts_r+0x30>
 80097c0:	4622      	mov	r2, r4
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 f828 	bl	8009818 <__swbuf_r>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d1c9      	bne.n	8009760 <_puts_r+0x30>
 80097cc:	e7e9      	b.n	80097a2 <_puts_r+0x72>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	200a      	movs	r0, #10
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	7018      	strb	r0, [r3, #0]
 80097d8:	e7e5      	b.n	80097a6 <_puts_r+0x76>
 80097da:	bf00      	nop
 80097dc:	0800a858 	.word	0x0800a858
 80097e0:	0800a878 	.word	0x0800a878
 80097e4:	0800a838 	.word	0x0800a838

080097e8 <puts>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <puts+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f7ff bf9f 	b.w	8009730 <_puts_r>
 80097f2:	bf00      	nop
 80097f4:	200000fc 	.word	0x200000fc

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4c06      	ldr	r4, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4605      	mov	r5, r0
 8009800:	4608      	mov	r0, r1
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	f7f7 fe3e 	bl	8001484 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20000c50 	.word	0x20000c50

08009818 <__swbuf_r>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	460e      	mov	r6, r1
 800981c:	4614      	mov	r4, r2
 800981e:	4605      	mov	r5, r0
 8009820:	b118      	cbz	r0, 800982a <__swbuf_r+0x12>
 8009822:	6983      	ldr	r3, [r0, #24]
 8009824:	b90b      	cbnz	r3, 800982a <__swbuf_r+0x12>
 8009826:	f000 f9a7 	bl	8009b78 <__sinit>
 800982a:	4b21      	ldr	r3, [pc, #132]	; (80098b0 <__swbuf_r+0x98>)
 800982c:	429c      	cmp	r4, r3
 800982e:	d12a      	bne.n	8009886 <__swbuf_r+0x6e>
 8009830:	686c      	ldr	r4, [r5, #4]
 8009832:	69a3      	ldr	r3, [r4, #24]
 8009834:	60a3      	str	r3, [r4, #8]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	071a      	lsls	r2, r3, #28
 800983a:	d52e      	bpl.n	800989a <__swbuf_r+0x82>
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	b363      	cbz	r3, 800989a <__swbuf_r+0x82>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	6820      	ldr	r0, [r4, #0]
 8009844:	1ac0      	subs	r0, r0, r3
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	b2f6      	uxtb	r6, r6
 800984a:	4283      	cmp	r3, r0
 800984c:	4637      	mov	r7, r6
 800984e:	dc04      	bgt.n	800985a <__swbuf_r+0x42>
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f926 	bl	8009aa4 <_fflush_r>
 8009858:	bb28      	cbnz	r0, 80098a6 <__swbuf_r+0x8e>
 800985a:	68a3      	ldr	r3, [r4, #8]
 800985c:	3b01      	subs	r3, #1
 800985e:	60a3      	str	r3, [r4, #8]
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	6022      	str	r2, [r4, #0]
 8009866:	701e      	strb	r6, [r3, #0]
 8009868:	6963      	ldr	r3, [r4, #20]
 800986a:	3001      	adds	r0, #1
 800986c:	4283      	cmp	r3, r0
 800986e:	d004      	beq.n	800987a <__swbuf_r+0x62>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	07db      	lsls	r3, r3, #31
 8009874:	d519      	bpl.n	80098aa <__swbuf_r+0x92>
 8009876:	2e0a      	cmp	r6, #10
 8009878:	d117      	bne.n	80098aa <__swbuf_r+0x92>
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f000 f911 	bl	8009aa4 <_fflush_r>
 8009882:	b190      	cbz	r0, 80098aa <__swbuf_r+0x92>
 8009884:	e00f      	b.n	80098a6 <__swbuf_r+0x8e>
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <__swbuf_r+0x9c>)
 8009888:	429c      	cmp	r4, r3
 800988a:	d101      	bne.n	8009890 <__swbuf_r+0x78>
 800988c:	68ac      	ldr	r4, [r5, #8]
 800988e:	e7d0      	b.n	8009832 <__swbuf_r+0x1a>
 8009890:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <__swbuf_r+0xa0>)
 8009892:	429c      	cmp	r4, r3
 8009894:	bf08      	it	eq
 8009896:	68ec      	ldreq	r4, [r5, #12]
 8009898:	e7cb      	b.n	8009832 <__swbuf_r+0x1a>
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f80d 	bl	80098bc <__swsetup_r>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0cc      	beq.n	8009840 <__swbuf_r+0x28>
 80098a6:	f04f 37ff 	mov.w	r7, #4294967295
 80098aa:	4638      	mov	r0, r7
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ae:	bf00      	nop
 80098b0:	0800a858 	.word	0x0800a858
 80098b4:	0800a878 	.word	0x0800a878
 80098b8:	0800a838 	.word	0x0800a838

080098bc <__swsetup_r>:
 80098bc:	4b32      	ldr	r3, [pc, #200]	; (8009988 <__swsetup_r+0xcc>)
 80098be:	b570      	push	{r4, r5, r6, lr}
 80098c0:	681d      	ldr	r5, [r3, #0]
 80098c2:	4606      	mov	r6, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	b125      	cbz	r5, 80098d2 <__swsetup_r+0x16>
 80098c8:	69ab      	ldr	r3, [r5, #24]
 80098ca:	b913      	cbnz	r3, 80098d2 <__swsetup_r+0x16>
 80098cc:	4628      	mov	r0, r5
 80098ce:	f000 f953 	bl	8009b78 <__sinit>
 80098d2:	4b2e      	ldr	r3, [pc, #184]	; (800998c <__swsetup_r+0xd0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	d10f      	bne.n	80098f8 <__swsetup_r+0x3c>
 80098d8:	686c      	ldr	r4, [r5, #4]
 80098da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	0715      	lsls	r5, r2, #28
 80098e2:	d42c      	bmi.n	800993e <__swsetup_r+0x82>
 80098e4:	06d0      	lsls	r0, r2, #27
 80098e6:	d411      	bmi.n	800990c <__swsetup_r+0x50>
 80098e8:	2209      	movs	r2, #9
 80098ea:	6032      	str	r2, [r6, #0]
 80098ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	f04f 30ff 	mov.w	r0, #4294967295
 80098f6:	e03e      	b.n	8009976 <__swsetup_r+0xba>
 80098f8:	4b25      	ldr	r3, [pc, #148]	; (8009990 <__swsetup_r+0xd4>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d101      	bne.n	8009902 <__swsetup_r+0x46>
 80098fe:	68ac      	ldr	r4, [r5, #8]
 8009900:	e7eb      	b.n	80098da <__swsetup_r+0x1e>
 8009902:	4b24      	ldr	r3, [pc, #144]	; (8009994 <__swsetup_r+0xd8>)
 8009904:	429c      	cmp	r4, r3
 8009906:	bf08      	it	eq
 8009908:	68ec      	ldreq	r4, [r5, #12]
 800990a:	e7e6      	b.n	80098da <__swsetup_r+0x1e>
 800990c:	0751      	lsls	r1, r2, #29
 800990e:	d512      	bpl.n	8009936 <__swsetup_r+0x7a>
 8009910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009912:	b141      	cbz	r1, 8009926 <__swsetup_r+0x6a>
 8009914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009918:	4299      	cmp	r1, r3
 800991a:	d002      	beq.n	8009922 <__swsetup_r+0x66>
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff fe47 	bl	80095b0 <_free_r>
 8009922:	2300      	movs	r3, #0
 8009924:	6363      	str	r3, [r4, #52]	; 0x34
 8009926:	89a3      	ldrh	r3, [r4, #12]
 8009928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	2300      	movs	r3, #0
 8009930:	6063      	str	r3, [r4, #4]
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f043 0308 	orr.w	r3, r3, #8
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	6923      	ldr	r3, [r4, #16]
 8009940:	b94b      	cbnz	r3, 8009956 <__swsetup_r+0x9a>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800994c:	d003      	beq.n	8009956 <__swsetup_r+0x9a>
 800994e:	4621      	mov	r1, r4
 8009950:	4630      	mov	r0, r6
 8009952:	f000 f9bf 	bl	8009cd4 <__smakebuf_r>
 8009956:	89a2      	ldrh	r2, [r4, #12]
 8009958:	f012 0301 	ands.w	r3, r2, #1
 800995c:	d00c      	beq.n	8009978 <__swsetup_r+0xbc>
 800995e:	2300      	movs	r3, #0
 8009960:	60a3      	str	r3, [r4, #8]
 8009962:	6963      	ldr	r3, [r4, #20]
 8009964:	425b      	negs	r3, r3
 8009966:	61a3      	str	r3, [r4, #24]
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	b953      	cbnz	r3, 8009982 <__swsetup_r+0xc6>
 800996c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009970:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009974:	d1ba      	bne.n	80098ec <__swsetup_r+0x30>
 8009976:	bd70      	pop	{r4, r5, r6, pc}
 8009978:	0792      	lsls	r2, r2, #30
 800997a:	bf58      	it	pl
 800997c:	6963      	ldrpl	r3, [r4, #20]
 800997e:	60a3      	str	r3, [r4, #8]
 8009980:	e7f2      	b.n	8009968 <__swsetup_r+0xac>
 8009982:	2000      	movs	r0, #0
 8009984:	e7f7      	b.n	8009976 <__swsetup_r+0xba>
 8009986:	bf00      	nop
 8009988:	200000fc 	.word	0x200000fc
 800998c:	0800a858 	.word	0x0800a858
 8009990:	0800a878 	.word	0x0800a878
 8009994:	0800a838 	.word	0x0800a838

08009998 <__sflush_r>:
 8009998:	898a      	ldrh	r2, [r1, #12]
 800999a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	4605      	mov	r5, r0
 80099a0:	0710      	lsls	r0, r2, #28
 80099a2:	460c      	mov	r4, r1
 80099a4:	d458      	bmi.n	8009a58 <__sflush_r+0xc0>
 80099a6:	684b      	ldr	r3, [r1, #4]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	dc05      	bgt.n	80099b8 <__sflush_r+0x20>
 80099ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dc02      	bgt.n	80099b8 <__sflush_r+0x20>
 80099b2:	2000      	movs	r0, #0
 80099b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	d0f9      	beq.n	80099b2 <__sflush_r+0x1a>
 80099be:	2300      	movs	r3, #0
 80099c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099c4:	682f      	ldr	r7, [r5, #0]
 80099c6:	6a21      	ldr	r1, [r4, #32]
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	d032      	beq.n	8009a32 <__sflush_r+0x9a>
 80099cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	075a      	lsls	r2, r3, #29
 80099d2:	d505      	bpl.n	80099e0 <__sflush_r+0x48>
 80099d4:	6863      	ldr	r3, [r4, #4]
 80099d6:	1ac0      	subs	r0, r0, r3
 80099d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099da:	b10b      	cbz	r3, 80099e0 <__sflush_r+0x48>
 80099dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099de:	1ac0      	subs	r0, r0, r3
 80099e0:	2300      	movs	r3, #0
 80099e2:	4602      	mov	r2, r0
 80099e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099e6:	6a21      	ldr	r1, [r4, #32]
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b0      	blx	r6
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	d106      	bne.n	8009a00 <__sflush_r+0x68>
 80099f2:	6829      	ldr	r1, [r5, #0]
 80099f4:	291d      	cmp	r1, #29
 80099f6:	d848      	bhi.n	8009a8a <__sflush_r+0xf2>
 80099f8:	4a29      	ldr	r2, [pc, #164]	; (8009aa0 <__sflush_r+0x108>)
 80099fa:	40ca      	lsrs	r2, r1
 80099fc:	07d6      	lsls	r6, r2, #31
 80099fe:	d544      	bpl.n	8009a8a <__sflush_r+0xf2>
 8009a00:	2200      	movs	r2, #0
 8009a02:	6062      	str	r2, [r4, #4]
 8009a04:	04d9      	lsls	r1, r3, #19
 8009a06:	6922      	ldr	r2, [r4, #16]
 8009a08:	6022      	str	r2, [r4, #0]
 8009a0a:	d504      	bpl.n	8009a16 <__sflush_r+0x7e>
 8009a0c:	1c42      	adds	r2, r0, #1
 8009a0e:	d101      	bne.n	8009a14 <__sflush_r+0x7c>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b903      	cbnz	r3, 8009a16 <__sflush_r+0x7e>
 8009a14:	6560      	str	r0, [r4, #84]	; 0x54
 8009a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a18:	602f      	str	r7, [r5, #0]
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d0c9      	beq.n	80099b2 <__sflush_r+0x1a>
 8009a1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a22:	4299      	cmp	r1, r3
 8009a24:	d002      	beq.n	8009a2c <__sflush_r+0x94>
 8009a26:	4628      	mov	r0, r5
 8009a28:	f7ff fdc2 	bl	80095b0 <_free_r>
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	6360      	str	r0, [r4, #52]	; 0x34
 8009a30:	e7c0      	b.n	80099b4 <__sflush_r+0x1c>
 8009a32:	2301      	movs	r3, #1
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b0      	blx	r6
 8009a38:	1c41      	adds	r1, r0, #1
 8009a3a:	d1c8      	bne.n	80099ce <__sflush_r+0x36>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0c5      	beq.n	80099ce <__sflush_r+0x36>
 8009a42:	2b1d      	cmp	r3, #29
 8009a44:	d001      	beq.n	8009a4a <__sflush_r+0xb2>
 8009a46:	2b16      	cmp	r3, #22
 8009a48:	d101      	bne.n	8009a4e <__sflush_r+0xb6>
 8009a4a:	602f      	str	r7, [r5, #0]
 8009a4c:	e7b1      	b.n	80099b2 <__sflush_r+0x1a>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	e7ad      	b.n	80099b4 <__sflush_r+0x1c>
 8009a58:	690f      	ldr	r7, [r1, #16]
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	d0a9      	beq.n	80099b2 <__sflush_r+0x1a>
 8009a5e:	0793      	lsls	r3, r2, #30
 8009a60:	680e      	ldr	r6, [r1, #0]
 8009a62:	bf08      	it	eq
 8009a64:	694b      	ldreq	r3, [r1, #20]
 8009a66:	600f      	str	r7, [r1, #0]
 8009a68:	bf18      	it	ne
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	eba6 0807 	sub.w	r8, r6, r7
 8009a70:	608b      	str	r3, [r1, #8]
 8009a72:	f1b8 0f00 	cmp.w	r8, #0
 8009a76:	dd9c      	ble.n	80099b2 <__sflush_r+0x1a>
 8009a78:	4643      	mov	r3, r8
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	6a21      	ldr	r1, [r4, #32]
 8009a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a80:	4628      	mov	r0, r5
 8009a82:	47b0      	blx	r6
 8009a84:	2800      	cmp	r0, #0
 8009a86:	dc06      	bgt.n	8009a96 <__sflush_r+0xfe>
 8009a88:	89a3      	ldrh	r3, [r4, #12]
 8009a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e78e      	b.n	80099b4 <__sflush_r+0x1c>
 8009a96:	4407      	add	r7, r0
 8009a98:	eba8 0800 	sub.w	r8, r8, r0
 8009a9c:	e7e9      	b.n	8009a72 <__sflush_r+0xda>
 8009a9e:	bf00      	nop
 8009aa0:	20400001 	.word	0x20400001

08009aa4 <_fflush_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	690b      	ldr	r3, [r1, #16]
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	b1db      	cbz	r3, 8009ae6 <_fflush_r+0x42>
 8009aae:	b118      	cbz	r0, 8009ab8 <_fflush_r+0x14>
 8009ab0:	6983      	ldr	r3, [r0, #24]
 8009ab2:	b90b      	cbnz	r3, 8009ab8 <_fflush_r+0x14>
 8009ab4:	f000 f860 	bl	8009b78 <__sinit>
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <_fflush_r+0x48>)
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d109      	bne.n	8009ad2 <_fflush_r+0x2e>
 8009abe:	686c      	ldr	r4, [r5, #4]
 8009ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac4:	b17b      	cbz	r3, 8009ae6 <_fflush_r+0x42>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ace:	f7ff bf63 	b.w	8009998 <__sflush_r>
 8009ad2:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <_fflush_r+0x4c>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d101      	bne.n	8009adc <_fflush_r+0x38>
 8009ad8:	68ac      	ldr	r4, [r5, #8]
 8009ada:	e7f1      	b.n	8009ac0 <_fflush_r+0x1c>
 8009adc:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <_fflush_r+0x50>)
 8009ade:	429c      	cmp	r4, r3
 8009ae0:	bf08      	it	eq
 8009ae2:	68ec      	ldreq	r4, [r5, #12]
 8009ae4:	e7ec      	b.n	8009ac0 <_fflush_r+0x1c>
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	bd38      	pop	{r3, r4, r5, pc}
 8009aea:	bf00      	nop
 8009aec:	0800a858 	.word	0x0800a858
 8009af0:	0800a878 	.word	0x0800a878
 8009af4:	0800a838 	.word	0x0800a838

08009af8 <std>:
 8009af8:	2300      	movs	r3, #0
 8009afa:	b510      	push	{r4, lr}
 8009afc:	4604      	mov	r4, r0
 8009afe:	e9c0 3300 	strd	r3, r3, [r0]
 8009b02:	6083      	str	r3, [r0, #8]
 8009b04:	8181      	strh	r1, [r0, #12]
 8009b06:	6643      	str	r3, [r0, #100]	; 0x64
 8009b08:	81c2      	strh	r2, [r0, #14]
 8009b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b0e:	6183      	str	r3, [r0, #24]
 8009b10:	4619      	mov	r1, r3
 8009b12:	2208      	movs	r2, #8
 8009b14:	305c      	adds	r0, #92	; 0x5c
 8009b16:	f7ff fd43 	bl	80095a0 <memset>
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <std+0x38>)
 8009b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <std+0x3c>)
 8009b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x40>)
 8009b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x44>)
 8009b28:	6224      	str	r4, [r4, #32]
 8009b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800a2e9 	.word	0x0800a2e9
 8009b34:	0800a30b 	.word	0x0800a30b
 8009b38:	0800a343 	.word	0x0800a343
 8009b3c:	0800a367 	.word	0x0800a367

08009b40 <_cleanup_r>:
 8009b40:	4901      	ldr	r1, [pc, #4]	; (8009b48 <_cleanup_r+0x8>)
 8009b42:	f000 b885 	b.w	8009c50 <_fwalk_reent>
 8009b46:	bf00      	nop
 8009b48:	08009aa5 	.word	0x08009aa5

08009b4c <__sfmoreglue>:
 8009b4c:	b570      	push	{r4, r5, r6, lr}
 8009b4e:	1e4a      	subs	r2, r1, #1
 8009b50:	2568      	movs	r5, #104	; 0x68
 8009b52:	4355      	muls	r5, r2
 8009b54:	460e      	mov	r6, r1
 8009b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b5a:	f7ff fd77 	bl	800964c <_malloc_r>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	b140      	cbz	r0, 8009b74 <__sfmoreglue+0x28>
 8009b62:	2100      	movs	r1, #0
 8009b64:	e9c0 1600 	strd	r1, r6, [r0]
 8009b68:	300c      	adds	r0, #12
 8009b6a:	60a0      	str	r0, [r4, #8]
 8009b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b70:	f7ff fd16 	bl	80095a0 <memset>
 8009b74:	4620      	mov	r0, r4
 8009b76:	bd70      	pop	{r4, r5, r6, pc}

08009b78 <__sinit>:
 8009b78:	6983      	ldr	r3, [r0, #24]
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	bb33      	cbnz	r3, 8009bce <__sinit+0x56>
 8009b80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009b84:	6503      	str	r3, [r0, #80]	; 0x50
 8009b86:	4b12      	ldr	r3, [pc, #72]	; (8009bd0 <__sinit+0x58>)
 8009b88:	4a12      	ldr	r2, [pc, #72]	; (8009bd4 <__sinit+0x5c>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6282      	str	r2, [r0, #40]	; 0x28
 8009b8e:	4298      	cmp	r0, r3
 8009b90:	bf04      	itt	eq
 8009b92:	2301      	moveq	r3, #1
 8009b94:	6183      	streq	r3, [r0, #24]
 8009b96:	f000 f81f 	bl	8009bd8 <__sfp>
 8009b9a:	6060      	str	r0, [r4, #4]
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 f81b 	bl	8009bd8 <__sfp>
 8009ba2:	60a0      	str	r0, [r4, #8]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 f817 	bl	8009bd8 <__sfp>
 8009baa:	2200      	movs	r2, #0
 8009bac:	60e0      	str	r0, [r4, #12]
 8009bae:	2104      	movs	r1, #4
 8009bb0:	6860      	ldr	r0, [r4, #4]
 8009bb2:	f7ff ffa1 	bl	8009af8 <std>
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	2109      	movs	r1, #9
 8009bba:	68a0      	ldr	r0, [r4, #8]
 8009bbc:	f7ff ff9c 	bl	8009af8 <std>
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	2112      	movs	r1, #18
 8009bc4:	68e0      	ldr	r0, [r4, #12]
 8009bc6:	f7ff ff97 	bl	8009af8 <std>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	61a3      	str	r3, [r4, #24]
 8009bce:	bd10      	pop	{r4, pc}
 8009bd0:	0800a834 	.word	0x0800a834
 8009bd4:	08009b41 	.word	0x08009b41

08009bd8 <__sfp>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	4b1b      	ldr	r3, [pc, #108]	; (8009c48 <__sfp+0x70>)
 8009bdc:	681e      	ldr	r6, [r3, #0]
 8009bde:	69b3      	ldr	r3, [r6, #24]
 8009be0:	4607      	mov	r7, r0
 8009be2:	b913      	cbnz	r3, 8009bea <__sfp+0x12>
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7ff ffc7 	bl	8009b78 <__sinit>
 8009bea:	3648      	adds	r6, #72	; 0x48
 8009bec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	d503      	bpl.n	8009bfc <__sfp+0x24>
 8009bf4:	6833      	ldr	r3, [r6, #0]
 8009bf6:	b133      	cbz	r3, 8009c06 <__sfp+0x2e>
 8009bf8:	6836      	ldr	r6, [r6, #0]
 8009bfa:	e7f7      	b.n	8009bec <__sfp+0x14>
 8009bfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c00:	b16d      	cbz	r5, 8009c1e <__sfp+0x46>
 8009c02:	3468      	adds	r4, #104	; 0x68
 8009c04:	e7f4      	b.n	8009bf0 <__sfp+0x18>
 8009c06:	2104      	movs	r1, #4
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff ff9f 	bl	8009b4c <__sfmoreglue>
 8009c0e:	6030      	str	r0, [r6, #0]
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1f1      	bne.n	8009bf8 <__sfp+0x20>
 8009c14:	230c      	movs	r3, #12
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4604      	mov	r4, r0
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <__sfp+0x74>)
 8009c20:	6665      	str	r5, [r4, #100]	; 0x64
 8009c22:	e9c4 5500 	strd	r5, r5, [r4]
 8009c26:	60a5      	str	r5, [r4, #8]
 8009c28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009c2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009c30:	2208      	movs	r2, #8
 8009c32:	4629      	mov	r1, r5
 8009c34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c38:	f7ff fcb2 	bl	80095a0 <memset>
 8009c3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c44:	e7e9      	b.n	8009c1a <__sfp+0x42>
 8009c46:	bf00      	nop
 8009c48:	0800a834 	.word	0x0800a834
 8009c4c:	ffff0001 	.word	0xffff0001

08009c50 <_fwalk_reent>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	4680      	mov	r8, r0
 8009c56:	4689      	mov	r9, r1
 8009c58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	b914      	cbnz	r4, 8009c66 <_fwalk_reent+0x16>
 8009c60:	4630      	mov	r0, r6
 8009c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009c6a:	3f01      	subs	r7, #1
 8009c6c:	d501      	bpl.n	8009c72 <_fwalk_reent+0x22>
 8009c6e:	6824      	ldr	r4, [r4, #0]
 8009c70:	e7f5      	b.n	8009c5e <_fwalk_reent+0xe>
 8009c72:	89ab      	ldrh	r3, [r5, #12]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d907      	bls.n	8009c88 <_fwalk_reent+0x38>
 8009c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	d003      	beq.n	8009c88 <_fwalk_reent+0x38>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4640      	mov	r0, r8
 8009c84:	47c8      	blx	r9
 8009c86:	4306      	orrs	r6, r0
 8009c88:	3568      	adds	r5, #104	; 0x68
 8009c8a:	e7ee      	b.n	8009c6a <_fwalk_reent+0x1a>

08009c8c <__swhatbuf_r>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	460e      	mov	r6, r1
 8009c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c94:	2900      	cmp	r1, #0
 8009c96:	b096      	sub	sp, #88	; 0x58
 8009c98:	4614      	mov	r4, r2
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	da07      	bge.n	8009cae <__swhatbuf_r+0x22>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	89b3      	ldrh	r3, [r6, #12]
 8009ca4:	061a      	lsls	r2, r3, #24
 8009ca6:	d410      	bmi.n	8009cca <__swhatbuf_r+0x3e>
 8009ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cac:	e00e      	b.n	8009ccc <__swhatbuf_r+0x40>
 8009cae:	466a      	mov	r2, sp
 8009cb0:	f000 fb80 	bl	800a3b4 <_fstat_r>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	dbf2      	blt.n	8009c9e <__swhatbuf_r+0x12>
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cc2:	425a      	negs	r2, r3
 8009cc4:	415a      	adcs	r2, r3
 8009cc6:	602a      	str	r2, [r5, #0]
 8009cc8:	e7ee      	b.n	8009ca8 <__swhatbuf_r+0x1c>
 8009cca:	2340      	movs	r3, #64	; 0x40
 8009ccc:	2000      	movs	r0, #0
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	b016      	add	sp, #88	; 0x58
 8009cd2:	bd70      	pop	{r4, r5, r6, pc}

08009cd4 <__smakebuf_r>:
 8009cd4:	898b      	ldrh	r3, [r1, #12]
 8009cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cd8:	079d      	lsls	r5, r3, #30
 8009cda:	4606      	mov	r6, r0
 8009cdc:	460c      	mov	r4, r1
 8009cde:	d507      	bpl.n	8009cf0 <__smakebuf_r+0x1c>
 8009ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	6123      	str	r3, [r4, #16]
 8009ce8:	2301      	movs	r3, #1
 8009cea:	6163      	str	r3, [r4, #20]
 8009cec:	b002      	add	sp, #8
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	ab01      	add	r3, sp, #4
 8009cf2:	466a      	mov	r2, sp
 8009cf4:	f7ff ffca 	bl	8009c8c <__swhatbuf_r>
 8009cf8:	9900      	ldr	r1, [sp, #0]
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f7ff fca5 	bl	800964c <_malloc_r>
 8009d02:	b948      	cbnz	r0, 8009d18 <__smakebuf_r+0x44>
 8009d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d08:	059a      	lsls	r2, r3, #22
 8009d0a:	d4ef      	bmi.n	8009cec <__smakebuf_r+0x18>
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	81a3      	strh	r3, [r4, #12]
 8009d16:	e7e3      	b.n	8009ce0 <__smakebuf_r+0xc>
 8009d18:	4b0d      	ldr	r3, [pc, #52]	; (8009d50 <__smakebuf_r+0x7c>)
 8009d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	6020      	str	r0, [r4, #0]
 8009d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	9b00      	ldr	r3, [sp, #0]
 8009d28:	6163      	str	r3, [r4, #20]
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	6120      	str	r0, [r4, #16]
 8009d2e:	b15b      	cbz	r3, 8009d48 <__smakebuf_r+0x74>
 8009d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d34:	4630      	mov	r0, r6
 8009d36:	f000 fb4f 	bl	800a3d8 <_isatty_r>
 8009d3a:	b128      	cbz	r0, 8009d48 <__smakebuf_r+0x74>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f023 0303 	bic.w	r3, r3, #3
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	431d      	orrs	r5, r3
 8009d4c:	81a5      	strh	r5, [r4, #12]
 8009d4e:	e7cd      	b.n	8009cec <__smakebuf_r+0x18>
 8009d50:	08009b41 	.word	0x08009b41

08009d54 <__malloc_lock>:
 8009d54:	4770      	bx	lr

08009d56 <__malloc_unlock>:
 8009d56:	4770      	bx	lr

08009d58 <__sfputc_r>:
 8009d58:	6893      	ldr	r3, [r2, #8]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	b410      	push	{r4}
 8009d60:	6093      	str	r3, [r2, #8]
 8009d62:	da08      	bge.n	8009d76 <__sfputc_r+0x1e>
 8009d64:	6994      	ldr	r4, [r2, #24]
 8009d66:	42a3      	cmp	r3, r4
 8009d68:	db01      	blt.n	8009d6e <__sfputc_r+0x16>
 8009d6a:	290a      	cmp	r1, #10
 8009d6c:	d103      	bne.n	8009d76 <__sfputc_r+0x1e>
 8009d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d72:	f7ff bd51 	b.w	8009818 <__swbuf_r>
 8009d76:	6813      	ldr	r3, [r2, #0]
 8009d78:	1c58      	adds	r0, r3, #1
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	7019      	strb	r1, [r3, #0]
 8009d7e:	4608      	mov	r0, r1
 8009d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <__sfputs_r>:
 8009d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d88:	4606      	mov	r6, r0
 8009d8a:	460f      	mov	r7, r1
 8009d8c:	4614      	mov	r4, r2
 8009d8e:	18d5      	adds	r5, r2, r3
 8009d90:	42ac      	cmp	r4, r5
 8009d92:	d101      	bne.n	8009d98 <__sfputs_r+0x12>
 8009d94:	2000      	movs	r0, #0
 8009d96:	e007      	b.n	8009da8 <__sfputs_r+0x22>
 8009d98:	463a      	mov	r2, r7
 8009d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ffda 	bl	8009d58 <__sfputc_r>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d1f3      	bne.n	8009d90 <__sfputs_r+0xa>
 8009da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dac <_vfiprintf_r>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	460c      	mov	r4, r1
 8009db2:	b09d      	sub	sp, #116	; 0x74
 8009db4:	4617      	mov	r7, r2
 8009db6:	461d      	mov	r5, r3
 8009db8:	4606      	mov	r6, r0
 8009dba:	b118      	cbz	r0, 8009dc4 <_vfiprintf_r+0x18>
 8009dbc:	6983      	ldr	r3, [r0, #24]
 8009dbe:	b90b      	cbnz	r3, 8009dc4 <_vfiprintf_r+0x18>
 8009dc0:	f7ff feda 	bl	8009b78 <__sinit>
 8009dc4:	4b7c      	ldr	r3, [pc, #496]	; (8009fb8 <_vfiprintf_r+0x20c>)
 8009dc6:	429c      	cmp	r4, r3
 8009dc8:	d158      	bne.n	8009e7c <_vfiprintf_r+0xd0>
 8009dca:	6874      	ldr	r4, [r6, #4]
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	0718      	lsls	r0, r3, #28
 8009dd0:	d55e      	bpl.n	8009e90 <_vfiprintf_r+0xe4>
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d05b      	beq.n	8009e90 <_vfiprintf_r+0xe4>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9309      	str	r3, [sp, #36]	; 0x24
 8009ddc:	2320      	movs	r3, #32
 8009dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009de2:	2330      	movs	r3, #48	; 0x30
 8009de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009de8:	9503      	str	r5, [sp, #12]
 8009dea:	f04f 0b01 	mov.w	fp, #1
 8009dee:	46b8      	mov	r8, r7
 8009df0:	4645      	mov	r5, r8
 8009df2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009df6:	b10b      	cbz	r3, 8009dfc <_vfiprintf_r+0x50>
 8009df8:	2b25      	cmp	r3, #37	; 0x25
 8009dfa:	d154      	bne.n	8009ea6 <_vfiprintf_r+0xfa>
 8009dfc:	ebb8 0a07 	subs.w	sl, r8, r7
 8009e00:	d00b      	beq.n	8009e1a <_vfiprintf_r+0x6e>
 8009e02:	4653      	mov	r3, sl
 8009e04:	463a      	mov	r2, r7
 8009e06:	4621      	mov	r1, r4
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffbc 	bl	8009d86 <__sfputs_r>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f000 80c2 	beq.w	8009f98 <_vfiprintf_r+0x1ec>
 8009e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e16:	4453      	add	r3, sl
 8009e18:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1a:	f898 3000 	ldrb.w	r3, [r8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80ba 	beq.w	8009f98 <_vfiprintf_r+0x1ec>
 8009e24:	2300      	movs	r3, #0
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e2e:	9304      	str	r3, [sp, #16]
 8009e30:	9307      	str	r3, [sp, #28]
 8009e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e36:	931a      	str	r3, [sp, #104]	; 0x68
 8009e38:	46a8      	mov	r8, r5
 8009e3a:	2205      	movs	r2, #5
 8009e3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009e40:	485e      	ldr	r0, [pc, #376]	; (8009fbc <_vfiprintf_r+0x210>)
 8009e42:	f7f6 f9fd 	bl	8000240 <memchr>
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	bb78      	cbnz	r0, 8009eaa <_vfiprintf_r+0xfe>
 8009e4a:	06d9      	lsls	r1, r3, #27
 8009e4c:	bf44      	itt	mi
 8009e4e:	2220      	movmi	r2, #32
 8009e50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	bf44      	itt	mi
 8009e58:	222b      	movmi	r2, #43	; 0x2b
 8009e5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e5e:	782a      	ldrb	r2, [r5, #0]
 8009e60:	2a2a      	cmp	r2, #42	; 0x2a
 8009e62:	d02a      	beq.n	8009eba <_vfiprintf_r+0x10e>
 8009e64:	9a07      	ldr	r2, [sp, #28]
 8009e66:	46a8      	mov	r8, r5
 8009e68:	2000      	movs	r0, #0
 8009e6a:	250a      	movs	r5, #10
 8009e6c:	4641      	mov	r1, r8
 8009e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e72:	3b30      	subs	r3, #48	; 0x30
 8009e74:	2b09      	cmp	r3, #9
 8009e76:	d969      	bls.n	8009f4c <_vfiprintf_r+0x1a0>
 8009e78:	b360      	cbz	r0, 8009ed4 <_vfiprintf_r+0x128>
 8009e7a:	e024      	b.n	8009ec6 <_vfiprintf_r+0x11a>
 8009e7c:	4b50      	ldr	r3, [pc, #320]	; (8009fc0 <_vfiprintf_r+0x214>)
 8009e7e:	429c      	cmp	r4, r3
 8009e80:	d101      	bne.n	8009e86 <_vfiprintf_r+0xda>
 8009e82:	68b4      	ldr	r4, [r6, #8]
 8009e84:	e7a2      	b.n	8009dcc <_vfiprintf_r+0x20>
 8009e86:	4b4f      	ldr	r3, [pc, #316]	; (8009fc4 <_vfiprintf_r+0x218>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	bf08      	it	eq
 8009e8c:	68f4      	ldreq	r4, [r6, #12]
 8009e8e:	e79d      	b.n	8009dcc <_vfiprintf_r+0x20>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4630      	mov	r0, r6
 8009e94:	f7ff fd12 	bl	80098bc <__swsetup_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d09d      	beq.n	8009dd8 <_vfiprintf_r+0x2c>
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	b01d      	add	sp, #116	; 0x74
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	46a8      	mov	r8, r5
 8009ea8:	e7a2      	b.n	8009df0 <_vfiprintf_r+0x44>
 8009eaa:	4a44      	ldr	r2, [pc, #272]	; (8009fbc <_vfiprintf_r+0x210>)
 8009eac:	1a80      	subs	r0, r0, r2
 8009eae:	fa0b f000 	lsl.w	r0, fp, r0
 8009eb2:	4318      	orrs	r0, r3
 8009eb4:	9004      	str	r0, [sp, #16]
 8009eb6:	4645      	mov	r5, r8
 8009eb8:	e7be      	b.n	8009e38 <_vfiprintf_r+0x8c>
 8009eba:	9a03      	ldr	r2, [sp, #12]
 8009ebc:	1d11      	adds	r1, r2, #4
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	9103      	str	r1, [sp, #12]
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	db01      	blt.n	8009eca <_vfiprintf_r+0x11e>
 8009ec6:	9207      	str	r2, [sp, #28]
 8009ec8:	e004      	b.n	8009ed4 <_vfiprintf_r+0x128>
 8009eca:	4252      	negs	r2, r2
 8009ecc:	f043 0302 	orr.w	r3, r3, #2
 8009ed0:	9207      	str	r2, [sp, #28]
 8009ed2:	9304      	str	r3, [sp, #16]
 8009ed4:	f898 3000 	ldrb.w	r3, [r8]
 8009ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8009eda:	d10e      	bne.n	8009efa <_vfiprintf_r+0x14e>
 8009edc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee2:	d138      	bne.n	8009f56 <_vfiprintf_r+0x1aa>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	9203      	str	r2, [sp, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfb8      	it	lt
 8009ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ef4:	f108 0802 	add.w	r8, r8, #2
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	4d33      	ldr	r5, [pc, #204]	; (8009fc8 <_vfiprintf_r+0x21c>)
 8009efc:	f898 1000 	ldrb.w	r1, [r8]
 8009f00:	2203      	movs	r2, #3
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7f6 f99c 	bl	8000240 <memchr>
 8009f08:	b140      	cbz	r0, 8009f1c <_vfiprintf_r+0x170>
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	1b40      	subs	r0, r0, r5
 8009f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	4303      	orrs	r3, r0
 8009f16:	f108 0801 	add.w	r8, r8, #1
 8009f1a:	9304      	str	r3, [sp, #16]
 8009f1c:	f898 1000 	ldrb.w	r1, [r8]
 8009f20:	482a      	ldr	r0, [pc, #168]	; (8009fcc <_vfiprintf_r+0x220>)
 8009f22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f26:	2206      	movs	r2, #6
 8009f28:	f108 0701 	add.w	r7, r8, #1
 8009f2c:	f7f6 f988 	bl	8000240 <memchr>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d037      	beq.n	8009fa4 <_vfiprintf_r+0x1f8>
 8009f34:	4b26      	ldr	r3, [pc, #152]	; (8009fd0 <_vfiprintf_r+0x224>)
 8009f36:	bb1b      	cbnz	r3, 8009f80 <_vfiprintf_r+0x1d4>
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	3307      	adds	r3, #7
 8009f3c:	f023 0307 	bic.w	r3, r3, #7
 8009f40:	3308      	adds	r3, #8
 8009f42:	9303      	str	r3, [sp, #12]
 8009f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f46:	444b      	add	r3, r9
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	e750      	b.n	8009dee <_vfiprintf_r+0x42>
 8009f4c:	fb05 3202 	mla	r2, r5, r2, r3
 8009f50:	2001      	movs	r0, #1
 8009f52:	4688      	mov	r8, r1
 8009f54:	e78a      	b.n	8009e6c <_vfiprintf_r+0xc0>
 8009f56:	2300      	movs	r3, #0
 8009f58:	f108 0801 	add.w	r8, r8, #1
 8009f5c:	9305      	str	r3, [sp, #20]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	250a      	movs	r5, #10
 8009f62:	4640      	mov	r0, r8
 8009f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f68:	3a30      	subs	r2, #48	; 0x30
 8009f6a:	2a09      	cmp	r2, #9
 8009f6c:	d903      	bls.n	8009f76 <_vfiprintf_r+0x1ca>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0c3      	beq.n	8009efa <_vfiprintf_r+0x14e>
 8009f72:	9105      	str	r1, [sp, #20]
 8009f74:	e7c1      	b.n	8009efa <_vfiprintf_r+0x14e>
 8009f76:	fb05 2101 	mla	r1, r5, r1, r2
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	e7f0      	b.n	8009f62 <_vfiprintf_r+0x1b6>
 8009f80:	ab03      	add	r3, sp, #12
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	4622      	mov	r2, r4
 8009f86:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <_vfiprintf_r+0x228>)
 8009f88:	a904      	add	r1, sp, #16
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f3af 8000 	nop.w
 8009f90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f94:	4681      	mov	r9, r0
 8009f96:	d1d5      	bne.n	8009f44 <_vfiprintf_r+0x198>
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	065b      	lsls	r3, r3, #25
 8009f9c:	f53f af7e 	bmi.w	8009e9c <_vfiprintf_r+0xf0>
 8009fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fa2:	e77d      	b.n	8009ea0 <_vfiprintf_r+0xf4>
 8009fa4:	ab03      	add	r3, sp, #12
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	4622      	mov	r2, r4
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <_vfiprintf_r+0x228>)
 8009fac:	a904      	add	r1, sp, #16
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 f888 	bl	800a0c4 <_printf_i>
 8009fb4:	e7ec      	b.n	8009f90 <_vfiprintf_r+0x1e4>
 8009fb6:	bf00      	nop
 8009fb8:	0800a858 	.word	0x0800a858
 8009fbc:	0800a898 	.word	0x0800a898
 8009fc0:	0800a878 	.word	0x0800a878
 8009fc4:	0800a838 	.word	0x0800a838
 8009fc8:	0800a89e 	.word	0x0800a89e
 8009fcc:	0800a8a2 	.word	0x0800a8a2
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	08009d87 	.word	0x08009d87

08009fd8 <_printf_common>:
 8009fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fdc:	4691      	mov	r9, r2
 8009fde:	461f      	mov	r7, r3
 8009fe0:	688a      	ldr	r2, [r1, #8]
 8009fe2:	690b      	ldr	r3, [r1, #16]
 8009fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	bfb8      	it	lt
 8009fec:	4613      	movlt	r3, r2
 8009fee:	f8c9 3000 	str.w	r3, [r9]
 8009ff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	b112      	cbz	r2, 800a002 <_printf_common+0x2a>
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f8c9 3000 	str.w	r3, [r9]
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	0699      	lsls	r1, r3, #26
 800a006:	bf42      	ittt	mi
 800a008:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a00c:	3302      	addmi	r3, #2
 800a00e:	f8c9 3000 	strmi.w	r3, [r9]
 800a012:	6825      	ldr	r5, [r4, #0]
 800a014:	f015 0506 	ands.w	r5, r5, #6
 800a018:	d107      	bne.n	800a02a <_printf_common+0x52>
 800a01a:	f104 0a19 	add.w	sl, r4, #25
 800a01e:	68e3      	ldr	r3, [r4, #12]
 800a020:	f8d9 2000 	ldr.w	r2, [r9]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	42ab      	cmp	r3, r5
 800a028:	dc28      	bgt.n	800a07c <_printf_common+0xa4>
 800a02a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a02e:	6822      	ldr	r2, [r4, #0]
 800a030:	3300      	adds	r3, #0
 800a032:	bf18      	it	ne
 800a034:	2301      	movne	r3, #1
 800a036:	0692      	lsls	r2, r2, #26
 800a038:	d42d      	bmi.n	800a096 <_printf_common+0xbe>
 800a03a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a03e:	4639      	mov	r1, r7
 800a040:	4630      	mov	r0, r6
 800a042:	47c0      	blx	r8
 800a044:	3001      	adds	r0, #1
 800a046:	d020      	beq.n	800a08a <_printf_common+0xb2>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	68e5      	ldr	r5, [r4, #12]
 800a04c:	f8d9 2000 	ldr.w	r2, [r9]
 800a050:	f003 0306 	and.w	r3, r3, #6
 800a054:	2b04      	cmp	r3, #4
 800a056:	bf08      	it	eq
 800a058:	1aad      	subeq	r5, r5, r2
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	6922      	ldr	r2, [r4, #16]
 800a05e:	bf0c      	ite	eq
 800a060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a064:	2500      	movne	r5, #0
 800a066:	4293      	cmp	r3, r2
 800a068:	bfc4      	itt	gt
 800a06a:	1a9b      	subgt	r3, r3, r2
 800a06c:	18ed      	addgt	r5, r5, r3
 800a06e:	f04f 0900 	mov.w	r9, #0
 800a072:	341a      	adds	r4, #26
 800a074:	454d      	cmp	r5, r9
 800a076:	d11a      	bne.n	800a0ae <_printf_common+0xd6>
 800a078:	2000      	movs	r0, #0
 800a07a:	e008      	b.n	800a08e <_printf_common+0xb6>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4652      	mov	r2, sl
 800a080:	4639      	mov	r1, r7
 800a082:	4630      	mov	r0, r6
 800a084:	47c0      	blx	r8
 800a086:	3001      	adds	r0, #1
 800a088:	d103      	bne.n	800a092 <_printf_common+0xba>
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295
 800a08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a092:	3501      	adds	r5, #1
 800a094:	e7c3      	b.n	800a01e <_printf_common+0x46>
 800a096:	18e1      	adds	r1, r4, r3
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	2030      	movs	r0, #48	; 0x30
 800a09c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0a0:	4422      	add	r2, r4
 800a0a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0aa:	3302      	adds	r3, #2
 800a0ac:	e7c5      	b.n	800a03a <_printf_common+0x62>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	47c0      	blx	r8
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d0e6      	beq.n	800a08a <_printf_common+0xb2>
 800a0bc:	f109 0901 	add.w	r9, r9, #1
 800a0c0:	e7d8      	b.n	800a074 <_printf_common+0x9c>
	...

0800a0c4 <_printf_i>:
 800a0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a0cc:	460c      	mov	r4, r1
 800a0ce:	7e09      	ldrb	r1, [r1, #24]
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	296e      	cmp	r1, #110	; 0x6e
 800a0d4:	4617      	mov	r7, r2
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	4698      	mov	r8, r3
 800a0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0dc:	f000 80b3 	beq.w	800a246 <_printf_i+0x182>
 800a0e0:	d822      	bhi.n	800a128 <_printf_i+0x64>
 800a0e2:	2963      	cmp	r1, #99	; 0x63
 800a0e4:	d036      	beq.n	800a154 <_printf_i+0x90>
 800a0e6:	d80a      	bhi.n	800a0fe <_printf_i+0x3a>
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	f000 80b9 	beq.w	800a260 <_printf_i+0x19c>
 800a0ee:	2958      	cmp	r1, #88	; 0x58
 800a0f0:	f000 8083 	beq.w	800a1fa <_printf_i+0x136>
 800a0f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0fc:	e032      	b.n	800a164 <_printf_i+0xa0>
 800a0fe:	2964      	cmp	r1, #100	; 0x64
 800a100:	d001      	beq.n	800a106 <_printf_i+0x42>
 800a102:	2969      	cmp	r1, #105	; 0x69
 800a104:	d1f6      	bne.n	800a0f4 <_printf_i+0x30>
 800a106:	6820      	ldr	r0, [r4, #0]
 800a108:	6813      	ldr	r3, [r2, #0]
 800a10a:	0605      	lsls	r5, r0, #24
 800a10c:	f103 0104 	add.w	r1, r3, #4
 800a110:	d52a      	bpl.n	800a168 <_printf_i+0xa4>
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6011      	str	r1, [r2, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	da03      	bge.n	800a122 <_printf_i+0x5e>
 800a11a:	222d      	movs	r2, #45	; 0x2d
 800a11c:	425b      	negs	r3, r3
 800a11e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a122:	486f      	ldr	r0, [pc, #444]	; (800a2e0 <_printf_i+0x21c>)
 800a124:	220a      	movs	r2, #10
 800a126:	e039      	b.n	800a19c <_printf_i+0xd8>
 800a128:	2973      	cmp	r1, #115	; 0x73
 800a12a:	f000 809d 	beq.w	800a268 <_printf_i+0x1a4>
 800a12e:	d808      	bhi.n	800a142 <_printf_i+0x7e>
 800a130:	296f      	cmp	r1, #111	; 0x6f
 800a132:	d020      	beq.n	800a176 <_printf_i+0xb2>
 800a134:	2970      	cmp	r1, #112	; 0x70
 800a136:	d1dd      	bne.n	800a0f4 <_printf_i+0x30>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	f043 0320 	orr.w	r3, r3, #32
 800a13e:	6023      	str	r3, [r4, #0]
 800a140:	e003      	b.n	800a14a <_printf_i+0x86>
 800a142:	2975      	cmp	r1, #117	; 0x75
 800a144:	d017      	beq.n	800a176 <_printf_i+0xb2>
 800a146:	2978      	cmp	r1, #120	; 0x78
 800a148:	d1d4      	bne.n	800a0f4 <_printf_i+0x30>
 800a14a:	2378      	movs	r3, #120	; 0x78
 800a14c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a150:	4864      	ldr	r0, [pc, #400]	; (800a2e4 <_printf_i+0x220>)
 800a152:	e055      	b.n	800a200 <_printf_i+0x13c>
 800a154:	6813      	ldr	r3, [r2, #0]
 800a156:	1d19      	adds	r1, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6011      	str	r1, [r2, #0]
 800a15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a164:	2301      	movs	r3, #1
 800a166:	e08c      	b.n	800a282 <_printf_i+0x1be>
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	6011      	str	r1, [r2, #0]
 800a16c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a170:	bf18      	it	ne
 800a172:	b21b      	sxthne	r3, r3
 800a174:	e7cf      	b.n	800a116 <_printf_i+0x52>
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	6825      	ldr	r5, [r4, #0]
 800a17a:	1d18      	adds	r0, r3, #4
 800a17c:	6010      	str	r0, [r2, #0]
 800a17e:	0628      	lsls	r0, r5, #24
 800a180:	d501      	bpl.n	800a186 <_printf_i+0xc2>
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	e002      	b.n	800a18c <_printf_i+0xc8>
 800a186:	0668      	lsls	r0, r5, #25
 800a188:	d5fb      	bpl.n	800a182 <_printf_i+0xbe>
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	4854      	ldr	r0, [pc, #336]	; (800a2e0 <_printf_i+0x21c>)
 800a18e:	296f      	cmp	r1, #111	; 0x6f
 800a190:	bf14      	ite	ne
 800a192:	220a      	movne	r2, #10
 800a194:	2208      	moveq	r2, #8
 800a196:	2100      	movs	r1, #0
 800a198:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a19c:	6865      	ldr	r5, [r4, #4]
 800a19e:	60a5      	str	r5, [r4, #8]
 800a1a0:	2d00      	cmp	r5, #0
 800a1a2:	f2c0 8095 	blt.w	800a2d0 <_printf_i+0x20c>
 800a1a6:	6821      	ldr	r1, [r4, #0]
 800a1a8:	f021 0104 	bic.w	r1, r1, #4
 800a1ac:	6021      	str	r1, [r4, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d13d      	bne.n	800a22e <_printf_i+0x16a>
 800a1b2:	2d00      	cmp	r5, #0
 800a1b4:	f040 808e 	bne.w	800a2d4 <_printf_i+0x210>
 800a1b8:	4665      	mov	r5, ip
 800a1ba:	2a08      	cmp	r2, #8
 800a1bc:	d10b      	bne.n	800a1d6 <_printf_i+0x112>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	07db      	lsls	r3, r3, #31
 800a1c2:	d508      	bpl.n	800a1d6 <_printf_i+0x112>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	6862      	ldr	r2, [r4, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	bfde      	ittt	le
 800a1cc:	2330      	movle	r3, #48	; 0x30
 800a1ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1d6:	ebac 0305 	sub.w	r3, ip, r5
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	f8cd 8000 	str.w	r8, [sp]
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	aa03      	add	r2, sp, #12
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7ff fef6 	bl	8009fd8 <_printf_common>
 800a1ec:	3001      	adds	r0, #1
 800a1ee:	d14d      	bne.n	800a28c <_printf_i+0x1c8>
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	b005      	add	sp, #20
 800a1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1fa:	4839      	ldr	r0, [pc, #228]	; (800a2e0 <_printf_i+0x21c>)
 800a1fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a200:	6813      	ldr	r3, [r2, #0]
 800a202:	6821      	ldr	r1, [r4, #0]
 800a204:	1d1d      	adds	r5, r3, #4
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6015      	str	r5, [r2, #0]
 800a20a:	060a      	lsls	r2, r1, #24
 800a20c:	d50b      	bpl.n	800a226 <_printf_i+0x162>
 800a20e:	07ca      	lsls	r2, r1, #31
 800a210:	bf44      	itt	mi
 800a212:	f041 0120 	orrmi.w	r1, r1, #32
 800a216:	6021      	strmi	r1, [r4, #0]
 800a218:	b91b      	cbnz	r3, 800a222 <_printf_i+0x15e>
 800a21a:	6822      	ldr	r2, [r4, #0]
 800a21c:	f022 0220 	bic.w	r2, r2, #32
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	2210      	movs	r2, #16
 800a224:	e7b7      	b.n	800a196 <_printf_i+0xd2>
 800a226:	064d      	lsls	r5, r1, #25
 800a228:	bf48      	it	mi
 800a22a:	b29b      	uxthmi	r3, r3
 800a22c:	e7ef      	b.n	800a20e <_printf_i+0x14a>
 800a22e:	4665      	mov	r5, ip
 800a230:	fbb3 f1f2 	udiv	r1, r3, r2
 800a234:	fb02 3311 	mls	r3, r2, r1, r3
 800a238:	5cc3      	ldrb	r3, [r0, r3]
 800a23a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a23e:	460b      	mov	r3, r1
 800a240:	2900      	cmp	r1, #0
 800a242:	d1f5      	bne.n	800a230 <_printf_i+0x16c>
 800a244:	e7b9      	b.n	800a1ba <_printf_i+0xf6>
 800a246:	6813      	ldr	r3, [r2, #0]
 800a248:	6825      	ldr	r5, [r4, #0]
 800a24a:	6961      	ldr	r1, [r4, #20]
 800a24c:	1d18      	adds	r0, r3, #4
 800a24e:	6010      	str	r0, [r2, #0]
 800a250:	0628      	lsls	r0, r5, #24
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	d501      	bpl.n	800a25a <_printf_i+0x196>
 800a256:	6019      	str	r1, [r3, #0]
 800a258:	e002      	b.n	800a260 <_printf_i+0x19c>
 800a25a:	066a      	lsls	r2, r5, #25
 800a25c:	d5fb      	bpl.n	800a256 <_printf_i+0x192>
 800a25e:	8019      	strh	r1, [r3, #0]
 800a260:	2300      	movs	r3, #0
 800a262:	6123      	str	r3, [r4, #16]
 800a264:	4665      	mov	r5, ip
 800a266:	e7b9      	b.n	800a1dc <_printf_i+0x118>
 800a268:	6813      	ldr	r3, [r2, #0]
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	681d      	ldr	r5, [r3, #0]
 800a270:	6862      	ldr	r2, [r4, #4]
 800a272:	2100      	movs	r1, #0
 800a274:	4628      	mov	r0, r5
 800a276:	f7f5 ffe3 	bl	8000240 <memchr>
 800a27a:	b108      	cbz	r0, 800a280 <_printf_i+0x1bc>
 800a27c:	1b40      	subs	r0, r0, r5
 800a27e:	6060      	str	r0, [r4, #4]
 800a280:	6863      	ldr	r3, [r4, #4]
 800a282:	6123      	str	r3, [r4, #16]
 800a284:	2300      	movs	r3, #0
 800a286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28a:	e7a7      	b.n	800a1dc <_printf_i+0x118>
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	462a      	mov	r2, r5
 800a290:	4639      	mov	r1, r7
 800a292:	4630      	mov	r0, r6
 800a294:	47c0      	blx	r8
 800a296:	3001      	adds	r0, #1
 800a298:	d0aa      	beq.n	800a1f0 <_printf_i+0x12c>
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	079b      	lsls	r3, r3, #30
 800a29e:	d413      	bmi.n	800a2c8 <_printf_i+0x204>
 800a2a0:	68e0      	ldr	r0, [r4, #12]
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	4298      	cmp	r0, r3
 800a2a6:	bfb8      	it	lt
 800a2a8:	4618      	movlt	r0, r3
 800a2aa:	e7a3      	b.n	800a1f4 <_printf_i+0x130>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	464a      	mov	r2, r9
 800a2b0:	4639      	mov	r1, r7
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	47c0      	blx	r8
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d09a      	beq.n	800a1f0 <_printf_i+0x12c>
 800a2ba:	3501      	adds	r5, #1
 800a2bc:	68e3      	ldr	r3, [r4, #12]
 800a2be:	9a03      	ldr	r2, [sp, #12]
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	42ab      	cmp	r3, r5
 800a2c4:	dcf2      	bgt.n	800a2ac <_printf_i+0x1e8>
 800a2c6:	e7eb      	b.n	800a2a0 <_printf_i+0x1dc>
 800a2c8:	2500      	movs	r5, #0
 800a2ca:	f104 0919 	add.w	r9, r4, #25
 800a2ce:	e7f5      	b.n	800a2bc <_printf_i+0x1f8>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1ac      	bne.n	800a22e <_printf_i+0x16a>
 800a2d4:	7803      	ldrb	r3, [r0, #0]
 800a2d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2de:	e76c      	b.n	800a1ba <_printf_i+0xf6>
 800a2e0:	0800a8a9 	.word	0x0800a8a9
 800a2e4:	0800a8ba 	.word	0x0800a8ba

0800a2e8 <__sread>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f0:	f000 f894 	bl	800a41c <_read_r>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	bfab      	itete	ge
 800a2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2fc:	181b      	addge	r3, r3, r0
 800a2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a302:	bfac      	ite	ge
 800a304:	6563      	strge	r3, [r4, #84]	; 0x54
 800a306:	81a3      	strhlt	r3, [r4, #12]
 800a308:	bd10      	pop	{r4, pc}

0800a30a <__swrite>:
 800a30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30e:	461f      	mov	r7, r3
 800a310:	898b      	ldrh	r3, [r1, #12]
 800a312:	05db      	lsls	r3, r3, #23
 800a314:	4605      	mov	r5, r0
 800a316:	460c      	mov	r4, r1
 800a318:	4616      	mov	r6, r2
 800a31a:	d505      	bpl.n	800a328 <__swrite+0x1e>
 800a31c:	2302      	movs	r3, #2
 800a31e:	2200      	movs	r2, #0
 800a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a324:	f000 f868 	bl	800a3f8 <_lseek_r>
 800a328:	89a3      	ldrh	r3, [r4, #12]
 800a32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	4632      	mov	r2, r6
 800a336:	463b      	mov	r3, r7
 800a338:	4628      	mov	r0, r5
 800a33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a33e:	f000 b817 	b.w	800a370 <_write_r>

0800a342 <__sseek>:
 800a342:	b510      	push	{r4, lr}
 800a344:	460c      	mov	r4, r1
 800a346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34a:	f000 f855 	bl	800a3f8 <_lseek_r>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	bf15      	itete	ne
 800a354:	6560      	strne	r0, [r4, #84]	; 0x54
 800a356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a35e:	81a3      	strheq	r3, [r4, #12]
 800a360:	bf18      	it	ne
 800a362:	81a3      	strhne	r3, [r4, #12]
 800a364:	bd10      	pop	{r4, pc}

0800a366 <__sclose>:
 800a366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36a:	f000 b813 	b.w	800a394 <_close_r>
	...

0800a370 <_write_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4c07      	ldr	r4, [pc, #28]	; (800a390 <_write_r+0x20>)
 800a374:	4605      	mov	r5, r0
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	2200      	movs	r2, #0
 800a37c:	6022      	str	r2, [r4, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f7f7 f82f 	bl	80013e2 <_write>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_write_r+0x1e>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_write_r+0x1e>
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	20000c50 	.word	0x20000c50

0800a394 <_close_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4c06      	ldr	r4, [pc, #24]	; (800a3b0 <_close_r+0x1c>)
 800a398:	2300      	movs	r3, #0
 800a39a:	4605      	mov	r5, r0
 800a39c:	4608      	mov	r0, r1
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	f7f7 f83b 	bl	800141a <_close>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_close_r+0x1a>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_close_r+0x1a>
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	20000c50 	.word	0x20000c50

0800a3b4 <_fstat_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4c07      	ldr	r4, [pc, #28]	; (800a3d4 <_fstat_r+0x20>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	f7f7 f836 	bl	8001432 <_fstat>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d102      	bne.n	800a3d0 <_fstat_r+0x1c>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	b103      	cbz	r3, 800a3d0 <_fstat_r+0x1c>
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000c50 	.word	0x20000c50

0800a3d8 <_isatty_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4c06      	ldr	r4, [pc, #24]	; (800a3f4 <_isatty_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4605      	mov	r5, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	f7f7 f835 	bl	8001452 <_isatty>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_isatty_r+0x1a>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_isatty_r+0x1a>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20000c50 	.word	0x20000c50

0800a3f8 <_lseek_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4c07      	ldr	r4, [pc, #28]	; (800a418 <_lseek_r+0x20>)
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	2200      	movs	r2, #0
 800a404:	6022      	str	r2, [r4, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f7f7 f82e 	bl	8001468 <_lseek>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_lseek_r+0x1e>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	b103      	cbz	r3, 800a416 <_lseek_r+0x1e>
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	20000c50 	.word	0x20000c50

0800a41c <_read_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4c07      	ldr	r4, [pc, #28]	; (800a43c <_read_r+0x20>)
 800a420:	4605      	mov	r5, r0
 800a422:	4608      	mov	r0, r1
 800a424:	4611      	mov	r1, r2
 800a426:	2200      	movs	r2, #0
 800a428:	6022      	str	r2, [r4, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	f7f6 ffbc 	bl	80013a8 <_read>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_read_r+0x1e>
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	b103      	cbz	r3, 800a43a <_read_r+0x1e>
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	20000c50 	.word	0x20000c50

0800a440 <_init>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	bf00      	nop
 800a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a446:	bc08      	pop	{r3}
 800a448:	469e      	mov	lr, r3
 800a44a:	4770      	bx	lr

0800a44c <_fini>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	bf00      	nop
 800a450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a452:	bc08      	pop	{r3}
 800a454:	469e      	mov	lr, r3
 800a456:	4770      	bx	lr
